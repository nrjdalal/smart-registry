{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mdx-preview",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "fs",
    "lucide-react",
    "motion",
    "path"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/mdx/preview.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport PreviewContent from \"@/components/mdx/preview-content\";\n\ninterface PreviewProps {\n    children: React.ReactNode;\n    className?: string;\n    isPremium?: boolean;\n    link: string;\n    useIframe?: boolean;\n    height?: string;\n    compact?: boolean;\n    comment?: string[];\n    isBlock?: boolean;\n}\n\nconst prePath = process.env.VERCEL_PROJECT_PRODUCTION_URL\n    ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`\n    : \"http://localhost:3000\";\n\nexport function Preview({\n    children,\n    className = \"\",\n    link,\n    useIframe = false,\n    compact = false,\n    comment = [],\n    isBlock = false,\n}: PreviewProps) {\n    // console.log(prePath + link);\n    return (\n        <>\n            <div className={cn(\"w-full overflow-hidden\", className)}>\n                <PreviewContent\n                    link={link}\n                    prePath={prePath}\n                    isBlock={isBlock}\n                />\n\n                {useIframe ? (\n                    <div className=\"w-full my-4 border rounded-2xl border-zinc-400 dark:border-zinc-700\">\n                        <div className=\"relative w-full h-[100dvh] overflow-hidden\">\n                            <iframe\n                                title={link}\n                                src={`${prePath}/preview/${link}`}\n                                className=\"w-full h-full overflow-y-auto list-none\"\n                                style={{\n                                    border: \"none\",\n                                    transform: \"scale(0.95)\",\n                                }}\n                            />\n                        </div>\n                    </div>\n                ) : (\n                    <div\n                        className={cn(\n                            \"p-2 md:p-8 flex justify-center items-center relative border rounded-2xl my-4 border-zinc-400 dark:border-zinc-800 not-prose\",\n                            compact ? \"min-h-[100px]\" : \"min-h-[400px]\",\n                            isBlock ? \"md:p-0\" : \"\"\n                        )}\n                    >\n                        {children}\n                    </div>\n                )}\n                {comment.length > 0 && (\n                    <div className=\"flex flex-wrap gap-3 mt-6\">\n                        {comment.map((text, index) => (\n                            <div\n                                key={index}\n                                className=\"px-4 py-2 text-sm font-medium bg-purple-100 dark:bg-purple-950/30 rounded-lg text-purple-700 dark:text-purple-300 border border-purple-200 dark:border-purple-800/50 shadow-xs hover:bg-purple-200/70 dark:hover:bg-purple-950/50 transition-colors\"\n                            >\n                                {text}\n                            </div>\n                        ))}\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n",
      "path": "components/mdx/preview.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/icons/shadcn.tsx",
      "content": "const ShadcnIcon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 256 256\"\n        width=\"1em\"\n        height=\"1em\"\n        {...props}\n    >\n        <title>Shadcn UI</title>\n        <path fill=\"none\" d=\"M0 0h256v256H0z\" />\n        <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth={25}\n            strokeLinecap=\"round\"\n            d=\"M208 128l-80 80M192 40L40 192\"\n        />\n    </svg>\n);\nexport default ShadcnIcon;\n",
      "path": "components/icons/shadcn.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/mdx/preview-content.tsx",
      "content": "\"use client\";\n\nimport {\n    useActionState,\n    useEffect,\n    useState,\n    useTransition,\n    useRef,\n    type RefObject,\n} from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n    ArrowUpRight,\n    Copy,\n    Check,\n    CheckCheck,\n    Terminal,\n    ChevronDown,\n    Code,\n} from \"lucide-react\";\nimport { copyComponent } from \"@/lib/action\";\nimport { cn } from \"@/lib/utils\";\nimport { OpenInV0Button } from \"@/components/open-in-v0-button\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport ShadcnIcon from \"@/components/icons/shadcn\";\n\nexport default function PreviewContent({\n    link,\n    prePath,\n    isBlock = false,\n}: {\n    link: string;\n    prePath: string;\n    isBlock?: boolean;\n}) {\n    const [isPending, startTransition] = useTransition();\n    const [state, formAction] = useActionState(copyComponent, {\n        error: \"\",\n        content: \"\",\n        success: false,\n    });\n    const [showLoginDialog, setShowLoginDialog] = useState(false);\n    const [isCopied, setIsCopied] = useState(false);\n    const [isHovered, setIsHovered] = useState(false);\n    const [isTerminalCopied, setIsTerminalCopied] = useState(false);\n    const [selectedPackageManager, setSelectedPackageManager] = useState<\n        \"bunx\" | \"npx\" | \"pnpm\"\n    >(\"bunx\");\n\n    const handleCopyClick = async () => {\n        const [folder, filename] = link.split(\"/\");\n\n        startTransition(async () => {\n            const formData = new FormData();\n            formData.append(\"folder\", folder);\n            formData.append(\"fileName\", filename);\n\n            formAction(formData);\n        });\n    };\n\n    const getFileName = () => {\n        const [folder, filename] = link.split(\"/\");\n        return filename ? filename : folder;\n    };\n\n    const handleTerminalClick = (packageManager?: \"bunx\" | \"npx\" | \"pnpm\") => {\n        const [folder, filename] = link.split(\"/\");\n        const componentName = filename ? filename : folder;\n        const pm = packageManager || selectedPackageManager;\n\n        let commandToCopy: string;\n        const componentAddCommand = `shadcn@latest add ${componentName}`;\n\n        if (pm === \"pnpm\") {\n            commandToCopy = `pnpm dlx ${componentAddCommand}`;\n        } else {\n            commandToCopy = `${pm} ${componentAddCommand}`;\n        }\n\n        navigator.clipboard.writeText(commandToCopy);\n        setIsTerminalCopied(true);\n        setTimeout(() => {\n            setIsTerminalCopied(false);\n        }, 1000);\n    };\n\n    const openInV0 = () => {\n        const [folder, filename] = link.split(\"/\");\n\n        return filename ? filename : folder;\n    };\n\n    useEffect(() => {\n        if (state.error) {\n            setShowLoginDialog(true);\n        }\n        if (state.success && state.content) {\n            setIsCopied(true);\n            navigator.clipboard.writeText(state.content);\n\n            setTimeout(() => {\n                setIsCopied(false);\n            }, 2000);\n        }\n    }, [state]);\n\n    function SuccessParticles({\n        buttonRef,\n    }: {\n        buttonRef: React.RefObject<HTMLButtonElement>;\n    }) {\n        const rect = buttonRef.current?.getBoundingClientRect();\n        if (!rect) return null;\n\n        const centerX = rect.left + rect.width / 2;\n        const centerY = rect.top + rect.height / 2;\n\n        // Create a unique key for each particle to satisfy the linter\n        const particles = Array.from({ length: 6 }, (_, index) => ({\n            id: `particle-${index}-${Math.random().toString(36).substr(2, 9)}`,\n            index, // Pass index for staggering delay\n        }));\n\n        return (\n            <AnimatePresence>\n                {particles.map((particle) => (\n                    <motion.div\n                        key={particle.id}\n                        className=\"fixed w-1 h-1 bg-black dark:bg-white rounded-full\"\n                        style={{ left: centerX, top: centerY }}\n                        initial={{\n                            scale: 0,\n                            x: 0,\n                            y: 0,\n                        }}\n                        animate={{\n                            scale: [0, 1, 0],\n                            x: [\n                                0,\n                                (particle.index % 2 ? 1 : -1) *\n                                    (Math.random() * 50 + 20),\n                            ],\n                            y: [0, -Math.random() * 50 - 20],\n                        }}\n                        transition={{\n                            duration: 0.6,\n                            delay: particle.index * 0.1, // Use particle.index for delay\n                            ease: \"easeOut\",\n                        }}\n                    />\n                ))}\n            </AnimatePresence>\n        );\n    }\n\n    const terminalButtonRef = useRef<HTMLButtonElement>(null);\n    const copyButtonRef = useRef<HTMLButtonElement>(null);\n\n    return (\n        <>\n            {isTerminalCopied && (\n                <SuccessParticles\n                    buttonRef={\n                        terminalButtonRef as RefObject<HTMLButtonElement>\n                    }\n                />\n            )}\n            {isCopied && (\n                <SuccessParticles\n                    buttonRef={copyButtonRef as RefObject<HTMLButtonElement>}\n                />\n            )}\n\n            <div\n                className={cn(\"relative mt-4\", \"rounded-xl p-3\")}\n                onMouseEnter={() => setIsHovered(true)}\n                onMouseLeave={() => setIsHovered(false)}\n            >\n                <div className=\"relative flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\n                    <a\n                        href={`${prePath}/preview/${link}`}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        className={cn(\n                            \"flex items-center gap-2\",\n                            \"text-sm font-medium\",\n                            \"text-zinc-800 dark:text-zinc-200\",\n                            \"hover:text-zinc-600 dark:hover:text-zinc-400\",\n                            \"transition-all duration-200 no-underline group\"\n                        )}\n                    >\n                        Live Preview\n                        <ArrowUpRight\n                            className={cn(\n                                \"h-4 w-4\",\n                                \"transition-transform duration-200 group-hover:rotate-12\"\n                            )}\n                        />\n                    </a>\n\n                    <div className=\"flex items-center gap-2\">\n                        <OpenInV0Button name={openInV0()} />\n                        <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                                <Button\n                                    ref={terminalButtonRef}\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className={cn(\n                                        \"relative overflow-hidden\",\n                                        \"h-7 px-3 text-xs font-medium\",\n                                        \"bg-black dark:bg-white\",\n                                        \"text-white dark:text-black\",\n                                        \"hover:bg-black/90 dark:hover:bg-white/90\",\n                                        \"hover:text-white dark:hover:text-black\",\n                                        \"transition-all duration-200\",\n                                        \"group flex items-center gap-1\",\n                                        \"rounded-lg\",\n                                        \"shadow-none\"\n                                    )}\n                                >\n                                    {isTerminalCopied ? (\n                                        <CheckCheck className=\"h-3.5 w-3.5 text-white dark:text-black\" />\n                                    ) : (\n                                        <ShadcnIcon\n                                            className={cn(\n                                                \"h-3.5 w-3.5\",\n                                                \"transition-all duration-200\",\n                                                \"group-hover:rotate-12\"\n                                            )}\n                                        />\n                                    )}\n                                    <span>add {getFileName()}</span>\n                                    <ChevronDown className=\"h-3.5 w-3.5 opacity-70 ml-1\" />\n                                </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent\n                                align=\"end\"\n                                className=\"-ml-3 w-[190px] bg-black dark:bg-white text-white rounded-lg dark:text-black border border-neutral-700 dark:border-neutral-300\"\n                            >\n                                <DropdownMenuItem\n                                    onSelect={() => {\n                                        setSelectedPackageManager(\"bunx\");\n                                        handleTerminalClick(\"bunx\");\n                                    }}\n                                    className=\"flex items-center gap-2 hover:bg-neutral-800 dark:hover:bg-neutral-200 focus:bg-neutral-800 dark:focus:bg-neutral-200\"\n                                >\n                                    <Terminal className=\"h-3.5 w-3.5 text-white dark:text-black\" />\n                                    <span className=\"text-white dark:text-black\">\n                                        bunx\n                                    </span>\n                                    {selectedPackageManager === \"bunx\" && (\n                                        <Check className=\"h-4 w-4 ml-auto text-white dark:text-black\" />\n                                    )}\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                    onSelect={() => {\n                                        setSelectedPackageManager(\"npx\");\n                                        handleTerminalClick(\"npx\");\n                                    }}\n                                    className=\"flex items-center gap-2 hover:bg-neutral-800 dark:hover:bg-neutral-200 focus:bg-neutral-800 dark:focus:bg-neutral-200\"\n                                >\n                                    <Terminal className=\"h-3.5 w-3.5 text-white dark:text-black\" />\n                                    <span className=\"text-white dark:text-black\">\n                                        npx\n                                    </span>\n                                    {selectedPackageManager === \"npx\" && (\n                                        <Check className=\"h-4 w-4 ml-auto text-white dark:text-black\" />\n                                    )}\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                    onSelect={() => {\n                                        setSelectedPackageManager(\"pnpm\");\n                                        handleTerminalClick(\"pnpm\");\n                                    }}\n                                    className=\"flex items-center gap-2 hover:bg-neutral-800 dark:hover:bg-neutral-200 focus:bg-neutral-800 dark:focus:bg-neutral-200\"\n                                >\n                                    <Terminal className=\"h-3.5 w-3.5 text-white dark:text-black\" />\n                                    <span className=\"text-white dark:text-black\">\n                                        pnpm\n                                    </span>\n                                    {selectedPackageManager === \"pnpm\" && (\n                                        <Check className=\"h-4 w-4 ml-auto text-white dark:text-black\" />\n                                    )}\n                                </DropdownMenuItem>\n                            </DropdownMenuContent>\n                        </DropdownMenu>\n\n                        {!isBlock && (\n                            <form\n                                onSubmit={(e) => {\n                                    e.preventDefault();\n                                    handleCopyClick();\n                                }}\n                            >\n                                <Button\n                                    ref={copyButtonRef}\n                                    type=\"submit\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    disabled={isPending}\n                                    className={cn(\n                                        \"relative overflow-hidden\",\n                                        \"h-7 px-3 text-xs font-medium\",\n                                        \"bg-black dark:bg-white\",\n                                        \"text-white dark:text-black\",\n                                        \"hover:bg-black/90 dark:hover:bg-white/90\",\n                                        \"hover:text-white dark:hover:text-black\",\n                                        \"transition-all duration-200\",\n                                        \"group flex items-center gap-1\",\n                                        \"rounded-lg\",\n                                        \"shadow-none\"\n                                    )}\n                                >\n                                    {isCopied ? (\n                                        <>\n                                            <CheckCheck className=\"h-3.5 w-3.5 text-white dark:text-black\" />\n                                        </>\n                                    ) : (\n                                        <Code\n                                            className={cn(\n                                                \"h-3.5 w-3.5\",\n                                                \"transition-all duration-200\",\n                                                \"group-hover:rotate-12\"\n                                            )}\n                                        />\n                                    )}\n                                    <span>Copy</span>\n                                </Button>\n                            </form>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n",
      "path": "components/mdx/preview-content.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/open-in-v0-button.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nconst prePath = process.env.VERCEL_PROJECT_PRODUCTION_URL\n    ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`\n    : `https://${process.env.NEXT_PUBLIC_SITE_URL}`;\n\nexport function OpenInV0Button({\n    name,\n    className,\n}: { name: string } & React.ComponentProps<typeof Button>) {\n    return (\n        <Button\n            aria-label=\"Open in v0\"\n            className={cn(\n                \"h-7 gap-1 rounded-lg shadow-none bg-black px-3 text-xs text-white hover:bg-zinc-800 dark:bg-white dark:text-black dark:hover:bg-zinc-200 transition-colors duration-200 not-prose\",\n                className\n            )}\n            asChild\n        >\n            <a\n                href={`https://v0.dev/chat/api/open?url=${prePath}/r/${name}.json`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n            >\n                Open in{\" \"}\n                <svg\n                    viewBox=\"0 0 40 20\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"h-5 w-5 text-current\"\n                >\n                    <path\n                        d=\"M23.3919 0H32.9188C36.7819 0 39.9136 3.13165 39.9136 6.99475V16.0805H36.0006V6.99475C36.0006 6.90167 35.9969 6.80925 35.9898 6.71766L26.4628 16.079C26.4949 16.08 26.5272 16.0805 26.5595 16.0805H36.0006V19.7762H26.5595C22.6964 19.7762 19.4788 16.6139 19.4788 12.7508V3.68923H23.3919V12.7508C23.3919 12.9253 23.4054 13.0977 23.4316 13.2668L33.1682 3.6995C33.0861 3.6927 33.003 3.68923 32.9188 3.68923H23.3919V0Z\"\n                        fill=\"currentColor\"\n                    ></path>\n                    <path\n                        d=\"M13.7688 19.0956L0 3.68759H5.53933L13.6231 12.7337V3.68759H17.7535V17.5746C17.7535 19.6705 15.1654 20.6584 13.7688 19.0956Z\"\n                        fill=\"currentColor\"\n                    ></path>\n                </svg>\n            </a>\n        </Button>\n    );\n}\n",
      "path": "components/open-in-v0-button.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/action.ts",
      "content": "\"use server\";\n\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { cache } from \"react\";\n\n// Create a cached version of the file reading operation\nconst readFileCache = cache(async (filePath: string) => {\n    return await fs.readFile(filePath, \"utf-8\");\n});\n\n// Improve caching for the entire component getter\nexport const getComponent = async (fileName: string | null, folder: string) => {\n    const baseDir = path.join(process.cwd(), \"components/kokonutui\");\n    if (!fileName || fileName === \"undefined\") {\n        const fullPath = path.join(baseDir, `${folder}.tsx`);\n        // console.log(\"fullPath\", fullPath);\n        return await readFileCache(fullPath);\n    }\n\n    const fullPath = path.join(baseDir, folder, `${fileName}.tsx`);\n\n    return await readFileCache(fullPath);\n};\n\nexport type CopyComponentState = {\n    error: string;\n    content: string;\n    success: boolean;\n};\n\nexport const copyComponent = async (\n    prevState: CopyComponentState,\n    formData: FormData\n) => {\n    try {\n        const folder = formData.get(\"folder\");\n        const fileName = formData.get(\"fileName\");\n\n        if (!folder && !fileName) {\n            return {\n                error: \"Folder or file name not found\",\n                content: \"\",\n                success: false,\n            };\n        }\n\n        const content = await getComponent(\n            fileName as string,\n            folder as string\n        );\n\n        if (!content) {\n            return {\n                error: \"Component not found\",\n                content: \"\",\n                success: false,\n            };\n        }\n\n        return {\n            error: \"\",\n            content: content,\n            success: true,\n        };\n    } catch (error) {\n        console.error(error);\n        return {\n            error: \"Failed to copy component\",\n            content: \"\",\n            success: false,\n        };\n    }\n};\n",
      "path": "lib/action.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/dropdown-menu.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-zinc-100 data-[state=open]:bg-zinc-100 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus:bg-zinc-800 dark:data-[state=open]:bg-zinc-800\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border border-zinc-200 bg-white p-1 text-zinc-950 shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border border-zinc-200 bg-white p-1 text-zinc-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-zinc-100 focus:text-zinc-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus:bg-zinc-800 dark:focus:text-zinc-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-zinc-100 focus:text-zinc-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-zinc-800 dark:focus:text-zinc-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-zinc-100 focus:text-zinc-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-zinc-800 dark:focus:text-zinc-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-zinc-100 dark:bg-zinc-800\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
      "path": "components/ui/dropdown-menu.tsx"
    }
  ]
}
