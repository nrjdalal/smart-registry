{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox/index",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "target": "components/checkbox/Checkbox.vue",
      "content": "<template>\n    <label\n        class=\"b-checkbox checkbox\"\n        :class=\"[size, { 'is-disabled': disabled }]\"\n        ref=\"label\"\n        :disabled=\"disabled\"\n        @click=\"focus\"\n        @keydown.prevent.enter=\"$refs.label.click()\"\n        @keydown.prevent.space=\"$refs.label.click()\">\n        <!-- Checkbox needs to listen for a space event instead of a just a\n             click and enter event so that that using the keyboard spacebar will also\n             trigger the checkbox change in the b-table -->\n        <input\n            v-model=\"computedValue\"\n            :id=\"inputId\"\n            :indeterminate.prop=\"indeterminate\"\n            type=\"checkbox\"\n            ref=\"input\"\n            @click.stop\n            :autocomplete=\"autocomplete\"\n            :disabled=\"disabled\"\n            :required=\"required\"\n            :name=\"name\"\n            :value=\"nativeValue\"\n            :true-value=\"trueValue\"\n            :false-value=\"falseValue\"\n            :aria-labelledby=\"ariaLabelledby\">\n        <span class=\"check\" :class=\"type\" />\n        <span :id=\"ariaLabelledby\" class=\"control-label\"><slot/></span>\n    </label>\n</template>\n\n<script>\nimport CheckRadioMixin from '@/utils/CheckRadioMixin'\n\nexport default {\n    name: 'BCheckbox',\n    mixins: [CheckRadioMixin],\n    props: {\n        indeterminate: Boolean,\n        ariaLabelledby: String,\n        trueValue: {\n            type: [String, Number, Boolean, Function, Object, Array],\n            default: true\n        },\n        falseValue: {\n            type: [String, Number, Boolean, Function, Object, Array],\n            default: false\n        },\n        autocomplete: {\n            type: String,\n            default: 'on'\n        },\n        inputId: {\n            type: String,\n            default: ''\n        }\n    }\n}\n</script>\n",
      "path": "src/components/checkbox/Checkbox.vue"
    },
    {
      "type": "registry:component",
      "target": "components/checkbox/CheckboxButton.vue",
      "content": "<template>\n    <div class=\"control\" :class=\"{ 'is-expanded': expanded }\">\n        <label\n            class=\"b-checkbox checkbox button\"\n            ref=\"label\"\n            :class=\"[checked ? type : null, size, {\n                'is-disabled': disabled,\n                'is-focused': isFocused\n            }]\"\n            :disabled=\"disabled\"\n            @click=\"focus\"\n            @keydown.prevent.enter=\"$refs.label.click()\">\n            <slot/>\n            <input\n                v-model=\"computedValue\"\n                type=\"checkbox\"\n                ref=\"input\"\n                @click.stop\n                :disabled=\"disabled\"\n                :required=\"required\"\n                :name=\"name\"\n                :value=\"nativeValue\"\n                @focus=\"isFocused = true\"\n                @blur=\"isFocused = false\">\n        </label>\n    </div>\n</template>\n\n<script>\nimport CheckRadioMixin from '@/utils/CheckRadioMixin'\n\nexport default {\n    name: 'BCheckboxButton',\n    mixins: [CheckRadioMixin],\n    props: {\n        type: {\n            type: String,\n            default: 'is-primary'\n        },\n        expanded: Boolean\n    },\n    data() {\n        return {\n            isFocused: false\n        }\n    },\n    computed: {\n        checked() {\n            if (Array.isArray(this.newValue)) {\n                return this.newValue.indexOf(this.nativeValue) >= 0\n            }\n            return this.newValue === this.nativeValue\n        }\n    }\n}\n</script>\n",
      "path": "src/components/checkbox/CheckboxButton.vue"
    },
    {
      "type": "registry:component",
      "target": "components/checkbox/index.js",
      "content": "import Checkbox from '@/components/checkbox/Checkbox'\nimport CheckboxButton from '@/components/checkbox/CheckboxButton'\n\nimport { use, registerComponent } from '@/utils/plugins'\n\nconst Plugin = {\n    install(Vue) {\n        registerComponent(Vue, Checkbox)\n        registerComponent(Vue, CheckboxButton)\n    }\n}\n\nuse(Plugin)\n\nexport default Plugin\n\nexport {\n    Checkbox as BCheckbox,\n    CheckboxButton as BCheckboxButton\n}\n",
      "path": "src/components/checkbox/index.js"
    },
    {
      "type": "registry:lib",
      "target": "utils/CheckRadioMixin.js",
      "content": "export default {\n    props: {\n        value: [String, Number, Boolean, Function, Object, Array],\n        nativeValue: [String, Number, Boolean, Function, Object, Array],\n        type: String,\n        disabled: Boolean,\n        required: Boolean,\n        name: String,\n        size: String\n    },\n    data() {\n        return {\n            newValue: this.value\n        }\n    },\n    computed: {\n        computedValue: {\n            get() {\n                return this.newValue\n            },\n            set(value) {\n                this.newValue = value\n                this.$emit('input', value)\n            }\n        }\n    },\n    watch: {\n        /**\n        * When v-model change, set internal value.\n        */\n        value(value) {\n            this.newValue = value\n        }\n    },\n    methods: {\n        focus() {\n            // MacOS FireFox and Safari do not focus when clicked\n            this.$refs.input.focus()\n        }\n    }\n}\n",
      "path": "src/utils/CheckRadioMixin.js"
    },
    {
      "type": "registry:lib",
      "target": "utils/plugins.js",
      "content": "\nexport const use = (plugin) => {\n    if (typeof window !== 'undefined' && window.Vue) {\n        window.Vue.use(plugin)\n    }\n}\n\nexport const registerComponent = (Vue, component) => {\n    Vue.component(component.name, component)\n}\n\nexport const registerComponentProgrammatic = (Vue, property, component) => {\n    if (!Vue.prototype.$buefy) Vue.prototype.$buefy = {}\n    Vue.prototype.$buefy[property] = component\n}\n",
      "path": "src/utils/plugins.js"
    }
  ]
}
