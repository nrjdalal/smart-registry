{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "RadioGroup/radiogroup.stories",
  "dependencies": [
    "@radix-ui/react-label",
    "@radix-ui/react-radio-group",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Button/Button.tsx",
      "content": "// Tremor Button [v0.2.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"disabled:dark:bg-blue-800 disabled:dark:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"disabled:dark:bg-gray-800 disabled:dark:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"disabled:dark:bg-red-950 disabled:dark:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Label/Label.tsx",
      "content": "// Tremor Label [v0.0.2]\n\nimport React from \"react\"\nimport * as LabelPrimitives from \"@radix-ui/react-label\"\n\nimport { cx } from \"@/utils/cx\"\n\ninterface LabelProps\n  extends React.ComponentPropsWithoutRef<typeof LabelPrimitives.Root> {\n  disabled?: boolean\n}\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitives.Root>,\n  LabelProps\n>(({ className, disabled, ...props }, forwardedRef) => (\n  <LabelPrimitives.Root\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-sm leading-none\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      {\n        \"text-gray-400 dark:text-gray-600\": disabled,\n      },\n      className,\n    )}\n    aria-disabled={disabled}\n    tremor-id=\"tremor-raw\"\n    {...props}\n  />\n))\n\nLabel.displayName = \"Label\"\n\nexport { Label }\n",
      "path": "src/components/Label/Label.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/RadioGroup/RadioGroup.tsx",
      "content": "// Tremor RadioGroup [v0.0.2]\n\nimport React from \"react\"\nimport * as RadioGroupPrimitives from \"@radix-ui/react-radio-group\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Root>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <RadioGroupPrimitives.Root\n      ref={forwardedRef}\n      className={cx(\"grid gap-2\", className)}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    />\n  )\n})\n\nRadioGroup.displayName = \"RadioGroup\"\n\nconst RadioGroupIndicator = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitives.Indicator>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Indicator>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <RadioGroupPrimitives.Indicator\n      ref={forwardedRef}\n      className={cx(\"flex items-center justify-center\", className)}\n      {...props}\n    >\n      <div\n        className={cx(\n          // base\n          \"size-1.5 shrink-0 rounded-full\",\n          // indicator\n          \"bg-white\",\n          // disabled\n          \"group-data-[disabled]:bg-gray-400 group-data-[disabled]:dark:bg-gray-500\",\n        )}\n      />\n    </RadioGroupPrimitives.Indicator>\n  )\n})\n\nRadioGroupIndicator.displayName = \"RadioGroupIndicator\"\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitives.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Item>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <RadioGroupPrimitives.Item\n      ref={forwardedRef}\n      className={cx(\n        \"group relative flex size-4 appearance-none items-center justify-center outline-none\",\n        className,\n      )}\n      {...props}\n    >\n      <div\n        className={cx(\n          // base\n          \"flex size-4 shrink-0 items-center justify-center rounded-full border shadow-sm\",\n          // border color\n          \"border-gray-300 dark:border-gray-800\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // checked\n          \"group-data-[state=checked]:border-0 group-data-[state=checked]:border-transparent group-data-[state=checked]:bg-blue-500\",\n          // disabled\n          \"group-data-[disabled]:border\",\n          \"group-data-[disabled]:border-gray-300 group-data-[disabled]:bg-gray-100 group-data-[disabled]:text-gray-400\",\n          \"group-data-[disabled]:dark:border-gray-700 group-data-[disabled]:dark:bg-gray-800\",\n          // focus\n          focusRing,\n        )}\n      >\n        <RadioGroupIndicator />\n      </div>\n    </RadioGroupPrimitives.Item>\n  )\n})\n\nRadioGroupItem.displayName = \"RadioGroupItem\"\n\nexport { RadioGroup, RadioGroupItem }\n",
      "path": "src/components/RadioGroup/RadioGroup.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/RadioGroup/radiogroup.stories.tsx",
      "content": "import React from \"react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Button } from \"@/components/Button/Button\"\nimport { Label } from \"@/components/Label/Label\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/RadioGroup/RadioGroup\"\n\nconst meta: Meta<typeof RadioGroup> = {\n  title: \"ui/RadioGroup\",\n  component: RadioGroup,\n}\n\nexport default meta\ntype Story = StoryObj<typeof RadioGroup>\n\nexport const Default: Story = {\n  render: () => {\n    return (\n      <RadioGroup>\n        <RadioGroupItem value=\"1\" />\n        <RadioGroupItem value=\"2\" />\n        <RadioGroupItem value=\"3\" />\n      </RadioGroup>\n    )\n  },\n}\n\nexport const WithLabel: Story = {\n  render: () => (\n    <div className=\"flex justify-center\">\n      <RadioGroup>\n        <div className=\"flex items-center gap-x-3\">\n          <RadioGroupItem value=\"1\" id=\"radio_1\" />\n          <Label htmlFor=\"radio_1\">First come first serve (FCFS)</Label>\n        </div>\n        <div className=\"flex items-center gap-x-3\">\n          <RadioGroupItem value=\"2\" id=\"radio_2\" />\n          <Label htmlFor=\"radio_2\">By appointment</Label>\n        </div>\n        <div className=\"flex items-center gap-x-3\">\n          <RadioGroupItem value=\"3\" id=\"radio_3\" />\n          <Label htmlFor=\"radio_3\">By time window</Label>\n        </div>\n      </RadioGroup>\n    </div>\n  ),\n}\n\nexport const WithLegend: Story = {\n  render: () => (\n    <form className=\"flex justify-center\">\n      <fieldset className=\"space-y-3\">\n        <legend className=\"text-sm font-medium text-gray-800\">\n          Select booking logic:\n        </legend>\n        <RadioGroup>\n          <div className=\"flex items-center gap-x-3\">\n            <RadioGroupItem value=\"1\" id=\"radio_21\" />\n            <Label htmlFor=\"radio_21\">First come first serve (FCFS)</Label>\n          </div>\n          <div className=\"flex items-center gap-x-3\">\n            <RadioGroupItem value=\"2\" id=\"radio_22\" />\n            <Label htmlFor=\"radio_22\">By appointment</Label>\n          </div>\n          <div className=\"flex items-center gap-x-3\">\n            <RadioGroupItem value=\"3\" id=\"radio_23\" />\n            <Label htmlFor=\"radio_23\">By time window</Label>\n          </div>\n        </RadioGroup>\n      </fieldset>\n    </form>\n  ),\n}\n\nexport const WithLabelAndDescription: Story = {\n  render: () => (\n    <RadioGroup className=\"flex flex-col gap-6\">\n      <div className=\"flex items-start gap-x-3\">\n        <RadioGroupItem value=\"1\" id=\"radio_11\" />\n        <div className=\"mt-px flex flex-col gap-y-2.5\">\n          <Label\n            className=\"text-sm font-semibold leading-none\"\n            htmlFor=\"radio_11\"\n            aria-describedby=\"radio_11-description\"\n          >\n            Privacy Mode\n          </Label>\n          <p className=\"text-sm text-gray-500\" id=\"radio_11-description\">\n            Enhance your security by enabling Privacy Mode, which anonymizes all\n            outgoing links to protect your data.\n          </p>\n        </div>\n      </div>\n      <div className=\"flex items-start gap-x-3\">\n        <RadioGroupItem value=\"2\" id=\"radio_22\" />\n        <div className=\"mt-px flex flex-col gap-y-2.5\">\n          <Label\n            className=\"text-sm font-semibold leading-none\"\n            htmlFor=\"radio_22\"\n            aria-describedby=\"radio_22-description\"\n          >\n            Performance Mode\n          </Label>\n          <p className=\"text-sm text-gray-500\" id=\"radio_22-description\">\n            Optimize your site's speed by activating Performance Mode, ensuring\n            faster load times and a smoother user experience.\n          </p>\n        </div>\n      </div>\n      <div className=\"flex items-start gap-x-3\">\n        <RadioGroupItem value=\"3\" id=\"radio_33\" />\n        <div className=\"mt-px flex flex-col gap-y-2.5\">\n          <Label\n            className=\"text-sm font-semibold leading-none\"\n            htmlFor=\"radio_33\"\n            aria-describedby=\"radio_33-description\"\n          >\n            Compatibility Mode\n          </Label>\n          <p className=\"text-sm text-gray-500\" id=\"radio_33-description\">\n            Ensure maximum compatibility with legacy systems by selecting\n            Compatibility Mode, ideal for broad audience reach.\n          </p>\n        </div>\n      </div>\n    </RadioGroup>\n  ),\n}\n\nexport const Disabled: Story = {\n  render: () => (\n    <form className=\"flex justify-center\">\n      <fieldset className=\"space-y-3\">\n        <legend className=\"text-sm font-medium text-gray-800\">\n          Select booking logic:\n        </legend>\n        <RadioGroup>\n          <div className=\"flex items-center gap-x-3\">\n            <RadioGroupItem value=\"1\" id=\"radio_41\" />\n            <Label htmlFor=\"radio_41\">First come first serve (FCFS)</Label>\n          </div>\n          <div className=\"flex items-center gap-x-3\">\n            <RadioGroupItem value=\"2\" id=\"radio_42\" />\n            <Label htmlFor=\"radio_42\">By appointment</Label>\n          </div>\n          <div className=\"flex items-center gap-x-3\">\n            <RadioGroupItem disabled value=\"3\" id=\"radio_43\" />\n            <Label disabled htmlFor=\"radio_43\">\n              By time window\n            </Label>\n          </div>\n        </RadioGroup>\n      </fieldset>\n    </form>\n  ),\n}\n\nexport const DefaultChecked: Story = {\n  render: () => (\n    <form className=\"flex justify-center\">\n      <fieldset className=\"space-y-3\">\n        <legend className=\"text-sm font-medium text-gray-800\">\n          Select booking logic:\n        </legend>\n        <RadioGroup defaultValue=\"1\">\n          <div className=\"flex items-center gap-x-3\">\n            <RadioGroupItem value=\"1\" id=\"radio_31\" />\n            <Label htmlFor=\"radio_31\">First come first serve (FCFS)</Label>\n          </div>\n          <div className=\"flex items-center gap-x-3\">\n            <RadioGroupItem value=\"2\" id=\"radio_32\" />\n            <Label htmlFor=\"radio_32\">By appointment</Label>\n          </div>\n          <div className=\"flex items-center gap-x-3\">\n            <RadioGroupItem value=\"3\" id=\"radio_33\" />\n            <Label htmlFor=\"radio_33\">By time window</Label>\n          </div>\n        </RadioGroup>\n      </fieldset>\n    </form>\n  ),\n}\n\nexport const Controlled: Story = {\n  render: () => {\n    const [selectedOption, setSelectedOption] = React.useState(\"\")\n\n    return (\n      <div className=\"flex flex-col items-center justify-start\">\n        <form>\n          <fieldset className=\"space-y-3\">\n            <legend className=\"text-sm font-medium text-gray-900 dark:text-gray-50\">\n              Choose your preferred interior option:\n            </legend>\n            <RadioGroup\n              value={selectedOption}\n              onValueChange={(value) => {\n                setSelectedOption(value)\n              }}\n            >\n              <div className=\"flex items-center gap-x-3\">\n                <RadioGroupItem value=\"1\" id=\"radio_61\" />\n                <Label htmlFor=\"radio_61\">Leather Seats</Label>\n              </div>\n              <div className=\"flex items-center gap-x-3\">\n                <RadioGroupItem value=\"2\" id=\"radio_62\" />\n                <Label htmlFor=\"radio_62\">Fabric Seats</Label>\n              </div>\n              <div className=\"flex items-center gap-x-3\">\n                <RadioGroupItem value=\"3\" id=\"radio_63\" />\n                <Label htmlFor=\"radio_63\">Sport Seats</Label>\n              </div>\n            </RadioGroup>\n          </fieldset>\n          <Button\n            className=\"mt-4\"\n            type=\"reset\"\n            variant=\"secondary\"\n            onClick={() => setSelectedOption(\"\")}\n          >\n            Reset\n          </Button>\n        </form>\n        <pre className=\"mt-6 w-fit rounded-md bg-gray-100 p-2 font-mono text-sm text-gray-700 dark:bg-gray-800 dark:text-gray-200\">\n          Selected Opt: {selectedOption ? selectedOption : \"Nothing selected!\"}\n        </pre>\n      </div>\n    )\n  },\n}\n",
      "path": "src/components/RadioGroup/radiogroup.stories.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    }
  ],
  "type": "registry:component"
}
