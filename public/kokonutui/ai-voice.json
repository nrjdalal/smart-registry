{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-voice",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/ai-voice.tsx",
      "content": "\"use client\";\n\n/**\n * @author: @kokonutui\n * @description: AI Voice\n * @version: 1.0.0\n * @date: 2025-06-26\n * @license: MIT\n * @website: https://kokonutui.com\n * @github: https://github.com/kokonut-labs/kokonutui\n */\n\nimport { Mic } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function AI_Voice() {\n    const [submitted, setSubmitted] = useState(false);\n    const [time, setTime] = useState(0);\n    const [isClient, setIsClient] = useState(false);\n    const [isDemo, setIsDemo] = useState(true);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    useEffect(() => {\n        let intervalId: NodeJS.Timeout;\n\n        if (submitted) {\n            intervalId = setInterval(() => {\n                setTime((t) => t + 1);\n            }, 1000);\n        } else {\n            setTime(0);\n        }\n\n        return () => clearInterval(intervalId);\n    }, [submitted]);\n\n    const formatTime = (seconds: number) => {\n        const mins = Math.floor(seconds / 60);\n        const secs = seconds % 60;\n        return `${mins.toString().padStart(2, \"0\")}:${secs\n            .toString()\n            .padStart(2, \"0\")}`;\n    };\n\n    /**\n     * Remove that, only used for demo\n     */\n    useEffect(() => {\n        if (!isDemo) return;\n\n        let timeoutId: NodeJS.Timeout;\n        const runAnimation = () => {\n            setSubmitted(true);\n            timeoutId = setTimeout(() => {\n                setSubmitted(false);\n                timeoutId = setTimeout(runAnimation, 1000);\n            }, 3000);\n        };\n\n        const initialTimeout = setTimeout(runAnimation, 100);\n        return () => {\n            clearTimeout(timeoutId);\n            clearTimeout(initialTimeout);\n        };\n    }, [isDemo]);\n\n    const handleClick = () => {\n        if (isDemo) {\n            setIsDemo(false);\n            setSubmitted(false);\n        } else {\n            setSubmitted((prev) => !prev);\n        }\n    };\n\n    return (\n        <div className=\"w-full py-4\">\n            <div className=\"relative max-w-xl w-full mx-auto flex items-center flex-col gap-2\">\n                <button\n                    className={cn(\n                        \"group w-16 h-16 rounded-xl flex items-center justify-center transition-colors\",\n                        submitted\n                            ? \"bg-none\"\n                            : \"bg-none hover:bg-black/5 dark:hover:bg-white/5\"\n                    )}\n                    type=\"button\"\n                    onClick={handleClick}\n                >\n                    {submitted ? (\n                        <div\n                            className=\"w-6 h-6 rounded-sm animate-spin bg-black  dark:bg-white cursor-pointer pointer-events-auto\"\n                            style={{ animationDuration: \"3s\" }}\n                        />\n                    ) : (\n                        <Mic className=\"w-6 h-6 text-black/90 dark:text-white/90\" />\n                    )}\n                </button>\n\n                <span\n                    className={cn(\n                        \"font-mono text-sm transition-opacity duration-300\",\n                        submitted\n                            ? \"text-black/70 dark:text-white/70\"\n                            : \"text-black/30 dark:text-white/30\"\n                    )}\n                >\n                    {formatTime(time)}\n                </span>\n\n                <div className=\"h-4 w-64 flex items-center justify-center gap-0.5\">\n                    {[...Array(48)].map((_, i) => (\n                        <div\n                            key={i}\n                            className={cn(\n                                \"w-0.5 rounded-full transition-all duration-300\",\n                                submitted\n                                    ? \"bg-black/50 dark:bg-white/50 animate-pulse\"\n                                    : \"bg-black/10 dark:bg-white/10 h-1\"\n                            )}\n                            style={\n                                submitted && isClient\n                                    ? {\n                                          height: `${20 + Math.random() * 80}%`,\n                                          animationDelay: `${i * 0.05}s`,\n                                      }\n                                    : undefined\n                            }\n                        />\n                    ))}\n                </div>\n\n                <p className=\"h-4 text-xs text-black/70 dark:text-white/70\">\n                    {submitted ? \"Listening...\" : \"Click to speak\"}\n                </p>\n            </div>\n        </div>\n    );\n}\n",
      "path": "components/kokonutui/ai-voice.tsx"
    }
  ]
}
