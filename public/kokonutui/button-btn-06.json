{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-btn-06",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/button/btn-06.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { Check, Copy } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface Btn06Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    textToCopy: string;\n    successDuration?: number;\n}\n\nexport default function Btn06({\n    className,\n    textToCopy = \"https://kokonutui.com/\",\n    successDuration = 1000,\n    ...props\n}: Btn06Props) {\n    const [isCopied, setIsCopied] = useState(false);\n\n    async function handleCopy() {\n        try {\n            await navigator.clipboard.writeText(textToCopy);\n            setIsCopied(true);\n            setTimeout(() => setIsCopied(false), successDuration);\n        } catch (err) {\n            console.error(\"Failed to copy text:\", err);\n        }\n    }\n\n    return (\n        <Button\n            className={cn(\n                \"min-w-40 relative group\",\n                \"bg-emerald-50 dark:bg-emerald-950\",\n                \"hover:bg-emerald-100 dark:hover:bg-emerald-900\",\n                \"text-emerald-600 dark:text-emerald-300\",\n                \"border border-emerald-200 dark:border-emerald-800\",\n                isCopied && \"bg-emerald-100 dark:bg-emerald-900\",\n                className\n            )}\n            onClick={handleCopy}\n            {...props}\n        >\n            <div\n                className={cn(\n                    \"w-full flex items-center justify-center gap-2\",\n                    \"transition-transform duration-200\",\n                    isCopied && \"scale-105\"\n                )}\n            >\n                {isCopied ? (\n                    <>\n                        <Check className=\"w-4 h-4 text-emerald-500\" />\n                        <span>Copied!</span>\n                    </>\n                ) : (\n                    <>\n                        <Copy\n                            className={cn(\n                                \"w-4 h-4 transition-transform duration-200\",\n                                \"group-hover:scale-110\"\n                            )}\n                        />\n                        <span>Copy code</span>\n                    </>\n                )}\n            </div>\n        </Button>\n    );\n}\n",
      "path": "components/kokonutui/button/btn-06.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    }
  ]
}
