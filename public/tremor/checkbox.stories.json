{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-checkbox",
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Button/Button.tsx",
      "content": "// Tremor Button [v0.2.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"disabled:dark:bg-blue-800 disabled:dark:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"disabled:dark:bg-gray-800 disabled:dark:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"disabled:dark:bg-red-950 disabled:dark:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Checkbox/Checkbox.tsx",
      "content": "// Tremor Checkbox [v0.0.3]\n\nimport React from \"react\"\nimport * as CheckboxPrimitives from \"@radix-ui/react-checkbox\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitives.Root>\n>(({ className, checked, ...props }, forwardedRef) => {\n  return (\n    <CheckboxPrimitives.Root\n      ref={forwardedRef}\n      {...props}\n      checked={checked}\n      className={cx(\n        // base\n        \"relative inline-flex size-4 shrink-0 appearance-none items-center justify-center rounded shadow-sm outline-none ring-1 ring-inset transition duration-100 enabled:cursor-pointer\",\n        // text color\n        \"text-white dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // ring color\n        \"ring-gray-300 dark:ring-gray-800\",\n        // disabled\n        \"data-[disabled]:bg-gray-100 data-[disabled]:text-gray-400 data-[disabled]:ring-gray-300\",\n        \"data-[disabled]:dark:bg-gray-800 data-[disabled]:dark:text-gray-500 data-[disabled]:dark:ring-gray-700\",\n        // checked and enabled\n        \"enabled:data-[state=checked]:bg-blue-500 enabled:data-[state=checked]:ring-0 enabled:data-[state=checked]:ring-transparent\",\n        // indeterminate\n        \"enabled:data-[state=indeterminate]:bg-blue-500 enabled:data-[state=indeterminate]:ring-0 enabled:data-[state=indeterminate]:ring-transparent\",\n        // focus\n        focusRing,\n        className,\n      )}\n      tremor-id=\"tremor-raw\"\n    >\n      <CheckboxPrimitives.Indicator\n        asChild\n        className=\"flex size-full items-center justify-center\"\n      >\n        {checked === \"indeterminate\" ? (\n          <svg\n            aria-hidden=\"true\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 16 16\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <line\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeWidth=\"2\"\n              x1=\"4\"\n              x2=\"12\"\n              y1=\"8\"\n              y2=\"8\"\n            ></line>\n          </svg>\n        ) : (\n          <svg\n            aria-hidden=\"true\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 16 16\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M11.2 5.59998L6.79999 9.99998L4.79999 7.99998\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n            ></path>\n          </svg>\n        )}\n      </CheckboxPrimitives.Indicator>\n    </CheckboxPrimitives.Root>\n  )\n})\n\nCheckbox.displayName = \"Checkbox\"\n\nexport { Checkbox }\n",
      "path": "src/components/Checkbox/Checkbox.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Checkbox/checkbox.stories.tsx",
      "content": "import React from \"react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Button } from \"@/components/Button/Button\"\nimport { Label } from \"@/components/Label/Label\"\nimport { Checkbox } from \"@/components/Checkbox/Checkbox\"\n\nconst meta: Meta<typeof Checkbox> = {\n  title: \"ui/Checkbox\",\n  component: Checkbox,\n}\n\nexport default meta\ntype Story = StoryObj<typeof Checkbox>\n\nexport const Default: Story = {}\n\nexport const Checked: Story = {\n  args: {\n    checked: true,\n  },\n}\n\nexport const Indeterminate: Story = {\n  args: {\n    checked: \"indeterminate\",\n  },\n}\n\nexport const Disabled: Story = {\n  render: (args) => (\n    <div className=\"flex flex-col gap-2\">\n      <div className=\"flex items-center gap-2\">\n        <Checkbox {...args} checked={true} /> <Label disabled>Checked</Label>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <Checkbox {...args} checked={false} /> <Label disabled>Unchecked</Label>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <Checkbox {...args} checked=\"indeterminate\" />\n        <Label disabled>Indeterminate</Label>\n      </div>\n    </div>\n  ),\n  args: {\n    disabled: true,\n  },\n}\n\nexport const WithLabel: Story = {\n  render: () => (\n    <div className=\"flex items-center justify-center gap-2\">\n      <Checkbox id=\"r1\" />\n      <Label htmlFor=\"r1\">\n        I'd like to be notified by SMS when my order is ready for collection.\n      </Label>\n    </div>\n  ),\n}\n\nexport const Controlled: Story = {\n  render: () => {\n    const [checked, setChecked] = React.useState(true)\n\n    return (\n      <div className=\"flex flex-col items-center gap-4\">\n        <Checkbox\n          checked={checked}\n          onCheckedChange={() => setChecked(!checked)}\n        />\n        <Button variant=\"secondary\" onClick={() => setChecked(!checked)}>\n          Set {checked ? \"Unchecked\" : \"Checked\"}\n        </Button>\n      </div>\n    )\n  },\n}\n",
      "path": "src/components/Checkbox/checkbox.stories.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Label/Label.tsx",
      "content": "// Tremor Label [v0.0.2]\n\nimport React from \"react\"\nimport * as LabelPrimitives from \"@radix-ui/react-label\"\n\nimport { cx } from \"@/utils/cx\"\n\ninterface LabelProps\n  extends React.ComponentPropsWithoutRef<typeof LabelPrimitives.Root> {\n  disabled?: boolean\n}\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitives.Root>,\n  LabelProps\n>(({ className, disabled, ...props }, forwardedRef) => (\n  <LabelPrimitives.Root\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-sm leading-none\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      {\n        \"text-gray-400 dark:text-gray-600\": disabled,\n      },\n      className,\n    )}\n    aria-disabled={disabled}\n    tremor-id=\"tremor-raw\"\n    {...props}\n  />\n))\n\nLabel.displayName = \"Label\"\n\nexport { Label }\n",
      "path": "src/components/Label/Label.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    }
  ]
}
