{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "preview-source",
  "type": "registry:component",
  "dependencies": [
    "@icons-pack/react-simple-icons",
    "@radix-ui/react-accordion",
    "@radix-ui/react-select",
    "@radix-ui/react-slot",
    "@radix-ui/react-use-controllable-state",
    "@shikijs/transformers",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "react",
    "shiki",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/preview/source.tsx",
      "content": "'use client';\n\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/packages/shadcn-ui/components/ui/accordion';\nimport { SiReact } from '@icons-pack/react-simple-icons';\nimport {\n  type BundledLanguage,\n  CodeBlockContent,\n  CodeBlockItem,\n} from '@/packages/code-block';\nimport { CodeBlockBody } from '@/packages/code-block';\nimport { CodeBlock } from '@/packages/code-block';\n\ntype PreviewSourceProps = {\n  source: { name: string; source: string }[];\n};\n\nconst parseCode = (code: string) =>\n  code\n    .replace(/@repo\\/shadcn-ui\\//g, '@/')\n    .replace(/@repo\\//g, '@/components/ui/kibo-ui/');\n\nexport const PreviewSource = ({ source }: PreviewSourceProps) => (\n  <Accordion type=\"single\" collapsible defaultValue={source.at(0)?.name}>\n    {source.map(({ name, source }) => (\n      <AccordionItem value={name} key={name}>\n        <AccordionTrigger className=\"rounded-none bg-secondary px-4\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            <SiReact className=\"size-4 text-muted-foreground\" />\n            <span>{name}</span>\n          </div>\n        </AccordionTrigger>\n        <AccordionContent>\n          <CodeBlock\n            data={[\n              {\n                language: 'tsx',\n                filename: name,\n                code: parseCode(source),\n              },\n            ]}\n            defaultValue=\"tsx\"\n            className=\"overflow-auto rounded-none border-none\"\n          >\n            <CodeBlockBody>\n              {(item) => (\n                <CodeBlockItem key={item.language} value={item.language}>\n                  <CodeBlockContent language={item.language as BundledLanguage}>\n                    {item.code}\n                  </CodeBlockContent>\n                </CodeBlockItem>\n              )}\n            </CodeBlockBody>\n          </CodeBlock>\n        </AccordionContent>\n      </AccordionItem>\n    ))}\n  </Accordion>\n);\n",
      "path": "components/preview/source.tsx"
    },
    {
      "type": "registry:file",
      "target": "packages/code-block/index.tsx",
      "content": "'use client';\n\nimport { Button } from '@/packages/shadcn-ui/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/packages/shadcn-ui/components/ui/select';\nimport { cn } from '@/packages/shadcn-ui/lib/utils';\nimport {\n  type IconType,\n  SiAstro,\n  SiBiome,\n  SiBower,\n  SiBun,\n  SiC,\n  SiCircleci,\n  SiCoffeescript,\n  SiCplusplus,\n  SiCss,\n  SiCssmodules,\n  SiDart,\n  SiDocker,\n  SiDocusaurus,\n  SiDotenv,\n  SiEditorconfig,\n  SiEslint,\n  SiGatsby,\n  SiGitignoredotio,\n  SiGnubash,\n  SiGo,\n  SiGraphql,\n  SiGrunt,\n  SiGulp,\n  SiHandlebarsdotjs,\n  SiHtml5,\n  SiJavascript,\n  SiJest,\n  SiJson,\n  SiLess,\n  SiMarkdown,\n  SiMdx,\n  SiMintlify,\n  SiMocha,\n  SiMysql,\n  SiNextdotjs,\n  SiPerl,\n  SiPhp,\n  SiPostcss,\n  SiPrettier,\n  SiPrisma,\n  SiPug,\n  SiPython,\n  SiR,\n  SiReact,\n  SiReadme,\n  SiRedis,\n  SiRemix,\n  SiRive,\n  SiRollupdotjs,\n  SiRuby,\n  SiSanity,\n  SiSass,\n  SiScala,\n  SiSentry,\n  SiShadcnui,\n  SiStorybook,\n  SiStylelint,\n  SiSublimetext,\n  SiSvelte,\n  SiSvg,\n  SiSwift,\n  SiTailwindcss,\n  SiToml,\n  SiTypescript,\n  SiVercel,\n  SiVite,\n  SiVuedotjs,\n  SiWebassembly,\n} from '@icons-pack/react-simple-icons';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport {\n  transformerNotationDiff,\n  transformerNotationErrorLevel,\n  transformerNotationFocus,\n  transformerNotationHighlight,\n  transformerNotationWordHighlight,\n} from '@shikijs/transformers';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport type {\n  ComponentProps,\n  HTMLAttributes,\n  ReactElement,\n  ReactNode,\n} from 'react';\nimport {\n  cloneElement,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport {\n  type BundledLanguage,\n  type CodeOptionsMultipleThemes,\n  codeToHtml,\n} from 'shiki';\nexport type { BundledLanguage } from 'shiki';\n\nconst filenameIconMap = {\n  '.env': SiDotenv,\n  '*.astro': SiAstro,\n  'biome.json': SiBiome,\n  '.bowerrc': SiBower,\n  'bun.lockb': SiBun,\n  '*.c': SiC,\n  '*.cpp': SiCplusplus,\n  '.circleci/config.yml': SiCircleci,\n  '*.coffee': SiCoffeescript,\n  '*.module.css': SiCssmodules,\n  '*.css': SiCss,\n  '*.dart': SiDart,\n  Dockerfile: SiDocker,\n  'docusaurus.config.js': SiDocusaurus,\n  '.editorconfig': SiEditorconfig,\n  '.eslintrc': SiEslint,\n  'eslint.config.*': SiEslint,\n  'gatsby-config.*': SiGatsby,\n  '.gitignore': SiGitignoredotio,\n  '*.go': SiGo,\n  '*.graphql': SiGraphql,\n  '*.sh': SiGnubash,\n  'Gruntfile.*': SiGrunt,\n  'gulpfile.*': SiGulp,\n  '*.hbs': SiHandlebarsdotjs,\n  '*.html': SiHtml5,\n  '*.js': SiJavascript,\n  '*.json': SiJson,\n  '*.test.js': SiJest,\n  '*.less': SiLess,\n  '*.md': SiMarkdown,\n  '*.mdx': SiMdx,\n  'mintlify.json': SiMintlify,\n  'mocha.opts': SiMocha,\n  '*.mustache': SiHandlebarsdotjs,\n  '*.sql': SiMysql,\n  'next.config.*': SiNextdotjs,\n  '*.pl': SiPerl,\n  '*.php': SiPhp,\n  'postcss.config.*': SiPostcss,\n  'prettier.config.*': SiPrettier,\n  '*.prisma': SiPrisma,\n  '*.pug': SiPug,\n  '*.py': SiPython,\n  '*.r': SiR,\n  '*.rb': SiRuby,\n  '*.jsx': SiReact,\n  '*.tsx': SiReact,\n  'readme.md': SiReadme,\n  '*.rdb': SiRedis,\n  'remix.config.*': SiRemix,\n  '*.riv': SiRive,\n  'rollup.config.*': SiRollupdotjs,\n  'sanity.config.*': SiSanity,\n  '*.sass': SiSass,\n  '*.scss': SiSass,\n  '*.sc': SiScala,\n  '*.scala': SiScala,\n  'sentry.client.config.*': SiSentry,\n  'components.json': SiShadcnui,\n  'storybook.config.*': SiStorybook,\n  'stylelint.config.*': SiStylelint,\n  '.sublime-settings': SiSublimetext,\n  '*.svelte': SiSvelte,\n  '*.svg': SiSvg,\n  '*.swift': SiSwift,\n  'tailwind.config.*': SiTailwindcss,\n  '*.toml': SiToml,\n  '*.ts': SiTypescript,\n  'vercel.json': SiVercel,\n  'vite.config.*': SiVite,\n  '*.vue': SiVuedotjs,\n  '*.wasm': SiWebassembly,\n};\n\nconst lineNumberClassNames = cn(\n  '[&_code]:[counter-reset:line]',\n  '[&_code]:[counter-increment:line_0]',\n  '[&_.line]:before:content-[counter(line)]',\n  '[&_.line]:before:inline-block',\n  '[&_.line]:before:[counter-increment:line]',\n  '[&_.line]:before:w-4',\n  '[&_.line]:before:mr-4',\n  '[&_.line]:before:text-[13px]',\n  '[&_.line]:before:text-right',\n  '[&_.line]:before:text-muted-foreground/50',\n  '[&_.line]:before:font-mono',\n  '[&_.line]:before:select-none'\n);\n\nconst darkModeClassNames = cn(\n  'dark:[&_.shiki]:!text-[var(--shiki-dark)]',\n  'dark:[&_.shiki]:!bg-[var(--shiki-dark-bg)]',\n  'dark:[&_.shiki]:![font-style:var(--shiki-dark-font-style)]',\n  'dark:[&_.shiki]:![font-weight:var(--shiki-dark-font-weight)]',\n  'dark:[&_.shiki]:![text-decoration:var(--shiki-dark-text-decoration)]',\n  'dark:[&_.shiki_span]:!text-[var(--shiki-dark)]',\n  'dark:[&_.shiki_span]:![font-style:var(--shiki-dark-font-style)]',\n  'dark:[&_.shiki_span]:![font-weight:var(--shiki-dark-font-weight)]',\n  'dark:[&_.shiki_span]:![text-decoration:var(--shiki-dark-text-decoration)]'\n);\n\nconst lineHighlightClassNames = cn(\n  '[&_.line.highlighted]:bg-blue-50',\n  '[&_.line.highlighted]:after:bg-blue-500',\n  '[&_.line.highlighted]:after:absolute',\n  '[&_.line.highlighted]:after:left-0',\n  '[&_.line.highlighted]:after:top-0',\n  '[&_.line.highlighted]:after:bottom-0',\n  '[&_.line.highlighted]:after:w-0.5',\n  'dark:[&_.line.highlighted]:!bg-blue-500/10'\n);\n\nconst lineDiffClassNames = cn(\n  '[&_.line.diff]:after:absolute',\n  '[&_.line.diff]:after:left-0',\n  '[&_.line.diff]:after:top-0',\n  '[&_.line.diff]:after:bottom-0',\n  '[&_.line.diff]:after:w-0.5',\n  '[&_.line.diff.add]:bg-emerald-50',\n  '[&_.line.diff.add]:after:bg-emerald-500',\n  '[&_.line.diff.remove]:bg-rose-50',\n  '[&_.line.diff.remove]:after:bg-rose-500',\n  'dark:[&_.line.diff.add]:!bg-emerald-500/10',\n  'dark:[&_.line.diff.remove]:!bg-rose-500/10'\n);\n\nconst lineFocusedClassNames = cn(\n  '[&_code:has(.focused)_.line]:blur-[2px]',\n  '[&_code:has(.focused)_.line.focused]:blur-none'\n);\n\nconst wordHighlightClassNames = cn(\n  '[&_.highlighted-word]:bg-blue-50',\n  'dark:[&_.highlighted-word]:!bg-blue-500/10'\n);\n\nconst codeBlockClassName = cn(\n  'mt-0 text-sm',\n  '[&_pre]:py-4',\n  '[&_.shiki]:!bg-[var(--shiki-bg)]',\n  '[&_code]:w-full',\n  '[&_code]:grid',\n  '[&_code]:overflow-x-auto',\n  '[&_code]:bg-transparent',\n  '[&_.line]:px-4',\n  '[&_.line]:w-full',\n  '[&_.line]:relative'\n);\n\nconst highlight = (\n  html: string,\n  language?: BundledLanguage,\n  themes?: CodeOptionsMultipleThemes['themes']\n) =>\n  codeToHtml(html, {\n    lang: language ?? 'typescript',\n    themes: themes ?? {\n      light: 'github-light',\n      dark: 'github-dark-default',\n    },\n    transformers: [\n      transformerNotationDiff({\n        matchAlgorithm: 'v3',\n      }),\n      transformerNotationHighlight({\n        matchAlgorithm: 'v3',\n      }),\n      transformerNotationWordHighlight({\n        matchAlgorithm: 'v3',\n      }),\n      transformerNotationFocus({\n        matchAlgorithm: 'v3',\n      }),\n      transformerNotationErrorLevel({\n        matchAlgorithm: 'v3',\n      }),\n    ],\n  });\n\ntype CodeBlockData = {\n  language: string;\n  filename: string;\n  code: string;\n};\n\ntype CodeBlockContextType = {\n  value: string | undefined;\n  onValueChange: ((value: string) => void) | undefined;\n  data: CodeBlockData[];\n};\n\nconst CodeBlockContext = createContext<CodeBlockContextType>({\n  value: undefined,\n  onValueChange: undefined,\n  data: [],\n});\n\nexport type CodeBlockProps = HTMLAttributes<HTMLDivElement> & {\n  defaultValue?: string;\n  value?: string;\n  onValueChange?: (value: string) => void;\n  data: CodeBlockData[];\n};\n\nexport const CodeBlock = ({\n  value: controlledValue,\n  onValueChange: controlledOnValueChange,\n  defaultValue,\n  className,\n  data,\n  ...props\n}: CodeBlockProps) => {\n  const [value, onValueChange] = useControllableState({\n    defaultProp: defaultValue ?? '',\n    prop: controlledValue,\n    onChange: controlledOnValueChange,\n  });\n\n  return (\n    <CodeBlockContext.Provider value={{ value, onValueChange, data }}>\n      <div\n        className={cn('size-full overflow-hidden rounded-md border', className)}\n        {...props}\n      />\n    </CodeBlockContext.Provider>\n  );\n};\n\nexport type CodeBlockHeaderProps = HTMLAttributes<HTMLDivElement>;\n\nexport const CodeBlockHeader = ({\n  className,\n  ...props\n}: CodeBlockHeaderProps) => (\n  <div\n    className={cn(\n      'flex flex-row items-center border-b bg-secondary p-1',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type CodeBlockFilesProps = Omit<\n  HTMLAttributes<HTMLDivElement>,\n  'children'\n> & {\n  children: (item: CodeBlockData) => ReactNode;\n};\n\nexport const CodeBlockFiles = ({\n  className,\n  children,\n  ...props\n}: CodeBlockFilesProps) => {\n  const { data } = useContext(CodeBlockContext);\n\n  return (\n    <div\n      className={cn('flex grow flex-row items-center gap-2', className)}\n      {...props}\n    >\n      {data.map(children)}\n    </div>\n  );\n};\n\nexport type CodeBlockFilenameProps = HTMLAttributes<HTMLDivElement> & {\n  icon?: IconType;\n  value?: string;\n};\n\nexport const CodeBlockFilename = ({\n  className,\n  icon,\n  value,\n  children,\n  ...props\n}: CodeBlockFilenameProps) => {\n  const { value: activeValue } = useContext(CodeBlockContext);\n  const defaultIcon = Object.entries(filenameIconMap).find(([pattern]) => {\n    const regex = new RegExp(\n      `^${pattern.replace(/\\\\/g, '\\\\\\\\').replace(/\\./g, '\\\\.').replace(/\\*/g, '.*')}$`\n    );\n    return regex.test(children as string);\n  })?.[1];\n  const Icon = icon ?? defaultIcon;\n\n  if (value !== activeValue) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"flex items-center gap-2 bg-secondary px-4 py-1.5 text-muted-foreground text-xs\"\n      {...props}\n    >\n      {Icon && <Icon className=\"h-4 w-4 shrink-0\" />}\n      <span className=\"flex-1 truncate\">{children}</span>\n    </div>\n  );\n};\n\nexport type CodeBlockSelectProps = ComponentProps<typeof Select>;\n\nexport const CodeBlockSelect = (props: CodeBlockSelectProps) => {\n  const { value, onValueChange } = useContext(CodeBlockContext);\n\n  return <Select value={value} onValueChange={onValueChange} {...props} />;\n};\n\nexport type CodeBlockSelectTriggerProps = ComponentProps<typeof SelectTrigger>;\n\nexport const CodeBlockSelectTrigger = ({\n  className,\n  ...props\n}: CodeBlockSelectTriggerProps) => (\n  <SelectTrigger\n    className={cn(\n      'w-fit border-none text-muted-foreground text-xs shadow-none',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type CodeBlockSelectValueProps = ComponentProps<typeof SelectValue>;\n\nexport const CodeBlockSelectValue = (props: CodeBlockSelectValueProps) => (\n  <SelectValue {...props} />\n);\n\nexport type CodeBlockSelectContentProps = Omit<\n  ComponentProps<typeof SelectContent>,\n  'children'\n> & {\n  children: (item: CodeBlockData) => ReactNode;\n};\n\nexport const CodeBlockSelectContent = ({\n  children,\n  ...props\n}: CodeBlockSelectContentProps) => {\n  const { data } = useContext(CodeBlockContext);\n\n  return <SelectContent {...props}>{data.map(children)}</SelectContent>;\n};\n\nexport type CodeBlockSelectItemProps = ComponentProps<typeof SelectItem>;\n\nexport const CodeBlockSelectItem = ({\n  className,\n  ...props\n}: CodeBlockSelectItemProps) => (\n  <SelectItem className={cn('text-sm', className)} {...props} />\n);\n\nexport type CodeBlockCopyButtonProps = ComponentProps<typeof Button> & {\n  onCopy?: () => void;\n  onError?: (error: Error) => void;\n  timeout?: number;\n};\n\nexport const CodeBlockCopyButton = ({\n  asChild,\n  onCopy,\n  onError,\n  timeout = 2000,\n  children,\n  className,\n  ...props\n}: CodeBlockCopyButtonProps) => {\n  const [isCopied, setIsCopied] = useState(false);\n  const { data, value } = useContext(CodeBlockContext);\n  const code = data.find((item) => item.language === value)?.code;\n\n  const copyToClipboard = () => {\n    if (\n      typeof window === 'undefined' ||\n      !navigator.clipboard.writeText ||\n      !code\n    ) {\n      return;\n    }\n\n    navigator.clipboard.writeText(code).then(() => {\n      setIsCopied(true);\n      onCopy?.();\n\n      setTimeout(() => setIsCopied(false), timeout);\n    }, onError);\n  };\n\n  if (asChild) {\n    return cloneElement(children as ReactElement, {\n      // @ts-expect-error - we know this is a button\n      onClick: copyToClipboard,\n    });\n  }\n\n  const Icon = isCopied ? CheckIcon : CopyIcon;\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={copyToClipboard}\n      className={cn('shrink-0', className)}\n      {...props}\n    >\n      {children ?? <Icon size={14} className=\"text-muted-foreground\" />}\n    </Button>\n  );\n};\n\ntype CodeBlockFallbackProps = HTMLAttributes<HTMLDivElement>;\n\nconst CodeBlockFallback = ({ children, ...props }: CodeBlockFallbackProps) => (\n  <div {...props}>\n    <pre className=\"w-full\">\n      <code>\n        {children\n          ?.toString()\n          .split('\\n')\n          .map((line, i) => (\n            <span key={i} className=\"line\">\n              {line}\n            </span>\n          ))}\n      </code>\n    </pre>\n  </div>\n);\n\nexport type CodeBlockBodyProps = Omit<\n  HTMLAttributes<HTMLDivElement>,\n  'children'\n> & {\n  children: (item: CodeBlockData) => ReactNode;\n};\n\nexport const CodeBlockBody = ({ children, ...props }: CodeBlockBodyProps) => {\n  const { data } = useContext(CodeBlockContext);\n\n  return <div {...props}>{data.map(children)}</div>;\n};\n\nexport type CodeBlockItemProps = HTMLAttributes<HTMLDivElement> & {\n  value: string;\n  lineNumbers?: boolean;\n};\n\nexport const CodeBlockItem = ({\n  children,\n  lineNumbers = true,\n  className,\n  value,\n  ...props\n}: CodeBlockItemProps) => {\n  const { value: activeValue } = useContext(CodeBlockContext);\n\n  if (value !== activeValue) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\n        codeBlockClassName,\n        lineHighlightClassNames,\n        lineDiffClassNames,\n        lineFocusedClassNames,\n        wordHighlightClassNames,\n        darkModeClassNames,\n        lineNumbers && lineNumberClassNames,\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport type CodeBlockContentProps = HTMLAttributes<HTMLDivElement> & {\n  themes?: CodeOptionsMultipleThemes['themes'];\n  language?: BundledLanguage;\n  syntaxHighlighting?: boolean;\n  children: string;\n};\n\nexport const CodeBlockContent = ({\n  children,\n  themes,\n  language,\n  syntaxHighlighting = true,\n  ...props\n}: CodeBlockContentProps) => {\n  const [html, setHtml] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!syntaxHighlighting) {\n      return;\n    }\n\n    highlight(children as string, language, themes)\n      .then(setHtml)\n      .catch(console.error);\n  }, [children, themes, syntaxHighlighting, language]);\n\n  if (!syntaxHighlighting || !html) {\n    return <CodeBlockFallback>{children}</CodeBlockFallback>;\n  }\n\n  return (\n    <div\n      // biome-ignore lint/security/noDangerouslySetInnerHtml: \"Kinda how Shiki works\"\n      dangerouslySetInnerHTML={{ __html: html }}\n      {...props}\n    />\n  );\n};\n",
      "path": "../../packages/code-block/index.tsx"
    },
    {
      "type": "registry:file",
      "target": "packages/shadcn-ui/components/ui/accordion.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDownIcon } from \"lucide-react\"\n\nimport { cn } from \"@/packages/shadcn-ui/lib/utils\"\n\nfunction Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn(\"pt-0 pb-4\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "path": "../../packages/shadcn-ui/components/ui/accordion.tsx"
    },
    {
      "type": "registry:file",
      "target": "packages/shadcn-ui/components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@repo/shadcn-ui/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "path": "../../packages/shadcn-ui/components/ui/button.tsx"
    },
    {
      "type": "registry:file",
      "target": "packages/shadcn-ui/components/ui/select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@repo/shadcn-ui/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n",
      "path": "../../packages/shadcn-ui/components/ui/select.tsx"
    },
    {
      "type": "registry:file",
      "target": "packages/shadcn-ui/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "../../packages/shadcn-ui/lib/utils.ts"
    }
  ]
}
