{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mail-nav",
  "type": "registry:component",
  "dependencies": [
    "@kobalte/core",
    "class-variance-authority",
    "clsx",
    "solid-js",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/mail/nav.tsx",
      "content": "import type { Component } from \"solid-js\"\nimport { For, Show } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\"\n\ninterface NavProps {\n  isCollapsed: boolean\n  links: {\n    title: string\n    label?: string\n    icon: Component\n    variant: \"default\" | \"ghost\"\n  }[]\n}\n\nexport function Nav(props: NavProps) {\n  return (\n    <div\n      data-collapsed={props.isCollapsed}\n      class=\"group flex flex-col gap-4 py-2 data-[collapsed=true]:py-2\"\n    >\n      <nav class=\"grid gap-1 px-2 group-[[data-collapsed=true]]:justify-center group-[[data-collapsed=true]]:px-2\">\n        <For each={props.links}>\n          {(item) => {\n            const Icon = item.icon\n            return (\n              <Show\n                when={props.isCollapsed}\n                fallback={\n                  <a\n                    href=\"#\"\n                    class={cn(\n                      buttonVariants({ variant: item.variant, size: \"sm\", class: \"text-sm\" }),\n                      item.variant === \"default\" &&\n                        \"dark:bg-muted dark:text-white dark:hover:bg-muted dark:hover:text-white\",\n                      \"justify-start\"\n                    )}\n                  >\n                    <div class=\"mr-2\">\n                      <Icon />\n                    </div>\n                    {item.title}\n                    {item.label && (\n                      <span\n                        class={cn(\n                          \"ml-auto\",\n                          item.variant === \"default\" && \"text-background dark:text-white\"\n                        )}\n                      >\n                        {item.label}\n                      </span>\n                    )}\n                  </a>\n                }\n              >\n                <Tooltip openDelay={0} closeDelay={0} placement=\"right\">\n                  <TooltipTrigger\n                    as=\"a\"\n                    href=\"#\"\n                    class={cn(\n                      buttonVariants({ variant: item.variant, size: \"icon\" }),\n                      \"size-9\",\n                      item.variant === \"default\" &&\n                        \"dark:bg-muted dark:text-muted-foreground dark:hover:bg-muted dark:hover:text-white\"\n                    )}\n                  >\n                    <Icon />\n                    <span class=\"sr-only\">{item.title}</span>\n                  </TooltipTrigger>\n                  <TooltipContent class=\"flex items-center gap-4\">\n                    {item.title}\n                    <Show when={item.label}>\n                      <span class=\"ml-auto text-muted-foreground\">{item.label}</span>\n                    </Show>\n                  </TooltipContent>\n                </Tooltip>\n              </Show>\n            )\n          }}\n        </For>\n      </nav>\n    </div>\n  )\n}\n",
      "path": "src/components/mail/nav.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import type { ClassValue } from \"clsx\"\nimport { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return val > max ? max : val < min ? min : val\n}\n\nexport function toggleValue<T>(array: T[], value: T): T[] {\n  return array.includes(value) ? array.filter((item) => item !== value) : [...array, value]\n}\n",
      "path": "src/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as ButtonPrimitive from \"@kobalte/core/button\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\"\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 px-3 text-xs\",\n        lg: \"h-11 px-8\",\n        icon: \"size-10\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n)\n\ntype ButtonProps<T extends ValidComponent = \"button\"> = ButtonPrimitive.ButtonRootProps<T> &\n  VariantProps<typeof buttonVariants> & { class?: string | undefined; children?: JSX.Element }\n\nconst Button = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ButtonProps<T>>\n) => {\n  const [local, others] = splitProps(props as ButtonProps, [\"variant\", \"size\", \"class\"])\n  return (\n    <ButtonPrimitive.Root\n      class={cn(buttonVariants({ variant: local.variant, size: local.size }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\nexport type { ButtonProps }\n",
      "path": "src/registry/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/tooltip.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { splitProps, type Component } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as TooltipPrimitive from \"@kobalte/core/tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst Tooltip: Component<TooltipPrimitive.TooltipRootProps> = (props) => {\n  return <TooltipPrimitive.Root gutter={4} {...props} />\n}\n\ntype TooltipContentProps<T extends ValidComponent = \"div\"> =\n  TooltipPrimitive.TooltipContentProps<T> & { class?: string | undefined }\n\nconst TooltipContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TooltipContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as TooltipContentProps, [\"class\"])\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        class={cn(\n          \"z-50 origin-[var(--kb-popover-content-transform-origin)] overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95\",\n          local.class\n        )}\n        {...others}\n      />\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent }\n",
      "path": "src/registry/ui/tooltip.tsx"
    }
  ]
}
