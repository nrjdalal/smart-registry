{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scroll-text",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/scroll-text.tsx",
      "content": "\"use client\";\n\n/**\n * @author: @dorian_baffier\n * @description: Scroll Text\n * @version: 1.0.0\n * @date: 2025-06-26\n * @license: MIT\n * @website: https://kokonutui.com\n * @github: https://github.com/kokonut-labs/kokonutui\n */\n\nimport { useRef, useState, useEffect } from \"react\";\nimport { motion, Variants } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ScrollTextProps {\n    texts?: string[];\n    className?: string;\n}\n\nexport default function ScrollText({\n    texts = [\n        \"TailwindCSS\",\n        \"Kokonut UI\",\n        \"shadcn/ui\",\n        \"Next.js\",\n        \"Vercel\",\n        \"Motion\",\n        \"React\",\n        \"Resend\",\n        \"TypeScript\",\n        \"Fumadocs\",\n        \"Supabase\",\n        \"Vercel\"\n    ],\n    className,\n}: ScrollTextProps) {\n    const [activeIndex, setActiveIndex] = useState(0);\n    const observerRef = useRef<IntersectionObserver | null>(null);\n    const itemsRef = useRef<(HTMLDivElement | null)[]>([]);\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    // Scroll to top on mount\n    useEffect(() => {\n        if (containerRef.current) {\n            containerRef.current.scrollTop = 0;\n        }\n    }, []);\n\n    const handleIntersection = (entries: IntersectionObserverEntry[]) => {\n        entries.forEach((entry) => {\n            if (entry.isIntersecting) {\n                const index = itemsRef.current.findIndex(\n                    (item) => item === entry.target\n                );\n                setActiveIndex(index);\n            }\n        });\n    };\n\n    // Setup intersection observer\n    const setupObserver = (element: HTMLDivElement | null, index: number) => {\n        if (element && !itemsRef.current[index]) {\n            itemsRef.current[index] = element;\n\n            if (!observerRef.current) {\n                observerRef.current = new IntersectionObserver(\n                    handleIntersection,\n                    {\n                        threshold: 0.7,\n                        root: containerRef.current,\n                        rootMargin: \"-45% 0px -45% 0px\",\n                    }\n                );\n            }\n\n            observerRef.current.observe(element);\n        }\n    };\n\n    // Animation variants for the reveal effect\n    const containerVariants: Variants = {\n        hidden: { opacity: 0 },\n        visible: {\n            opacity: 1,\n            transition: {\n                staggerChildren: 0.1,\n            },\n        },\n    };\n\n    const itemVariants: Variants = {\n        hidden: (index: number) => ({\n            opacity: 0,\n            x: index % 2 === 0 ? -100 : 100,\n            rotate: index % 2 === 0 ? -10 : 10,\n        }),\n        visible: {\n            opacity: 1,\n            x: 0,\n            rotate: 0,\n            transition: {\n                type: \"spring\",\n                stiffness: 100,\n                damping: 15,\n                duration: 0.5,\n            },\n        },\n    };\n\n    return (\n        <div className={cn(\"w-full max-w-3xl mx-auto\", className)}>\n            <div\n                ref={containerRef}\n                className={cn(\n                    \"h-[300px] overflow-y-auto scrollbar-none\",\n                    \"relative flex flex-col items-center\",\n                    \"[&::-webkit-scrollbar]:hidden [-ms-overflow-style:none] [scrollbar-width:none]\"\n                )}\n            >\n                <div className=\"h-[150px]\" />\n                <motion.div\n                    variants={containerVariants}\n                    initial=\"hidden\"\n                    animate=\"visible\"\n                    className=\"flex flex-col items-center w-full\"\n                >\n                    {texts.map((text, index) => (\n                        <motion.div\n                            key={text}\n                            ref={(el) => setupObserver(el, index)}\n                            custom={index}\n                            variants={itemVariants}\n                            initial=\"hidden\"\n                            whileInView=\"visible\"\n                            viewport={{ \n                                once: false,\n                                margin: \"-20% 0px -20% 0px\"\n                            }}\n                            className={cn(\n                                \"text-5xl font-bold py-8 px-4 whitespace-nowrap\",\n                                \"transition-colors duration-300\",\n                                activeIndex === index\n                                    ? \"text-black dark:text-white\"\n                                    : \"text-neutral-500/50 dark:text-neutral-600\"\n                            )}\n                        >\n                            {text}\n                        </motion.div>\n                    ))}\n                </motion.div>\n                <div className=\"h-[150px]\" />\n            </div>\n        </div>\n    );\n}\n",
      "path": "components/kokonutui/scroll-text.tsx"
    }
  ]
}
