{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dismiss/index",
  "type": "registry:component",
  "dependencies": [
    "@popperjs/core"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "dom/instances.ts",
      "content": "import { AccordionInterface } from '@/components/accordion/interface';\nimport { CarouselInterface } from '@/components/carousel/interface';\nimport { CollapseInterface } from '@/components/collapse/interface';\nimport { DialInterface } from '@/components/dial/interface';\nimport { DismissInterface } from '@/components/dismiss/interface';\nimport { DrawerInterface } from '@/components/drawer/interface';\nimport { DropdownInterface } from '@/components/dropdown/interface';\nimport { ModalInterface } from '@/components/modal/interface';\nimport { PopoverInterface } from '@/components/popover/interface';\nimport { TabsInterface } from '@/components/tabs/interface';\nimport { TooltipInterface } from '@/components/tooltip/interface';\nimport { InputCounterInterface } from '@/components/input-counter/interface';\nimport { CopyClipboardInterface } from '@/components/clipboard/interface';\nimport { DatepickerInterface } from '@/components/datepicker/interface';\n\nclass Instances {\n    private _instances: {\n        Accordion: { [id: string]: AccordionInterface };\n        Carousel: { [id: string]: CarouselInterface };\n        Collapse: { [id: string]: CollapseInterface };\n        Dial: { [id: string]: DialInterface };\n        Dismiss: { [id: string]: DismissInterface };\n        Drawer: { [id: string]: DrawerInterface };\n        Dropdown: { [id: string]: DropdownInterface };\n        Modal: { [id: string]: ModalInterface };\n        Popover: { [id: string]: PopoverInterface };\n        Tabs: { [id: string]: TabsInterface };\n        Tooltip: { [id: string]: TooltipInterface };\n        InputCounter: { [id: string]: InputCounterInterface };\n        CopyClipboard: { [id: string]: CopyClipboardInterface };\n        Datepicker: { [id: string]: DatepickerInterface };\n    };\n\n    constructor() {\n        this._instances = {\n            Accordion: {},\n            Carousel: {},\n            Collapse: {},\n            Dial: {},\n            Dismiss: {},\n            Drawer: {},\n            Dropdown: {},\n            Modal: {},\n            Popover: {},\n            Tabs: {},\n            Tooltip: {},\n            InputCounter: {},\n            CopyClipboard: {},\n            Datepicker: {},\n        };\n    }\n\n    addInstance(\n        component: keyof Instances['_instances'],\n        instance: any,\n        id?: string,\n        override = false\n    ) {\n        if (!this._instances[component]) {\n            console.warn(`Flowbite: Component ${component} does not exist.`);\n            return false;\n        }\n\n        if (this._instances[component][id] && !override) {\n            console.warn(`Flowbite: Instance with ID ${id} already exists.`);\n            return;\n        }\n\n        if (override && this._instances[component][id]) {\n            this._instances[component][id].destroyAndRemoveInstance();\n        }\n\n        this._instances[component][id ? id : this._generateRandomId()] =\n            instance;\n    }\n\n    getAllInstances() {\n        return this._instances;\n    }\n\n    getInstances(component: keyof Instances['_instances']) {\n        if (!this._instances[component]) {\n            console.warn(`Flowbite: Component ${component} does not exist.`);\n            return false;\n        }\n        return this._instances[component];\n    }\n\n    getInstance(component: keyof Instances['_instances'], id: string) {\n        if (!this._componentAndInstanceCheck(component, id)) {\n            return;\n        }\n\n        if (!this._instances[component][id]) {\n            console.warn(`Flowbite: Instance with ID ${id} does not exist.`);\n            return;\n        }\n        return this._instances[component][id] as any;\n    }\n\n    destroyAndRemoveInstance(\n        component: keyof Instances['_instances'],\n        id: string\n    ) {\n        if (!this._componentAndInstanceCheck(component, id)) {\n            return;\n        }\n        this.destroyInstanceObject(component, id);\n        this.removeInstance(component, id);\n    }\n\n    removeInstance(component: keyof Instances['_instances'], id: string) {\n        if (!this._componentAndInstanceCheck(component, id)) {\n            return;\n        }\n        delete this._instances[component][id];\n    }\n\n    destroyInstanceObject(\n        component: keyof Instances['_instances'],\n        id: string\n    ) {\n        if (!this._componentAndInstanceCheck(component, id)) {\n            return;\n        }\n        this._instances[component][id].destroy();\n    }\n\n    instanceExists(component: keyof Instances['_instances'], id: string) {\n        if (!this._instances[component]) {\n            return false;\n        }\n\n        if (!this._instances[component][id]) {\n            return false;\n        }\n\n        return true;\n    }\n\n    _generateRandomId() {\n        return Math.random().toString(36).substr(2, 9);\n    }\n\n    private _componentAndInstanceCheck(\n        component: keyof Instances['_instances'],\n        id: string\n    ) {\n        if (!this._instances[component]) {\n            console.warn(`Flowbite: Component ${component} does not exist.`);\n            return false;\n        }\n\n        if (!this._instances[component][id]) {\n            console.warn(`Flowbite: Instance with ID ${id} does not exist.`);\n            return false;\n        }\n\n        return true;\n    }\n}\n\nconst instances = new Instances();\n\nexport default instances;\n\nif (typeof window !== 'undefined') {\n    window.FlowbiteInstances = instances;\n}\n",
      "path": "src/dom/instances.ts"
    },
    {
      "type": "registry:file",
      "target": "dom/types.ts",
      "content": "export declare type InstanceOptions = {\n    id?: string;\n    override?: boolean;\n};\n\nexport declare type EventListenerInstance = {\n    element: HTMLElement;\n    type: string;\n    handler: EventListenerOrEventListenerObject;\n};\n",
      "path": "src/dom/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/accordion/interface.ts",
      "content": "// Import the AccordionItem and AccordionOptions interfaces\nimport { AccordionItem, AccordionOptions } from '@/components/accordion/types';\n\n// Define the Accordion interface\nexport declare interface AccordionInterface {\n    _items: AccordionItem[];\n    _options: AccordionOptions;\n\n    getItem(id: string): AccordionItem | undefined;\n    open(id: string): void;\n    toggle(id: string): void;\n    close(id: string): void;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n}\n",
      "path": "src/components/accordion/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/accordion/types.ts",
      "content": "import { AccordionInterface } from '@/components/accordion/interface';\n\nexport declare type AccordionItem = {\n    id: string;\n    triggerEl: HTMLElement;\n    targetEl: HTMLElement;\n    iconEl?: HTMLElement | null;\n    active?: boolean;\n    clickHandler?: EventListenerOrEventListenerObject;\n};\n\nexport declare type AccordionOptions = {\n    alwaysOpen?: boolean;\n    activeClasses?: string;\n    inactiveClasses?: string;\n    onOpen?: (accordion: AccordionInterface, item: AccordionItem) => void;\n    onClose?: (accordion: AccordionInterface, item: AccordionItem) => void;\n    onToggle?: (accordion: AccordionInterface, item: AccordionItem) => void;\n};\n",
      "path": "src/components/accordion/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/carousel/interface.ts",
      "content": "import {\n    CarouselOptions,\n    CarouselItem,\n    IndicatorItem,\n    RotationItems,\n} from '@/components/carousel/types';\n\nexport declare interface CarouselInterface {\n    _items: CarouselItem[];\n    _indicators: IndicatorItem[];\n    _activeItem: CarouselItem;\n    _intervalDuration: number;\n    _intervalInstance: number;\n    _options: CarouselOptions;\n\n    init(): void;\n\n    getItem(position: number): CarouselItem;\n    getActiveItem(): CarouselItem;\n\n    _setActiveItem(item: CarouselItem): void;\n\n    slideTo(position: number): void;\n\n    next(): void;\n    prev(): void;\n\n    _rotate(rotationItems: RotationItems): void;\n    cycle(): void;\n    pause(): void;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n}\n",
      "path": "src/components/carousel/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/carousel/types.ts",
      "content": "import { CarouselInterface } from '@/components/carousel/interface';\n\nexport declare type CarouselItem = {\n    position: number;\n    el: HTMLElement;\n};\n\nexport declare type IndicatorItem = {\n    position: number;\n    el: HTMLElement;\n};\n\nexport declare type RotationItems = {\n    left: CarouselItem;\n    middle: CarouselItem;\n    right: CarouselItem;\n};\n\nexport declare type CarouselOptions = {\n    defaultPosition?: number;\n    indicators?: {\n        items?: IndicatorItem[];\n        activeClasses?: string;\n        inactiveClasses?: string;\n    };\n    interval?: number;\n    onNext?: (carousel: CarouselInterface) => void;\n    onPrev?: (carousel: CarouselInterface) => void;\n    onChange?: (carousel: CarouselInterface) => void;\n};\n",
      "path": "src/components/carousel/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/clipboard/interface.ts",
      "content": "import { CopyClipboardOptions } from '@/components/clipboard/types';\n\nexport declare interface CopyClipboardInterface {\n    _triggerEl: HTMLElement | null;\n    _targetEl: HTMLElement | HTMLInputElement | null;\n    _options: CopyClipboardOptions;\n\n    init(): void;\n    copy(): string;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n}\n",
      "path": "src/components/clipboard/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/clipboard/types.ts",
      "content": "import { CopyClipboardInterface } from '@/components/clipboard/interface';\n\nexport declare type CopyClipboardOptions = {\n    htmlEntities: boolean;\n    contentType?: string;\n    onCopy?: (clipboard: CopyClipboardInterface) => void;\n};\n",
      "path": "src/components/clipboard/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/collapse/interface.ts",
      "content": "import { CollapseOptions } from '@/components/collapse/types';\n\nexport declare interface CollapseInterface {\n    _targetEl: HTMLElement | null;\n    _triggerEl: HTMLElement | null;\n    _options: CollapseOptions;\n    _visible: boolean;\n\n    init(): void;\n    collapse(): void;\n    expand(): void;\n    toggle(): void;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n}\n",
      "path": "src/components/collapse/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/collapse/types.ts",
      "content": "import { CollapseInterface } from '@/components/collapse/interface';\n\nexport declare type CollapseOptions = {\n    onCollapse?: (collapse: CollapseInterface) => void;\n    onExpand?: (collapse: CollapseInterface) => void;\n    onToggle?: (collapse: CollapseInterface) => void;\n};\n",
      "path": "src/components/collapse/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/datepicker/interface.ts",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { DatepickerOptions } from '@/components/datepicker/types';\n\nexport declare interface DatepickerInterface {\n    _datepickerEl: HTMLElement;\n    _datepickerInstance: any | null;\n    _options: DatepickerOptions;\n\n    init(): void;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n}\n",
      "path": "src/components/datepicker/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/datepicker/types.ts",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { DatepickerInterface } from '@/components/datepicker/interface';\n\nexport interface DatepickerOptions {\n    defaultDatepickerId?: string | null;\n    autohide?: boolean;\n    format?: string;\n    maxDate?: string | null;\n    minDate?: string | null;\n    orientation?: string;\n    buttons?: boolean;\n    autoSelectToday?: number;\n    title?: string | null;\n    language?: string;\n    locales?: { [key: string]: any };\n    rangePicker?: boolean | false;\n    onShow?: (Datepicker: DatepickerInterface) => void;\n    onHide?: (Datepicker: DatepickerInterface) => void;\n}\n",
      "path": "src/components/datepicker/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/dial/interface.ts",
      "content": "import { DialOptions, DialTriggerEventTypes, DialTriggerType } from '@/components/dial/types';\n\nexport declare interface DialInterface {\n    _parentEl: HTMLElement;\n    _triggerEl: HTMLElement;\n    _targetEl: HTMLElement;\n    _options: DialOptions;\n    _visible: boolean;\n\n    init(): void;\n    isVisible(): boolean;\n    isHidden(): boolean;\n    hide(): void;\n    show(): void;\n    toggle(): void;\n    _getTriggerEventTypes(triggerType: DialTriggerType): DialTriggerEventTypes;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n}\n",
      "path": "src/components/dial/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/dial/types.ts",
      "content": "import { DialInterface } from '@/components/dial/interface';\n\nexport declare type DialTriggerType = 'click' | 'hover' | 'none';\n\nexport declare type DialTriggerEventTypes = {\n    showEvents: string[];\n    hideEvents: string[];\n};\n\nexport declare type DialOptions = {\n    triggerType?: DialTriggerType;\n    onShow?: (dial: DialInterface) => void;\n    onHide?: (dial: DialInterface) => void;\n    onToggle?: (dial: DialInterface) => void;\n};\n",
      "path": "src/components/dial/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/dismiss/index.ts",
      "content": "/* eslint-disable @typescript-eslint/no-empty-function */\nimport type { DismissOptions } from '@/components/dismiss/types';\nimport type { InstanceOptions } from '@/dom/types';\nimport { DismissInterface } from '@/components/dismiss/interface';\nimport instances from '@/dom/instances';\n\nconst Default: DismissOptions = {\n    transition: 'transition-opacity',\n    duration: 300,\n    timing: 'ease-out',\n    onHide: () => {},\n};\n\nconst DefaultInstanceOptions: InstanceOptions = {\n    id: null,\n    override: true,\n};\n\nclass Dismiss implements DismissInterface {\n    _instanceId: string;\n    _targetEl: HTMLElement | null;\n    _triggerEl: HTMLElement | null;\n    _options: DismissOptions;\n    _initialized: boolean;\n    _clickHandler: EventListenerOrEventListenerObject;\n\n    constructor(\n        targetEl: HTMLElement | null = null,\n        triggerEl: HTMLElement | null = null,\n        options: DismissOptions = Default,\n        instanceOptions: InstanceOptions = DefaultInstanceOptions\n    ) {\n        this._instanceId = instanceOptions.id\n            ? instanceOptions.id\n            : targetEl.id;\n        this._targetEl = targetEl;\n        this._triggerEl = triggerEl;\n        this._options = { ...Default, ...options };\n        this._initialized = false;\n        this.init();\n        instances.addInstance(\n            'Dismiss',\n            this,\n            this._instanceId,\n            instanceOptions.override\n        );\n    }\n\n    init() {\n        if (this._triggerEl && this._targetEl && !this._initialized) {\n            this._clickHandler = () => {\n                this.hide();\n            };\n            this._triggerEl.addEventListener('click', this._clickHandler);\n            this._initialized = true;\n        }\n    }\n\n    destroy() {\n        if (this._triggerEl && this._initialized) {\n            this._triggerEl.removeEventListener('click', this._clickHandler);\n            this._initialized = false;\n        }\n    }\n\n    removeInstance() {\n        instances.removeInstance('Dismiss', this._instanceId);\n    }\n\n    destroyAndRemoveInstance() {\n        this.destroy();\n        this.removeInstance();\n    }\n\n    hide() {\n        this._targetEl.classList.add(\n            this._options.transition,\n            `duration-${this._options.duration}`,\n            this._options.timing,\n            'opacity-0'\n        );\n        setTimeout(() => {\n            this._targetEl.classList.add('hidden');\n        }, this._options.duration);\n\n        // callback function\n        this._options.onHide(this, this._targetEl);\n    }\n\n    updateOnHide(callback: () => void) {\n        this._options.onHide = callback;\n    }\n}\n\nexport function initDismisses() {\n    document.querySelectorAll('[data-dismiss-target]').forEach(($triggerEl) => {\n        const targetId = $triggerEl.getAttribute('data-dismiss-target');\n        const $dismissEl = document.querySelector(targetId);\n\n        if ($dismissEl) {\n            new Dismiss($dismissEl as HTMLElement, $triggerEl as HTMLElement);\n        } else {\n            console.error(\n                `The dismiss element with id \"${targetId}\" does not exist. Please check the data-dismiss-target attribute.`\n            );\n        }\n    });\n}\n\nif (typeof window !== 'undefined') {\n    window.Dismiss = Dismiss;\n    window.initDismisses = initDismisses;\n}\n\nexport default Dismiss;\n",
      "path": "src/components/dismiss/index.ts"
    },
    {
      "type": "registry:component",
      "target": "components/dismiss/interface.ts",
      "content": "import { DismissOptions } from '@/components/dismiss/types';\n\nexport declare interface DismissInterface {\n    _targetEl: HTMLElement | null;\n    _triggerEl: HTMLElement | null;\n    _options: DismissOptions;\n\n    init(): void;\n    hide(): void;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n}\n",
      "path": "src/components/dismiss/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/dismiss/types.ts",
      "content": "import { DismissInterface } from '@/components/dismiss/interface';\n\nexport declare type DismissOptions = {\n    transition?: string;\n    duration?: number;\n    timing?: string;\n    onHide?: (dismiss: DismissInterface, targetEl: HTMLElement) => void;\n};\n",
      "path": "src/components/dismiss/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/drawer/interface.ts",
      "content": "import { DrawerOptions, PlacementClasses } from '@/components/drawer/types';\n\nexport declare interface DrawerInterface {\n    // properties\n    _targetEl: HTMLElement;\n    _triggerEl: HTMLElement;\n    _options: DrawerOptions;\n    _visible: boolean;\n\n    // methods\n    init(): void;\n    isVisible(): boolean;\n    isHidden(): boolean;\n    hide(): void;\n    show(): void;\n    toggle(): void;\n    _createBackdrop(): void;\n    _destroyBackdropEl(): void;\n    _getPlacementClasses(placement: string): PlacementClasses;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n\n    addEventListenerInstance(\n        element: HTMLElement,\n        type: string,\n        handler: EventListenerOrEventListenerObject\n    ): void;\n    removeAllEventListenerInstances(): void;\n    getAllEventListenerInstances(): void;\n}\n",
      "path": "src/components/drawer/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/drawer/types.ts",
      "content": "import { DrawerInterface } from '@/components/drawer/interface';\n\nexport declare type DrawerOptions = {\n    placement?: string;\n    bodyScrolling?: boolean;\n    backdrop?: boolean;\n    edge?: boolean;\n    edgeOffset?: string;\n    backdropClasses?: string;\n    onShow?: (drawer: DrawerInterface) => void;\n    onHide?: (drawer: DrawerInterface) => void;\n    onToggle?: (drawer: DrawerInterface) => void;\n};\n\nexport declare type PlacementClasses = {\n    base: string[];\n    active: string[];\n    inactive: string[];\n};\n",
      "path": "src/components/drawer/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/dropdown/interface.ts",
      "content": "import {\n    DropdownOptions,\n    DropdownTriggerType,\n    DropdownTriggerEventTypes,\n} from '@/components/dropdown/types';\nimport type { Instance as PopperInstance } from '@popperjs/core';\n\nexport declare interface DropdownInterface {\n    _targetEl: HTMLElement;\n    _triggerEl: HTMLElement;\n    _options: DropdownOptions;\n    _visible: boolean;\n    _popperInstance: PopperInstance;\n    _initialized: boolean;\n    _clickOutsideEventListener: EventListenerOrEventListenerObject;\n\n    init(): void;\n    _createPopperInstance(): PopperInstance;\n    _setupEventListeners(): void;\n    _setupClickOutsideListener(): void;\n    _removeClickOutsideListener(): void;\n    _handleClickOutside(ev: Event, targetEl: HTMLElement): void;\n    _getTriggerEvents(\n        triggerType: DropdownTriggerType\n    ): DropdownTriggerEventTypes;\n    isVisible(): boolean;\n    toggle(): void;\n    show(): void;\n    hide(): void;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n}\n",
      "path": "src/components/dropdown/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/dropdown/types.ts",
      "content": "import { DropdownInterface } from '@/components/dropdown/interface';\nimport type { Placement } from '@popperjs/core';\n\nexport declare type DropdownTriggerType = 'click' | 'hover' | 'none';\n\nexport declare type DropdownTriggerEventTypes = {\n    showEvents: string[];\n    hideEvents: string[];\n};\n\nexport declare type DropdownOptions = {\n    placement?: Placement;\n    triggerType?: DropdownTriggerType;\n    offsetSkidding?: number;\n    offsetDistance?: number;\n    ignoreClickOutsideClass?: string | boolean;\n    delay?: number;\n    onShow?: (tooltip: DropdownInterface) => void;\n    onHide?: (tooltip: DropdownInterface) => void;\n    onToggle?: (tooltip: DropdownInterface) => void;\n};\n",
      "path": "src/components/dropdown/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/input-counter/interface.ts",
      "content": "import { InputCounterOptions } from '@/components/input-counter/types';\n\nexport declare interface InputCounterInterface {\n    _targetEl: HTMLElement | null;\n    _incrementEl: HTMLElement | null;\n    _decrementEl: HTMLElement | null;\n    _options: InputCounterOptions;\n\n    init(): void;\n    increment(): void;\n    decrement(): void;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n}\n",
      "path": "src/components/input-counter/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/input-counter/types.ts",
      "content": "import { InputCounterInterface } from '@/components/input-counter/interface';\n\nexport declare type InputCounterOptions = {\n    minValue?: number | null;\n    maxValue?: number | null;\n    onIncrement?: (InputCounter: InputCounterInterface) => void;\n    onDecrement?: (InputCounter: InputCounterInterface) => void;\n};\n",
      "path": "src/components/input-counter/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/modal/interface.ts",
      "content": "import { ModalOptions } from '@/components/modal/types';\n\nexport declare interface ModalInterface {\n    // The HTMLElement that will be used as the modal container\n    _targetEl: HTMLElement | null;\n\n    // An object that defines the options for the modal, such as its placement and backdrop\n    _options: ModalOptions;\n\n    // A boolean that indicates whether the modal is currently hidden\n    _isHidden: boolean;\n\n    // The HTMLElement that will be used as the modal's backdrop\n    _backdropEl: HTMLElement | null;\n\n    _clickOutsideEventListener: EventListenerOrEventListenerObject;\n\n    _keydownEventListener: EventListenerOrEventListenerObject;\n\n    // Initializes the modal and sets up its event listeners\n    init(): void;\n\n    // Creates the modal's backdrop element and adds it to the DOM\n    _createBackdrop(): void;\n\n    // Removes the modal's backdrop element from the DOM\n    _destroyBackdropEl(): void;\n\n    // Sets up event listeners for the modal to allow it to be closed when clicked outside or the Escape key is pressed\n    _setupModalCloseEventListeners(): void;\n\n    // Handles clicks outside the modal and hides it if necessary\n    _handleOutsideClick(target: EventTarget): void;\n\n    // Returns an array of CSS classes that should be applied to the modal based on its placement option\n    _getPlacementClasses(): string[];\n\n    // Toggles the visibility of the modal and calls the onToggle callback function\n    toggle(): void;\n\n    // Shows the modal and calls the onShow callback function\n    show(): void;\n\n    // Hides the modal and calls the onHide callback function\n    hide(): void;\n\n    // return true if modal is hidden\n    isHidden(): boolean;\n\n    // return true if modal is visible\n    isVisible(): boolean;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n    addEventListenerInstance(\n        element: HTMLElement,\n        type: string,\n        handler: EventListenerOrEventListenerObject\n    ): void;\n    removeAllEventListenerInstances(): void;\n    getAllEventListenerInstances(): void;\n}\n",
      "path": "src/components/modal/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/modal/types.ts",
      "content": "import { ModalInterface } from '@/components/modal/interface';\n\nexport declare type modalBackdrop = 'static' | 'dynamic';\nexport declare type modalPlacement =\n    | 'top-left'\n    | 'top-center'\n    | 'top-right'\n    | 'center-left'\n    | 'center'\n    | 'center-right'\n    | 'bottom-left'\n    | 'bottom-center'\n    | 'bottom-right';\n\nexport declare type ModalOptions = {\n    placement?: modalPlacement;\n    backdropClasses?: string;\n    backdrop?: modalBackdrop;\n    closable?: boolean;\n    onShow?: (modal: ModalInterface) => void;\n    onHide?: (modal: ModalInterface) => void;\n    onToggle?: (modal: ModalInterface) => void;\n};\n",
      "path": "src/components/modal/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/popover/interface.ts",
      "content": "import {\n    PopoverOptions,\n    PopoverTriggerType,\n    PopoverTriggerEventTypes,\n} from '@/components/popover/types';\nimport type { Instance as PopperInstance } from '@popperjs/core';\n\nexport declare interface PopoverInterface {\n    _targetEl: HTMLElement | null;\n    _triggerEl: HTMLElement | null;\n    _options: PopoverOptions;\n    _popperInstance: PopperInstance;\n    _clickOutsideEventListener: EventListenerOrEventListenerObject;\n    _keydownEventListener: EventListenerOrEventListenerObject;\n\n    init(): void;\n    _setupEventListeners(): void;\n    _setupClickOutsideListener(): void;\n    _removeClickOutsideListener(): void;\n    _setupKeydownListener(): void;\n    _removeKeydownListener(): void;\n    _handleClickOutside(ev: Event, targetEl: HTMLElement): void;\n    _getTriggerEvents(\n        triggerType: PopoverTriggerType\n    ): PopoverTriggerEventTypes;\n    isVisible(): boolean;\n    show(): void;\n    hide(): void;\n    toggle(): void;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n}\n",
      "path": "src/components/popover/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/popover/types.ts",
      "content": "import { PopoverInterface } from '@/components/popover/interface';\nimport type { Placement } from '@popperjs/core';\n\nexport declare type PopoverTriggerType = 'click' | 'hover' | 'none';\n\nexport declare type PopoverTriggerEventTypes = {\n    showEvents: string[];\n    hideEvents: string[];\n};\n\nexport declare type PopoverOptions = {\n    placement?: Placement;\n    offset?: number;\n    triggerType?: PopoverTriggerType;\n    onShow?: (tooltip: PopoverInterface) => void;\n    onHide?: (tooltip: PopoverInterface) => void;\n    onToggle?: (tooltip: PopoverInterface) => void;\n};\n",
      "path": "src/components/popover/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/tabs/interface.ts",
      "content": "import { TabItem, TabsOptions } from '@/components/tabs/types';\n\nexport declare interface TabsInterface {\n    _tabsEl: HTMLElement;\n    _items: TabItem[];\n    _activeTab: TabItem;\n    _options: TabsOptions;\n\n    init(): void;\n    setActiveTab(tab: TabItem): void;\n    getActiveTab(): TabItem;\n    getTab(id: string): TabItem;\n    show(id: string, forceShow?: boolean): void;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n}\n",
      "path": "src/components/tabs/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/tabs/types.ts",
      "content": "import { TabsInterface } from '@/components/tabs/interface';\n\nexport declare type TabsOptions = {\n    defaultTabId?: string;\n    activeClasses?: string;\n    inactiveClasses?: string;\n    onShow?: (tabs: TabsInterface, tab: TabItem) => void;\n};\n\nexport declare type TabItem = {\n    id: string;\n    triggerEl: HTMLElement;\n    targetEl: HTMLElement;\n};\n",
      "path": "src/components/tabs/types.ts"
    },
    {
      "type": "registry:component",
      "target": "components/tooltip/interface.ts",
      "content": "import {\n    TooltipOptions,\n    TooltipTriggerType,\n    TooltipTriggerEventTypes,\n} from '@/components/tooltip/types';\nimport type { Instance as PopperInstance } from '@popperjs/core';\n\nexport declare interface TooltipInterface {\n    _targetEl: HTMLElement | null;\n    _triggerEl: HTMLElement | null;\n    _options: TooltipOptions;\n    _popperInstance: PopperInstance;\n    _clickOutsideEventListener: EventListenerOrEventListenerObject;\n    _keydownEventListener: EventListenerOrEventListenerObject;\n\n    init(): void;\n    _setupEventListeners(): void;\n    _setupClickOutsideListener(): void;\n    _removeClickOutsideListener(): void;\n    _setupKeydownListener(): void;\n    _removeKeydownListener(): void;\n    _handleClickOutside(ev: Event, targetEl: HTMLElement): void;\n    _getTriggerEvents(\n        triggerType: TooltipTriggerType\n    ): TooltipTriggerEventTypes;\n    isVisible(): boolean;\n    show(): void;\n    hide(): void;\n    toggle(): void;\n\n    destroy(): void;\n    removeInstance(): void;\n    destroyAndRemoveInstance(): void;\n}\n",
      "path": "src/components/tooltip/interface.ts"
    },
    {
      "type": "registry:component",
      "target": "components/tooltip/types.ts",
      "content": "import { TooltipInterface } from '@/components/tooltip/interface';\nimport type { Placement } from '@popperjs/core';\n\nexport declare type TooltipTriggerType = 'click' | 'hover' | 'none';\n\nexport declare type TooltipTriggerEventTypes = {\n    showEvents: string[];\n    hideEvents: string[];\n};\n\nexport declare type TooltipOptions = {\n    placement?: Placement;\n    triggerType?: TooltipTriggerType;\n    onShow?: (tooltip: TooltipInterface) => void;\n    onHide?: (tooltip: TooltipInterface) => void;\n    onToggle?: (tooltip: TooltipInterface) => void;\n};\n",
      "path": "src/components/tooltip/types.ts"
    }
  ]
}
