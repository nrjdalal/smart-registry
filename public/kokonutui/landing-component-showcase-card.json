{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "landing-component-showcase-card",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "motion",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/landing/component-showcase-card.tsx",
      "content": "import Input_10 from \"@/components/kokonutui/input/input-10\";\nimport Alert04 from \"@/components/kokonutui/alert/alert-04\";\nimport Input_08 from \"@/components/kokonutui/input/input-08\";\nimport Btn12 from \"@/components/kokonutui/button/btn-12\";\nimport Btn13 from \"@/components/kokonutui/button/btn-13\";\n\ninterface ComponentShowcaseCardProps {\n    className: string;\n}\n\nexport function ComponentShowcaseCard({\n    className,\n}: ComponentShowcaseCardProps) {\n    return (\n        <div className={className}>\n            <div className=\"text-2xl sm:text-3xl font-bold tracking-tight bg-clip-text text-transparent bg-linear-to-r from-zinc-700 to-zinc-400 dark:from-zinc-100 dark:to-zinc-400\">\n                Buttons, Inputs & More\n            </div>\n\n            <div className=\"space-y-12\">\n                <div className=\"space-y-20 mt-8\">\n                    {[\n                        { component: <Input_10 />, label: \"Input 10\" },\n                        { component: <Alert04 />, label: \"Alert 04\" },\n                        {\n                            component: (\n                                <div className=\"w-full flex justify-center gap-4\">\n                                    <Btn13 className=\"w-full\" label=\"Welcome\" />\n                                    <Btn12 className=\"w-full\" label=\"Button\" />\n                                </div>\n                            ),\n                            label: \"Welcome\",\n                        },\n                    ].map((btn, index) => (\n                        <div\n                            key={index}\n                            className=\"flex flex-col items-center gap-8\"\n                        >\n                            <div className=\"h-16 flex items-center gap-8\">\n                                {btn.component}\n                            </div>\n                        </div>\n                    ))}\n                </div>\n\n                <div className=\"flex flex-col items-center pt-8\">\n                    <Input_08 label=\"\" />\n                </div>\n            </div>\n\n            <p className=\"text-sm text-center text-zinc-500 dark:text-zinc-400 mt-4\">\n                + more available\n            </p>\n        </div>\n    );\n}\n",
      "path": "components/landing/component-showcase-card.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/kokonutui/alert/alert-04.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"motion/react\";\nimport { PartyPopper } from \"lucide-react\";\n\nexport default function Alert04() {\n    return (\n        <motion.div\n            initial={{ opacity: 0, y: -8 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"w-full max-w-xl mx-auto\"\n        >\n            <div\n                className={cn(\n                    \"relative overflow-hidden\",\n                    \"bg-linear-to-b from-violet-50 to-white\",\n                    \"dark:from-violet-950/20 dark:to-zinc-950\",\n                    \"border border-violet-100 dark:border-violet-900/50\",\n                    \"shadow-[0_1px_6px_0_rgba(139,92,246,0.06)]\",\n                    \"rounded-xl p-4\"\n                )}\n            >\n                <div className=\"flex items-center gap-4\">\n                    <motion.div\n                        initial={{ rotate: -15, scale: 0.5 }}\n                        animate={{ rotate: 0, scale: 1 }}\n                        transition={{\n                            type: \"spring\",\n                            stiffness: 300,\n                            damping: 20,\n                        }}\n                    >\n                        <div\n                            className={cn(\n                                \"p-2.5 rounded-xl\",\n                                \"bg-linear-to-br from-fuchsia-500 via-violet-500 to-indigo-500\",\n                                \"dark:from-fuchsia-600 dark:via-violet-600 dark:to-indigo-600\"\n                            )}\n                        >\n                            <PartyPopper className=\"h-5 w-5 text-white\" />\n                        </div>\n                    </motion.div>\n\n                    <div className=\"space-y-1\">\n                        <motion.h3\n                            initial={{ opacity: 0, x: 20 }}\n                            animate={{ opacity: 1, x: 0 }}\n                            transition={{ delay: 0.1 }}\n                            className={cn(\n                                \"font-medium\",\n                                \"text-violet-900 dark:text-violet-100\"\n                            )}\n                        >\n                            Amazing milestone! ðŸŽ‰\n                        </motion.h3>\n                        <motion.p\n                            initial={{ opacity: 0, x: 20 }}\n                            animate={{ opacity: 1, x: 0 }}\n                            transition={{ delay: 0.2 }}\n                            className={cn(\n                                \"text-sm\",\n                                \"text-violet-600 dark:text-violet-300\"\n                            )}\n                        >\n                            You've just hit 1,000 followers on your journey!\n                        </motion.p>\n                    </div>\n                </div>\n\n                <div className=\"hidden sm:block absolute top-4 right-4\">\n                    <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{\n                            type: \"spring\",\n                            stiffness: 300,\n                            damping: 20,\n                            delay: 0.3,\n                        }}\n                        className={cn(\n                            \"text-[11px] font-medium\",\n                            \"px-2.5 py-0.5 rounded-full\",\n                            \"bg-linear-to-r from-fuchsia-500/10 via-violet-500/10 to-indigo-500/10\",\n                            \"dark:from-fuchsia-500/20 dark:via-violet-500/20 dark:to-indigo-500/20\",\n                            \"text-violet-700 dark:text-violet-200\",\n                            \"ring-1 ring-violet-500/20 dark:ring-violet-400/20\"\n                        )}\n                    >\n                        Milestone\n                    </motion.div>\n                </div>\n            </div>\n        </motion.div>\n    );\n}\n",
      "path": "components/kokonutui/alert/alert-04.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/kokonutui/button/btn-12.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Btn12Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    label?: string;\n    className?: string;\n}\n\nexport default function Btn12({ label = \"Fancy Button\", className, ...props }: Btn12Props) {\n    return (\n        <Button\n            variant=\"ghost\"\n            className={cn(\n                \"group relative w-1/2 h-12 px-4 rounded-lg overflow-hidden transition-all duration-500\",\n                className\n            )}\n            {...props}\n        >\n            <div className=\"absolute inset-0 rounded-lg p-[2px] bg-linear-to-b from-[#654358] via-[#17092A] to-[#2F0D64]\">\n                <div className=\"absolute inset-0 bg-[#170928] rounded-lg opacity-90\" />\n            </div>\n\n            <div className=\"absolute inset-[2px] bg-[#170928] rounded-lg opacity-95\" />\n\n            <div className=\"absolute inset-[2px] bg-linear-to-r from-[#170928] via-[#1d0d33] to-[#170928] rounded-lg opacity-90\" />\n            <div className=\"absolute inset-[2px] bg-linear-to-b from-[#654358]/40 via-[#1d0d33] to-[#2F0D64]/30 rounded-lg opacity-80\" />\n            <div className=\"absolute inset-[2px] bg-linear-to-br from-[#C787F6]/10 via-[#1d0d33] to-[#2A1736]/50 rounded-lg\" />\n\n            <div className=\"absolute inset-[2px] shadow-[inset_0_0_15px_rgba(199,135,246,0.15)] rounded-lg\" />\n\n            <div className=\"relative flex items-center justify-center gap-2\">\n                <span className=\"text-lg font-light bg-linear-to-b from-[#D69DDE] to-[#B873F8] bg-clip-text text-transparent drop-shadow-[0_0_12px_rgba(199,135,246,0.4)] tracking-tighter\">\n                    {label}\n                </span>\n            </div>\n\n            <div className=\"absolute inset-[2px] opacity-0 transition-opacity duration-300 bg-linear-to-r from-[#2A1736]/20 via-[#C787F6]/10 to-[#2A1736]/20 group-hover:opacity-100 rounded-lg\" />\n        </Button>\n    );\n}\n",
      "path": "components/kokonutui/button/btn-12.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/kokonutui/button/btn-13.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Btn13Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    icon?: string;\n    label?: string;\n    className?: string;\n}\n\nexport default function Btn13({\n    label = \"Welcome\",\n    className,\n    ...props\n}: Btn13Props) {\n    return (\n        <Button\n            variant=\"ghost\"\n            className={cn(\n                \"group relative w-1/2 h-12 px-4rounded-lg overflow-hidden transition-all duration-500\",\n                className\n            )}\n            {...props}\n        >\n            {/* Gradient border using pseudo-element */}\n            <div className=\"absolute inset-0 rounded-lg p-[2px] bg-linear-to-b from-[#336C4F] via-[#0C1F21] to-[#0D6437]\">\n                <div className=\"absolute inset-0 bg-[#0C1F21] rounded-lg opacity-90\" />\n            </div>\n\n            {/* Base dark background */}\n            <div className=\"absolute inset-[2px] bg-[#0C1F21] rounded-lg opacity-95\" />\n\n            {/* Multiple gradient layers */}\n            <div className=\"absolute inset-[2px] bg-linear-to-r from-[#0C1F21] via-[#0C1F21] to-[#0C1F21] rounded-lg opacity-90\" />\n            <div className=\"absolute inset-[2px] bg-linear-to-b from-[#347B52]/40 via-[#0C1F21] to-[#0D6437]/30 rounded-lg opacity-80\" />\n            <div className=\"absolute inset-[2px] bg-linear-to-br from-[#87F6B7]/10 via-[#0C1F21] to-[#17362A]/50 rounded-lg\" />\n\n            {/* Subtle edge glow */}\n            <div className=\"absolute inset-[2px] shadow-[inset_0_0_10px_rgba(135,246,183,0.1)] rounded-lg\" />\n\n            {/* Content wrapper */}\n            <div className=\"relative flex items-center justify-center gap-2\">\n                <span className=\"text-lg font-light bg-linear-to-b from-[#8AEECA] to-[#73F8A8] bg-clip-text text-transparent drop-shadow-[0_0_12px_rgba(135,246,183,0.4)] tracking-tighter\">\n                    {label}\n                </span>\n            </div>\n\n            {/* Hover effects */}\n            <div className=\"absolute inset-[2px] opacity-0 transition-opacity duration-300 bg-linear-to-r from-[#17362A]/20 via-[#87F6B7]/10 to-[#17362A]/20 group-hover:opacity-100 rounded-lg\" />\n        </Button>\n    );\n}\n",
      "path": "components/kokonutui/button/btn-13.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/kokonutui/input/input-08.tsx",
      "content": "\"use client\";\n\nimport { useState, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Check, Copy } from \"lucide-react\";\nimport { useCopyToClipboard } from \"@/hooks/use-copy-to-clipboard\";\n\ninterface ColorInputProps {\n  onChange?: (color: string) => void; // Callback for final color\n  defaultValue?: string; // Default color\n  swatches?: string[]; // Swatches for quick selection\n  showOpacity?: boolean; // Whether to show the opacity slider\n  label?: string; // Label for the input\n}\n\nconst defaultSwatches = [\n  \"#ef4444\",\n  \"#f97316\",\n  \"#f59e0b\",\n  \"#84cc16\",\n  \"#22c55e\",\n  \"#06b6d4\",\n  \"#3b82f6\",\n  \"#6366f1\",\n  \"#8b5cf6\",\n  \"#d946ef\",\n  \"#ec4899\",\n  \"#f43f5e\",\n];\n\n// Helper to calculate final color with opacity\nconst generateFinalColor = (color: string, opacity: number): string => {\n  if (opacity === 100) return color; // No need to calculate if opacity is 100%\n  const alpha = Math.round(opacity * 2.55) // Convert opacity (0-100) to 0-255\n    .toString(16) // Convert to hexadecimal\n    .padStart(2, \"0\"); // Ensure 2 digits (e.g., \"0F\")\n  return `${color}${alpha}`;\n};\n\nexport default function Input_08({\n  onChange,\n  defaultValue = \"#3b82f6\",\n  swatches = defaultSwatches,\n  showOpacity = true,\n  label = \"Color\",\n}: ColorInputProps) {\n  const [color, setColor] = useState(defaultValue); // Base color without opacity\n  const [opacity, setOpacity] = useState(100); // Opacity (0-100)\n  const { isCopied, copyToClipboard } = useCopyToClipboard();\n\n  const finalColor = generateFinalColor(color, opacity); // Calculate the final color\n\n  // Trigger the onChange callback whenever color or opacity changes\n  const updateFinalColor = (newColor: string, newOpacity = opacity) => {\n    const updatedColor = generateFinalColor(newColor, newOpacity);\n    setColor(newColor);\n    onChange?.(updatedColor); // Pass final color to parent\n  };\n\n  const updateOpacity = (newOpacity: number) => {\n    setOpacity(newOpacity);\n    onChange?.(generateFinalColor(color, newOpacity)); // Pass final color to parent\n  };\n\n  const handleCopy = () => {\n    copyToClipboard(finalColor); // Copy the final color\n  };\n\n  return (\n    <div className=\"w-full max-w-xs space-y-2 relative z-10 min-h-[200px]\">\n      {label && (\n        <label\n          htmlFor=\"color-input\"\n          className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\"\n        >\n          {label}\n        </label>\n      )}\n\n      {/* Color Picker */}\n      <div className=\"p-3 bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-lg\">\n        {/* Color Preview & Input */}\n        <div className=\"flex gap-2 items-center\">\n          <div\n            className=\"w-8 h-8 rounded-md border border-zinc-200 dark:border-zinc-700\"\n            style={{ backgroundColor: finalColor }} // Display final color\n          />\n          <input\n            id=\"color-input\"\n            type=\"text\"\n            value={finalColor.toUpperCase()} // Show final color\n            onChange={(e) => {\n              const value = e.target.value.slice(0, 7); // Extract base color\n              if (/^#[0-9A-F]{6}$/i.test(value)) {\n                updateFinalColor(value);\n              }\n            }}\n            className={cn(\n              \"flex-1 px-2 py-1 rounded-md border border-zinc-200 dark:border-zinc-800\",\n              \"bg-white dark:bg-zinc-900 text-sm font-mono\",\n              \"focus:outline-hidden focus:ring-2 focus:ring-indigo-500/20\"\n            )}\n          />\n          <button type=\"button\" onClick={handleCopy} className=\"ml-2 hover:opacity-70\">\n            {isCopied ? (\n              <Check className=\"w-4 h-4 text-green-500\" />\n            ) : (\n              <Copy className=\"w-4 h-4 text-zinc-500\" />\n            )}\n          </button>\n        </div>\n\n        {/* Opacity Slider */}\n        {showOpacity && (\n          <div className=\"mt-4 space-y-1.5\">\n            <div className=\"flex justify-between text-xs\">\n              <span>Opacity</span>\n              <span>{opacity}%</span>\n            </div>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              value={opacity}\n              onChange={(e) => updateOpacity(Number(e.target.value))}\n              className={cn(\n                \"w-full h-2 rounded-full appearance-none\",\n                \"bg-linear-to-r from-transparent to-current cursor-pointer\"\n              )}\n              style={{ color }}\n            />\n          </div>\n        )}\n\n        {/* Color Swatches */}\n        <div className=\"mt-4 space-y-1.5\">\n          <div className=\"text-xs font-medium text-zinc-600 dark:text-zinc-400\">Swatches</div>\n          <div className=\"grid grid-cols-6 gap-1\">\n            {swatches.map((swatch) => (\n              <button\n                type=\"button\"\n                key={swatch}\n                onClick={() => updateFinalColor(swatch)}\n                className={cn(\n                  \"w-6 h-6 rounded-md border border-zinc-200 dark:border-zinc-700\",\n                  \"transition-transform hover:scale-110 relative\"\n                )}\n                style={{ backgroundColor: swatch }}\n              >\n                {color === swatch && (\n                  <Check\n                    className={cn(\n                      \"w-4 h-4 absolute inset-0 m-auto text-white\",\n                      \"drop-shadow-[0_1px_1px_rgba(0,0,0,0.5)]\"\n                    )}\n                  />\n                )}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "path": "components/kokonutui/input/input-08.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/kokonutui/input/input-10.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronRight, ChevronLeft } from \"lucide-react\";\n\nconst moodStates = [\n    { value: 0, label: \"Not Happy\", color: \"#EF4444\" },\n    { value: 50, label: \"Good\", color: \"#F59E0B\" },\n    { value: 100, label: \"Very Good\", color: \"#10B981\" },\n] as const;\n\nfunction EmotionFace({ value }: { value: number }) {\n    const getFaceConfig = () => {\n        if (value === 0) {\n            return {\n                color: \"#EF4444\",\n                eyes: {\n                    left: \"M6 10 Q8 8 10 10\",\n                    right: \"M14 10 Q16 8 18 10\",\n                },\n                mouth: \"M8 16 Q12 13 16 16\",\n            };\n        }\n\n        if (value === 50) {\n            return {\n                color: \"#F59E0B\",\n                eyes: {\n                    left: \"M6 9 L10 9\",\n                    right: \"M14 9 L18 9\",\n                },\n                mouth: \"M8 16 L16 16\",\n            };\n        }\n\n        return {\n            color: \"#10B981\",\n            eyes: {\n                left: \"M6 10 Q8 12 10 10\",\n                right: \"M14 10 Q16 12 18 10\",\n            },\n            mouth: \"M8 16 Q12 19 16 16\",\n        };\n    };\n\n    const face = getFaceConfig();\n\n    return (\n        <svg\n            width=\"160\"\n            height=\"160\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"transition-all duration-300 ease-in-out\"\n        >\n            <title>Face Mood</title>\n            {/* Left Eye */}\n            <path\n                d={face.eyes.left}\n                stroke={face.color}\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n            />\n\n            {/* Right Eye */}\n            <path\n                d={face.eyes.right}\n                stroke={face.color}\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n            />\n\n            {/* Mouth */}\n            <path\n                d={face.mouth}\n                stroke={face.color}\n                strokeWidth=\"2.5\"\n                strokeLinecap=\"round\"\n            />\n        </svg>\n    );\n}\n\nexport default function Input_10() {\n    const [value, setValue] = useState(100);\n\n    const adjustValue = (direction: \"left\" | \"right\") => {\n        const currentIndex = moodStates.findIndex(\n            (state) => state.value === value\n        );\n        const newIndex =\n            direction === \"left\"\n                ? Math.max(0, currentIndex - 1)\n                : Math.min(moodStates.length - 1, currentIndex + 1);\n\n        setValue(moodStates[newIndex].value);\n    };\n\n    return (\n        <div className=\"w-full max-w-sm space-y-4\">\n            <div className=\"relative flex items-center justify-center gap-8 py-4\">\n                <button\n                    type=\"button\"\n                    onClick={() => adjustValue(\"left\")}\n                    disabled={value === 0}\n                    className={cn(\n                        \"p-2 rounded-full hover:bg-zinc-100 dark:hover:bg-zinc-800\",\n                        \"text-zinc-500 hover:text-zinc-700\",\n                        \"dark:text-zinc-400 dark:hover:text-zinc-300\",\n                        \"disabled:opacity-50 disabled:cursor-not-allowed\",\n                        \"transition-colors\"\n                    )}\n                >\n                    <ChevronLeft className=\"w-6 h-6\" />\n                </button>\n\n                <EmotionFace value={value} />\n\n                <button\n                    type=\"button\"\n                    onClick={() => adjustValue(\"right\")}\n                    disabled={value === 100}\n                    className={cn(\n                        \"p-2 rounded-full hover:bg-zinc-100 dark:hover:bg-zinc-800\",\n                        \"text-zinc-500 hover:text-zinc-700\",\n                        \"dark:text-zinc-400 dark:hover:text-zinc-300\",\n                        \"disabled:opacity-50 disabled:cursor-not-allowed\",\n                        \"transition-colors\"\n                    )}\n                >\n                    <ChevronRight className=\"w-6 h-6\" />\n                </button>\n            </div>\n        </div>\n    );\n}\n",
      "path": "components/kokonutui/input/input-10.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n}\n",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:hook",
      "target": "hooks/use-copy-to-clipboard.ts",
      "content": "import * as React from \"react\";\n\nexport function useCopyToClipboard({\n    timeout = 2000,\n    onCopy,\n}: {\n    timeout?: number;\n    onCopy?: () => void;\n} = {}) {\n    const [isCopied, setIsCopied] = React.useState(false);\n\n    const copyToClipboard = (value: string) => {\n        if (typeof window === \"undefined\" || !navigator.clipboard.writeText) {\n            return;\n        }\n\n        if (!value) return;\n\n        navigator.clipboard.writeText(value).then(() => {\n            setIsCopied(true);\n\n            if (onCopy) {\n                onCopy();\n            }\n\n            setTimeout(() => {\n                setIsCopied(false);\n            }, timeout);\n        }, console.error);\n    };\n\n    return { isCopied, copyToClipboard };\n}\n",
      "path": "hooks/use-copy-to-clipboard.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    }
  ]
}
