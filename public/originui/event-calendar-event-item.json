{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-calendar-event-item",
  "type": "registry:component",
  "dependencies": [
    "@dnd-kit/core",
    "clsx",
    "date-fns",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/event-calendar/event-item.tsx",
      "content": "\"use client\"\n\nimport { useMemo } from \"react\"\nimport type { DraggableAttributes } from \"@dnd-kit/core\"\nimport type { SyntheticListenerMap } from \"@dnd-kit/core/dist/hooks/utilities\"\nimport { differenceInMinutes, format, getMinutes, isPast } from \"date-fns\"\n\nimport {\n  getBorderRadiusClasses,\n  getEventColorClasses,\n  type CalendarEvent,\n} from \"@/components/event-calendar\"\nimport { cn } from \"@/lib/utils\"\n\n// Using date-fns format with custom formatting:\n// 'h' - hours (1-12)\n// 'a' - am/pm\n// ':mm' - minutes with leading zero (only if the token 'mm' is present)\nconst formatTimeWithOptionalMinutes = (date: Date) => {\n  return format(date, getMinutes(date) === 0 ? \"ha\" : \"h:mma\").toLowerCase()\n}\n\ninterface EventWrapperProps {\n  event: CalendarEvent\n  isFirstDay?: boolean\n  isLastDay?: boolean\n  isDragging?: boolean\n  onClick?: (e: React.MouseEvent) => void\n  className?: string\n  children: React.ReactNode\n  currentTime?: Date\n  dndListeners?: SyntheticListenerMap\n  dndAttributes?: DraggableAttributes\n  onMouseDown?: (e: React.MouseEvent) => void\n  onTouchStart?: (e: React.TouchEvent) => void\n}\n\n// Shared wrapper component for event styling\nfunction EventWrapper({\n  event,\n  isFirstDay = true,\n  isLastDay = true,\n  isDragging,\n  onClick,\n  className,\n  children,\n  currentTime,\n  dndListeners,\n  dndAttributes,\n  onMouseDown,\n  onTouchStart,\n}: EventWrapperProps) {\n  // Always use the currentTime (if provided) to determine if the event is in the past\n  const displayEnd = currentTime\n    ? new Date(\n        new Date(currentTime).getTime() +\n          (new Date(event.end).getTime() - new Date(event.start).getTime())\n      )\n    : new Date(event.end)\n\n  const isEventInPast = isPast(displayEnd)\n\n  return (\n    <button\n      className={cn(\n        \"focus-visible:border-ring focus-visible:ring-ring/50 flex size-full overflow-hidden px-1 text-left font-medium backdrop-blur-md transition outline-none select-none focus-visible:ring-[3px] data-dragging:cursor-grabbing data-dragging:shadow-lg data-past-event:line-through sm:px-2\",\n        getEventColorClasses(event.color),\n        getBorderRadiusClasses(isFirstDay, isLastDay),\n        className\n      )}\n      data-dragging={isDragging || undefined}\n      data-past-event={isEventInPast || undefined}\n      onClick={onClick}\n      onMouseDown={onMouseDown}\n      onTouchStart={onTouchStart}\n      {...dndListeners}\n      {...dndAttributes}\n    >\n      {children}\n    </button>\n  )\n}\n\ninterface EventItemProps {\n  event: CalendarEvent\n  view: \"month\" | \"week\" | \"day\" | \"agenda\"\n  isDragging?: boolean\n  onClick?: (e: React.MouseEvent) => void\n  showTime?: boolean\n  currentTime?: Date // For updating time during drag\n  isFirstDay?: boolean\n  isLastDay?: boolean\n  children?: React.ReactNode\n  className?: string\n  dndListeners?: SyntheticListenerMap\n  dndAttributes?: DraggableAttributes\n  onMouseDown?: (e: React.MouseEvent) => void\n  onTouchStart?: (e: React.TouchEvent) => void\n}\n\nexport function EventItem({\n  event,\n  view,\n  isDragging,\n  onClick,\n  showTime,\n  currentTime,\n  isFirstDay = true,\n  isLastDay = true,\n  children,\n  className,\n  dndListeners,\n  dndAttributes,\n  onMouseDown,\n  onTouchStart,\n}: EventItemProps) {\n  const eventColor = event.color\n\n  // Use the provided currentTime (for dragging) or the event's actual time\n  const displayStart = useMemo(() => {\n    return currentTime || new Date(event.start)\n  }, [currentTime, event.start])\n\n  const displayEnd = useMemo(() => {\n    return currentTime\n      ? new Date(\n          new Date(currentTime).getTime() +\n            (new Date(event.end).getTime() - new Date(event.start).getTime())\n        )\n      : new Date(event.end)\n  }, [currentTime, event.start, event.end])\n\n  // Calculate event duration in minutes\n  const durationMinutes = useMemo(() => {\n    return differenceInMinutes(displayEnd, displayStart)\n  }, [displayStart, displayEnd])\n\n  const getEventTime = () => {\n    if (event.allDay) return \"All day\"\n\n    // For short events (less than 45 minutes), only show start time\n    if (durationMinutes < 45) {\n      return formatTimeWithOptionalMinutes(displayStart)\n    }\n\n    // For longer events, show both start and end time\n    return `${formatTimeWithOptionalMinutes(displayStart)} - ${formatTimeWithOptionalMinutes(displayEnd)}`\n  }\n\n  if (view === \"month\") {\n    return (\n      <EventWrapper\n        event={event}\n        isFirstDay={isFirstDay}\n        isLastDay={isLastDay}\n        isDragging={isDragging}\n        onClick={onClick}\n        className={cn(\n          \"mt-[var(--event-gap)] h-[var(--event-height)] items-center text-[10px] sm:text-xs\",\n          className\n        )}\n        currentTime={currentTime}\n        dndListeners={dndListeners}\n        dndAttributes={dndAttributes}\n        onMouseDown={onMouseDown}\n        onTouchStart={onTouchStart}\n      >\n        {children || (\n          <span className=\"truncate\">\n            {!event.allDay && (\n              <span className=\"truncate font-normal opacity-70 sm:text-[11px]\">\n                {formatTimeWithOptionalMinutes(displayStart)}{\" \"}\n              </span>\n            )}\n            {event.title}\n          </span>\n        )}\n      </EventWrapper>\n    )\n  }\n\n  if (view === \"week\" || view === \"day\") {\n    return (\n      <EventWrapper\n        event={event}\n        isFirstDay={isFirstDay}\n        isLastDay={isLastDay}\n        isDragging={isDragging}\n        onClick={onClick}\n        className={cn(\n          \"py-1\",\n          durationMinutes < 45 ? \"items-center\" : \"flex-col\",\n          view === \"week\" ? \"text-[10px] sm:text-xs\" : \"text-xs\",\n          className\n        )}\n        currentTime={currentTime}\n        dndListeners={dndListeners}\n        dndAttributes={dndAttributes}\n        onMouseDown={onMouseDown}\n        onTouchStart={onTouchStart}\n      >\n        {durationMinutes < 45 ? (\n          <div className=\"truncate\">\n            {event.title}{\" \"}\n            {showTime && (\n              <span className=\"opacity-70\">\n                {formatTimeWithOptionalMinutes(displayStart)}\n              </span>\n            )}\n          </div>\n        ) : (\n          <>\n            <div className=\"truncate font-medium\">{event.title}</div>\n            {showTime && (\n              <div className=\"truncate font-normal opacity-70 sm:text-[11px]\">\n                {getEventTime()}\n              </div>\n            )}\n          </>\n        )}\n      </EventWrapper>\n    )\n  }\n\n  // Agenda view - kept separate since it's significantly different\n  return (\n    <button\n      className={cn(\n        \"focus-visible:border-ring focus-visible:ring-ring/50 flex w-full flex-col gap-1 rounded p-2 text-left transition outline-none focus-visible:ring-[3px] data-past-event:line-through data-past-event:opacity-90\",\n        getEventColorClasses(eventColor),\n        className\n      )}\n      data-past-event={isPast(new Date(event.end)) || undefined}\n      onClick={onClick}\n      onMouseDown={onMouseDown}\n      onTouchStart={onTouchStart}\n      {...dndListeners}\n      {...dndAttributes}\n    >\n      <div className=\"text-sm font-medium\">{event.title}</div>\n      <div className=\"text-xs opacity-70\">\n        {event.allDay ? (\n          <span>All day</span>\n        ) : (\n          <span className=\"uppercase\">\n            {formatTimeWithOptionalMinutes(displayStart)} -{\" \"}\n            {formatTimeWithOptionalMinutes(displayEnd)}\n          </span>\n        )}\n        {event.location && (\n          <>\n            <span className=\"px-1 opacity-35\"> Â· </span>\n            <span>{event.location}</span>\n          </>\n        )}\n      </div>\n      {event.description && (\n        <div className=\"my-1 text-xs opacity-90\">{event.description}</div>\n      )}\n    </button>\n  )\n}\n",
      "path": "registry/default/components/event-calendar/event-item.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/event-calendar/index.ts",
      "content": "\"use client\"\n\n// Component exports\nexport { AgendaView } from \"./agenda-view\"\nexport { DayView } from \"./day-view\"\nexport { DraggableEvent } from \"./draggable-event\"\nexport { DroppableCell } from \"./droppable-cell\"\nexport { EventDialog } from \"./event-dialog\"\nexport { EventItem } from \"./event-item\"\nexport { EventsPopup } from \"./events-popup\"\nexport { EventCalendar } from \"./event-calendar\"\nexport { MonthView } from \"./month-view\"\nexport { WeekView } from \"./week-view\"\nexport { CalendarDndProvider, useCalendarDnd } from \"./calendar-dnd-context\"\n\n// Constants and utility exports\nexport * from \"./constants\"\nexport * from \"./utils\"\n\n// Hook exports\nexport * from \"./hooks/use-current-time-indicator\"\nexport * from \"./hooks/use-event-visibility\"\n\n// Type exports\nexport type { CalendarEvent, CalendarView, EventColor } from \"./types\"\n",
      "path": "registry/default/components/event-calendar/index.ts"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "registry/default/lib/utils.ts"
    }
  ]
}
