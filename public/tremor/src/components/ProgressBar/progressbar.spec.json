{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "src/components/ProgressBar/progressbar.spec",
  "type": "registry:file",
  "dependencies": [
    "@playwright/test"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "src/components/ProgressBar/progressbar.spec.ts",
      "content": "import { expect, test } from \"@playwright/test\"\n\ntest.describe(\"Expect progressbar default\", () => {\n  test(\"to be rendered\", async ({ page }) => {\n    await page.goto(\n      \"http://localhost:6006/?path=/story/visualization-progressbar--default\",\n    )\n    await expect(\n      page\n        .frameLocator('iframe[title=\"storybook-preview-iframe\"]')\n        .getByTestId(\"progressbar\"),\n    ).toBeVisible()\n  })\n\n  test(\"to have a background bar\", async ({ page }) => {\n    await page.goto(\n      \"http://localhost:6006/?path=/story/visualization-progressbar--default\",\n    )\n    await expect(\n      page\n        .frameLocator('iframe[title=\"storybook-preview-iframe\"]')\n        .getByTestId(\"progressbar\"),\n    ).toBeVisible()\n    await expect(\n      page\n        .frameLocator('iframe[title=\"storybook-preview-iframe\"]')\n        .getByLabel(\"Progress bar\"),\n    ).toBeVisible()\n  })\n\n  test(\"renders with background and indicator bar properly\", async ({\n    page,\n  }) => {\n    await page.goto(\n      \"http://localhost:6006/?path=/story/visualization-progressbar--default\",\n    )\n\n    const storyFrame = page.frameLocator(\n      'iframe[title=\"storybook-preview-iframe\"]',\n    )\n\n    const progressBar = storyFrame.getByRole(\"progressbar\", {\n      name: \"Progress bar\",\n    })\n    await expect(progressBar).toBeVisible()\n\n    const barBackground = progressBar.locator(\".bg-blue-200\")\n    await expect(barBackground).toBeVisible()\n\n    const indicatorBar = progressBar.locator(\".bg-blue-500\")\n    await expect(indicatorBar).toBeVisible()\n\n    await expect(progressBar).toHaveAttribute(\"aria-valuenow\")\n    await expect(progressBar).toHaveAttribute(\"aria-valuemax\", \"100\")\n  })\n\n  test(\"updates progress value through controls\", async ({ page }) => {\n    await page.goto(\n      \"http://localhost:6006/?path=/story/visualization-progressbar--default\",\n    )\n\n    const storyFrame = page.frameLocator(\n      'iframe[title=\"storybook-preview-iframe\"]',\n    )\n    const progressBar = storyFrame.getByRole(\"progressbar\", {\n      name: \"Progress bar\",\n    })\n    await expect(progressBar).toHaveAttribute(\"aria-valuenow\", \"62\")\n  })\n\n  test(\"displays label correctly\", async ({ page }) => {\n    await page.goto(\n      \"http://localhost:6006/?path=/story/visualization-progressbar--default\",\n    )\n\n    const storyFrame = page.frameLocator(\n      'iframe[title=\"storybook-preview-iframe\"]',\n    )\n\n    await expect(storyFrame.getByText(\"62%\")).toBeVisible()\n  })\n\n  test(\"to have a label\", async ({ page }) => {\n    await page.goto(\n      \"http://localhost:6006/?path=/story/visualization-progressbar--default\",\n    )\n    await expect(\n      page\n        .frameLocator('iframe[title=\"storybook-preview-iframe\"]')\n        .getByTestId(\"progressbar\"),\n    ).toBeVisible()\n    await page.goto(\n      \"http://localhost:6006/?path=/story/visualization-progressbar--default\",\n    )\n    await expect(\n      page\n        .frameLocator('iframe[title=\"storybook-preview-iframe\"]')\n        .getByText(\"%\"),\n    ).toBeVisible()\n  })\n})\n",
      "path": "src/components/ProgressBar/progressbar.spec.ts"
    }
  ]
}
