{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dashboard-list-03",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-progress",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/blocks/dashboard/list-03.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport {\n    Calendar,\n    Users,\n    FileText,\n    type LucideIcon,\n    Clock,\n    ArrowRight,\n    CheckCircle2,\n    Timer,\n    AlertCircle,\n    PiggyBank,\n    TrendingUp,\n    CreditCard,\n} from \"lucide-react\";\nimport React from \"react\";\nimport {\n    Card,\n    CardContent,\n    CardFooter,\n    CardHeader,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface ListItem {\n    id: string;\n    title: string;\n    subtitle: string;\n    icon: LucideIcon;\n    iconStyle: string;\n    date: string;\n    time?: string;\n    amount?: string;\n    status: \"pending\" | \"in-progress\" | \"completed\";\n    progress?: number;\n}\n\ninterface List03Props {\n    items?: ListItem[];\n    className?: string;\n}\n\nconst iconStyles = {\n    savings: \"bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100\",\n    investment: \"bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100\",\n    debt: \"bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100\",\n};\n\nconst statusConfig = {\n    pending: {\n        icon: Timer,\n        class: \"text-amber-600 dark:text-amber-400\",\n        bg: \"bg-amber-100 dark:bg-amber-900/30\",\n    },\n    \"in-progress\": {\n        icon: AlertCircle,\n        class: \"text-blue-600 dark:text-blue-400\",\n        bg: \"bg-blue-100 dark:bg-blue-900/30\",\n    },\n    completed: {\n        icon: CheckCircle2,\n        class: \"text-emerald-600 dark:text-emerald-400\",\n        bg: \"bg-emerald-100 dark:bg-emerald-900/30\",\n    },\n};\n\nconst ITEMS: ListItem[] = [\n    {\n        id: \"1\",\n        title: \"Emergency Fund\",\n        subtitle: \"3 months of expenses saved\",\n        icon: PiggyBank,\n        iconStyle: \"savings\",\n        date: \"Target: Dec 2024\",\n        amount: \"$15,000\",\n        status: \"in-progress\",\n        progress: 65,\n    },\n    {\n        id: \"2\",\n        title: \"Stock Portfolio\",\n        subtitle: \"Tech sector investment plan\",\n        icon: TrendingUp,\n        iconStyle: \"investment\",\n        date: \"Target: Jun 2024\",\n        amount: \"$50,000\",\n        status: \"pending\",\n        progress: 30,\n    },\n    {\n        id: \"3\",\n        title: \"Debt Repayment\",\n        subtitle: \"Student loan payoff plan\",\n        icon: CreditCard,\n        iconStyle: \"debt\",\n        date: \"Target: Mar 2025\",\n        amount: \"$25,000\",\n        status: \"in-progress\",\n        progress: 45,\n    },\n];\n\nexport default function List03({ items = ITEMS, className }: List03Props) {\n    return (\n        <div className={cn(\"w-full overflow-x-auto scrollbar-none\", className)}>\n            <div className=\"flex gap-3 min-w-full p-1\">\n                {items.map((item) => (\n                    <Card\n                        key={item.id}\n                        className={cn(\n                            \"flex flex-col\",\n                            \"w-[280px] shrink-0\",\n                            \"bg-white dark:bg-zinc-900/70\",\n                            \"rounded-xl\",\n                            \"border border-zinc-100 dark:border-zinc-800\",\n                            \"hover:border-zinc-200 dark:hover:border-zinc-700\",\n                            \"transition-all duration-200\",\n                            \"shadow-sm backdrop-blur-xl\"\n                        )}\n                    >\n                        <CardHeader className=\"p-4 pb-0\">\n                            <div className=\"flex items-start justify-between\">\n                                <div\n                                    className={cn(\n                                        \"p-2 rounded-lg\",\n                                        iconStyles[\n                                            item.iconStyle as keyof typeof iconStyles\n                                        ]\n                                    )}\n                                >\n                                    <item.icon className=\"w-4 h-4\" />\n                                </div>\n                                <div\n                                    className={cn(\n                                        \"px-2 py-1 rounded-full text-xs font-medium flex items-center gap-1.5\",\n                                        statusConfig[item.status].bg,\n                                        statusConfig[item.status].class\n                                    )}\n                                >\n                                    {React.createElement(\n                                        statusConfig[item.status].icon,\n                                        { className: \"w-3.5 h-3.5\" }\n                                    )}\n                                    {item.status.charAt(0).toUpperCase() +\n                                        item.status.slice(1)}\n                                </div>\n                            </div>\n                        </CardHeader>\n\n                        <CardContent className=\"p-4 space-y-3 flex-grow\">\n                            <div>\n                                <h3 className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100 mb-1\">\n                                    {item.title}\n                                </h3>\n                                <p className=\"text-xs text-zinc-600 dark:text-zinc-400 line-clamp-2\">\n                                    {item.subtitle}\n                                </p>\n                            </div>\n\n                            {typeof item.progress === \"number\" && (\n                                <div className=\"space-y-1.5\">\n                                    <div className=\"flex items-center justify-between text-xs\">\n                                        <span className=\"text-zinc-600 dark:text-zinc-400\">\n                                            Progress\n                                        </span>\n                                        <span className=\"text-zinc-900 dark:text-zinc-100\">\n                                            {item.progress}%\n                                        </span>\n                                    </div>\n                                    <Progress\n                                        value={item.progress}\n                                        className=\"h-1.5 bg-zinc-100 dark:bg-zinc-800 bg-zinc-900 dark:bg-zinc-100\"\n                                    />\n                                </div>\n                            )}\n\n                            {item.amount && (\n                                <div className=\"flex items-center gap-1.5\">\n                                    <span className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100\">\n                                        {item.amount}\n                                    </span>\n                                    <span className=\"text-xs text-zinc-600 dark:text-zinc-400\">\n                                        target\n                                    </span>\n                                </div>\n                            )}\n\n                            <div className=\"flex items-center text-xs text-zinc-600 dark:text-zinc-400\">\n                                <Calendar className=\"w-3.5 h-3.5 mr-1.5\" />\n                                <span>{item.date}</span>\n                            </div>\n                        </CardContent>\n\n                        <CardFooter className=\"mt-auto p-0 border-t border-zinc-100 dark:border-zinc-800\">\n                            <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className={cn(\n                                    \"w-full flex items-center justify-center gap-2\",\n                                    \"py-2.5 px-3\",\n                                    \"text-xs font-medium\",\n                                    \"text-zinc-600 dark:text-zinc-400\",\n                                    \"hover:text-zinc-900 dark:hover:text-zinc-100\",\n                                    \"hover:bg-zinc-100 dark:hover:bg-zinc-800/50\",\n                                    \"transition-colors duration-200\",\n                                    \"rounded-none rounded-b-xl\"\n                                )}\n                            >\n                                View Details\n                                <ArrowRight className=\"w-3.5 h-3.5\" />\n                            </Button>\n                        </CardFooter>\n                    </Card>\n                ))}\n            </div>\n        </div>\n    );\n}\n",
      "path": "components/kokonutui/blocks/dashboard/list-03.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border border-zinc-200 bg-white text-zinc-950 shadow-xs dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-zinc-500 dark:text-zinc-400\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "path": "components/ui/card.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/progress.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-zinc-100 dark:bg-zinc-800\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-zinc-900 transition-all dark:bg-zinc-50\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
      "path": "components/ui/progress.tsx"
    }
  ]
}
