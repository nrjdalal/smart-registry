{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-598",
  "type": "registry:component",
  "dependencies": [
    "@headless-tree/core",
    "@headless-tree/react",
    "lucide-react",
    "radix-ui"
  ],
  "registryDependencies": [
    "https://originui.com/r/checkbox.json",
    "https://originui.com/r/tree.json"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/comp-598.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport {\n  checkboxesFeature,\n  hotkeysCoreFeature,\n  selectionFeature,\n  syncDataLoaderFeature,\n} from \"@headless-tree/core\"\nimport { useTree } from \"@headless-tree/react\"\n\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Tree, TreeItem, TreeItemLabel } from \"@/components/ui/tree\"\n\ninterface Item {\n  name: string\n  children?: string[]\n}\n\nconst items: Record<string, Item> = {\n  company: {\n    name: \"Company\",\n    children: [\"engineering\", \"marketing\", \"operations\"],\n  },\n  engineering: {\n    name: \"Engineering\",\n    children: [\"frontend\", \"backend\", \"platform-team\"],\n  },\n  frontend: { name: \"Frontend\", children: [\"design-system\", \"web-platform\"] },\n  \"design-system\": {\n    name: \"Design System\",\n    children: [\"components\", \"tokens\", \"guidelines\"],\n  },\n  components: { name: \"Components\" },\n  tokens: { name: \"Tokens\" },\n  guidelines: { name: \"Guidelines\" },\n  \"web-platform\": { name: \"Web Platform\" },\n  backend: { name: \"Backend\", children: [\"apis\", \"infrastructure\"] },\n  apis: { name: \"APIs\" },\n  infrastructure: { name: \"Infrastructure\" },\n  \"platform-team\": { name: \"Platform Team\" },\n  marketing: { name: \"Marketing\", children: [\"content\", \"seo\"] },\n  content: { name: \"Content\" },\n  seo: { name: \"SEO\" },\n  operations: { name: \"Operations\", children: [\"hr\", \"finance\"] },\n  hr: { name: \"HR\" },\n  finance: { name: \"Finance\" },\n}\n\nconst indent = 20\n\nexport default function Component() {\n  const tree = useTree<Item>({\n    initialState: {\n      expandedItems: [\"engineering\", \"frontend\", \"design-system\"],\n      checkedItems: [\"components\", \"tokens\"],\n    },\n    indent,\n    rootItemId: \"company\",\n    getItemName: (item) => item.getItemData().name,\n    isItemFolder: (item) => (item.getItemData()?.children?.length ?? 0) > 0,\n    dataLoader: {\n      getItem: (itemId) => items[itemId],\n      getChildren: (itemId) => items[itemId].children ?? [],\n    },\n    features: [\n      syncDataLoaderFeature,\n      selectionFeature,\n      checkboxesFeature,\n      hotkeysCoreFeature,\n    ],\n  })\n\n  return (\n    <div className=\"flex h-full flex-col gap-2 *:first:grow\">\n      <Tree indent={indent} tree={tree}>\n        {tree.getItems().map((item) => {\n          return (\n            <div\n              key={item.getId()}\n              className=\"flex items-center gap-1.5 not-last:pb-0.5\"\n            >\n              <Checkbox\n                checked={\n                  {\n                    checked: true,\n                    unchecked: false,\n                    indeterminate: \"indeterminate\" as const,\n                  }[item.getCheckedState()]\n                }\n                onCheckedChange={(checked) => {\n                  const checkboxProps = item.getCheckboxProps()\n                  checkboxProps.onChange?.({ target: { checked } })\n                }}\n              />\n              <TreeItem item={item} className=\"flex-1 not-last:pb-0\">\n                <TreeItemLabel />\n              </TreeItem>\n            </div>\n          )\n        })}\n      </Tree>\n\n      <div className=\"space-y-2\">\n        <p\n          aria-live=\"polite\"\n          role=\"region\"\n          className=\"text-muted-foreground mt-2 text-xs\"\n        >\n          Tree with checkboxes on the left âˆ™{\" \"}\n          <a\n            href=\"https://headless-tree.lukasbach.com\"\n            className=\"hover:text-foreground underline\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            API\n          </a>\n        </p>\n      </div>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/comp-598.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/checkbox.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Checkbox as CheckboxPrimitive } from \"radix-ui\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex size-4 shrink-0 items-center justify-center rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"grid place-content-center text-current\"\n      >\n        {props.checked === \"indeterminate\" ? (\n          <svg\n            width=\"9\"\n            height=\"9\"\n            viewBox=\"0 0 9 9\"\n            fill=\"currentcolor\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M0.75 4.5C0.75 4.08579 1.08579 3.75 1.5 3.75H7.5C7.91421 3.75 8.25 4.08579 8.25 4.5C8.25 4.91421 7.91421 5.25 7.5 5.25H1.5C1.08579 5.25 0.75 4.91421 0.75 4.5Z\"\n            />\n          </svg>\n        ) : (\n          <svg\n            width=\"9\"\n            height=\"9\"\n            viewBox=\"0 0 9 9\"\n            fill=\"currentcolor\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M8.53547 0.62293C8.88226 0.849446 8.97976 1.3142 8.75325 1.66099L4.5083 8.1599C4.38833 8.34356 4.19397 8.4655 3.9764 8.49358C3.75883 8.52167 3.53987 8.45309 3.3772 8.30591L0.616113 5.80777C0.308959 5.52987 0.285246 5.05559 0.563148 4.74844C0.84105 4.44128 1.31533 4.41757 1.62249 4.69547L3.73256 6.60459L7.49741 0.840706C7.72393 0.493916 8.18868 0.396414 8.53547 0.62293Z\"\n            />\n          </svg>\n        )}\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n",
      "path": "registry/default/ui/checkbox.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/tree.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ItemInstance } from \"@headless-tree/core\"\nimport { ChevronDownIcon } from \"lucide-react\"\nimport { Slot } from \"radix-ui\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface TreeContextValue<T = any> {\n  indent: number\n  currentItem?: ItemInstance<T>\n  tree?: any\n}\n\nconst TreeContext = React.createContext<TreeContextValue>({\n  indent: 20,\n  currentItem: undefined,\n  tree: undefined,\n})\n\nfunction useTreeContext<T = any>() {\n  return React.useContext(TreeContext) as TreeContextValue<T>\n}\n\ninterface TreeProps extends React.HTMLAttributes<HTMLDivElement> {\n  indent?: number\n  tree?: any\n}\n\nfunction Tree({ indent = 20, tree, className, ...props }: TreeProps) {\n  const containerProps =\n    tree && typeof tree.getContainerProps === \"function\"\n      ? tree.getContainerProps()\n      : {}\n  const mergedProps = { ...props, ...containerProps }\n\n  // Extract style from mergedProps to merge with our custom styles\n  const { style: propStyle, ...otherProps } = mergedProps\n\n  // Merge styles\n  const mergedStyle = {\n    ...propStyle,\n    \"--tree-indent\": `${indent}px`,\n  } as React.CSSProperties\n\n  return (\n    <TreeContext.Provider value={{ indent, tree }}>\n      <div\n        data-slot=\"tree\"\n        style={mergedStyle}\n        className={cn(\"flex flex-col\", className)}\n        {...otherProps}\n      />\n    </TreeContext.Provider>\n  )\n}\n\ninterface TreeItemProps<T = any>\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  item: ItemInstance<T>\n  indent?: number\n  asChild?: boolean\n}\n\nfunction TreeItem<T = any>({\n  item,\n  className,\n  asChild,\n  children,\n  ...props\n}: Omit<TreeItemProps<T>, \"indent\">) {\n  const { indent } = useTreeContext<T>()\n\n  const itemProps = typeof item.getProps === \"function\" ? item.getProps() : {}\n  const mergedProps = { ...props, ...itemProps }\n\n  // Extract style from mergedProps to merge with our custom styles\n  const { style: propStyle, ...otherProps } = mergedProps\n\n  // Merge styles\n  const mergedStyle = {\n    ...propStyle,\n    \"--tree-padding\": `${item.getItemMeta().level * indent}px`,\n  } as React.CSSProperties\n\n  const Comp = asChild ? Slot.Root : \"button\"\n\n  return (\n    <TreeContext.Provider value={{ indent, currentItem: item }}>\n      <Comp\n        data-slot=\"tree-item\"\n        style={mergedStyle}\n        className={cn(\n          \"z-10 ps-(--tree-padding) outline-hidden select-none not-last:pb-0.5 focus:z-20 data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n          className\n        )}\n        data-focus={\n          typeof item.isFocused === \"function\"\n            ? item.isFocused() || false\n            : undefined\n        }\n        data-folder={\n          typeof item.isFolder === \"function\"\n            ? item.isFolder() || false\n            : undefined\n        }\n        data-selected={\n          typeof item.isSelected === \"function\"\n            ? item.isSelected() || false\n            : undefined\n        }\n        data-drag-target={\n          typeof item.isDragTarget === \"function\"\n            ? item.isDragTarget() || false\n            : undefined\n        }\n        data-search-match={\n          typeof item.isMatchingSearch === \"function\"\n            ? item.isMatchingSearch() || false\n            : undefined\n        }\n        aria-expanded={item.isExpanded()}\n        {...otherProps}\n      >\n        {children}\n      </Comp>\n    </TreeContext.Provider>\n  )\n}\n\ninterface TreeItemLabelProps<T = any>\n  extends React.HTMLAttributes<HTMLSpanElement> {\n  item?: ItemInstance<T>\n}\n\nfunction TreeItemLabel<T = any>({\n  item: propItem,\n  children,\n  className,\n  ...props\n}: TreeItemLabelProps<T>) {\n  const { currentItem } = useTreeContext<T>()\n  const item = propItem || currentItem\n\n  if (!item) {\n    console.warn(\"TreeItemLabel: No item provided via props or context\")\n    return null\n  }\n\n  return (\n    <span\n      data-slot=\"tree-item-label\"\n      className={cn(\n        \"in-focus-visible:ring-ring/50 bg-background hover:bg-accent in-data-[selected=true]:bg-accent in-data-[selected=true]:text-accent-foreground in-data-[drag-target=true]:bg-accent flex items-center gap-1 rounded-sm px-2 py-1.5 text-sm transition-colors not-in-data-[folder=true]:ps-7 in-focus-visible:ring-[3px] in-data-[search-match=true]:bg-blue-400/20! [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className\n      )}\n      {...props}\n    >\n      {item.isFolder() && (\n        <ChevronDownIcon className=\"text-muted-foreground size-4 in-aria-[expanded=false]:-rotate-90\" />\n      )}\n      {children ||\n        (typeof item.getItemName === \"function\" ? item.getItemName() : null)}\n    </span>\n  )\n}\n\nfunction TreeDragLine({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  const { tree } = useTreeContext()\n\n  if (!tree || typeof tree.getDragLineStyle !== \"function\") {\n    console.warn(\n      \"TreeDragLine: No tree provided via context or tree does not have getDragLineStyle method\"\n    )\n    return null\n  }\n\n  const dragLine = tree.getDragLineStyle()\n  return (\n    <div\n      style={dragLine}\n      className={cn(\n        \"bg-primary before:bg-background before:border-primary absolute z-30 -mt-px h-0.5 w-[unset] before:absolute before:-top-[3px] before:left-0 before:size-2 before:rounded-full before:border-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Tree, TreeItem, TreeItemLabel, TreeDragLine }\n",
      "path": "registry/default/ui/tree.tsx"
    }
  ],
  "meta": {
    "tags": [
      "tree",
      "checkbox"
    ]
  }
}
