{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "src/components/CategoryBar/categorybar.stories",
  "type": "registry:file",
  "dependencies": [
    "@radix-ui/react-tooltip",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "src/components/CategoryBar/CategoryBar.tsx",
      "content": "// Tremor CategoryBar [v0.0.3]\n\n\"use client\"\n\nimport React from \"react\"\n\nimport {\n  AvailableChartColors,\n  AvailableChartColorsKeys,\n  getColorClassName,\n} from \"../../utils/chartColors\"\nimport { cx } from \"../../utils/cx\"\nimport { Tooltip } from \"../Tooltip/Tooltip\"\n\nconst getMarkerBgColor = (\n  marker: number | undefined,\n  values: number[],\n  colors: AvailableChartColorsKeys[],\n): string => {\n  if (marker === undefined) return \"\"\n\n  if (marker === 0) {\n    for (let index = 0; index < values.length; index++) {\n      if (values[index] > 0) {\n        return getColorClassName(colors[index], \"bg\")\n      }\n    }\n  }\n\n  let prefixSum = 0\n  for (let index = 0; index < values.length; index++) {\n    prefixSum += values[index]\n    if (prefixSum >= marker) {\n      return getColorClassName(colors[index], \"bg\")\n    }\n  }\n\n  return getColorClassName(colors[values.length - 1], \"bg\")\n}\n\nconst getPositionLeft = (\n  value: number | undefined,\n  maxValue: number,\n): number => (value ? (value / maxValue) * 100 : 0)\n\nconst sumNumericArray = (arr: number[]) =>\n  arr.reduce((prefixSum, num) => prefixSum + num, 0)\n\nconst formatNumber = (num: number): string => {\n  if (Number.isInteger(num)) {\n    return num.toString()\n  }\n  return num.toFixed(1)\n}\n\nconst BarLabels = ({ values }: { values: number[] }) => {\n  const sumValues = React.useMemo(() => sumNumericArray(values), [values])\n  let prefixSum = 0\n  let sumConsecutiveHiddenLabels = 0\n\n  return (\n    <div\n      className={cx(\n        // base\n        \"relative mb-2 flex h-5 w-full text-sm font-medium\",\n        // text color\n        \"text-gray-700 dark:text-gray-300\",\n      )}\n    >\n      <div className=\"absolute bottom-0 left-0 flex items-center\">0</div>\n      {values.map((widthPercentage, index) => {\n        prefixSum += widthPercentage\n\n        const showLabel =\n          (widthPercentage >= 0.1 * sumValues ||\n            sumConsecutiveHiddenLabels >= 0.09 * sumValues) &&\n          sumValues - prefixSum >= 0.1 * sumValues &&\n          prefixSum >= 0.1 * sumValues &&\n          prefixSum < 0.9 * sumValues\n\n        sumConsecutiveHiddenLabels = showLabel\n          ? 0\n          : (sumConsecutiveHiddenLabels += widthPercentage)\n\n        const widthPositionLeft = getPositionLeft(widthPercentage, sumValues)\n\n        return (\n          <div\n            key={`item-${index}`}\n            className=\"flex items-center justify-end pr-0.5\"\n            style={{ width: `${widthPositionLeft}%` }}\n          >\n            {showLabel ? (\n              <span\n                className={cx(\"block translate-x-1/2 text-sm tabular-nums\")}\n              >\n                {formatNumber(prefixSum)}\n              </span>\n            ) : null}\n          </div>\n        )\n      })}\n      <div className=\"absolute bottom-0 right-0 flex items-center\">\n        {formatNumber(sumValues)}\n      </div>\n    </div>\n  )\n}\n\ninterface CategoryBarProps extends React.HTMLAttributes<HTMLDivElement> {\n  values: number[]\n  colors?: AvailableChartColorsKeys[]\n  marker?: { value: number; tooltip?: string; showAnimation?: boolean }\n  showLabels?: boolean\n}\n\nconst CategoryBar = React.forwardRef<HTMLDivElement, CategoryBarProps>(\n  (\n    {\n      values = [],\n      colors = AvailableChartColors,\n      marker,\n      showLabels = true,\n      className,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const markerBgColor = React.useMemo(\n      () => getMarkerBgColor(marker?.value, values, colors),\n      [marker, values, colors],\n    )\n\n    const maxValue = React.useMemo(() => sumNumericArray(values), [values])\n\n    const adjustedMarkerValue = React.useMemo(() => {\n      if (marker === undefined) return undefined\n      if (marker.value < 0) return 0\n      if (marker.value > maxValue) return maxValue\n      return marker.value\n    }, [marker, maxValue])\n\n    const markerPositionLeft: number = React.useMemo(\n      () => getPositionLeft(adjustedMarkerValue, maxValue),\n      [adjustedMarkerValue, maxValue],\n    )\n\n    return (\n      <div\n        ref={forwardedRef}\n        className={cx(className)}\n        aria-label=\"Category bar\"\n        aria-valuenow={marker?.value}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {showLabels ? <BarLabels values={values} /> : null}\n        <div className=\"relative flex h-2 w-full items-center\">\n          <div className=\"flex h-full flex-1 items-center gap-0.5 overflow-hidden rounded-full\">\n            {values.map((value, index) => {\n              const barColor = colors[index] ?? \"gray\"\n              const percentage = (value / maxValue) * 100\n              return (\n                <div\n                  key={`item-${index}`}\n                  className={cx(\n                    \"h-full\",\n                    getColorClassName(\n                      barColor as AvailableChartColorsKeys,\n                      \"bg\",\n                    ),\n                    percentage === 0 && \"hidden\",\n                  )}\n                  style={{ width: `${percentage}%` }}\n                />\n              )\n            })}\n          </div>\n\n          {marker !== undefined ? (\n            <div\n              className={cx(\n                \"absolute w-2 -translate-x-1/2\",\n                marker.showAnimation &&\n                  \"transform-gpu transition-all duration-300 ease-in-out\",\n              )}\n              style={{\n                left: `${markerPositionLeft}%`,\n              }}\n            >\n              {marker.tooltip ? (\n                <Tooltip asChild content={marker.tooltip}>\n                  <div\n                    aria-hidden=\"true\"\n                    className={cx(\n                      \"relative mx-auto h-4 w-1 rounded-full ring-2\",\n                      \"ring-white dark:ring-gray-950\",\n                      markerBgColor,\n                    )}\n                  >\n                    <div\n                      aria-hidden\n                      className=\"absolute size-7 -translate-x-[45%] -translate-y-[15%]\"\n                    ></div>\n                  </div>\n                </Tooltip>\n              ) : (\n                <div\n                  className={cx(\n                    \"mx-auto h-4 w-1 rounded-full ring-2\",\n                    \"ring-white dark:ring-gray-950\",\n                    markerBgColor,\n                  )}\n                />\n              )}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    )\n  },\n)\n\nCategoryBar.displayName = \"CategoryBar\"\n\nexport { CategoryBar, type CategoryBarProps }\n",
      "path": "src/components/CategoryBar/CategoryBar.tsx"
    },
    {
      "type": "registry:file",
      "target": "src/components/CategoryBar/categorybar.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { CategoryBar } from \"./CategoryBar\"\n\nconst meta: Meta<typeof CategoryBar> = {\n  title: \"visualization/CategoryBar\",\n  render: (args) => <CategoryBar {...args} data-testid=\"category-bar\" />,\n  component: CategoryBar,\n}\n\nexport default meta\ntype Story = StoryObj<typeof CategoryBar>\n\nexport const Default: Story = {\n  args: {\n    values: [70, 18, 12],\n  },\n}\n\nexport const WithFloatingPointValues: Story = {\n  args: {\n    values: [70.1, 18.3, 11.6],\n  },\n}\n\nexport const WithMarker: Story = {\n  args: {\n    values: [60, 10, 15, 15],\n    marker: { value: 65, tooltip: \"65\" },\n    showLabels: true,\n  },\n}\n\nexport const WithColors: Story = {\n  args: {\n    values: [60, 25, 15],\n    colors: [\"pink\", \"amber\", \"emerald\"],\n  },\n}\n\nexport const WithMarkerOnLabel: Story = {\n  args: {\n    values: [0, 50, 50],\n    marker: { value: 0, tooltip: \"0\" },\n    showLabels: true,\n  },\n}\n\nexport const WithSmallStartValue: Story = {\n  args: {\n    values: [10, 25, 45, 20],\n    colors: [\"amber\", \"gray\", \"pink\", \"cyan\"],\n    marker: { value: 50, tooltip: \"50%\" },\n    showLabels: true,\n  },\n}\n\nexport const WithCloseEndValue: Story = {\n  args: {\n    values: [10, 25, 50, 15],\n    marker: { value: 50, tooltip: \"50%\" },\n    showLabels: true,\n  },\n}\n\nexport const WithValuesMoreThan100: Story = {\n  args: {\n    values: [400, 400, 800],\n    marker: { value: 1400, tooltip: \"50%\" },\n    showLabels: true,\n  },\n}\n\nexport const WithValuesLessThan100: Story = {\n  args: {\n    values: [8, 7, 9, 8],\n    marker: { value: 20, tooltip: \"20%\" },\n    showLabels: true,\n  },\n}\n\nexport const WithConsecutiveSmallValues: Story = {\n  args: {\n    values: [10, 5, 5, 5, 5, 5, 50, 15, 0],\n    marker: { value: 50, tooltip: \"50%\" },\n    showLabels: true,\n  },\n}\n\nexport const WithNoLabelsInbetween: Story = {\n  args: {\n    values: [5, 95],\n    marker: { value: 50, tooltip: \"50%\" },\n    showLabels: true,\n  },\n}\n\nexport const WithZero: Story = {\n  args: {\n    values: [0, 100],\n  },\n}\n",
      "path": "src/components/CategoryBar/categorybar.stories.tsx"
    },
    {
      "type": "registry:file",
      "target": "src/components/Tooltip/Tooltip.tsx",
      "content": "// Tremor Tooltip [v0.1.0]\n\nimport React from \"react\"\nimport * as TooltipPrimitives from \"@radix-ui/react-tooltip\"\n\nimport { cx } from \"../../utils/cx\"\n\ninterface TooltipProps\n  extends Omit<TooltipPrimitives.TooltipContentProps, \"content\" | \"onClick\">,\n    Pick<\n      TooltipPrimitives.TooltipProps,\n      \"open\" | \"defaultOpen\" | \"onOpenChange\" | \"delayDuration\"\n    > {\n  content: React.ReactNode\n  onClick?: React.MouseEventHandler<HTMLButtonElement>\n  side?: \"bottom\" | \"left\" | \"top\" | \"right\"\n  showArrow?: boolean\n}\n\nconst Tooltip = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitives.Content>,\n  TooltipProps\n>(\n  (\n    {\n      children,\n      className,\n      content,\n      delayDuration,\n      defaultOpen,\n      open,\n      onClick,\n      onOpenChange,\n      showArrow = true,\n      side,\n      sideOffset = 10,\n      asChild,\n      ...props\n    }: TooltipProps,\n    forwardedRef,\n  ) => {\n    return (\n      <TooltipPrimitives.Provider delayDuration={150}>\n        <TooltipPrimitives.Root\n          open={open}\n          defaultOpen={defaultOpen}\n          onOpenChange={onOpenChange}\n          delayDuration={delayDuration}\n          tremor-id=\"tremor-raw\"\n        >\n          <TooltipPrimitives.Trigger onClick={onClick} asChild={asChild}>\n            {children}\n          </TooltipPrimitives.Trigger>\n          <TooltipPrimitives.Portal>\n            <TooltipPrimitives.Content\n              ref={forwardedRef}\n              side={side}\n              sideOffset={sideOffset}\n              align=\"center\"\n              className={cx(\n                // base\n                \"max-w-60 select-none rounded-md px-2.5 py-1.5 text-sm leading-5 shadow-md\",\n                // text color\n                \"text-gray-50 dark:text-gray-900\",\n                // background color\n                \"bg-gray-900 dark:bg-gray-50\",\n                // transition\n                \"will-change-[transform,opacity]\",\n                \"data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade data-[state=closed]:animate-hide\",\n                className,\n              )}\n              {...props}\n            >\n              {content}\n              {showArrow ? (\n                <TooltipPrimitives.Arrow\n                  className=\"border-none fill-gray-900 dark:fill-gray-50\"\n                  width={12}\n                  height={7}\n                  aria-hidden=\"true\"\n                />\n              ) : null}\n            </TooltipPrimitives.Content>\n          </TooltipPrimitives.Portal>\n        </TooltipPrimitives.Root>\n      </TooltipPrimitives.Provider>\n    )\n  },\n)\n\nTooltip.displayName = \"Tooltip\"\n\nexport { Tooltip, type TooltipProps }\n",
      "path": "src/components/Tooltip/Tooltip.tsx"
    },
    {
      "type": "registry:file",
      "target": "src/utils/chartColors.ts",
      "content": "// Tremor chartColors [v0.1.0]\n\nexport type ColorUtility = \"bg\" | \"stroke\" | \"fill\" | \"text\"\n\nexport const chartColors = {\n  blue: {\n    bg: \"bg-blue-500\",\n    stroke: \"stroke-blue-500\",\n    fill: \"fill-blue-500\",\n    text: \"text-blue-500\",\n  },\n  emerald: {\n    bg: \"bg-emerald-500\",\n    stroke: \"stroke-emerald-500\",\n    fill: \"fill-emerald-500\",\n    text: \"text-emerald-500\",\n  },\n  violet: {\n    bg: \"bg-violet-500\",\n    stroke: \"stroke-violet-500\",\n    fill: \"fill-violet-500\",\n    text: \"text-violet-500\",\n  },\n  amber: {\n    bg: \"bg-amber-500\",\n    stroke: \"stroke-amber-500\",\n    fill: \"fill-amber-500\",\n    text: \"text-amber-500\",\n  },\n  gray: {\n    bg: \"bg-gray-500\",\n    stroke: \"stroke-gray-500\",\n    fill: \"fill-gray-500\",\n    text: \"text-gray-500\",\n  },\n  cyan: {\n    bg: \"bg-cyan-500\",\n    stroke: \"stroke-cyan-500\",\n    fill: \"fill-cyan-500\",\n    text: \"text-cyan-500\",\n  },\n  pink: {\n    bg: \"bg-pink-500\",\n    stroke: \"stroke-pink-500\",\n    fill: \"fill-pink-500\",\n    text: \"text-pink-500\",\n  },\n  lime: {\n    bg: \"bg-lime-500\",\n    stroke: \"stroke-lime-500\",\n    fill: \"fill-lime-500\",\n    text: \"text-lime-500\",\n  },\n  fuchsia: {\n    bg: \"bg-fuchsia-500\",\n    stroke: \"stroke-fuchsia-500\",\n    fill: \"fill-fuchsia-500\",\n    text: \"text-fuchsia-500\",\n  },\n} as const satisfies {\n  [color: string]: {\n    [key in ColorUtility]: string\n  }\n}\n\nexport type AvailableChartColorsKeys = keyof typeof chartColors\n\nexport const AvailableChartColors: AvailableChartColorsKeys[] = Object.keys(\n  chartColors,\n) as Array<AvailableChartColorsKeys>\n\nexport const constructCategoryColors = (\n  categories: string[],\n  colors: AvailableChartColorsKeys[],\n): Map<string, AvailableChartColorsKeys> => {\n  const categoryColors = new Map<string, AvailableChartColorsKeys>()\n  categories.forEach((category, index) => {\n    categoryColors.set(category, colors[index % colors.length])\n  })\n  return categoryColors\n}\n\nexport const getColorClassName = (\n  color: AvailableChartColorsKeys,\n  type: ColorUtility,\n): string => {\n  const fallbackColor = {\n    bg: \"bg-gray-500\",\n    stroke: \"stroke-gray-500\",\n    fill: \"fill-gray-500\",\n    text: \"text-gray-500\",\n  }\n  return chartColors[color]?.[type] ?? fallbackColor[type]\n}\n",
      "path": "src/utils/chartColors.ts"
    },
    {
      "type": "registry:file",
      "target": "src/utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    }
  ]
}
