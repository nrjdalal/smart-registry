{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-checkbox",
    "@radix-ui/react-label",
    "@radix-ui/react-radio-group",
    "@radix-ui/react-select",
    "@radix-ui/react-slot",
    "@radix-ui/react-switch",
    "@radix-ui/react-tabs",
    "@radix-ui/react-tooltip",
    "@remixicon/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Card/card.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Button } from \"@/components/Button/Button\"\nimport { Checkbox } from \"@/components/Checkbox/Checkbox\"\nimport { Divider } from \"@/components/Divider/Divider\"\nimport { Input } from \"@/components/Input/Input\"\nimport { Label } from \"@/components/Label/Label\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/RadioGroup/RadioGroup\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/Select/Select\"\nimport { SelectNative } from \"@/components/SelectNative/SelectNative\"\nimport { Switch } from \"@/components/Switch/Switch\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/Tabs/Tabs\"\nimport { Textarea } from \"@/components/Textarea/Textarea\"\nimport { Tooltip } from \"@/components/Tooltip/Tooltip\"\nimport { Card } from \"@/components/Card/Card\"\n\nconst meta: Meta<typeof Card> = {\n  title: \"ui/Card\",\n  component: Card,\n}\n\nexport default meta\ntype Story = StoryObj<typeof Card>\n\nexport const Default: Story = {\n  render: () => <Card></Card>,\n}\n\nconst data1 = [\n  {\n    value: \"dress-shirt-striped\",\n    label: \"Striped Dress Shirt\",\n  },\n  {\n    value: \"relaxed-button-down\",\n    label: \"Relaxed Fit Button Down\",\n  },\n  {\n    value: \"slim-button-down\",\n    label: \"Slim Fit Button Down\",\n  },\n  {\n    value: \"dress-shirt-solid\",\n    label: \"Solid Dress Shirt\",\n    disabled: true,\n  },\n  {\n    value: \"dress-shirt-check\",\n    label: \"Check Dress Shirt\",\n  },\n]\n\nexport const WithText: Story = {\n  render: () => (\n    <Card className=\"max-w-lg\">\n      <h3 className=\"font-semibold text-gray-900 dark:text-gray-50\">\n        Perseverance Rover's Latest Mars Discovery\n      </h3>\n      <p className=\"mt-2 text-sm leading-7 text-gray-900 dark:text-gray-50\">\n        NASA's Perseverance Rover has made an exciting discovery on Mars,\n        finding evidence of ancient microbial life in rock samples. This marks a\n        significant step forward in our understanding of the Red Planet's\n        history and the search for extraterrestrial life.\n      </p>\n    </Card>\n  ),\n}\n\nexport const WithFullDivider: Story = {\n  render: () => (\n    <Card className=\"max-w-lg p-0\">\n      <h3 className=\"p-4 font-semibold text-gray-900 dark:text-gray-50\">\n        Perseverance Rover's Latest Mars Discovery\n      </h3>\n      <p className=\"border-t p-4 text-sm leading-7 text-gray-900 dark:border-gray-900 dark:text-gray-50\">\n        NASA's Perseverance Rover has made an exciting discovery on Mars,\n        finding evidence of ancient microbial life in rock samples. This marks a\n        significant step forward in our understanding of the Red Planet's\n        history and the search for extraterrestrial life.\n      </p>\n    </Card>\n  ),\n}\n\nexport const AsChildList: Story = {\n  render: () => (\n    <ol className=\"flex list-none flex-col gap-4\">\n      <Card asChild>\n        <li className=\"text-gray-900 dark:text-gray-50\">\n          This card will be turned into a {`<li>`} element{\" \"}\n        </li>\n      </Card>\n      <Card asChild>\n        <li className=\"text-gray-900 dark:text-gray-50\">\n          This card will also be turned into a {`<li>`} element{\" \"}\n        </li>\n      </Card>\n    </ol>\n  ),\n}\n\nexport const WithInputs: Story = {\n  render: () => (\n    <Card className=\"mx-auto max-w-lg\">\n      <form>\n        <div className=\"flex gap-3\">\n          <Tabs defaultValue=\"tab1\" className=\"w-full\">\n            <TabsList variant=\"line\" className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n              <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n              <TabsTrigger value=\"tab3\" disabled>\n                Tab 3\n              </TabsTrigger>\n            </TabsList>\n            <div className=\"mt-4\">\n              <TabsContent value=\"tab1\">\n                <p className=\"text-sm text-gray-500 sm:text-gray-500\">\n                  Tab 1 content\n                </p>\n              </TabsContent>\n              <TabsContent value=\"tab2\">\n                <p className=\"text-sm text-gray-500 sm:text-gray-500\">\n                  Tab 2 content\n                </p>\n              </TabsContent>\n              <TabsContent value=\"tab3\">\n                <p className=\"text-sm text-gray-500 sm:text-gray-500\">\n                  Tab 3 content\n                </p>\n              </TabsContent>\n            </div>\n          </Tabs>\n        </div>\n        <div className=\"mt-4 flex flex-col gap-3\">\n          <Label htmlFor=\"name\">Name</Label>\n          <Input id=\"name\" name=\"name\" type=\"text\" placeholder=\"Emma\" />\n        </div>\n        <div className=\"mt-4 flex gap-3\">\n          <Checkbox checked id=\"r1\" />\n          <Label htmlFor=\"r1\">\n            I'd like to be notified by SMS when my order is ready for\n            collection.\n          </Label>\n        </div>\n        <div className=\"mt-4 flex gap-3\">\n          <div className=\"flex items-center space-x-4\">\n            <Switch checked id=\"r1\" />\n            <Label htmlFor=\"r1\">Click this Label check the Switch</Label>\n          </div>\n        </div>\n        <div className=\"mt-4 flex gap-3\">\n          <Textarea id=\"textarea\" name=\"textarea\" className=\"mt-2\" />\n        </div>\n        <div className=\"mt-4 flex gap-3\">\n          <div className=\"flex justify-center\">\n            <RadioGroup>\n              <div className=\"flex items-center gap-x-3\">\n                <RadioGroupItem checked value=\"1\" id=\"radio_1\" />\n                <Label htmlFor=\"radio_1\">First come first serve (FCFS)</Label>\n              </div>\n              <div className=\"flex items-center gap-x-3\">\n                <RadioGroupItem value=\"2\" id=\"radio_2\" />\n                <Label htmlFor=\"radio_2\">By appointment</Label>\n              </div>\n              <div className=\"flex items-center gap-x-3\">\n                <RadioGroupItem value=\"3\" id=\"radio_3\" />\n                <Label htmlFor=\"radio_3\">By time window</Label>\n              </div>\n            </RadioGroup>\n          </div>\n        </div>\n        <div className=\"mt-4 flex gap-3\">\n          <SelectNative>\n            <option value=\"0-18\">18 and under</option>\n            <option value=\"19-39\">19 to 39</option>\n            <option value=\"40-64\">40 to 64</option>\n            <option value=\"65-infinity\">65 and over</option>\n          </SelectNative>\n        </div>\n        <div className=\"mt-4 flex gap-3\">\n          <Select>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select\" />\n            </SelectTrigger>\n            <SelectContent>\n              {data1.map((item) => (\n                <SelectItem key={item.value} value={item.value}>\n                  {item.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"mt-4 flex gap-3\">\n          <Input type=\"file\" />\n        </div>\n\n        <Divider />\n        <div className=\"flex w-full gap-2 *:w-full dark:border-gray-800\">\n          <Button variant=\"light\">Clear</Button>\n          <Button variant=\"secondary\">Clear</Button>\n          <Tooltip content=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus tempor lorem non est congue blandit. Praesent non lorem sodales, suscipit est sed, hendrerit dolor.\">\n            <Button className=\"w-full\" type=\"submit\">\n              Apply\n            </Button>\n          </Tooltip>\n        </div>\n      </form>\n    </Card>\n  ),\n}\n",
      "path": "src/components/Card/card.stories.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Button/Button.tsx",
      "content": "// Tremor Button [v1.0.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-xs transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"dark:disabled:bg-blue-800 dark:disabled:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"dark:disabled:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"dark:disabled:bg-gray-800 dark:disabled:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"dark:disabled:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"dark:disabled:bg-red-950 dark:disabled:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Card/Card.tsx",
      "content": "// Tremor Card [v1.0.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\n\nimport { cx } from \"@/utils/cx\"\n\ninterface CardProps extends React.ComponentPropsWithoutRef<\"div\"> {\n  asChild?: boolean\n}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({ className, asChild, ...props }, forwardedRef) => {\n    const Component = asChild ? Slot : \"div\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"relative w-full rounded-lg border p-6 text-left shadow-xs\",\n          // background color\n          \"bg-white dark:bg-[#090E1A]\",\n          // border color\n          \"border-gray-200 dark:border-gray-900\",\n          className,\n        )}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      />\n    )\n  },\n)\n\nCard.displayName = \"Card\"\n\nexport { Card, type CardProps }\n",
      "path": "src/components/Card/Card.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Checkbox/Checkbox.tsx",
      "content": "// Tremor Checkbox [v1.0.0]\n\nimport React from \"react\"\nimport * as CheckboxPrimitives from \"@radix-ui/react-checkbox\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitives.Root>\n>(({ className, checked, ...props }, forwardedRef) => {\n  return (\n    <CheckboxPrimitives.Root\n      ref={forwardedRef}\n      {...props}\n      checked={checked}\n      className={cx(\n        // base\n        \"relative inline-flex size-4 shrink-0 appearance-none items-center justify-center rounded-sm shadow-xs outline-hidden ring-1 ring-inset transition duration-100 enabled:cursor-pointer\",\n        // text color\n        \"text-white dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // ring color\n        \"ring-gray-300 dark:ring-gray-800\",\n        // disabled\n        \"data-disabled:bg-gray-100 data-disabled:text-gray-400 data-disabled:ring-gray-300\",\n        \"dark:data-disabled:bg-gray-800 dark:data-disabled:text-gray-500 dark:data-disabled:ring-gray-700\",\n        // checked and enabled\n        \"enabled:data-[state=checked]:bg-blue-500 enabled:data-[state=checked]:ring-0 enabled:data-[state=checked]:ring-transparent\",\n        // indeterminate\n        \"enabled:data-[state=indeterminate]:bg-blue-500 enabled:data-[state=indeterminate]:ring-0 enabled:data-[state=indeterminate]:ring-transparent\",\n        // focus\n        focusRing,\n        className,\n      )}\n      tremor-id=\"tremor-raw\"\n    >\n      <CheckboxPrimitives.Indicator\n        asChild\n        className=\"flex size-full items-center justify-center\"\n      >\n        {checked === \"indeterminate\" ? (\n          <svg\n            aria-hidden=\"true\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 16 16\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <line\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeWidth=\"2\"\n              x1=\"4\"\n              x2=\"12\"\n              y1=\"8\"\n              y2=\"8\"\n            ></line>\n          </svg>\n        ) : (\n          <svg\n            aria-hidden=\"true\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 16 16\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M11.2 5.59998L6.79999 9.99998L4.79999 7.99998\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n            ></path>\n          </svg>\n        )}\n      </CheckboxPrimitives.Indicator>\n    </CheckboxPrimitives.Root>\n  )\n})\n\nCheckbox.displayName = \"Checkbox\"\n\nexport { Checkbox }\n",
      "path": "src/components/Checkbox/Checkbox.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Divider/Divider.tsx",
      "content": "// Tremor Divider [v1.0.0]\n\nimport React from \"react\"\n\nimport { cx } from \"@/utils/cx\"\n\ntype DividerProps = React.ComponentPropsWithoutRef<\"div\">\n\nconst Divider = React.forwardRef<HTMLDivElement, DividerProps>(\n  ({ className, children, ...props }, forwardedRef) => (\n    <div\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"mx-auto my-6 flex w-full items-center justify-between gap-3 text-sm\",\n        // text color\n        \"text-gray-500 dark:text-gray-500\",\n        className,\n      )}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    >\n      {children ? (\n        <>\n          <div\n            className={cx(\n              // base\n              \"h-[1px] w-full\",\n              // background color\n              \"bg-gray-200 dark:bg-gray-800\",\n            )}\n          />\n          <div className=\"whitespace-nowrap text-inherit\">{children}</div>\n          <div\n            className={cx(\n              // base\n              \"h-[1px] w-full\",\n              // background color\n              \"bg-gray-200 dark:bg-gray-800\",\n            )}\n          />\n        </>\n      ) : (\n        <div\n          className={cx(\n            // base\n            \"h-[1px] w-full\",\n            // background color\n            \"bg-gray-200 dark:bg-gray-800\",\n          )}\n        />\n      )}\n    </div>\n  ),\n)\n\nDivider.displayName = \"Divider\"\n\nexport { Divider }\n",
      "path": "src/components/Divider/Divider.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Input/Input.tsx",
      "content": "// Tremor Input [v2.0.0]\n\nimport React from \"react\"\nimport { RiEyeFill, RiEyeOffFill, RiSearchLine } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusInput } from \"@/utils/focusInput\"\nimport { focusRing } from \"@/utils/focusRing\"\nimport { hasErrorInput } from \"@/utils/hasErrorInput\"\n\nconst inputStyles = tv({\n  base: [\n    // base\n    \"relative block w-full appearance-none rounded-md border px-2.5 py-2 shadow-xs outline-hidden transition sm:text-sm\",\n    // border color\n    \"border-gray-300 dark:border-gray-800\",\n    // text color\n    \"text-gray-900 dark:text-gray-50\",\n    // placeholder color\n    \"placeholder-gray-400 dark:placeholder-gray-500\",\n    // background color\n    \"bg-white dark:bg-gray-950\",\n    // disabled\n    \"disabled:border-gray-300 disabled:bg-gray-100 disabled:text-gray-400\",\n    \"dark:disabled:border-gray-700 dark:disabled:bg-gray-800 dark:disabled:text-gray-500\",\n    // file\n    [\n      \"file:-my-2 file:-ml-2.5 file:cursor-pointer file:rounded-l-[5px] file:rounded-r-none file:border-0 file:px-3 file:py-2 file:outline-hidden focus:outline-hidden disabled:pointer-events-none file:disabled:pointer-events-none\",\n      \"file:border-solid file:border-gray-300 file:bg-gray-50 file:text-gray-500 file:hover:bg-gray-100 dark:file:border-gray-800 dark:file:bg-gray-950 dark:file:hover:bg-gray-900/20 dark:file:disabled:border-gray-700\",\n      \"file:[border-inline-end-width:1px] file:[margin-inline-end:0.75rem]\",\n      \"file:disabled:bg-gray-100 file:disabled:text-gray-500 dark:file:disabled:bg-gray-800\",\n    ],\n    // focus\n    focusInput,\n    // invalid (optional)\n    // \"dark:aria-invalid:ring-red-400/20 aria-invalid:ring-2 aria-invalid:ring-red-200 aria-invalid:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n    // remove search cancel button (optional)\n    \"[&::-webkit-search-cancel-button]:hidden [&::-webkit-search-decoration]:hidden\",\n  ],\n  variants: {\n    hasError: {\n      true: hasErrorInput,\n    },\n    // number input\n    enableStepper: {\n      false:\n        \"[appearance:textfield] [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none\",\n    },\n  },\n})\n\ninterface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement>,\n    VariantProps<typeof inputStyles> {\n  inputClassName?: string\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      className,\n      inputClassName,\n      hasError,\n      enableStepper = true,\n      type,\n      ...props\n    }: InputProps,\n    forwardedRef,\n  ) => {\n    const [typeState, setTypeState] = React.useState(type)\n\n    const isPassword = type === \"password\"\n    const isSearch = type === \"search\"\n\n    return (\n      <div className={cx(\"relative w-full\", className)} tremor-id=\"tremor-raw\">\n        <input\n          ref={forwardedRef}\n          type={isPassword ? typeState : type}\n          className={cx(\n            inputStyles({ hasError, enableStepper }),\n            {\n              \"pl-8\": isSearch,\n              \"pr-10\": isPassword,\n            },\n            inputClassName,\n          )}\n          {...props}\n        />\n        {isSearch && (\n          <div\n            className={cx(\n              // base\n              \"pointer-events-none absolute bottom-0 left-2 flex h-full items-center justify-center\",\n              // text color\n              \"text-gray-400 dark:text-gray-600\",\n            )}\n          >\n            <RiSearchLine\n              className=\"size-[1.125rem] shrink-0\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        )}\n        {isPassword && (\n          <div\n            className={cx(\n              \"absolute bottom-0 right-0 flex h-full items-center justify-center px-3\",\n            )}\n          >\n            <button\n              aria-label=\"Change password visibility\"\n              className={cx(\n                // base\n                \"h-fit w-fit rounded-xs outline-hidden transition-all\",\n                // text\n                \"text-gray-400 dark:text-gray-600\",\n                // hover\n                \"hover:text-gray-500 dark:hover:text-gray-500\",\n                focusRing,\n              )}\n              type=\"button\"\n              onClick={() => {\n                setTypeState(typeState === \"password\" ? \"text\" : \"password\")\n              }}\n            >\n              <span className=\"sr-only\">\n                {typeState === \"password\" ? \"Show password\" : \"Hide password\"}\n              </span>\n              {typeState === \"password\" ? (\n                <RiEyeFill aria-hidden=\"true\" className=\"size-5 shrink-0\" />\n              ) : (\n                <RiEyeOffFill aria-hidden=\"true\" className=\"size-5 shrink-0\" />\n              )}\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  },\n)\n\nInput.displayName = \"Input\"\n\nexport { Input, inputStyles, type InputProps }\n",
      "path": "src/components/Input/Input.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Label/Label.tsx",
      "content": "// Tremor Label [v0.0.2]\n\nimport React from \"react\"\nimport * as LabelPrimitives from \"@radix-ui/react-label\"\n\nimport { cx } from \"@/utils/cx\"\n\ninterface LabelProps\n  extends React.ComponentPropsWithoutRef<typeof LabelPrimitives.Root> {\n  disabled?: boolean\n}\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitives.Root>,\n  LabelProps\n>(({ className, disabled, ...props }, forwardedRef) => (\n  <LabelPrimitives.Root\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-sm leading-none\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      {\n        \"text-gray-400 dark:text-gray-600\": disabled,\n      },\n      className,\n    )}\n    aria-disabled={disabled}\n    tremor-id=\"tremor-raw\"\n    {...props}\n  />\n))\n\nLabel.displayName = \"Label\"\n\nexport { Label }\n",
      "path": "src/components/Label/Label.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/RadioGroup/RadioGroup.tsx",
      "content": "// Tremor RadioGroup [v1.0.0]\n\nimport React from \"react\"\nimport * as RadioGroupPrimitives from \"@radix-ui/react-radio-group\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Root>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <RadioGroupPrimitives.Root\n      ref={forwardedRef}\n      className={cx(\"grid gap-2\", className)}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    />\n  )\n})\n\nRadioGroup.displayName = \"RadioGroup\"\n\nconst RadioGroupIndicator = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitives.Indicator>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Indicator>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <RadioGroupPrimitives.Indicator\n      ref={forwardedRef}\n      className={cx(\"flex items-center justify-center\", className)}\n      {...props}\n    >\n      <div\n        className={cx(\n          // base\n          \"size-1.5 shrink-0 rounded-full\",\n          // indicator\n          \"bg-white\",\n          // disabled\n          \"group-data-disabled:bg-gray-400 dark:group-data-disabled:bg-gray-500\",\n        )}\n      />\n    </RadioGroupPrimitives.Indicator>\n  )\n})\n\nRadioGroupIndicator.displayName = \"RadioGroupIndicator\"\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitives.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Item>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <RadioGroupPrimitives.Item\n      ref={forwardedRef}\n      className={cx(\n        \"group relative flex size-4 appearance-none items-center justify-center outline-hidden\",\n        className,\n      )}\n      {...props}\n    >\n      <div\n        className={cx(\n          // base\n          \"flex size-4 shrink-0 items-center justify-center rounded-full border shadow-xs\",\n          // border color\n          \"border-gray-300 dark:border-gray-800\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // checked\n          \"group-data-[state=checked]:border-0 group-data-[state=checked]:border-transparent group-data-[state=checked]:bg-blue-500\",\n          // disabled\n          \"group-data-disabled:border\",\n          \"group-data-disabled:border-gray-300 group-data-disabled:bg-gray-100 group-data-disabled:text-gray-400\",\n          \"dark:group-data-disabled:border-gray-700 dark:group-data-disabled:bg-gray-800\",\n          // focus\n          focusRing,\n        )}\n      >\n        <RadioGroupIndicator />\n      </div>\n    </RadioGroupPrimitives.Item>\n  )\n})\n\nRadioGroupItem.displayName = \"RadioGroupItem\"\n\nexport { RadioGroup, RadioGroupItem }\n",
      "path": "src/components/RadioGroup/RadioGroup.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Select/Select.tsx",
      "content": "// Tremor Select [v1.0.0]\n\nimport React from \"react\"\nimport * as SelectPrimitives from \"@radix-ui/react-select\"\nimport {\n  RiArrowDownSLine,\n  RiArrowUpSLine,\n  RiCheckLine,\n  RiExpandUpDownLine,\n} from \"@remixicon/react\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusInput } from \"@/utils/focusInput\"\nimport { hasErrorInput } from \"@/utils/hasErrorInput\"\n\nconst Select = SelectPrimitives.Root\nSelect.displayName = \"Select\"\n\nconst SelectGroup = SelectPrimitives.Group\nSelectGroup.displayName = \"SelectGroup\"\n\nconst SelectValue = SelectPrimitives.Value\nSelectValue.displayName = \"SelectValue\"\n\nconst selectTriggerStyles = [\n  cx(\n    // base\n    \"group/trigger flex w-full select-none items-center justify-between gap-2 truncate rounded-md border px-3 py-2 shadow-xs outline-hidden transition sm:text-sm\",\n    // border color\n    \"border-gray-300 dark:border-gray-800\",\n    // text color\n    \"text-gray-900 dark:text-gray-50\",\n    // placeholder\n    \"data-placeholder:text-gray-500 dark:data-placeholder:text-gray-500\",\n    // background color\n    \"bg-white dark:bg-gray-950\",\n    // hover\n    \"hover:bg-gray-50 dark:hover:bg-gray-950/50\",\n    // disabled\n    \"data-disabled:bg-gray-100 data-disabled:text-gray-400\",\n    \"dark:data-disabled:border-gray-700 dark:data-disabled:bg-gray-800 dark:data-disabled:text-gray-500\",\n    focusInput,\n    // invalid (optional)\n    // \"dark:aria-invalid:ring-red-400/20 aria-invalid:ring-2 aria-invalid:ring-red-200 aria-invalid:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n  ),\n]\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Trigger> & {\n    hasError?: boolean\n  }\n>(({ className, hasError, children, ...props }, forwardedRef) => {\n  return (\n    <SelectPrimitives.Trigger\n      ref={forwardedRef}\n      className={cx(\n        selectTriggerStyles,\n        hasError ? hasErrorInput : \"\",\n        className,\n      )}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    >\n      <span className=\"truncate\">{children}</span>\n      <SelectPrimitives.Icon asChild>\n        <RiExpandUpDownLine\n          className={cx(\n            // base\n            \"size-4 shrink-0\",\n            // text color\n            \"text-gray-400 dark:text-gray-600\",\n            // disabled\n            \"group-data-disabled/trigger:text-gray-300 dark:group-data-disabled/trigger:text-gray-600\",\n          )}\n        />\n      </SelectPrimitives.Icon>\n    </SelectPrimitives.Trigger>\n  )\n})\n\nSelectTrigger.displayName = \"SelectTrigger\"\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.ScrollUpButton>\n>(({ className, ...props }, forwardedRef) => (\n  <SelectPrimitives.ScrollUpButton\n    ref={forwardedRef}\n    className={cx(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <RiArrowUpSLine className=\"size-3 shrink-0\" aria-hidden=\"true\" />\n  </SelectPrimitives.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitives.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.ScrollDownButton>\n>(({ className, ...props }, forwardedRef) => (\n  <SelectPrimitives.ScrollDownButton\n    ref={forwardedRef}\n    className={cx(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <RiArrowDownSLine className=\"size-3 shrink-0\" aria-hidden=\"true\" />\n  </SelectPrimitives.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitives.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Content>\n>(\n  (\n    {\n      className,\n      position = \"popper\",\n      children,\n      sideOffset = 8,\n      collisionPadding = 10,\n      ...props\n    },\n    forwardedRef,\n  ) => (\n    <SelectPrimitives.Portal>\n      <SelectPrimitives.Content\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"relative z-50 overflow-hidden rounded-md border shadow-xl shadow-black/[2.5%]\",\n          // widths\n          \"min-w-[calc(var(--radix-select-trigger-width)-2px)] max-w-[95vw]\",\n          // heights\n          \"max-h-(--radix-select-content-available-height)\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // text color\n          \"text-gray-900 dark:text-gray-50\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // transition\n          \"will-change-[transform,opacity]\",\n          // \"data-[state=open]:animate-slide-down-and-fade\",\n          \"data-[state=closed]:animate-hide\",\n          \"data-[side=bottom]:animate-slide-down-and-fade data-[side=left]:animate-slide-left-and-fade data-[side=right]:animate-slide-right-and-fade data-[side=top]:animate-slide-up-and-fade\",\n          className,\n        )}\n        sideOffset={sideOffset}\n        position={position}\n        collisionPadding={collisionPadding}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitives.Viewport\n          className={cx(\n            \"p-1\",\n            position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[calc(var(--radix-select-trigger-width))]\",\n          )}\n        >\n          {children}\n        </SelectPrimitives.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitives.Content>\n    </SelectPrimitives.Portal>\n  ),\n)\n\nSelectContent.displayName = \"SelectContent\"\n\nconst SelectGroupLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Label>\n>(({ className, ...props }, forwardedRef) => (\n  <SelectPrimitives.Label\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"px-3 py-2 text-xs font-medium tracking-wide\",\n      // text color\n      \"text-gray-500 dark:text-gray-500\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nSelectGroupLabel.displayName = \"SelectGroupLabel\"\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Item>\n>(({ className, children, ...props }, forwardedRef) => {\n  return (\n    <SelectPrimitives.Item\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"grid cursor-pointer grid-cols-[1fr_20px] gap-x-2 rounded-sm px-3 py-2 outline-hidden transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // disabled\n        \"data-disabled:pointer-events-none data-disabled:text-gray-400 data-disabled:hover:bg-none dark:data-disabled:text-gray-600\",\n        // focus\n        \"focus-visible:bg-gray-100 dark:focus-visible:bg-gray-900\",\n        // hover\n        \"hover:bg-gray-100 dark:hover:bg-gray-900\",\n        className,\n      )}\n      {...props}\n    >\n      <SelectPrimitives.ItemText className=\"flex-1 truncate\">\n        {children}\n      </SelectPrimitives.ItemText>\n      <SelectPrimitives.ItemIndicator>\n        <RiCheckLine\n          className=\"size-5 shrink-0 text-gray-800 dark:text-gray-200\"\n          aria-hidden=\"true\"\n        />\n      </SelectPrimitives.ItemIndicator>\n    </SelectPrimitives.Item>\n  )\n})\n\nSelectItem.displayName = \"SelectItem\"\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Separator>\n>(({ className, ...props }, forwardedRef) => (\n  <SelectPrimitives.Separator\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"-mx-1 my-1 h-px\",\n      // background color\n      \"bg-gray-300 dark:bg-gray-700\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nSelectSeparator.displayName = \"SelectSeparator\"\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectGroupLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n",
      "path": "src/components/Select/Select.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/SelectNative/SelectNative.tsx",
      "content": "// Tremor SelectNative [v1.0.0]\n\nimport React from \"react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusInput } from \"@/utils/focusInput\"\nimport { hasErrorInput } from \"@/utils/hasErrorInput\"\n\nconst selectNativeStyles = tv({\n  base: [\n    // base\n    \"peer w-full cursor-pointer appearance-none truncate rounded-md border py-2 pl-3 pr-7 shadow-xs outline-hidden transition-all sm:text-sm\",\n    // background color\n    \"bg-white dark:bg-gray-950\",\n    // border color\n    \"border-gray-300 dark:border-gray-800\",\n    // text color\n    \"text-gray-900 dark:text-gray-50\",\n    // placeholder color\n    \"placeholder-gray-400 dark:placeholder-gray-500\",\n    // hover\n    \"hover:bg-gray-50 dark:hover:bg-gray-950/50\",\n    // disabled\n    \"disabled:pointer-events-none\",\n    \"disabled:bg-gray-100 disabled:text-gray-400\",\n    \"dark:disabled:border-gray-700 dark:disabled:bg-gray-800 dark:disabled:text-gray-500\",\n    // focus\n    focusInput,\n    // invalid (optional)\n    // \"dark:aria-invalid:ring-red-400/20 aria-invalid:ring-2 aria-invalid:ring-red-200 aria-invalid:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n  ],\n  variants: {\n    hasError: {\n      true: hasErrorInput,\n    },\n  },\n})\n\ninterface SelectNativeProps\n  extends React.InputHTMLAttributes<HTMLSelectElement>,\n    VariantProps<typeof selectNativeStyles> {}\n\nconst SelectNative = React.forwardRef<HTMLSelectElement, SelectNativeProps>(\n  ({ className, hasError, ...props }: SelectNativeProps, forwardedRef) => {\n    return (\n      <select\n        ref={forwardedRef}\n        className={cx(selectNativeStyles({ hasError }), className)}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      />\n    )\n  },\n)\n\nSelectNative.displayName = \"SelectNative\"\n\nexport { SelectNative, selectNativeStyles, type SelectNativeProps }\n",
      "path": "src/components/SelectNative/SelectNative.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Switch/Switch.tsx",
      "content": "// Tremor Switch [v1.0.0]\n\nimport React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst switchVariants = tv({\n  slots: {\n    root: [\n      // base\n      \"group relative isolate inline-flex shrink-0 cursor-pointer items-center rounded-full p-0.5 shadow-inner outline-hidden ring-1 ring-inset transition-all\",\n      \"bg-gray-200 dark:bg-gray-950\",\n      // ring color\n      \"ring-black/5 dark:ring-gray-800\",\n      // checked\n      \"data-[state=checked]:bg-blue-500 dark:data-[state=checked]:bg-blue-500\",\n      // disabled\n      \"data-disabled:cursor-default\",\n      // disabled checked\n      \"data-disabled:data-[state=checked]:bg-blue-200\",\n      \"data-disabled:data-[state=checked]:ring-gray-300\",\n      // disabled checked dark\n      \"dark:data-disabled:data-[state=checked]:ring-gray-900\",\n      \"dark:data-disabled:data-[state=checked]:bg-blue-900\",\n      // disabled unchecked\n      \"data-disabled:data-[state=unchecked]:ring-gray-300\",\n      \"data-disabled:data-[state=unchecked]:bg-gray-100\",\n      // disabled unchecked dark\n      \"dark:data-disabled:data-[state=unchecked]:ring-gray-700\",\n      \"dark:data-disabled:data-[state=unchecked]:bg-gray-800\",\n      focusRing,\n    ],\n    thumb: [\n      // base\n      \"pointer-events-none relative inline-block transform appearance-none rounded-full border-none shadow-lg outline-hidden transition-all duration-150 ease-in-out focus:border-none focus:outline-hidden focus:outline-transparent\",\n      // background color\n      \"bg-white dark:bg-gray-50\",\n      // disabled\n      \"group-data-disabled:shadow-none\",\n      \"group-data-disabled:bg-gray-50 dark:group-data-disabled:bg-gray-500\",\n    ],\n  },\n  variants: {\n    size: {\n      default: {\n        root: \"h-5 w-9\",\n        thumb:\n          \"h-4 w-4 data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\",\n      },\n      small: {\n        root: \"h-4 w-7\",\n        thumb:\n          \"h-3 w-3 data-[state=checked]:translate-x-3 data-[state=unchecked]:translate-x-0\",\n      },\n    },\n  },\n  defaultVariants: {\n    size: \"default\",\n  },\n})\n\ninterface SwitchProps\n  extends Omit<\n      React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>,\n      \"asChild\"\n    >,\n    VariantProps<typeof switchVariants> {}\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  SwitchProps\n>(({ className, size, ...props }: SwitchProps, forwardedRef) => {\n  const { root, thumb } = switchVariants({ size })\n  return (\n    <SwitchPrimitives.Root\n      ref={forwardedRef}\n      className={cx(root(), className)}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    >\n      <SwitchPrimitives.Thumb className={cx(thumb())} />\n    </SwitchPrimitives.Root>\n  )\n})\n\nSwitch.displayName = \"Switch\"\n\nexport { Switch }\n",
      "path": "src/components/Switch/Switch.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Tabs/Tabs.tsx",
      "content": "// Tremor Tabs [v1.0.0]\n\nimport React from \"react\"\nimport * as TabsPrimitives from \"@radix-ui/react-tabs\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst Tabs = (\n  props: Omit<\n    React.ComponentPropsWithoutRef<typeof TabsPrimitives.Root>,\n    \"orientation\"\n  >,\n) => {\n  return <TabsPrimitives.Root tremor-id=\"tremor-raw\" {...props} />\n}\n\nTabs.displayName = \"Tabs\"\n\ntype TabsListVariant = \"line\" | \"solid\"\n\nconst TabsListVariantContext = React.createContext<TabsListVariant>(\"line\")\n\ninterface TabsListProps\n  extends React.ComponentPropsWithoutRef<typeof TabsPrimitives.List> {\n  variant?: TabsListVariant\n}\n\nconst variantStyles: Record<TabsListVariant, string> = {\n  line: cx(\n    // base\n    \"flex items-center justify-start border-b\",\n    // border color\n    \"border-gray-200 dark:border-gray-800\",\n  ),\n  solid: cx(\n    // base\n    \"inline-flex items-center justify-center rounded-md p-1\",\n    // background color\n    \"bg-gray-100 dark:bg-gray-900\",\n  ),\n}\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitives.List>,\n  TabsListProps\n>(({ className, variant = \"line\", children, ...props }, forwardedRef) => (\n  <TabsPrimitives.List\n    ref={forwardedRef}\n    className={cx(variantStyles[variant], className)}\n    {...props}\n  >\n    <TabsListVariantContext.Provider value={variant}>\n      {children}\n    </TabsListVariantContext.Provider>\n  </TabsPrimitives.List>\n))\n\nTabsList.displayName = \"TabsList\"\n\nfunction getVariantStyles(tabVariant: TabsListVariant) {\n  switch (tabVariant) {\n    case \"line\":\n      return cx(\n        // base\n        \"-mb-px items-center justify-center whitespace-nowrap border-b-2 border-transparent px-3 pb-2 text-sm font-medium transition-all\",\n        // text color\n        \"text-gray-500 dark:text-gray-500\",\n        // hover\n        \"hover:text-gray-700 dark:hover:text-gray-400\",\n        // border hover\n        \"hover:border-gray-300 dark:hover:border-gray-400\",\n        // selected\n        \"data-[state=active]:border-blue-500 data-[state=active]:text-blue-500\",\n        \"dark:data-[state=active]:border-blue-500 dark:data-[state=active]:text-blue-500\",\n        // disabled\n        \"data-disabled:pointer-events-none\",\n        \"data-disabled:text-gray-300 dark:data-disabled:text-gray-700\",\n      )\n    case \"solid\":\n      return cx(\n        // base\n        \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1 text-sm font-medium ring-1 ring-inset transition-all\",\n        // text color\n        \"text-gray-500 dark:text-gray-400\",\n        // hover\n        \"hover:text-gray-700 dark:hover:text-gray-200\",\n        // ring\n        \"ring-transparent\",\n        // selected\n        \"data-[state=active]:bg-white data-[state=active]:text-gray-900 data-[state=active]:shadow-sm\",\n        \"dark:data-[state=active]:bg-gray-950 dark:data-[state=active]:text-gray-50\",\n        // disabled\n        \"data-disabled:pointer-events-none data-disabled:text-gray-400 data-disabled:opacity-50 dark:data-disabled:text-gray-600\",\n      )\n  }\n}\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitives.Trigger>\n>(({ className, children, ...props }, forwardedRef) => {\n  const variant = React.useContext(TabsListVariantContext)\n  return (\n    <TabsPrimitives.Trigger\n      ref={forwardedRef}\n      className={cx(getVariantStyles(variant), focusRing, className)}\n      {...props}\n    >\n      {children}\n    </TabsPrimitives.Trigger>\n  )\n})\n\nTabsTrigger.displayName = \"TabsTrigger\"\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitives.Content>\n>(({ className, ...props }, forwardedRef) => (\n  <TabsPrimitives.Content\n    ref={forwardedRef}\n    className={cx(\"outline-hidden\", focusRing, className)}\n    {...props}\n  />\n))\n\nTabsContent.displayName = \"TabsContent\"\n\nexport { Tabs, TabsContent, TabsList, TabsTrigger }\n",
      "path": "src/components/Tabs/Tabs.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Textarea/Textarea.tsx",
      "content": "// Tremor Textarea [v1.0.0]\n\nimport React from \"react\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusInput } from \"@/utils/focusInput\"\nimport { hasErrorInput } from \"@/utils/hasErrorInput\"\n\ninterface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  hasError?: boolean\n}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, hasError, ...props }: TextareaProps, forwardedRef) => {\n    return (\n      <textarea\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"flex min-h-[4rem] w-full rounded-md border px-3 py-1.5 shadow-xs outline-hidden transition-colors sm:text-sm\",\n          // text color\n          \"text-gray-900 dark:text-gray-50\",\n          // border color\n          \"border-gray-300 dark:border-gray-800\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // placeholder color\n          \"placeholder-gray-400 dark:placeholder-gray-500\",\n          // disabled\n          \"disabled:border-gray-300 disabled:bg-gray-100 disabled:text-gray-300\",\n          \"dark:disabled:border-gray-700 dark:disabled:bg-gray-800 dark:disabled:text-gray-500\",\n          // focus\n          focusInput,\n          // error\n          hasError ? hasErrorInput : \"\",\n          // invalid (optional)\n          // \"dark:aria-invalid:ring-red-400/20 aria-invalid:ring-2 aria-invalid:ring-red-200 aria-invalid:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n          className,\n        )}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      />\n    )\n  },\n)\n\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea, type TextareaProps }\n",
      "path": "src/components/Textarea/Textarea.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Tooltip/Tooltip.tsx",
      "content": "// Tremor Tooltip [v1.0.0]\n\nimport React from \"react\"\nimport * as TooltipPrimitives from \"@radix-ui/react-tooltip\"\n\nimport { cx } from \"@/utils/cx\"\n\ninterface TooltipProps\n  extends Omit<TooltipPrimitives.TooltipContentProps, \"content\" | \"onClick\">,\n  Pick<\n    TooltipPrimitives.TooltipProps,\n    \"open\" | \"defaultOpen\" | \"onOpenChange\" | \"delayDuration\"\n  > {\n  content: React.ReactNode\n  onClick?: React.MouseEventHandler<HTMLButtonElement>\n  side?: \"bottom\" | \"left\" | \"top\" | \"right\"\n  showArrow?: boolean\n}\n\nconst Tooltip = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitives.Content>,\n  TooltipProps\n>(\n  (\n    {\n      children,\n      className,\n      content,\n      delayDuration,\n      defaultOpen,\n      open,\n      onClick,\n      onOpenChange,\n      showArrow = true,\n      side,\n      sideOffset = 10,\n      asChild,\n      ...props\n    }: TooltipProps,\n    forwardedRef,\n  ) => {\n    return (\n      <TooltipPrimitives.Provider delayDuration={150}>\n        <TooltipPrimitives.Root\n          open={open}\n          defaultOpen={defaultOpen}\n          onOpenChange={onOpenChange}\n          delayDuration={delayDuration}\n          tremor-id=\"tremor-raw\"\n        >\n          <TooltipPrimitives.Trigger onClick={onClick} asChild={asChild}>\n            {children}\n          </TooltipPrimitives.Trigger>\n          <TooltipPrimitives.Portal>\n            <TooltipPrimitives.Content\n              ref={forwardedRef}\n              side={side}\n              sideOffset={sideOffset}\n              align=\"center\"\n              className={cx(\n                // base\n                \"max-w-60 select-none rounded-md px-2.5 py-1.5 text-sm leading-5 shadow-md\",\n                // text color\n                \"text-gray-50 dark:text-gray-900\",\n                // background color\n                \"bg-gray-900 dark:bg-gray-50\",\n                // transition\n                \"will-change-[transform,opacity]\",\n                \"data-[side=bottom]:animate-slide-down-and-fade data-[side=left]:animate-slide-left-and-fade data-[side=right]:animate-slide-right-and-fade data-[side=top]:animate-slide-up-and-fade data-[state=closed]:animate-hide\",\n                className,\n              )}\n              {...props}\n            >\n              {content}\n              {showArrow ? (\n                <TooltipPrimitives.Arrow\n                  className=\"border-none fill-gray-900 dark:fill-gray-50\"\n                  width={12}\n                  height={7}\n                  aria-hidden=\"true\"\n                />\n              ) : null}\n            </TooltipPrimitives.Content>\n          </TooltipPrimitives.Portal>\n        </TooltipPrimitives.Root>\n      </TooltipPrimitives.Provider>\n    )\n  },\n)\n\nTooltip.displayName = \"Tooltip\"\n\nexport { Tooltip, type TooltipProps }\n",
      "path": "src/components/Tooltip/Tooltip.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusInput.ts",
      "content": "// Tremor focusInput [v0.0.2]\n\nexport const focusInput = [\n  // base\n  \"focus:ring-2\",\n  // ring color\n  \"focus:ring-blue-200 dark:focus:ring-blue-700/30\",\n  // border color\n  \"focus:border-blue-500 dark:focus:border-blue-700\",\n]\n",
      "path": "src/utils/focusInput.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/hasErrorInput.ts",
      "content": "// Tremor hasErrorInput [v0.0.1]\n\nexport const hasErrorInput = [\n  // base\n  \"ring-2\",\n  // border color\n  \"border-red-500 dark:border-red-700\",\n  // ring color\n  \"ring-red-200 dark:ring-red-700/30\",\n]\n",
      "path": "src/utils/hasErrorInput.ts"
    }
  ]
}
