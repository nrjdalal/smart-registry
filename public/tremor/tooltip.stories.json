{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tooltip.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "@radix-ui/react-tooltip",
    "@remixicon/react",
    "tailwind-variants"
  ],
  "devDependencies": [
    "@storybook/react"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Tooltip/tooltip.stories.tsx",
      "content": "import { RiInformation2Fill } from \"@remixicon/react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Button } from \"@/components/Button/Button\"\nimport { Tooltip } from \"@/components/Tooltip/Tooltip\"\n\nconst meta: Meta<typeof Tooltip> = {\n  title: \"ui/Tooltip\",\n  component: Tooltip,\n  argTypes: {\n    side: {\n      options: [\"top\", \"bottom\", \"left\", \"right\"],\n      control: { type: \"radio\" },\n    },\n  },\n}\n\nexport default meta\n\ntype Story = StoryObj<typeof Tooltip>\n\nexport const Default: Story = {\n  render: () => (\n    <Tooltip content=\"Which KPIs are the most visited in your project\">\n      <p className=\"text-gray-700 dark:text-gray-700\">Show tooltip</p>\n    </Tooltip>\n  ),\n}\n\nexport const TooltipSides: Story = {\n  parameters: {\n    layout: \"centered\",\n  },\n  render: () => (\n    <div className=\"flex flex-wrap justify-center gap-6\">\n      <Tooltip side=\"top\" content=\"Tooltip\">\n        <span className=\"rounded-md bg-gray-100 p-2 font-medium text-gray-700 dark:border dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300\">\n          Top\n        </span>\n      </Tooltip>\n      <Tooltip side=\"right\" content=\"Tooltip\">\n        <span className=\"rounded-md bg-gray-100 p-2 font-medium text-gray-700 dark:border dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300\">\n          Right\n        </span>\n      </Tooltip>\n      <Tooltip side=\"bottom\" content=\"Tooltip\">\n        <span className=\"rounded-md bg-gray-100 p-2 font-medium text-gray-700 dark:border dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300\">\n          Bottom\n        </span>\n      </Tooltip>\n      <Tooltip side=\"left\" content=\"Tooltip\">\n        <span className=\"rounded-md bg-gray-100 p-2 font-medium text-gray-700 dark:border dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300\">\n          Left\n        </span>\n      </Tooltip>\n    </div>\n  ),\n}\n\nexport const WithoutArrow: Story = {\n  render: () => (\n    <Tooltip\n      content=\"Which KPIs are the most visited in your project\"\n      showArrow={false}\n    >\n      <p className=\"text-gray-700 dark:text-gray-700\">Show tooltip</p>\n    </Tooltip>\n  ),\n}\n\nexport const Icon: Story = {\n  render: () => (\n    <Tooltip side=\"top\" content=\"The quick brown fox jumps over the lazy dog.\">\n      <RiInformation2Fill className=\"h-5 w-5 text-gray-700 dark:text-gray-700\" />\n    </Tooltip>\n  ),\n}\n\nexport const DefaultOpen: Story = {\n  render: () => (\n    <Tooltip\n      side=\"left\"\n      defaultOpen\n      content=\"The quick brown fox jumps over the lazy dog.\"\n    >\n      <RiInformation2Fill className=\"h-5 w-5 text-gray-700\" />\n    </Tooltip>\n  ),\n}\n\nexport const WrappedAroundButton: Story = {\n  render: () => (\n    <>\n      <Tooltip content=\"Once you submitted this request, there is no way back.\">\n        <Button variant=\"secondary\">Submit request</Button>\n      </Tooltip>\n      <p className=\"mt-4 max-w-sm leading-6 text-gray-700 dark:text-gray-700\">\n        You can hover over the button to see a tooltip, while it still functions\n        as a button.\n      </p>\n    </>\n  ),\n}\n",
      "path": "src/components/Tooltip/tooltip.stories.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Button/Button.tsx",
      "content": "// Tremor Button [v1.0.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-xs transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"dark:disabled:bg-blue-800 dark:disabled:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"dark:disabled:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"dark:disabled:bg-gray-800 dark:disabled:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"dark:disabled:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"dark:disabled:bg-red-950 dark:disabled:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Tooltip/Tooltip.tsx",
      "content": "// Tremor Tooltip [v1.0.0]\n\nimport React from \"react\"\nimport * as TooltipPrimitives from \"@radix-ui/react-tooltip\"\n\nimport { cx } from \"@/utils/cx\"\n\ninterface TooltipProps\n  extends Omit<TooltipPrimitives.TooltipContentProps, \"content\" | \"onClick\">,\n  Pick<\n    TooltipPrimitives.TooltipProps,\n    \"open\" | \"defaultOpen\" | \"onOpenChange\" | \"delayDuration\"\n  > {\n  content: React.ReactNode\n  onClick?: React.MouseEventHandler<HTMLButtonElement>\n  side?: \"bottom\" | \"left\" | \"top\" | \"right\"\n  showArrow?: boolean\n}\n\nconst Tooltip = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitives.Content>,\n  TooltipProps\n>(\n  (\n    {\n      children,\n      className,\n      content,\n      delayDuration,\n      defaultOpen,\n      open,\n      onClick,\n      onOpenChange,\n      showArrow = true,\n      side,\n      sideOffset = 10,\n      asChild,\n      ...props\n    }: TooltipProps,\n    forwardedRef,\n  ) => {\n    return (\n      <TooltipPrimitives.Provider delayDuration={150}>\n        <TooltipPrimitives.Root\n          open={open}\n          defaultOpen={defaultOpen}\n          onOpenChange={onOpenChange}\n          delayDuration={delayDuration}\n          tremor-id=\"tremor-raw\"\n        >\n          <TooltipPrimitives.Trigger onClick={onClick} asChild={asChild}>\n            {children}\n          </TooltipPrimitives.Trigger>\n          <TooltipPrimitives.Portal>\n            <TooltipPrimitives.Content\n              ref={forwardedRef}\n              side={side}\n              sideOffset={sideOffset}\n              align=\"center\"\n              className={cx(\n                // base\n                \"max-w-60 select-none rounded-md px-2.5 py-1.5 text-sm leading-5 shadow-md\",\n                // text color\n                \"text-gray-50 dark:text-gray-900\",\n                // background color\n                \"bg-gray-900 dark:bg-gray-50\",\n                // transition\n                \"will-change-[transform,opacity]\",\n                \"data-[side=bottom]:animate-slide-down-and-fade data-[side=left]:animate-slide-left-and-fade data-[side=right]:animate-slide-right-and-fade data-[side=top]:animate-slide-up-and-fade data-[state=closed]:animate-hide\",\n                className,\n              )}\n              {...props}\n            >\n              {content}\n              {showArrow ? (\n                <TooltipPrimitives.Arrow\n                  className=\"border-none fill-gray-900 dark:fill-gray-50\"\n                  width={12}\n                  height={7}\n                  aria-hidden=\"true\"\n                />\n              ) : null}\n            </TooltipPrimitives.Content>\n          </TooltipPrimitives.Portal>\n        </TooltipPrimitives.Root>\n      </TooltipPrimitives.Provider>\n    )\n  },\n)\n\nTooltip.displayName = \"Tooltip\"\n\nexport { Tooltip, type TooltipProps }\n",
      "path": "src/components/Tooltip/Tooltip.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    }
  ]
}
