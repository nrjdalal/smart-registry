{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Select/select.stories",
  "dependencies": [
    "@radix-ui/react-dialog",
    "@radix-ui/react-select",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Button/Button.tsx",
      "content": "// Tremor Button [v0.2.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"disabled:dark:bg-blue-800 disabled:dark:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"disabled:dark:bg-gray-800 disabled:dark:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"disabled:dark:bg-red-950 disabled:dark:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Dialog/Dialog.tsx",
      "content": "// Tremor Dialog [v0.0.1]\n\nimport React from \"react\"\nimport * as DialogPrimitives from \"@radix-ui/react-dialog\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst Dialog = (\n  props: React.ComponentPropsWithoutRef<typeof DialogPrimitives.Root>,\n) => {\n  return <DialogPrimitives.Root {...props} />\n}\nDialog.displayName = \"Dialog\"\n\nconst DialogTrigger = DialogPrimitives.Trigger\n\nDialogTrigger.displayName = \"DialogTrigger\"\n\nconst DialogClose = DialogPrimitives.Close\n\nDialogClose.displayName = \"DialogClose\"\n\nconst DialogPortal = DialogPrimitives.Portal\n\nDialogPortal.displayName = \"DialogPortal\"\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Overlay>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DialogPrimitives.Overlay\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"fixed inset-0 z-50 overflow-y-auto\",\n        // background color\n        \"bg-black/70\",\n        // transition\n        \"data-[state=open]:animate-dialogOverlayShow\",\n        className,\n      )}\n      {...props}\n    />\n  )\n})\n\nDialogOverlay.displayName = \"DialogOverlay\"\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Content>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DialogPortal>\n      <DialogOverlay>\n        <DialogPrimitives.Content\n          ref={forwardedRef}\n          className={cx(\n            // base\n            \"fixed left-1/2 top-1/2 z-50 w-[95vw] max-w-lg -translate-x-1/2 -translate-y-1/2 overflow-y-auto rounded-md border p-6 shadow-lg\",\n            // border color\n            \"border-gray-200 dark:border-gray-900\",\n            // background color\n            \"bg-white dark:bg-[#090E1A]\",\n            // transition\n            \"data-[state=open]:animate-dialogContentShow\",\n            focusRing,\n            className,\n          )}\n          tremor-id=\"tremor-raw\"\n          {...props}\n        />\n      </DialogOverlay>\n    </DialogPortal>\n  )\n})\n\nDialogContent.displayName = \"DialogContent\"\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={cx(\"flex flex-col gap-y-1\", className)} {...props} />\n}\n\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Title>\n>(({ className, ...props }, forwardedRef) => (\n  <DialogPrimitives.Title\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-lg font-semibold\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nDialogTitle.displayName = \"DialogTitle\"\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Description>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DialogPrimitives.Description\n      ref={forwardedRef}\n      className={cx(\"text-gray-500 dark:text-gray-500\", className)}\n      {...props}\n    />\n  )\n})\n\nDialogDescription.displayName = \"DialogDescription\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cx(\n        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nDialogFooter.displayName = \"DialogFooter\"\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n}\n",
      "path": "src/components/Dialog/Dialog.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Select/Select.tsx",
      "content": "// Tremor Select [v0.0.3]\n\nimport React from \"react\"\nimport * as SelectPrimitives from \"@radix-ui/react-select\"\nimport {\n  RiArrowDownSLine,\n  RiArrowUpSLine,\n  RiCheckLine,\n  RiExpandUpDownLine,\n} from \"@remixicon/react\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusInput } from \"@/utils/focusInput\"\nimport { hasErrorInput } from \"@/utils/hasErrorInput\"\n\nconst Select = SelectPrimitives.Root\nSelect.displayName = \"Select\"\n\nconst SelectGroup = SelectPrimitives.Group\nSelectGroup.displayName = \"SelectGroup\"\n\nconst SelectValue = SelectPrimitives.Value\nSelectValue.displayName = \"SelectValue\"\n\nconst selectTriggerStyles = [\n  cx(\n    // base\n    \"group/trigger flex w-full select-none items-center justify-between gap-2 truncate rounded-md border px-3 py-2 shadow-sm outline-none transition sm:text-sm\",\n    // border color\n    \"border-gray-300 dark:border-gray-800\",\n    // text color\n    \"text-gray-900 dark:text-gray-50\",\n    // placeholder\n    \"data-[placeholder]:text-gray-500 data-[placeholder]:dark:text-gray-500\",\n    // background color\n    \"bg-white dark:bg-gray-950\",\n    // hover\n    \"hover:bg-gray-50 hover:dark:bg-gray-950/50\",\n    // disabled\n    \"data-[disabled]:bg-gray-100 data-[disabled]:text-gray-400\",\n    \"data-[disabled]:dark:border-gray-700 data-[disabled]:dark:bg-gray-800 data-[disabled]:dark:text-gray-500\",\n    focusInput,\n    // invalid (optional)\n    // \"aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n  ),\n]\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Trigger> & {\n    hasError?: boolean\n  }\n>(({ className, hasError, children, ...props }, forwardedRef) => {\n  return (\n    <SelectPrimitives.Trigger\n      ref={forwardedRef}\n      className={cx(\n        selectTriggerStyles,\n        hasError ? hasErrorInput : \"\",\n        className,\n      )}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    >\n      <span className=\"truncate\">{children}</span>\n      <SelectPrimitives.Icon asChild>\n        <RiExpandUpDownLine\n          className={cx(\n            // base\n            \"size-4 shrink-0\",\n            // text color\n            \"text-gray-400 dark:text-gray-600\",\n            // disabled\n            \"group-data-[disabled]/trigger:text-gray-300 group-data-[disabled]/trigger:dark:text-gray-600\",\n          )}\n        />\n      </SelectPrimitives.Icon>\n    </SelectPrimitives.Trigger>\n  )\n})\n\nSelectTrigger.displayName = \"SelectTrigger\"\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.ScrollUpButton>\n>(({ className, ...props }, forwardedRef) => (\n  <SelectPrimitives.ScrollUpButton\n    ref={forwardedRef}\n    className={cx(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <RiArrowUpSLine className=\"size-3 shrink-0\" aria-hidden=\"true\" />\n  </SelectPrimitives.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitives.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.ScrollDownButton>\n>(({ className, ...props }, forwardedRef) => (\n  <SelectPrimitives.ScrollDownButton\n    ref={forwardedRef}\n    className={cx(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <RiArrowDownSLine className=\"size-3 shrink-0\" aria-hidden=\"true\" />\n  </SelectPrimitives.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitives.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Content>\n>(\n  (\n    {\n      className,\n      position = \"popper\",\n      children,\n      sideOffset = 8,\n      collisionPadding = 10,\n      ...props\n    },\n    forwardedRef,\n  ) => (\n    <SelectPrimitives.Portal>\n      <SelectPrimitives.Content\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"relative z-50 overflow-hidden rounded-md border shadow-xl shadow-black/[2.5%]\",\n          // widths\n          \"min-w-[calc(var(--radix-select-trigger-width)-2px)] max-w-[95vw]\",\n          // heights\n          \"max-h-[--radix-select-content-available-height]\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // text color\n          \"text-gray-900 dark:text-gray-50\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // transition\n          \"will-change-[transform,opacity]\",\n          // \"data-[state=open]:animate-slideDownAndFade\",\n          \"data-[state=closed]:animate-hide\",\n          \"data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade\",\n          className,\n        )}\n        sideOffset={sideOffset}\n        position={position}\n        collisionPadding={collisionPadding}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitives.Viewport\n          className={cx(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[calc(var(--radix-select-trigger-width))]\",\n          )}\n        >\n          {children}\n        </SelectPrimitives.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitives.Content>\n    </SelectPrimitives.Portal>\n  ),\n)\n\nSelectContent.displayName = \"SelectContent\"\n\nconst SelectGroupLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Label>\n>(({ className, ...props }, forwardedRef) => (\n  <SelectPrimitives.Label\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"px-3 py-2 text-xs font-medium tracking-wide\",\n      // text color\n      \"text-gray-500 dark:text-gray-500\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nSelectGroupLabel.displayName = \"SelectGroupLabel\"\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Item>\n>(({ className, children, ...props }, forwardedRef) => {\n  return (\n    <SelectPrimitives.Item\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"grid cursor-pointer grid-cols-[1fr_20px] gap-x-2 rounded px-3 py-2 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // disabled\n        \"data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600\",\n        // focus\n        \"focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900\",\n        // hover\n        \"hover:bg-gray-100 hover:dark:bg-gray-900\",\n        className,\n      )}\n      {...props}\n    >\n      <SelectPrimitives.ItemText className=\"flex-1 truncate\">\n        {children}\n      </SelectPrimitives.ItemText>\n      <SelectPrimitives.ItemIndicator>\n        <RiCheckLine\n          className=\"size-5 shrink-0 text-gray-800 dark:text-gray-200\"\n          aria-hidden=\"true\"\n        />\n      </SelectPrimitives.ItemIndicator>\n    </SelectPrimitives.Item>\n  )\n})\n\nSelectItem.displayName = \"SelectItem\"\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Separator>\n>(({ className, ...props }, forwardedRef) => (\n  <SelectPrimitives.Separator\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"-mx-1 my-1 h-px\",\n      // background color\n      \"bg-gray-300 dark:bg-gray-700\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nSelectSeparator.displayName = \"SelectSeparator\"\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectGroupLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n",
      "path": "src/components/Select/Select.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Select/select.stories.tsx",
      "content": "import React from \"react\"\nimport {\n  RiShirtLine,\n  RiTShirt2Line,\n  RiTShirtAirFill,\n  RiTShirtLine,\n} from \"@remixicon/react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Button } from \"@/components/Button/Button\"\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/Dialog/Dialog\"\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectGroupLabel,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/Select/Select\"\n\nconst meta: Meta<typeof Select> = {\n  title: \"ui/Select\",\n  component: Select,\n  parameters: {\n    layout: \"centered\",\n  },\n}\n\nexport default meta\n\ntype Story = StoryObj<typeof Select>\n\nconst data1 = [\n  {\n    value: \"dress-shirt-striped\",\n    label: \"Striped Dress Shirt\",\n  },\n  {\n    value: \"relaxed-button-down\",\n    label: \"Relaxed Fit Button Down\",\n  },\n  {\n    value: \"slim-button-down\",\n    label: \"Slim Fit Button Down\",\n  },\n  {\n    value: \"dress-shirt-solid\",\n    label: \"Solid Dress Shirt\",\n    disabled: true,\n  },\n  {\n    value: \"dress-shirt-check\",\n    label: \"Check Dress Shirt\",\n  },\n]\n\nconst data2 = [\n  {\n    value: \"striped-dress-shirt\",\n    label: \"Striped Dress Shirt\",\n    icon: RiShirtLine,\n  },\n  {\n    value: \"relaxed-fit-shirt\",\n    label: \"Relaxed Fit Shirt Classic\",\n    icon: RiTShirtLine,\n  },\n  {\n    value: \"relaxed-fit-shirt-vneck\",\n    label: \"Relaxed Fit Shirt V-Neck\",\n    icon: RiTShirt2Line,\n  },\n  {\n    value: \"sport-active-solid\",\n    label: \"Sport Active Shirt\",\n    icon: RiTShirtAirFill,\n  },\n]\n\nconst data3 = [\n  {\n    label: \"Shirts\",\n    items: [\n      {\n        value: \"dress-shirt-striped\",\n        label: \"Striped Dress Shirt\",\n      },\n      {\n        value: \"relaxed-button-down\",\n        label: \"Relaxed Fit Button Down\",\n      },\n      {\n        value: \"slim-button-down\",\n        label: \"Slim Fit Button Down\",\n      },\n      {\n        value: \"dress-shirt-solid\",\n        label: \"Solid Dress Shirt\",\n      },\n      {\n        value: \"dress-shirt-check\",\n        label: \"Check Dress Shirt\",\n      },\n    ],\n  },\n  {\n    label: \"T-Shirts\",\n    items: [\n      {\n        value: \"v-neck\",\n        label: \"V-Neck\",\n      },\n      {\n        value: \"crew-neck\",\n        label: \"Crew Neck\",\n      },\n      {\n        value: \"henley\",\n        label: \"Henley\",\n      },\n      {\n        value: \"polo\",\n        label: \"Polo\",\n      },\n      {\n        value: \"mock-neck\",\n        label: \"Mock Neck\",\n      },\n      {\n        value: \"turtleneck\",\n        label: \"Turtleneck\",\n      },\n      {\n        value: \"scoop-neck\",\n        label: \"Scoop Neck\",\n      },\n    ],\n  },\n]\n\nexport const Default: Story = {\n  render: () => {\n    return (\n      <Select>\n        <SelectTrigger className=\"w-96\">\n          <SelectValue placeholder=\"Select\" />\n        </SelectTrigger>\n        <SelectContent>\n          {data1.map((item) => (\n            <SelectItem key={item.value} value={item.value}>\n              {item.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    )\n  },\n}\n\nexport const WithIcons: Story = {\n  render: () => {\n    return (\n      <div className=\"w-[250px]\">\n        <Select>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select\" />\n          </SelectTrigger>\n          <SelectContent>\n            {data2.map((item) => (\n              <SelectItem key={item.value} value={item.value}>\n                <span className=\"flex items-center gap-2\">\n                  <item.icon className=\"size-4 shrink-0\" aria-hidden=\"true\" />{\" \"}\n                  {item.label}\n                </span>\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    )\n  },\n}\n\nexport const WithGroups: Story = {\n  render: () => {\n    return (\n      <div className=\"w-[250px]\">\n        <Select>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select\" />\n          </SelectTrigger>\n          <SelectContent>\n            {data3.map((group) => (\n              <SelectGroup key={group.label}>\n                <SelectGroupLabel>{group.label}</SelectGroupLabel>\n                {group.items.map((item) => (\n                  <SelectItem key={item.value} value={item.value}>\n                    {item.label}\n                  </SelectItem>\n                ))}\n              </SelectGroup>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    )\n  },\n}\n\nexport const Disabled: Story = {\n  render: () => {\n    return (\n      <div className=\"w-[250px]\">\n        <Select>\n          <SelectTrigger disabled={true}>\n            <SelectValue placeholder=\"Select\" />\n          </SelectTrigger>\n          <SelectContent>\n            {data3.map((group) => (\n              <SelectGroup key={group.label}>\n                <SelectGroupLabel>{group.label}</SelectGroupLabel>\n                {group.items.map((item) => (\n                  <SelectItem key={item.value} value={item.value}>\n                    {item.label}\n                  </SelectItem>\n                ))}\n              </SelectGroup>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    )\n  },\n}\n\nexport const DisabledItem: Story = {\n  render: () => {\n    return (\n      <Select>\n        <SelectTrigger>\n          <SelectValue placeholder=\"Select\" />\n        </SelectTrigger>\n        <SelectContent>\n          {data1.map((item) => (\n            <SelectItem\n              key={item.value}\n              value={item.value}\n              disabled={item.disabled}\n            >\n              {item.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    )\n  },\n}\n\nexport const HasError: Story = {\n  render: () => {\n    return (\n      <div className=\"w-[250px]\">\n        <Select>\n          <SelectTrigger hasError>\n            <SelectValue placeholder=\"Select\" />\n          </SelectTrigger>\n          <SelectContent>\n            {data3.map((group) => (\n              <SelectGroup key={group.label}>\n                <SelectGroupLabel>{group.label}</SelectGroupLabel>\n                {group.items.map((item) => (\n                  <SelectItem key={item.value} value={item.value}>\n                    {item.label}\n                  </SelectItem>\n                ))}\n              </SelectGroup>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    )\n  },\n}\n\nexport const Scrollable: Story = {\n  render: () => {\n    return (\n      <Select>\n        <SelectTrigger className=\"w-[280px]\">\n          <SelectValue placeholder=\"Select a timezone\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectGroup>\n            <SelectGroupLabel>North America</SelectGroupLabel>\n            <SelectItem value=\"est\">Eastern Standard Time (EST)</SelectItem>\n            <SelectItem value=\"cst\">Central Standard Time (CST)</SelectItem>\n            <SelectItem value=\"mst\">Mountain Standard Time (MST)</SelectItem>\n            <SelectItem value=\"pst\">Pacific Standard Time (PST)</SelectItem>\n            <SelectItem value=\"akst\">Alaska Standard Time (AKST)</SelectItem>\n            <SelectItem value=\"hst\">Hawaii Standard Time (HST)</SelectItem>\n          </SelectGroup>\n          <SelectGroup>\n            <SelectGroupLabel>Europe & Africa</SelectGroupLabel>\n            <SelectItem value=\"gmt\">Greenwich Mean Time (GMT)</SelectItem>\n            <SelectItem value=\"cet\">Central European Time (CET)</SelectItem>\n            <SelectItem value=\"eet\">Eastern European Time (EET)</SelectItem>\n            <SelectItem value=\"west\">\n              Western European Summer Time (WEST)\n            </SelectItem>\n            <SelectItem value=\"cat\">Central Africa Time (CAT)</SelectItem>\n            <SelectItem value=\"eat\">East Africa Time (EAT)</SelectItem>\n          </SelectGroup>\n          <SelectGroup>\n            <SelectGroupLabel>Asia</SelectGroupLabel>\n            <SelectItem value=\"msk\">Moscow Time (MSK)</SelectItem>\n            <SelectItem value=\"ist\">India Standard Time (IST)</SelectItem>\n            <SelectItem value=\"cst_china\">China Standard Time (CST)</SelectItem>\n            <SelectItem value=\"jst\">Japan Standard Time (JST)</SelectItem>\n            <SelectItem value=\"kst\">Korea Standard Time (KST)</SelectItem>\n            <SelectItem value=\"ist_indonesia\">\n              Indonesia Central Standard Time (WITA)\n            </SelectItem>\n          </SelectGroup>\n          <SelectGroup>\n            <SelectGroupLabel>Australia & Pacific</SelectGroupLabel>\n            <SelectItem value=\"awst\">\n              Australian Western Standard Time (AWST)\n            </SelectItem>\n            <SelectItem value=\"acst\">\n              Australian Central Standard Time (ACST)\n            </SelectItem>\n            <SelectItem value=\"aest\">\n              Australian Eastern Standard Time (AEST)\n            </SelectItem>\n            <SelectItem value=\"nzst\">\n              New Zealand Standard Time (NZST)\n            </SelectItem>\n            <SelectItem value=\"fjt\">Fiji Time (FJT)</SelectItem>\n          </SelectGroup>\n          <SelectGroup>\n            <SelectGroupLabel>South America</SelectGroupLabel>\n            <SelectItem value=\"art\">Argentina Time (ART)</SelectItem>\n            <SelectItem value=\"bot\">Bolivia Time (BOT)</SelectItem>\n            <SelectItem value=\"brt\">Brasilia Time (BRT)</SelectItem>\n            <SelectItem value=\"clt\">Chile Standard Time (CLT)</SelectItem>\n          </SelectGroup>\n        </SelectContent>\n      </Select>\n    )\n  },\n}\n\nexport const SelectInDialog: Story = {\n  render: () => {\n    return (\n      <>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button>Open Dialog</Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-sm\">\n            <DialogHeader>\n              <DialogTitle>Select shirt size</DialogTitle>\n              <DialogDescription className=\"text-sm leading-7\">\n                Shirt type\n              </DialogDescription>\n              <Select>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {data3.map((group) => (\n                    <SelectGroup key={group.label}>\n                      <SelectGroupLabel>{group.label}</SelectGroupLabel>\n                      {group.items.map((item) => (\n                        <SelectItem key={item.value} value={item.value}>\n                          {item.label}\n                        </SelectItem>\n                      ))}\n                    </SelectGroup>\n                  ))}\n                </SelectContent>\n              </Select>\n            </DialogHeader>\n            <DialogFooter className=\"mt-6\">\n              <DialogClose asChild>\n                <Button\n                  className=\"mt-2 w-full sm:mt-0 sm:w-fit\"\n                  variant=\"secondary\"\n                >\n                  Go back\n                </Button>\n              </DialogClose>\n              <DialogClose asChild>\n                <Button className=\"w-full sm:w-fit\">Ok, got it!</Button>\n              </DialogClose>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </>\n    )\n  },\n}\n\nexport const Controlled: Story = {\n  render: () => {\n    const [value, setValue] = React.useState(\"\")\n    const data = [\n      {\n        value: \"chocolate\",\n        label: \"🍫 Schoggi\",\n      },\n      {\n        value: \"cheese\",\n        label: \"🧀 Chäs\",\n      },\n      {\n        value: \"fondue\",\n        label: \"🫕 Fondü\",\n      },\n      {\n        value: \"Milk\",\n        label: \"🥛 Melch\",\n      },\n    ]\n\n    return (\n      <>\n        <div className=\"flex gap-1\">\n          <Select value={value} onValueChange={setValue}>\n            <SelectTrigger className=\"mx-auto\">\n              <SelectValue placeholder=\"Select\" aria-label={value} />\n            </SelectTrigger>\n            <SelectContent>\n              {data.map((item) => (\n                <SelectItem key={item.value} value={item.value}>\n                  <span className=\"flex items-center gap-x-2\">\n                    {item.label}\n                  </span>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Button\n            className=\"whitespace-nowrap\"\n            variant=\"secondary\"\n            onClick={() => setValue(\"\")}\n          >\n            Reset selection\n          </Button>\n        </div>\n        <p className=\"mt-2 text-sm text-gray-500\">Selected key: {value}</p>\n      </>\n    )\n  },\n}\n",
      "path": "src/components/Select/select.stories.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusInput.ts",
      "content": "// Tremor focusInput [v0.0.1]\n\nexport const focusInput = [\n  // base\n  \"focus:ring-2\",\n  // ring color\n  \"focus:ring-blue-200 focus:dark:ring-blue-700/30\",\n  // border color\n  \"focus:border-blue-500 focus:dark:border-blue-700\",\n]\n",
      "path": "src/utils/focusInput.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/hasErrorInput.ts",
      "content": "// Tremor hasErrorInput [v0.0.1]\n\nexport const hasErrorInput = [\n  // base\n  \"ring-2\",\n  // border color\n  \"border-red-500 dark:border-red-700\",\n  // ring color\n  \"ring-red-200 dark:ring-red-700/30\",\n]\n",
      "path": "src/utils/hasErrorInput.ts"
    }
  ],
  "type": "registry:component"
}
