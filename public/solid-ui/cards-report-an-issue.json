{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cards-report-an-issue",
  "type": "registry:component",
  "dependencies": [
    "@kobalte/core",
    "class-variance-authority",
    "clsx",
    "solid-js",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/cards/report-an-issue.tsx",
      "content": "import { createSignal } from \"solid-js\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle\n} from \"@/components/ui/card\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { TextField, TextFieldInput, TextFieldTextArea } from \"@/components/ui/text-field\"\n\nexport function ReportAnIssue() {\n  const [area, setArea] = createSignal()\n  const [secLevel, setSecLevel] = createSignal()\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Report an issue</CardTitle>\n        <CardDescription>What area are you having problems with?</CardDescription>\n      </CardHeader>\n      <CardContent class=\"grid gap-6\">\n        <div class=\"grid grid-cols-2 gap-4\">\n          <div class=\"grid gap-2\">\n            <Label for=\"area\">Area</Label>\n            <Select\n              id=\"area\"\n              value={area()}\n              onChange={setArea}\n              options={[\"Team\", \"Billing\", \"Accounts\", \"Deployments\"]}\n              defaultValue={\"Billing\"}\n              itemComponent={(props) => (\n                <SelectItem item={props.item}>{props.item.textValue}</SelectItem>\n              )}\n            >\n              <SelectTrigger aria-label=\"billing\" class=\"flex-1\">\n                <SelectValue<string>>{(state) => state.selectedOption()}</SelectValue>\n              </SelectTrigger>\n              <SelectContent />\n            </Select>\n          </div>\n          <div class=\"grid gap-2\">\n            <Label for=\"security-level\">Security Level</Label>\n            <Select\n              id=\"security-level\"\n              value={secLevel()}\n              onChange={setSecLevel}\n              options={[\"Level 1(lowest)\", \"Level 2\", \"Level 3\", \"Level 4\", \"Level 5(ðŸ’€)\"]}\n              defaultValue={\"Level 2\"}\n              itemComponent={(props) => (\n                <SelectItem item={props.item}>{props.item.textValue}</SelectItem>\n              )}\n            >\n              <SelectTrigger aria-label=\"security level\" class=\"flex-1\">\n                <SelectValue<string>>{(state) => state.selectedOption()}</SelectValue>\n              </SelectTrigger>\n              <SelectContent />\n            </Select>\n          </div>\n        </div>\n        <div class=\"grid gap-2\">\n          <Label for=\"subject\">Subject</Label>\n          <TextField>\n            <TextFieldInput id=\"subject\" placeholder=\"I need help with...\" type=\"text\" />\n          </TextField>\n        </div>\n        <div class=\"grid gap-2\">\n          <Label for=\"description\">Description</Label>\n          <TextField>\n            <TextFieldTextArea\n              id=\"description\"\n              placeholder=\"Please include all information relevant to your issue.\"\n            />\n          </TextField>\n        </div>\n      </CardContent>\n      <CardFooter class=\"justify-between space-x-2\">\n        <Button variant=\"ghost\">Cancel</Button>\n        <Button>Submit</Button>\n      </CardFooter>\n    </Card>\n  )\n}\n",
      "path": "src/components/cards/report-an-issue.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import type { ClassValue } from \"clsx\"\nimport { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return val > max ? max : val < min ? min : val\n}\n\nexport function toggleValue<T>(array: T[], value: T): T[] {\n  return array.includes(value) ? array.filter((item) => item !== value) : [...array, value]\n}\n",
      "path": "src/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as ButtonPrimitive from \"@kobalte/core/button\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\"\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 px-3 text-xs\",\n        lg: \"h-11 px-8\",\n        icon: \"size-10\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n)\n\ntype ButtonProps<T extends ValidComponent = \"button\"> = ButtonPrimitive.ButtonRootProps<T> &\n  VariantProps<typeof buttonVariants> & { class?: string | undefined; children?: JSX.Element }\n\nconst Button = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ButtonProps<T>>\n) => {\n  const [local, others] = splitProps(props as ButtonProps, [\"variant\", \"size\", \"class\"])\n  return (\n    <ButtonPrimitive.Root\n      class={cn(buttonVariants({ variant: local.variant, size: local.size }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\nexport type { ButtonProps }\n",
      "path": "src/registry/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/card.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div\n      class={cn(\"rounded-lg border bg-card text-card-foreground shadow-sm\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst CardHeader: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"flex flex-col space-y-1.5 p-6\", local.class)} {...others} />\n}\n\nconst CardTitle: Component<ComponentProps<\"h3\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <h3 class={cn(\"text-lg font-semibold leading-none tracking-tight\", local.class)} {...others} />\n  )\n}\n\nconst CardDescription: Component<ComponentProps<\"p\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <p class={cn(\"text-sm text-muted-foreground\", local.class)} {...others} />\n}\n\nconst CardContent: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"p-6 pt-0\", local.class)} {...others} />\n}\n\nconst CardFooter: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"flex items-center p-6 pt-0\", local.class)} {...others} />\n}\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "path": "src/registry/ui/card.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/label.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Label: Component<ComponentProps<\"label\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <label\n      class={cn(\n        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport { Label }\n",
      "path": "src/registry/ui/label.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/select.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as SelectPrimitive from \"@kobalte/core/select\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\nconst SelectValue = SelectPrimitive.Value\nconst SelectHiddenSelect = SelectPrimitive.HiddenSelect\n\ntype SelectTriggerProps<T extends ValidComponent = \"button\"> =\n  SelectPrimitive.SelectTriggerProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst SelectTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, SelectTriggerProps<T>>\n) => {\n  const [local, others] = splitProps(props as SelectTriggerProps, [\"class\", \"children\"])\n  return (\n    <SelectPrimitive.Trigger\n      class={cn(\n        \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        local.class\n      )}\n      {...others}\n    >\n      {local.children}\n      <SelectPrimitive.Icon\n        as=\"svg\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"size-4 opacity-50\"\n      >\n        <path d=\"M8 9l4 -4l4 4\" />\n        <path d=\"M16 15l-4 4l-4 -4\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\ntype SelectContentProps<T extends ValidComponent = \"div\"> =\n  SelectPrimitive.SelectContentProps<T> & { class?: string | undefined }\n\nconst SelectContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SelectContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as SelectContentProps, [\"class\"])\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        class={cn(\n          \"relative z-50 min-w-32 overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md animate-in fade-in-80\",\n          local.class\n        )}\n        {...others}\n      >\n        <SelectPrimitive.Listbox class=\"m-0 p-1\" />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\ntype SelectItemProps<T extends ValidComponent = \"li\"> = SelectPrimitive.SelectItemProps<T> & {\n  class?: string | undefined\n  children?: JSX.Element\n}\n\nconst SelectItem = <T extends ValidComponent = \"li\">(\n  props: PolymorphicProps<T, SelectItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as SelectItemProps, [\"class\", \"children\"])\n  return (\n    <SelectPrimitive.Item\n      class={cn(\n        \"relative mt-0 flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        local.class\n      )}\n      {...others}\n    >\n      <SelectPrimitive.ItemIndicator class=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          class=\"size-4\"\n        >\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n          <path d=\"M5 12l5 5l10 -10\" />\n        </svg>\n      </SelectPrimitive.ItemIndicator>\n      <SelectPrimitive.ItemLabel>{local.children}</SelectPrimitive.ItemLabel>\n    </SelectPrimitive.Item>\n  )\n}\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n  {\n    variants: {\n      variant: {\n        label: \"data-[invalid]:text-destructive\",\n        description: \"font-normal text-muted-foreground\",\n        error: \"text-xs text-destructive\"\n      }\n    },\n    defaultVariants: {\n      variant: \"label\"\n    }\n  }\n)\n\ntype SelectLabelProps<T extends ValidComponent = \"label\"> = SelectPrimitive.SelectLabelProps<T> & {\n  class?: string | undefined\n}\n\nconst SelectLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, SelectLabelProps<T>>\n) => {\n  const [local, others] = splitProps(props as SelectLabelProps, [\"class\"])\n  return <SelectPrimitive.Label class={cn(labelVariants(), local.class)} {...others} />\n}\n\ntype SelectDescriptionProps<T extends ValidComponent = \"div\"> =\n  SelectPrimitive.SelectDescriptionProps<T> & {\n    class?: string | undefined\n  }\n\nconst SelectDescription = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SelectDescriptionProps<T>>\n) => {\n  const [local, others] = splitProps(props as SelectDescriptionProps, [\"class\"])\n  return (\n    <SelectPrimitive.Description\n      class={cn(labelVariants({ variant: \"description\" }), local.class)}\n      {...others}\n    />\n  )\n}\n\ntype SelectErrorMessageProps<T extends ValidComponent = \"div\"> =\n  SelectPrimitive.SelectErrorMessageProps<T> & {\n    class?: string | undefined\n  }\n\nconst SelectErrorMessage = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SelectErrorMessageProps<T>>\n) => {\n  const [local, others] = splitProps(props as SelectErrorMessageProps, [\"class\"])\n  return (\n    <SelectPrimitive.ErrorMessage\n      class={cn(labelVariants({ variant: \"error\" }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport {\n  Select,\n  SelectValue,\n  SelectHiddenSelect,\n  SelectTrigger,\n  SelectContent,\n  SelectItem,\n  SelectLabel,\n  SelectDescription,\n  SelectErrorMessage\n}\n",
      "path": "src/registry/ui/select.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/text-field.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { mergeProps, splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core\"\nimport * as TextFieldPrimitive from \"@kobalte/core/text-field\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype TextFieldRootProps<T extends ValidComponent = \"div\"> =\n  TextFieldPrimitive.TextFieldRootProps<T> & {\n    class?: string | undefined\n  }\n\nconst TextField = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TextFieldRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldRootProps, [\"class\"])\n  return <TextFieldPrimitive.Root class={cn(\"flex flex-col gap-1\", local.class)} {...others} />\n}\n\ntype TextFieldInputProps<T extends ValidComponent = \"input\"> =\n  TextFieldPrimitive.TextFieldInputProps<T> & {\n    class?: string | undefined\n    type?:\n      | \"button\"\n      | \"checkbox\"\n      | \"color\"\n      | \"date\"\n      | \"datetime-local\"\n      | \"email\"\n      | \"file\"\n      | \"hidden\"\n      | \"image\"\n      | \"month\"\n      | \"number\"\n      | \"password\"\n      | \"radio\"\n      | \"range\"\n      | \"reset\"\n      | \"search\"\n      | \"submit\"\n      | \"tel\"\n      | \"text\"\n      | \"time\"\n      | \"url\"\n      | \"week\"\n  }\n\nconst TextFieldInput = <T extends ValidComponent = \"input\">(\n  rawProps: PolymorphicProps<T, TextFieldInputProps<T>>\n) => {\n  const props = mergeProps<TextFieldInputProps<T>[]>({ type: \"text\" }, rawProps)\n  const [local, others] = splitProps(props as TextFieldInputProps, [\"type\", \"class\"])\n  return (\n    <TextFieldPrimitive.Input\n      type={local.type}\n      class={cn(\n        \"flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[invalid]:border-error-foreground data-[invalid]:text-error-foreground\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype TextFieldTextAreaProps<T extends ValidComponent = \"textarea\"> =\n  TextFieldPrimitive.TextFieldTextAreaProps<T> & { class?: string | undefined }\n\nconst TextFieldTextArea = <T extends ValidComponent = \"textarea\">(\n  props: PolymorphicProps<T, TextFieldTextAreaProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldTextAreaProps, [\"class\"])\n  return (\n    <TextFieldPrimitive.TextArea\n      class={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n  {\n    variants: {\n      variant: {\n        label: \"data-[invalid]:text-destructive\",\n        description: \"font-normal text-muted-foreground\",\n        error: \"text-xs text-destructive\"\n      }\n    },\n    defaultVariants: {\n      variant: \"label\"\n    }\n  }\n)\n\ntype TextFieldLabelProps<T extends ValidComponent = \"label\"> =\n  TextFieldPrimitive.TextFieldLabelProps<T> & { class?: string | undefined }\n\nconst TextFieldLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, TextFieldLabelProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldLabelProps, [\"class\"])\n  return <TextFieldPrimitive.Label class={cn(labelVariants(), local.class)} {...others} />\n}\n\ntype TextFieldDescriptionProps<T extends ValidComponent = \"div\"> =\n  TextFieldPrimitive.TextFieldDescriptionProps<T> & {\n    class?: string | undefined\n  }\n\nconst TextFieldDescription = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TextFieldDescriptionProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldDescriptionProps, [\"class\"])\n  return (\n    <TextFieldPrimitive.Description\n      class={cn(labelVariants({ variant: \"description\" }), local.class)}\n      {...others}\n    />\n  )\n}\n\ntype TextFieldErrorMessageProps<T extends ValidComponent = \"div\"> =\n  TextFieldPrimitive.TextFieldErrorMessageProps<T> & {\n    class?: string | undefined\n  }\n\nconst TextFieldErrorMessage = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TextFieldErrorMessageProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldErrorMessageProps, [\"class\"])\n  return (\n    <TextFieldPrimitive.ErrorMessage\n      class={cn(labelVariants({ variant: \"error\" }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport {\n  TextField,\n  TextFieldInput,\n  TextFieldTextArea,\n  TextFieldLabel,\n  TextFieldDescription,\n  TextFieldErrorMessage\n}\n",
      "path": "src/registry/ui/text-field.tsx"
    }
  ]
}
