{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ui",
  "type": "registry:ui",
  "dependencies": [
    "@ark-ui/solid",
    "@corvu/drawer",
    "@corvu/otp-field",
    "@corvu/resizable",
    "@kobalte/core",
    "@solid-primitives/refs",
    "chart.js",
    "class-variance-authority",
    "cmdk-solid",
    "embla-carousel-solid",
    "solid-js",
    "solid-sonner"
  ],
  "files": [
    {
      "type": "registry:ui",
      "target": "components/ui/accordion.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as AccordionPrimitive from \"@kobalte/core/accordion\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\ntype AccordionItemProps<T extends ValidComponent = \"div\"> =\n  AccordionPrimitive.AccordionItemProps<T> & {\n    class?: string | undefined\n  }\n\nconst AccordionItem = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, AccordionItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as AccordionItemProps, [\"class\"])\n  return <AccordionPrimitive.Item class={cn(\"border-b\", local.class)} {...others} />\n}\n\ntype AccordionTriggerProps<T extends ValidComponent = \"button\"> =\n  AccordionPrimitive.AccordionTriggerProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst AccordionTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, AccordionTriggerProps<T>>\n) => {\n  const [local, others] = splitProps(props as AccordionTriggerProps, [\"class\", \"children\"])\n  return (\n    <AccordionPrimitive.Header class=\"flex\">\n      <AccordionPrimitive.Trigger\n        class={cn(\n          \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-expanded]>svg]:rotate-180\",\n          local.class\n        )}\n        {...others}\n      >\n        {local.children}\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          class=\"size-4 shrink-0 transition-transform duration-200\"\n        >\n          <path d=\"M6 9l6 6l6 -6\" />\n        </svg>\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\ntype AccordionContentProps<T extends ValidComponent = \"div\"> =\n  AccordionPrimitive.AccordionContentProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst AccordionContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, AccordionContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as AccordionContentProps, [\"class\", \"children\"])\n  return (\n    <AccordionPrimitive.Content\n      class={cn(\n        \"animate-accordion-up overflow-hidden text-sm transition-all data-[expanded]:animate-accordion-down\",\n        local.class\n      )}\n      {...others}\n    >\n      <div class=\"pb-4 pt-0\">{local.children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "path": "src/registry/ui/accordion.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/alert-dialog.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as AlertDialogPrimitive from \"@kobalte/core/alert-dialog\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\ntype AlertDialogOverlayProps<T extends ValidComponent = \"div\"> =\n  AlertDialogPrimitive.AlertDialogOverlayProps<T> & {\n    class?: string | undefined\n  }\n\nconst AlertDialogOverlay = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, AlertDialogOverlayProps<T>>\n) => {\n  const [local, others] = splitProps(props as AlertDialogOverlayProps, [\"class\"])\n  return (\n    <AlertDialogPrimitive.Overlay\n      class={cn(\n        \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[expanded]:animate-in data-[closed]:animate-out data-[closed]:fade-out-0 data-[expanded]:fade-in-0\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype AlertDialogContentProps<T extends ValidComponent = \"div\"> =\n  AlertDialogPrimitive.AlertDialogContentProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst AlertDialogContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, AlertDialogContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as AlertDialogContentProps, [\"class\", \"children\"])\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        class={cn(\n          \"fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 border bg-background p-6 shadow-lg duration-200 data-[expanded]:animate-in data-[closed]:animate-out data-[closed]:fade-out-0 data-[expanded]:fade-in-0 data-[closed]:zoom-out-95 data-[expanded]:zoom-in-95 data-[closed]:slide-out-to-left-1/2 data-[closed]:slide-out-to-top-[48%] data-[expanded]:slide-in-from-left-1/2 data-[expanded]:slide-in-from-top-[48%] sm:rounded-lg md:w-full\",\n          local.class\n        )}\n        {...others}\n      >\n        {local.children}\n        <AlertDialogPrimitive.CloseButton class=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[expanded]:bg-accent data-[expanded]:text-muted-foreground\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-4\"\n          >\n            <path d=\"M18 6l-12 12\" />\n            <path d=\"M6 6l12 12\" />\n          </svg>\n          <span class=\"sr-only\">Close</span>\n        </AlertDialogPrimitive.CloseButton>\n      </AlertDialogPrimitive.Content>\n    </AlertDialogPortal>\n  )\n}\n\ntype AlertDialogTitleProps<T extends ValidComponent = \"h2\"> =\n  AlertDialogPrimitive.AlertDialogTitleProps<T> & {\n    class?: string | undefined\n  }\n\nconst AlertDialogTitle = <T extends ValidComponent = \"h2\">(\n  props: PolymorphicProps<T, AlertDialogTitleProps<T>>\n) => {\n  const [local, others] = splitProps(props as AlertDialogTitleProps, [\"class\"])\n  return <AlertDialogPrimitive.Title class={cn(\"text-lg font-semibold\", local.class)} {...others} />\n}\n\ntype AlertDialogDescriptionProps<T extends ValidComponent = \"p\"> =\n  AlertDialogPrimitive.AlertDialogDescriptionProps<T> & {\n    class?: string | undefined\n  }\n\nconst AlertDialogDescription = <T extends ValidComponent = \"p\">(\n  props: PolymorphicProps<T, AlertDialogDescriptionProps<T>>\n) => {\n  const [local, others] = splitProps(props as AlertDialogDescriptionProps, [\"class\"])\n  return (\n    <AlertDialogPrimitive.Description\n      class={cn(\"text-sm text-muted-foreground\", local.class)}\n      {...others}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogTitle,\n  AlertDialogDescription\n}\n",
      "path": "src/registry/ui/alert-dialog.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/alert.tsx",
      "content": "import type { Component, ComponentProps, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as AlertPrimitive from \"@kobalte/core/alert\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\"\n    }\n  }\n)\n\ntype AlertRootProps<T extends ValidComponent = \"div\"> = AlertPrimitive.AlertRootProps<T> &\n  VariantProps<typeof alertVariants> & { class?: string | undefined }\n\nconst Alert = <T extends ValidComponent = \"div\">(props: PolymorphicProps<T, AlertRootProps<T>>) => {\n  const [local, others] = splitProps(props as AlertRootProps, [\"class\", \"variant\"])\n  return (\n    <AlertPrimitive.Root\n      class={cn(alertVariants({ variant: props.variant }), local.class)}\n      {...others}\n    />\n  )\n}\n\nconst AlertTitle: Component<ComponentProps<\"h5\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <h5 class={cn(\"mb-1 font-medium leading-none tracking-tight\", local.class)} {...others} />\n}\n\nconst AlertDescription: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"text-sm [&_p]:leading-relaxed\", local.class)} {...others} />\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n",
      "path": "src/registry/ui/alert.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/aspect-ratio.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { mergeProps, splitProps } from \"solid-js\"\n\ntype AspectRatioProps = ComponentProps<\"div\"> & { ratio?: number }\n\nconst AspectRatio: Component<AspectRatioProps> = (rawProps) => {\n  const props = mergeProps({ ratio: 1 / 1 }, rawProps)\n  const [local, others] = splitProps(props, [\"ratio\"])\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        width: \"100%\",\n        \"padding-bottom\": `${100 / local.ratio}%`\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        }}\n        {...others}\n      />\n    </div>\n  )\n}\n\nexport { AspectRatio }\n",
      "path": "src/registry/ui/aspect-ratio.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/avatar.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as ImagePrimitive from \"@kobalte/core/image\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype AvatarRootProps<T extends ValidComponent = \"span\"> = ImagePrimitive.ImageRootProps<T> & {\n  class?: string | undefined\n}\n\nconst Avatar = <T extends ValidComponent = \"span\">(\n  props: PolymorphicProps<T, AvatarRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as AvatarRootProps, [\"class\"])\n  return (\n    <ImagePrimitive.Root\n      class={cn(\"relative flex size-10 shrink-0 overflow-hidden rounded-full\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype AvatarImageProps<T extends ValidComponent = \"img\"> = ImagePrimitive.ImageImgProps<T> & {\n  class?: string | undefined\n}\n\nconst AvatarImage = <T extends ValidComponent = \"img\">(\n  props: PolymorphicProps<T, AvatarImageProps<T>>\n) => {\n  const [local, others] = splitProps(props as AvatarImageProps, [\"class\"])\n  return <ImagePrimitive.Img class={cn(\"aspect-square size-full\", local.class)} {...others} />\n}\n\ntype AvatarFallbackProps<T extends ValidComponent = \"span\"> =\n  ImagePrimitive.ImageFallbackProps<T> & { class?: string | undefined }\n\nconst AvatarFallback = <T extends ValidComponent = \"span\">(\n  props: PolymorphicProps<T, AvatarFallbackProps<T>>\n) => {\n  const [local, others] = splitProps(props as AvatarFallbackProps, [\"class\"])\n  return (\n    <ImagePrimitive.Fallback\n      class={cn(\"flex size-full items-center justify-center bg-muted\", local.class)}\n      {...others}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "path": "src/registry/ui/avatar.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/badge-delta.tsx",
      "content": "import type { Component, JSXElement } from \"solid-js\"\nimport { createEffect, on, splitProps } from \"solid-js\"\n\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport type { BadgeProps } from \"@/components/ui/badge\"\nimport { Badge } from \"@/components/ui/badge\"\n\ntype DeltaType = \"increase\" | \"moderateIncrease\" | \"unchanged\" | \"moderateDecrease\" | \"decrease\"\n\nconst badgeDeltaVariants = cva(\"\", {\n  variants: {\n    variant: {\n      success: \"bg-success text-success-foreground hover:bg-success\",\n      warning: \"bg-warning text-warning-foreground hover:bg-warning\",\n      error: \"bg-error text-error-foreground hover:bg-error\"\n    }\n  }\n})\ntype DeltaVariant = NonNullable<VariantProps<typeof badgeDeltaVariants>[\"variant\"]>\n\nconst iconMap: { [key in DeltaType]: (props: { class?: string }) => JSXElement } = {\n  increase: (props) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      class={props.class}\n    >\n      <path d=\"M12 5l0 14\" />\n      <path d=\"M18 11l-6 -6\" />\n      <path d=\"M6 11l6 -6\" />\n    </svg>\n  ),\n  moderateIncrease: (props) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      class={props.class}\n    >\n      <path d=\"M17 7l-10 10\" />\n      <path d=\"M8 7l9 0l0 9\" />\n    </svg>\n  ),\n  unchanged: (props) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      class={props.class}\n    >\n      <path d=\"M5 12l14 0\" />\n      <path d=\"M13 18l6 -6\" />\n      <path d=\"M13 6l6 6\" />\n    </svg>\n  ),\n  moderateDecrease: (props) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      class={props.class}\n    >\n      <path d=\"M7 7l10 10\" />\n      <path d=\"M17 8l0 9l-9 0\" />\n    </svg>\n  ),\n  decrease: (props) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      class={props.class}\n    >\n      <path d=\"M12 5l0 14\" />\n      <path d=\"M18 13l-6 6\" />\n      <path d=\"M6 13l6 6\" />\n    </svg>\n  )\n}\n\nconst variantMap: { [key in DeltaType]: DeltaVariant } = {\n  increase: \"success\",\n  moderateIncrease: \"success\",\n  unchanged: \"warning\",\n  moderateDecrease: \"error\",\n  decrease: \"error\"\n}\n\ntype BadgeDeltaProps = Omit<BadgeProps, \"variant\"> & {\n  deltaType: DeltaType\n}\n\nconst BadgeDelta: Component<BadgeDeltaProps> = (props) => {\n  const [local, others] = splitProps(props, [\"class\", \"children\", \"deltaType\"])\n\n  // eslint-disable-next-line solid/reactivity\n  let Icon = iconMap[local.deltaType]\n  createEffect(\n    on(\n      () => local.deltaType,\n      () => {\n        Icon = iconMap[local.deltaType]\n      }\n    )\n  )\n\n  return (\n    <Badge\n      class={cn(badgeDeltaVariants({ variant: variantMap[local.deltaType] }), local.class)}\n      {...others}\n    >\n      <span class=\"flex gap-1\">\n        <Icon class=\"size-4\" />\n        {local.children}\n      </span>\n    </Badge>\n  )\n}\n\nexport { BadgeDelta }\n",
      "path": "src/registry/ui/badge-delta.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/badge.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default: \"border-transparent bg-primary text-primary-foreground\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        outline: \"text-foreground\",\n        success: \"border-success-foreground bg-success text-success-foreground\",\n        warning: \"border-warning-foreground bg-warning text-warning-foreground\",\n        error: \"border-error-foreground bg-error text-error-foreground\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\"\n    }\n  }\n)\n\ntype BadgeProps = ComponentProps<\"div\"> &\n  VariantProps<typeof badgeVariants> & {\n    round?: boolean\n  }\n\nconst Badge: Component<BadgeProps> = (props) => {\n  const [local, others] = splitProps(props, [\"class\", \"variant\", \"round\"])\n  return (\n    <div\n      class={cn(\n        badgeVariants({ variant: local.variant }),\n        local.round && \"rounded-full\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport type { BadgeProps }\nexport { Badge, badgeVariants }\n",
      "path": "src/registry/ui/badge.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/bar-list.tsx",
      "content": "import type { ComponentProps, JSX } from \"solid-js\"\nimport { For, mergeProps, Show, splitProps } from \"solid-js\"\nimport { Dynamic } from \"solid-js/web\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype Bar<T> = T & {\n  value: number\n  name: JSX.Element\n  icon?: (props: ComponentProps<\"svg\">) => JSX.Element\n  href?: string\n  target?: string\n}\n\ntype SortOrder = \"ascending\" | \"descending\" | \"none\"\n\ntype ValueFormatter = (value: number) => string\n\nconst defaultValueFormatter: ValueFormatter = (value: number) => value.toString()\n\ntype BarListProps<T> = ComponentProps<\"div\"> & {\n  data: Bar<T>[]\n  valueFormatter?: ValueFormatter\n  sortOrder?: SortOrder\n}\n\nconst BarList = <T,>(rawProps: BarListProps<T>) => {\n  const props = mergeProps(\n    {\n      valueFormatter: defaultValueFormatter,\n      sortOrder: \"descending\" as SortOrder\n    },\n    rawProps\n  )\n  const [local, others] = splitProps(props, [\"class\", \"data\", \"valueFormatter\", \"sortOrder\"])\n\n  const sortedData = () => {\n    if (local.sortOrder === \"none\") {\n      return local.data\n    }\n    return local.data.sort((a, b) =>\n      local.sortOrder === \"ascending\" ? a.value - b.value : b.value - a.value\n    )\n  }\n\n  const widths = () => {\n    const maxValue = Math.max(...sortedData().map((item) => item.value), 0)\n    return sortedData().map((item) =>\n      item.value === 0 ? 0 : Math.max((item.value / maxValue) * 100, 2)\n    )\n  }\n\n  return (\n    <div\n      class={cn(\"flex flex-col space-y-1.5\", local.class)}\n      aria-sort={local.sortOrder}\n      {...others}\n    >\n      <For each={sortedData()}>\n        {(bar, idx) => {\n          return (\n            <div class=\"row flex w-full justify-between space-x-6\">\n              <div class=\"grow\">\n                <div\n                  class={cn(\"flex h-8 items-center rounded-md bg-secondary px-2\")}\n                  style={{\n                    width: `${widths()[idx()]}%`\n                  }}\n                >\n                  <Show when={bar.icon}>\n                    {(icon) => <Dynamic component={icon()} class=\"mr-2 size-5 flex-none\" />}\n                  </Show>\n                  <Show when={bar.href} fallback={<p>{bar.name}</p>}>\n                    {(href) => (\n                      <a\n                        href={href()}\n                        target={bar.target ?? \"_blank\"}\n                        rel=\"noreferrer\"\n                        class=\"hover:underline\"\n                      >\n                        {bar.name}\n                      </a>\n                    )}\n                  </Show>\n                </div>\n              </div>\n              <div class=\"flex items-center\">{local.valueFormatter(bar.value)}</div>\n            </div>\n          )\n        }}\n      </For>\n    </div>\n  )\n}\n\nexport { BarList }\n",
      "path": "src/registry/ui/bar-list.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/breadcrumb.tsx",
      "content": "import type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\"\nimport { Show, splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core\"\nimport * as BreadcrumbPrimitive from \"@kobalte/core/breadcrumbs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = BreadcrumbPrimitive.Root\n\nconst BreadcrumbList: Component<ComponentProps<\"ol\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <ol\n      class={cn(\n        \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst BreadcrumbItem: Component<ComponentProps<\"li\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <li class={cn(\"inline-flex items-center gap-1.5\", local.class)} {...others} />\n}\n\ntype BreadcrumbLinkProps<T extends ValidComponent = \"a\"> =\n  BreadcrumbPrimitive.BreadcrumbsLinkProps<T> & { class?: string | undefined }\n\nconst BreadcrumbLink = <T extends ValidComponent = \"a\">(\n  props: PolymorphicProps<T, BreadcrumbLinkProps<T>>\n) => {\n  const [local, others] = splitProps(props as BreadcrumbLinkProps, [\"class\"])\n  return (\n    <BreadcrumbPrimitive.Link\n      class={cn(\n        \"transition-colors hover:text-foreground data-[current]:font-normal data-[current]:text-foreground\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype BreadcrumbSeparatorProps<T extends ValidComponent = \"span\"> =\n  BreadcrumbPrimitive.BreadcrumbsSeparatorProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst BreadcrumbSeparator = <T extends ValidComponent = \"span\">(\n  props: PolymorphicProps<T, BreadcrumbSeparatorProps<T>>\n) => {\n  const [local, others] = splitProps(props as BreadcrumbSeparatorProps, [\"class\", \"children\"])\n  return (\n    <BreadcrumbPrimitive.Separator class={cn(\"[&>svg]:size-3.5\", local.class)} {...others}>\n      <Show\n        when={local.children}\n        fallback={\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          >\n            <path d=\"M9 6l6 6l-6 6\" />\n          </svg>\n        }\n      >\n        {local.children}\n      </Show>\n    </BreadcrumbPrimitive.Separator>\n  )\n}\n\nconst BreadcrumbEllipsis: Component<ComponentProps<\"span\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <span class={cn(\"flex size-9 items-center justify-center\", local.class)} {...others}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"size-4\"\n      >\n        <path d=\"M5 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n        <path d=\"M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n        <path d=\"M19 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n      </svg>\n      <span class=\"sr-only\">More</span>\n    </span>\n  )\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis\n}\n",
      "path": "src/registry/ui/breadcrumb.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as ButtonPrimitive from \"@kobalte/core/button\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\"\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 px-3 text-xs\",\n        lg: \"h-11 px-8\",\n        icon: \"size-10\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n)\n\ntype ButtonProps<T extends ValidComponent = \"button\"> = ButtonPrimitive.ButtonRootProps<T> &\n  VariantProps<typeof buttonVariants> & { class?: string | undefined; children?: JSX.Element }\n\nconst Button = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ButtonProps<T>>\n) => {\n  const [local, others] = splitProps(props as ButtonProps, [\"variant\", \"size\", \"class\"])\n  return (\n    <ButtonPrimitive.Root\n      class={cn(buttonVariants({ variant: local.variant, size: local.size }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\nexport type { ButtonProps }\n",
      "path": "src/registry/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/callout.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst calloutVariants = cva(\"rounded-md border-l-4 p-2 pl-4\", {\n  variants: {\n    variant: {\n      default: \"border-info-foreground bg-info text-info-foreground\",\n      success: \"border-success-foreground bg-success text-success-foreground\",\n      warning: \"border-warning-foreground bg-warning text-warning-foreground\",\n      error: \"border-error-foreground bg-error text-error-foreground\"\n    }\n  },\n  defaultVariants: {\n    variant: \"default\"\n  }\n})\n\ntype CalloutProps = ComponentProps<\"div\"> & VariantProps<typeof calloutVariants>\n\nconst Callout: Component<CalloutProps> = (props) => {\n  const [local, others] = splitProps(props, [\"class\", \"variant\"])\n  return <div class={cn(calloutVariants({ variant: local.variant }), local.class)} {...others} />\n}\n\nconst CalloutTitle: Component<ComponentProps<\"h3\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <h3 class={cn(\"font-semibold\", local.class)} {...others} />\n}\n\nconst CalloutContent: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"mt-2\", local.class)} {...others} />\n}\n\nexport { Callout, CalloutTitle, CalloutContent }\n",
      "path": "src/registry/ui/callout.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/card.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div\n      class={cn(\"rounded-lg border bg-card text-card-foreground shadow-sm\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst CardHeader: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"flex flex-col space-y-1.5 p-6\", local.class)} {...others} />\n}\n\nconst CardTitle: Component<ComponentProps<\"h3\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <h3 class={cn(\"text-lg font-semibold leading-none tracking-tight\", local.class)} {...others} />\n  )\n}\n\nconst CardDescription: Component<ComponentProps<\"p\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <p class={cn(\"text-sm text-muted-foreground\", local.class)} {...others} />\n}\n\nconst CardContent: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"p-6 pt-0\", local.class)} {...others} />\n}\n\nconst CardFooter: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"flex items-center p-6 pt-0\", local.class)} {...others} />\n}\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "path": "src/registry/ui/card.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/carousel.tsx",
      "content": "import type { Accessor, Component, ComponentProps, VoidProps } from \"solid-js\"\nimport {\n  createContext,\n  createEffect,\n  createMemo,\n  createSignal,\n  mergeProps,\n  splitProps,\n  useContext\n} from \"solid-js\"\n\nimport type { CreateEmblaCarouselType } from \"embla-carousel-solid\"\nimport createEmblaCarousel from \"embla-carousel-solid\"\n\nimport { cn } from \"@/lib/utils\"\nimport type { ButtonProps } from \"@/components/ui/button\"\nimport { Button } from \"@/components/ui/button\"\n\nexport type CarouselApi = CreateEmblaCarouselType[1]\n\ntype UseCarouselParameters = Parameters<typeof createEmblaCarousel>\ntype CarouselOptions = NonNullable<UseCarouselParameters[0]>\ntype CarouselPlugin = NonNullable<UseCarouselParameters[1]>\n\ntype CarouselProps = {\n  opts?: ReturnType<CarouselOptions>\n  plugins?: ReturnType<CarouselPlugin>\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof createEmblaCarousel>[0]\n  api: ReturnType<typeof createEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: Accessor<boolean>\n  canScrollNext: Accessor<boolean>\n} & CarouselProps\n\nconst CarouselContext = createContext<Accessor<CarouselContextProps> | null>(null)\n\nconst useCarousel = () => {\n  const context = useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context()\n}\n\nconst Carousel: Component<CarouselProps & ComponentProps<\"div\">> = (rawProps) => {\n  const props = mergeProps<(CarouselProps & ComponentProps<\"div\">)[]>(\n    { orientation: \"horizontal\" },\n    rawProps\n  )\n\n  const [local, others] = splitProps(props, [\n    \"orientation\",\n    \"opts\",\n    \"setApi\",\n    \"plugins\",\n    \"class\",\n    \"children\"\n  ])\n\n  const [carouselRef, api] = createEmblaCarousel(\n    () => ({\n      ...local.opts,\n      axis: local.orientation === \"horizontal\" ? \"x\" : \"y\"\n    }),\n    () => (local.plugins === undefined ? [] : local.plugins)\n  )\n  const [canScrollPrev, setCanScrollPrev] = createSignal(false)\n  const [canScrollNext, setCanScrollNext] = createSignal(false)\n\n  const onSelect = (api: NonNullable<ReturnType<CarouselApi>>) => {\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }\n\n  const scrollPrev = () => {\n    api()?.scrollPrev()\n  }\n\n  const scrollNext = () => {\n    api()?.scrollNext()\n  }\n\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (event.key === \"ArrowLeft\") {\n      event.preventDefault()\n      scrollPrev()\n    } else if (event.key === \"ArrowRight\") {\n      event.preventDefault()\n      scrollNext()\n    }\n  }\n\n  createEffect(() => {\n    if (!api() || !local.setApi) {\n      return\n    }\n    local.setApi(api)\n  })\n\n  createEffect(() => {\n    if (!api()) {\n      return\n    }\n\n    onSelect(api()!)\n    api()!.on(\"reInit\", onSelect)\n    api()!.on(\"select\", onSelect)\n\n    return () => {\n      api()?.off(\"select\", onSelect)\n    }\n  })\n\n  const value = createMemo(\n    () =>\n      ({\n        carouselRef,\n        api,\n        opts: local.opts,\n        orientation: local.orientation || (local.opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext\n      }) satisfies CarouselContextProps\n  )\n\n  return (\n    <CarouselContext.Provider value={value}>\n      <div\n        onKeyDown={handleKeyDown}\n        class={cn(\"relative\", local.class)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        {...others}\n      >\n        {local.children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nconst CarouselContent: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} class=\"overflow-hidden\">\n      <div\n        class={cn(\"flex\", orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\", local.class)}\n        {...others}\n      />\n    </div>\n  )\n}\n\nconst CarouselItem: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      class={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype CarouselButtonProps = VoidProps<ButtonProps>\n\nconst CarouselPrevious: Component<CarouselButtonProps> = (rawProps) => {\n  const props = mergeProps<CarouselButtonProps[]>({ variant: \"outline\", size: \"icon\" }, rawProps)\n  const [local, others] = splitProps(props, [\"class\", \"variant\", \"size\"])\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      variant={local.variant}\n      size={local.size}\n      class={cn(\n        \"absolute size-8 touch-manipulation rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        local.class\n      )}\n      disabled={!canScrollPrev()}\n      onClick={scrollPrev}\n      {...others}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"size-4\"\n      >\n        <path d=\"M5 12l14 0\" />\n        <path d=\"M5 12l6 6\" />\n        <path d=\"M5 12l6 -6\" />\n      </svg>\n      <span class=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nconst CarouselNext: Component<CarouselButtonProps> = (rawProps) => {\n  const props = mergeProps<CarouselButtonProps[]>({ variant: \"outline\", size: \"icon\" }, rawProps)\n  const [local, others] = splitProps(props, [\"class\", \"variant\", \"size\"])\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      variant={local.variant}\n      size={local.size}\n      class={cn(\n        \"absolute size-8 touch-manipulation rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        local.class\n      )}\n      disabled={!canScrollNext()}\n      onClick={scrollNext}\n      {...others}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"size-4\"\n      >\n        <path d=\"M5 12l14 0\" />\n        <path d=\"M13 18l6 -6\" />\n        <path d=\"M13 6l6 6\" />\n      </svg>\n      <span class=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport { Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext }\n",
      "path": "src/registry/ui/carousel.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/charts.tsx",
      "content": "import type { Component } from \"solid-js\"\nimport { createEffect, createSignal, mergeProps, on, onCleanup, onMount } from \"solid-js\"\nimport { unwrap } from \"solid-js/store\"\n\nimport type { Ref } from \"@solid-primitives/refs\"\nimport { mergeRefs } from \"@solid-primitives/refs\"\nimport type {\n  ChartComponent,\n  ChartData,\n  ChartItem,\n  ChartOptions,\n  Plugin as ChartPlugin,\n  ChartType,\n  ChartTypeRegistry,\n  TooltipModel\n} from \"chart.js\"\nimport {\n  ArcElement,\n  BarController,\n  BarElement,\n  BubbleController,\n  CategoryScale,\n  Chart,\n  Colors,\n  DoughnutController,\n  Filler,\n  Legend,\n  LinearScale,\n  LineController,\n  LineElement,\n  PieController,\n  PointElement,\n  PolarAreaController,\n  RadarController,\n  RadialLinearScale,\n  ScatterController,\n  Tooltip\n} from \"chart.js\"\n\ntype TypedChartProps = {\n  data: ChartData\n  options?: ChartOptions\n  plugins?: ChartPlugin[]\n  ref?: Ref<HTMLCanvasElement | null>\n  width?: number | undefined\n  height?: number | undefined\n}\n\ntype ChartProps = TypedChartProps & {\n  type: ChartType\n}\n\ntype ChartContext = {\n  chart: Chart\n  tooltip: TooltipModel<keyof ChartTypeRegistry>\n}\n\nconst BaseChart: Component<ChartProps> = (rawProps) => {\n  const [canvasRef, setCanvasRef] = createSignal<HTMLCanvasElement | null>()\n  const [chart, setChart] = createSignal<Chart>()\n\n  const props = mergeProps(\n    {\n      width: 512,\n      height: 512,\n      options: { responsive: true } as ChartOptions,\n      plugins: [] as ChartPlugin[]\n    },\n    rawProps\n  )\n\n  const init = () => {\n    const ctx = canvasRef()?.getContext(\"2d\") as ChartItem\n    const config = unwrap(props)\n    const chart = new Chart(ctx, {\n      type: config.type,\n      data: config.data,\n      options: config.options,\n      plugins: config.plugins\n    })\n    setChart(chart)\n  }\n\n  onMount(() => init())\n\n  createEffect(\n    on(\n      () => props.data,\n      () => {\n        chart()!.data = props.data\n        chart()!.update()\n      },\n      { defer: true }\n    )\n  )\n\n  createEffect(\n    on(\n      () => props.options,\n      () => {\n        chart()!.options = props.options\n        chart()!.update()\n      },\n      { defer: true }\n    )\n  )\n\n  createEffect(\n    on(\n      [() => props.width, () => props.height],\n      () => {\n        chart()!.resize(props.width, props.height)\n      },\n      { defer: true }\n    )\n  )\n\n  createEffect(\n    on(\n      () => props.type,\n      () => {\n        const dimensions = [chart()!.width, chart()!.height]\n        chart()!.destroy()\n        init()\n        chart()!.resize(...dimensions)\n      },\n      { defer: true }\n    )\n  )\n\n  onCleanup(() => {\n    chart()?.destroy()\n    mergeRefs(props.ref, null)\n  })\n\n  Chart.register(Colors, Filler, Legend, Tooltip)\n  return (\n    <canvas\n      ref={mergeRefs(props.ref, (el) => setCanvasRef(el))}\n      height={props.height}\n      width={props.width}\n    />\n  )\n}\n\nfunction showTooltip(context: ChartContext) {\n  let el = document.getElementById(\"chartjs-tooltip\")\n  if (!el) {\n    el = document.createElement(\"div\")\n    el.id = \"chartjs-tooltip\"\n    document.body.appendChild(el)\n  }\n\n  const model = context.tooltip\n  if (model.opacity === 0 || !model.body) {\n    el.style.opacity = \"0\"\n    return\n  }\n\n  el.className = `p-2 bg-card text-card-foreground rounded-lg border shadow-sm text-sm ${\n    model.yAlign ?? `no-transform`\n  }`\n\n  let content = \"\"\n\n  model.title.forEach((title) => {\n    content += `<h3 class=\"font-semibold leading-none tracking-tight\">${title}</h3>`\n  })\n\n  content += `<div class=\"mt-1 text-muted-foreground\">`\n  const body = model.body.flatMap((body) => body.lines)\n  body.forEach((line, i) => {\n    const colors = model.labelColors[i]\n    content += `\n        <div class=\"flex items-center\">\n          <span class=\"inline-block h-2 w-2 mr-1 rounded-full border\" style=\"background: ${colors.backgroundColor}; border-color: ${colors.borderColor}\"></span>\n          ${line}\n        </div>`\n  })\n  content += `</div>`\n\n  el.innerHTML = content\n\n  const pos = context.chart.canvas.getBoundingClientRect()\n  el.style.opacity = \"1\"\n  el.style.position = \"absolute\"\n  el.style.left = `${pos.left + window.scrollX + model.caretX}px`\n  el.style.top = `${pos.top + window.scrollY + model.caretY}px`\n  el.style.pointerEvents = \"none\"\n}\n\nfunction createTypedChart(\n  type: ChartType,\n  components: ChartComponent[]\n): Component<TypedChartProps> {\n  const chartsWithScales: ChartType[] = [\"bar\", \"line\", \"scatter\"]\n  const chartsWithLegends: ChartType[] = [\"bar\", \"line\"]\n\n  const options: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: chartsWithScales.includes(type)\n      ? {\n          x: {\n            border: { display: false },\n            grid: { display: false }\n          },\n          y: {\n            border: {\n              dash: [3],\n              dashOffset: 3,\n              display: false\n            },\n            grid: {\n              color: \"hsla(240, 3.8%, 46.1%, 0.4)\"\n            }\n          }\n        }\n      : {},\n    plugins: {\n      legend: chartsWithLegends.includes(type)\n        ? {\n            display: true,\n            align: \"end\",\n            labels: {\n              usePointStyle: true,\n              boxWidth: 6,\n              boxHeight: 6,\n              color: \"hsl(240, 3.8%, 46.1%)\",\n              font: { size: 14 }\n            }\n          }\n        : { display: false },\n      tooltip: {\n        enabled: false,\n        external: (context) => showTooltip(context)\n      }\n    }\n  }\n\n  Chart.register(...components)\n  return (props) => <BaseChart type={type} options={options} {...props} />\n}\n\nconst BarChart = /* #__PURE__ */ createTypedChart(\"bar\", [\n  BarController,\n  BarElement,\n  CategoryScale,\n  LinearScale\n])\nconst BubbleChart = /* #__PURE__ */ createTypedChart(\"bubble\", [\n  BubbleController,\n  PointElement,\n  LinearScale\n])\nconst DonutChart = /* #__PURE__ */ createTypedChart(\"doughnut\", [DoughnutController, ArcElement])\nconst LineChart = /* #__PURE__ */ createTypedChart(\"line\", [\n  LineController,\n  LineElement,\n  PointElement,\n  CategoryScale,\n  LinearScale\n])\nconst PieChart = /* #__PURE__ */ createTypedChart(\"pie\", [PieController, ArcElement])\nconst PolarAreaChart = /* #__PURE__ */ createTypedChart(\"polarArea\", [\n  PolarAreaController,\n  ArcElement,\n  RadialLinearScale\n])\nconst RadarChart = /* #__PURE__ */ createTypedChart(\"radar\", [\n  RadarController,\n  LineElement,\n  PointElement,\n  RadialLinearScale\n])\nconst ScatterChart = /* #__PURE__ */ createTypedChart(\"scatter\", [\n  ScatterController,\n  PointElement,\n  LinearScale\n])\n\nexport {\n  BaseChart as Chart,\n  BarChart,\n  BubbleChart,\n  DonutChart,\n  LineChart,\n  PieChart,\n  PolarAreaChart,\n  RadarChart,\n  ScatterChart\n}\n",
      "path": "src/registry/ui/charts.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/checkbox.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { Match, splitProps, Switch } from \"solid-js\"\n\nimport * as CheckboxPrimitive from \"@kobalte/core/checkbox\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype CheckboxRootProps<T extends ValidComponent = \"div\"> =\n  CheckboxPrimitive.CheckboxRootProps<T> & { class?: string | undefined }\n\nconst Checkbox = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, CheckboxRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as CheckboxRootProps, [\"class\"])\n  return (\n    <CheckboxPrimitive.Root\n      class={cn(\"items-top group relative flex space-x-2\", local.class)}\n      {...others}\n    >\n      <CheckboxPrimitive.Input class=\"peer\" />\n      <CheckboxPrimitive.Control class=\"size-4 shrink-0 rounded-sm border border-primary ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 peer-focus-visible:outline-none peer-focus-visible:ring-2 peer-focus-visible:ring-ring peer-focus-visible:ring-offset-2 data-[checked]:border-none data-[indeterminate]:border-none data-[checked]:bg-primary data-[indeterminate]:bg-primary data-[checked]:text-primary-foreground data-[indeterminate]:text-primary-foreground\">\n        <CheckboxPrimitive.Indicator>\n          <Switch>\n            <Match when={!others.indeterminate}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                class=\"size-4\"\n              >\n                <path d=\"M5 12l5 5l10 -10\" />\n              </svg>\n            </Match>\n            <Match when={others.indeterminate}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                class=\"size-4\"\n              >\n                <path d=\"M5 12l14 0\" />\n              </svg>\n            </Match>\n          </Switch>\n        </CheckboxPrimitive.Indicator>\n      </CheckboxPrimitive.Control>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n",
      "path": "src/registry/ui/checkbox.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/collapsible.tsx",
      "content": "import * as CollapsiblePrimitive from \"@kobalte/core/collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.Trigger\n\nconst CollapsibleContent = CollapsiblePrimitive.Content\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
      "path": "src/registry/ui/collapsible.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/combobox.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { Show, splitProps } from \"solid-js\"\n\nimport * as ComboboxPrimitive from \"@kobalte/core/combobox\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Combobox = ComboboxPrimitive.Root\nconst ComboboxItemLabel = ComboboxPrimitive.ItemLabel\nconst ComboboxHiddenSelect = ComboboxPrimitive.HiddenSelect\n\ntype ComboboxItemProps<T extends ValidComponent = \"li\"> = ComboboxPrimitive.ComboboxItemProps<T> & {\n  class?: string | undefined\n}\n\nconst ComboboxItem = <T extends ValidComponent = \"li\">(\n  props: PolymorphicProps<T, ComboboxItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as ComboboxItemProps, [\"class\"])\n  return (\n    <ComboboxPrimitive.Item\n      class={cn(\n        \"relative flex cursor-default select-none items-center justify-between rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground data-[disabled]:opacity-50\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype ComboboxItemIndicatorProps<T extends ValidComponent = \"div\"> =\n  ComboboxPrimitive.ComboboxItemIndicatorProps<T> & {\n    children?: JSX.Element\n  }\n\nconst ComboboxItemIndicator = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ComboboxItemIndicatorProps<T>>\n) => {\n  const [local, others] = splitProps(props as ComboboxItemIndicatorProps, [\"children\"])\n  return (\n    <ComboboxPrimitive.ItemIndicator {...others}>\n      <Show\n        when={local.children}\n        fallback={\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-4\"\n          >\n            <path d=\"M5 12l5 5l10 -10\" />\n          </svg>\n        }\n      >\n        {(children) => children()}\n      </Show>\n    </ComboboxPrimitive.ItemIndicator>\n  )\n}\n\ntype ComboboxSectionProps<T extends ValidComponent = \"li\"> =\n  ComboboxPrimitive.ComboboxSectionProps<T> & { class?: string | undefined }\n\nconst ComboboxSection = <T extends ValidComponent = \"li\">(\n  props: PolymorphicProps<T, ComboboxSectionProps<T>>\n) => {\n  const [local, others] = splitProps(props as ComboboxSectionProps, [\"class\"])\n  return (\n    <ComboboxPrimitive.Section\n      class={cn(\n        \"overflow-hidden p-1 px-2 py-1.5 text-xs font-medium text-muted-foreground \",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype ComboboxControlProps<\n  U,\n  T extends ValidComponent = \"div\"\n> = ComboboxPrimitive.ComboboxControlProps<U, T> & {\n  class?: string | undefined\n}\n\nconst ComboboxControl = <T, U extends ValidComponent = \"div\">(\n  props: PolymorphicProps<U, ComboboxControlProps<T>>\n) => {\n  const [local, others] = splitProps(props as ComboboxControlProps<T>, [\"class\"])\n  return (\n    <ComboboxPrimitive.Control\n      class={cn(\"flex h-10 items-center rounded-md border px-3\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype ComboboxInputProps<T extends ValidComponent = \"input\"> =\n  ComboboxPrimitive.ComboboxInputProps<T> & { class?: string | undefined }\n\nconst ComboboxInput = <T extends ValidComponent = \"input\">(\n  props: PolymorphicProps<T, ComboboxInputProps<T>>\n) => {\n  const [local, others] = splitProps(props as ComboboxInputProps, [\"class\"])\n  return (\n    <ComboboxPrimitive.Input\n      class={cn(\n        \"flex size-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype ComboboxTriggerProps<T extends ValidComponent = \"button\"> =\n  ComboboxPrimitive.ComboboxTriggerProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst ComboboxTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ComboboxTriggerProps<T>>\n) => {\n  const [local, others] = splitProps(props as ComboboxTriggerProps, [\"class\", \"children\"])\n  return (\n    <ComboboxPrimitive.Trigger class={cn(\"size-4 opacity-50\", local.class)} {...others}>\n      <ComboboxPrimitive.Icon>\n        <Show\n          when={local.children}\n          fallback={\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              class=\"size-4\"\n            >\n              <path d=\"M8 9l4 -4l4 4\" />\n              <path d=\"M16 15l-4 4l-4 -4\" />\n            </svg>\n          }\n        >\n          {(children) => children()}\n        </Show>\n      </ComboboxPrimitive.Icon>\n    </ComboboxPrimitive.Trigger>\n  )\n}\n\ntype ComboboxContentProps<T extends ValidComponent = \"div\"> =\n  ComboboxPrimitive.ComboboxContentProps<T> & { class?: string | undefined }\n\nconst ComboboxContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ComboboxContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as ComboboxContentProps, [\"class\"])\n  return (\n    <ComboboxPrimitive.Portal>\n      <ComboboxPrimitive.Content\n        class={cn(\n          \"relative z-50 min-w-32 overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md animate-in fade-in-80\",\n          local.class\n        )}\n        {...others}\n      >\n        <ComboboxPrimitive.Listbox class=\"m-0 p-1\" />\n      </ComboboxPrimitive.Content>\n    </ComboboxPrimitive.Portal>\n  )\n}\n\nexport {\n  Combobox,\n  ComboboxItem,\n  ComboboxItemLabel,\n  ComboboxItemIndicator,\n  ComboboxSection,\n  ComboboxControl,\n  ComboboxTrigger,\n  ComboboxInput,\n  ComboboxHiddenSelect,\n  ComboboxContent\n}\n",
      "path": "src/registry/ui/combobox.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/command.tsx",
      "content": "import type { Component, ComponentProps, ParentProps, VoidProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { DialogRootProps } from \"@kobalte/core/dialog\"\nimport * as CommandPrimitive from \"cmdk-solid\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command: Component<ParentProps<CommandPrimitive.CommandRootProps>> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n\n  return (\n    <CommandPrimitive.CommandRoot\n      class={cn(\n        \"flex size-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground blur-none\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst CommandDialog: Component<ParentProps<DialogRootProps>> = (props) => {\n  const [local, others] = splitProps(props, [\"children\"])\n\n  return (\n    <Dialog {...others}>\n      <DialogContent class=\"overflow-hidden p-0\">\n        <Command class=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:size-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:size-5\">\n          {local.children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput: Component<VoidProps<CommandPrimitive.CommandInputProps>> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n\n  return (\n    <div class=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"mr-2 size-4 shrink-0 opacity-50\"\n      >\n        <path d=\"M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0\" />\n        <path d=\"M21 21l-6 -6\" />\n      </svg>\n      <CommandPrimitive.CommandInput\n        class={cn(\n          \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n          local.class\n        )}\n        {...others}\n      />\n    </div>\n  )\n}\n\nconst CommandList: Component<ParentProps<CommandPrimitive.CommandListProps>> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n\n  return (\n    <CommandPrimitive.CommandList\n      class={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst CommandEmpty: Component<ParentProps<CommandPrimitive.CommandEmptyProps>> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n\n  return (\n    <CommandPrimitive.CommandEmpty\n      class={cn(\"py-6 text-center text-sm\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst CommandGroup: Component<ParentProps<CommandPrimitive.CommandGroupProps>> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n\n  return (\n    <CommandPrimitive.CommandGroup\n      class={cn(\n        \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst CommandSeparator: Component<VoidProps<CommandPrimitive.CommandSeparatorProps>> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n\n  return <CommandPrimitive.CommandSeparator class={cn(\"h-px bg-border\", local.class)} {...others} />\n}\n\nconst CommandItem: Component<ParentProps<CommandPrimitive.CommandItemProps>> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n\n  return (\n    <CommandPrimitive.CommandItem\n      cmdk-item=\"\"\n      class={cn(\n        \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst CommandShortcut: Component<ComponentProps<\"span\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n\n  return (\n    <span\n      class={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", local.class)}\n      {...others}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator\n}\n",
      "path": "src/registry/ui/command.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/context-menu.tsx",
      "content": "import type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as ContextMenuPrimitive from \"@kobalte/core/context-menu\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\nconst ContextMenuSub = ContextMenuPrimitive.Sub\nconst ContextMenuGroup = ContextMenuPrimitive.Group\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenu: Component<ContextMenuPrimitive.ContextMenuRootProps> = (props) => {\n  return <ContextMenuPrimitive.Root gutter={4} {...props} />\n}\n\ntype ContextMenuContentProps<T extends ValidComponent = \"div\"> =\n  ContextMenuPrimitive.ContextMenuContentProps<T> & {\n    class?: string | undefined\n  }\n\nconst ContextMenuContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ContextMenuContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as ContextMenuContentProps, [\"class\"])\n  return (\n    <ContextMenuPrimitive.Portal>\n      <ContextMenuPrimitive.Content\n        class={cn(\n          \"z-50 min-w-32 origin-[var(--kb-menu-content-transform-origin)] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in\",\n          local.class\n        )}\n        {...others}\n      />\n    </ContextMenuPrimitive.Portal>\n  )\n}\n\ntype ContextMenuItemProps<T extends ValidComponent = \"div\"> =\n  ContextMenuPrimitive.ContextMenuItemProps<T> & {\n    class?: string | undefined\n  }\n\nconst ContextMenuItem = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ContextMenuItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as ContextMenuItemProps, [\"class\"])\n  return (\n    <ContextMenuPrimitive.Item\n      class={cn(\n        \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst ContextMenuShortcut: Component<ComponentProps<\"span\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <span class={cn(\"ml-auto text-xs tracking-widest opacity-60\", local.class)} {...others} />\n}\n\ntype ContextMenuSeparatorProps<T extends ValidComponent = \"hr\"> =\n  ContextMenuPrimitive.ContextMenuSeparatorProps<T> & {\n    class?: string | undefined\n  }\n\nconst ContextMenuSeparator = <T extends ValidComponent = \"hr\">(\n  props: PolymorphicProps<T, ContextMenuSeparatorProps<T>>\n) => {\n  const [local, others] = splitProps(props as ContextMenuSeparatorProps, [\"class\"])\n  return (\n    <ContextMenuPrimitive.Separator\n      class={cn(\"-mx-1 my-1 h-px bg-muted\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype ContextMenuSubTriggerProps<T extends ValidComponent = \"div\"> =\n  ContextMenuPrimitive.ContextMenuSubTriggerProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst ContextMenuSubTrigger = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ContextMenuSubTriggerProps<T>>\n) => {\n  const [local, others] = splitProps(props as ContextMenuSubTriggerProps, [\"class\", \"children\"])\n  return (\n    <ContextMenuPrimitive.SubTrigger\n      class={cn(\n        \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n        local.class\n      )}\n      {...others}\n    >\n      {local.children}\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"ml-auto size-4\"\n      >\n        <path d=\"M9 6l6 6l-6 6\" />\n      </svg>\n    </ContextMenuPrimitive.SubTrigger>\n  )\n}\n\ntype ContextMenuSubContentProps<T extends ValidComponent = \"div\"> =\n  ContextMenuPrimitive.ContextMenuSubContentProps<T> & {\n    class?: string | undefined\n  }\n\nconst ContextMenuSubContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ContextMenuSubContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as ContextMenuSubContentProps, [\"class\"])\n  return (\n    <ContextMenuPrimitive.SubContent\n      class={cn(\n        \"z-50 min-w-32 origin-[var(--kb-menu-content-transform-origin)] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype ContextMenuCheckboxItemProps<T extends ValidComponent = \"div\"> =\n  ContextMenuPrimitive.ContextMenuCheckboxItemProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst ContextMenuCheckboxItem = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ContextMenuCheckboxItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as ContextMenuCheckboxItemProps, [\"class\", \"children\"])\n  return (\n    <ContextMenuPrimitive.CheckboxItem\n      class={cn(\n        \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        local.class\n      )}\n      {...others}\n    >\n      <span class=\"absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-4\"\n          >\n            <path d=\"M5 12l5 5l10 -10\" />\n          </svg>\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {local.children}\n    </ContextMenuPrimitive.CheckboxItem>\n  )\n}\n\ntype ContextMenuGroupLabelProps<T extends ValidComponent = \"span\"> =\n  ContextMenuPrimitive.ContextMenuGroupLabelProps<T> & {\n    class?: string | undefined\n  }\n\nconst ContextMenuGroupLabel = <T extends ValidComponent = \"span\">(\n  props: PolymorphicProps<T, ContextMenuGroupLabelProps<T>>\n) => {\n  const [local, others] = splitProps(props as ContextMenuGroupLabelProps, [\"class\"])\n  return (\n    <ContextMenuPrimitive.GroupLabel\n      class={cn(\"px-2 py-1.5 text-sm font-semibold\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype ContextMenuRadioItemProps<T extends ValidComponent = \"div\"> =\n  ContextMenuPrimitive.ContextMenuRadioItemProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst ContextMenuRadioItem = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ContextMenuRadioItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as ContextMenuRadioItemProps, [\"class\", \"children\"])\n  return (\n    <ContextMenuPrimitive.RadioItem\n      class={cn(\n        \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        local.class\n      )}\n      {...others}\n    >\n      <span class=\"absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-2 fill-current\"\n          >\n            <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\" />\n          </svg>\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {local.children}\n    </ContextMenuPrimitive.RadioItem>\n  )\n}\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuPortal,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuShortcut,\n  ContextMenuSeparator,\n  ContextMenuSub,\n  ContextMenuSubTrigger,\n  ContextMenuSubContent,\n  ContextMenuCheckboxItem,\n  ContextMenuGroup,\n  ContextMenuGroupLabel,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem\n}\n",
      "path": "src/registry/ui/context-menu.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/date-picker.tsx",
      "content": "import { children, Show, splitProps } from \"solid-js\"\n\nimport { DatePicker as DatePickerPrimitive } from \"@ark-ui/solid\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst DatePicker = DatePickerPrimitive.Root\nconst DatePickerLabel = DatePickerPrimitive.Label\nconst DatePickerContext = DatePickerPrimitive.Context\nconst DatePickerTableHead = DatePickerPrimitive.TableHead\nconst DatePickerTableBody = DatePickerPrimitive.TableBody\nconst DatePickerYearSelect = DatePickerPrimitive.YearSelect\nconst DatePickerMonthSelect = DatePickerPrimitive.MonthSelect\nconst DatePickerPositioner = DatePickerPrimitive.Positioner\n\nconst DatePickerControl = (props: DatePickerPrimitive.ControlProps) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <DatePickerPrimitive.Control\n      class={cn(\"inline-flex items-center gap-1\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst DatePickerInput = (props: DatePickerPrimitive.InputProps) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <DatePickerPrimitive.Input\n      class={cn(\n        \"h-9 w-full rounded-md border border-border bg-background px-3 py-1 text-sm shadow-sm transition-shadow placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-[1.5px] focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst DatePickerTrigger = (props: DatePickerPrimitive.TriggerProps) => {\n  const [local, others] = splitProps(props, [\"class\", \"children\"])\n\n  // prevents rendering children twice\n  const resolvedChildren = children(() => local.children)\n  const hasChildren = () => resolvedChildren.toArray().length !== 0\n\n  return (\n    <DatePickerPrimitive.Trigger\n      class={cn(\n        \"flex min-h-9 min-w-9 items-center justify-center rounded-md border border-border bg-background transition-[box-shadow,background-color] hover:bg-accent/50 focus-visible:outline-none focus-visible:ring-[1.5px] focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>svg]:size-4\",\n        local.class\n      )}\n      {...others}\n    >\n      <Show when={!hasChildren()} fallback={resolvedChildren()}>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          class=\"size-4\"\n        >\n          <path d=\"M4 7a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12z\" />\n          <path d=\"M16 3v4\" />\n          <path d=\"M8 3v4\" />\n          <path d=\"M4 11h16\" />\n          <path d=\"M11 15h1\" />\n          <path d=\"M12 15v3\" />\n          <title>Calendar</title>\n        </svg>\n      </Show>\n    </DatePickerPrimitive.Trigger>\n  )\n}\n\nconst DatePickerContent = (props: DatePickerPrimitive.ContentProps) => {\n  const [local, others] = splitProps(props, [\"class\", \"children\"])\n\n  return (\n    <DatePickerPrimitive.Content\n      class={cn(\n        \"z-50 rounded-md border bg-popover p-3 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        local.class\n      )}\n      {...others}\n    >\n      {local.children}\n    </DatePickerPrimitive.Content>\n  )\n}\n\nconst DatePickerView = (props: DatePickerPrimitive.ViewProps) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <DatePickerPrimitive.View class={cn(\"space-y-4\", local.class)} {...others} />\n}\n\nconst DatePickerViewControl = (props: DatePickerPrimitive.ViewControlProps) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <DatePickerPrimitive.ViewControl\n      class={cn(\"flex items-center justify-between gap-4\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst DatePickerPrevTrigger = (props: DatePickerPrimitive.PrevTriggerProps) => {\n  const [local, others] = splitProps(props, [\"class\", \"children\"])\n\n  // prevents rendering children twice\n  const resolvedChildren = children(() => local.children)\n  const hasChildren = () => resolvedChildren.toArray().length !== 0\n\n  return (\n    <DatePickerPrimitive.PrevTrigger\n      class={cn(\n        buttonVariants({\n          variant: \"outline\"\n        }),\n        \"size-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n        local.class\n      )}\n      {...others}\n    >\n      <Show when={!hasChildren()} fallback={resolvedChildren()}>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          class=\"size-4\"\n        >\n          <path d=\"M15 6l-6 6l6 6\" />\n          <title>Previous</title>\n        </svg>\n      </Show>\n    </DatePickerPrimitive.PrevTrigger>\n  )\n}\n\nconst DatePickerNextTrigger = (props: DatePickerPrimitive.NextTriggerProps) => {\n  const [local, others] = splitProps(props, [\"class\", \"children\"])\n\n  // prevents rendering children twice\n  const resolvedChildren = children(() => local.children)\n  const hasChildren = () => resolvedChildren.toArray().length !== 0\n\n  return (\n    <DatePickerPrimitive.NextTrigger\n      class={cn(\n        buttonVariants({\n          variant: \"outline\"\n        }),\n        \"size-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n        local.class\n      )}\n      {...others}\n    >\n      <Show when={!hasChildren()} fallback={resolvedChildren()}>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          class=\"size-4\"\n        >\n          <path d=\"M9 6l6 6l-6 6\" />\n          <title>Next</title>\n        </svg>\n      </Show>\n    </DatePickerPrimitive.NextTrigger>\n  )\n}\n\nconst DatePickerViewTrigger = (props: DatePickerPrimitive.ViewTriggerProps) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <DatePickerPrimitive.ViewTrigger\n      class={cn(buttonVariants({ variant: \"ghost\" }), \"h-7\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst DatePickerRangeText = (props: DatePickerPrimitive.RangeTextProps) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <DatePickerPrimitive.RangeText class={cn(\"text-sm font-medium\", local.class)} {...others} />\n  )\n}\n\nconst DatePickerTable = (props: DatePickerPrimitive.TableProps) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <DatePickerPrimitive.Table\n      class={cn(\"w-full border-collapse space-y-1\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst DatePickerTableRow = (props: DatePickerPrimitive.TableRowProps) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <DatePickerPrimitive.TableRow class={cn(\"mt-2 flex w-full\", local.class)} {...others} />\n}\n\nconst DatePickerTableHeader = (props: DatePickerPrimitive.TableHeaderProps) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <DatePickerPrimitive.TableHeader\n      class={cn(\"w-8 flex-1 text-[0.8rem] font-normal text-muted-foreground\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst DatePickerTableCell = (props: DatePickerPrimitive.TableCellProps) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <DatePickerPrimitive.TableCell\n      class={cn(\n        \"flex-1 p-0 text-center text-sm has-[[data-range-end]]:rounded-r-md has-[[data-range-start]]:rounded-l-md has-[[data-in-range]]:bg-accent has-[[data-outside-range][data-in-range]]:bg-accent/50 has-[[data-in-range]]:first-of-type:rounded-l-md has-[[data-in-range]]:last-of-type:rounded-r-md\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst DatePickerTableCellTrigger = (props: DatePickerPrimitive.TableCellTriggerProps) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <DatePickerPrimitive.TableCellTrigger\n      class={cn(\n        buttonVariants({ variant: \"ghost\" }),\n        \"size-8 w-full p-0 font-normal data-[selected]:opacity-100\",\n        \"data-[today]:bg-accent data-[today]:text-accent-foreground\",\n        \"[&:is([data-today][data-selected])]:bg-primary [&:is([data-today][data-selected])]:text-primary-foreground\",\n        \"data-[selected]:bg-primary data-[selected]:text-primary-foreground data-[selected]:hover:bg-primary data-[selected]:hover:text-primary-foreground\",\n        \"data-[disabled]:text-muted-foreground data-[disabled]:opacity-50\",\n        \"data-[outside-range]:text-muted-foreground data-[outside-range]:opacity-50\",\n        \"[&:is([data-outside-range][data-in-range])]:bg-accent/50 [&:is([data-outside-range][data-in-range])]:text-muted-foreground [&:is([data-outside-range][data-in-range])]:opacity-30\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport {\n  DatePicker,\n  DatePickerLabel,\n  DatePickerControl,\n  DatePickerInput,\n  DatePickerTrigger,\n  DatePickerContent,\n  DatePickerView,\n  DatePickerViewControl,\n  DatePickerPrevTrigger,\n  DatePickerNextTrigger,\n  DatePickerViewTrigger,\n  DatePickerRangeText,\n  DatePickerContext,\n  DatePickerTable,\n  DatePickerTableHead,\n  DatePickerTableBody,\n  DatePickerTableRow,\n  DatePickerTableHeader,\n  DatePickerTableCell,\n  DatePickerTableCellTrigger,\n  DatePickerYearSelect,\n  DatePickerMonthSelect,\n  DatePickerPositioner\n}\n",
      "path": "src/registry/ui/date-picker.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/delta-bar.tsx",
      "content": "import { mergeProps, Show, splitProps, type Component, type ComponentProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype DeltaBarProps = ComponentProps<\"div\"> & {\n  value: number\n  isIncreasePositive?: boolean\n}\n\nconst DeltaBar: Component<DeltaBarProps> = (rawProps) => {\n  const props = mergeProps(\n    {\n      isIncreasePositive: true\n    },\n    rawProps\n  )\n  const [local, others] = splitProps(props, [\"value\", \"isIncreasePositive\", \"class\"])\n\n  const barColor = () => \n    (local.value > 0 && local.isIncreasePositive) || (local.value < 0 && !local.isIncreasePositive)\n      ? \"bg-success-foreground\"\n      : \"bg-error-foreground\"\n\n  return (\n    <div\n      class={cn(\"relative flex h-2 w-full items-center rounded-full bg-secondary\", local.class)}\n      {...others}\n    >\n      <div class=\"flex h-full w-1/2 justify-end\">\n        <Show when={local.value < 0}>\n          <div\n            class={cn(\"rounded-l-full\", barColor())}\n            style={{ width: `${Math.abs(local.value)}%` }}\n          />\n        </Show>\n      </div>\n      <div class={cn(\"z-10 h-4 w-1 rounded-full ring-2 ring-background\", barColor())} />\n      <div class=\"flex h-full w-1/2 justify-start\">\n        <Show when={local.value > 0}>\n          <div\n            class={cn(\"rounded-r-full\", barColor())}\n            style={{ width: `${Math.abs(local.value)}%` }}\n          />\n        </Show>\n      </div>\n    </div>\n  )\n}\n\nexport { DeltaBar }\nexport type { DeltaBarProps }\n\n",
      "path": "src/registry/ui/delta-bar.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/dialog.tsx",
      "content": "import type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as DialogPrimitive from \"@kobalte/core/dialog\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal: Component<DialogPrimitive.DialogPortalProps> = (props) => {\n  const [, rest] = splitProps(props, [\"children\"])\n  return (\n    <DialogPrimitive.Portal {...rest}>\n      <div class=\"fixed inset-0 z-50 flex items-start justify-center sm:items-center\">\n        {props.children}\n      </div>\n    </DialogPrimitive.Portal>\n  )\n}\n\ntype DialogOverlayProps<T extends ValidComponent = \"div\"> =\n  DialogPrimitive.DialogOverlayProps<T> & { class?: string | undefined }\n\nconst DialogOverlay = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DialogOverlayProps<T>>\n) => {\n  const [, rest] = splitProps(props as DialogOverlayProps, [\"class\"])\n  return (\n    <DialogPrimitive.Overlay\n      class={cn(\n        \"fixed inset-0 z-50 bg-background/80 data-[expanded]:animate-in data-[closed]:animate-out data-[closed]:fade-out-0 data-[expanded]:fade-in-0\",\n        props.class\n      )}\n      {...rest}\n    />\n  )\n}\n\ntype DialogContentProps<T extends ValidComponent = \"div\"> =\n  DialogPrimitive.DialogContentProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst DialogContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DialogContentProps<T>>\n) => {\n  const [, rest] = splitProps(props as DialogContentProps, [\"class\", \"children\"])\n  return (\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        class={cn(\n          \"fixed left-1/2 top-1/2 z-50 grid max-h-screen w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 overflow-y-auto border bg-background p-6 shadow-lg duration-200 data-[expanded]:animate-in data-[closed]:animate-out data-[closed]:fade-out-0 data-[expanded]:fade-in-0 data-[closed]:zoom-out-95 data-[expanded]:zoom-in-95 data-[closed]:slide-out-to-left-1/2 data-[closed]:slide-out-to-top-[48%] data-[expanded]:slide-in-from-left-1/2 data-[expanded]:slide-in-from-top-[48%] sm:rounded-lg\",\n          props.class\n        )}\n        {...rest}\n      >\n        {props.children}\n        <DialogPrimitive.CloseButton class=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[expanded]:bg-accent data-[expanded]:text-muted-foreground\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-4\"\n          >\n            <path d=\"M18 6l-12 12\" />\n            <path d=\"M6 6l12 12\" />\n          </svg>\n          <span class=\"sr-only\">Close</span>\n        </DialogPrimitive.CloseButton>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nconst DialogHeader: Component<ComponentProps<\"div\">> = (props) => {\n  const [, rest] = splitProps(props, [\"class\"])\n  return (\n    <div class={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", props.class)} {...rest} />\n  )\n}\n\nconst DialogFooter: Component<ComponentProps<\"div\">> = (props) => {\n  const [, rest] = splitProps(props, [\"class\"])\n  return (\n    <div\n      class={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", props.class)}\n      {...rest}\n    />\n  )\n}\n\ntype DialogTitleProps<T extends ValidComponent = \"h2\"> = DialogPrimitive.DialogTitleProps<T> & {\n  class?: string | undefined\n}\n\nconst DialogTitle = <T extends ValidComponent = \"h2\">(\n  props: PolymorphicProps<T, DialogTitleProps<T>>\n) => {\n  const [, rest] = splitProps(props as DialogTitleProps, [\"class\"])\n  return (\n    <DialogPrimitive.Title\n      class={cn(\"text-lg font-semibold leading-none tracking-tight\", props.class)}\n      {...rest}\n    />\n  )\n}\n\ntype DialogDescriptionProps<T extends ValidComponent = \"p\"> =\n  DialogPrimitive.DialogDescriptionProps<T> & {\n    class?: string | undefined\n  }\n\nconst DialogDescription = <T extends ValidComponent = \"p\">(\n  props: PolymorphicProps<T, DialogDescriptionProps<T>>\n) => {\n  const [, rest] = splitProps(props as DialogDescriptionProps, [\"class\"])\n  return (\n    <DialogPrimitive.Description\n      class={cn(\"text-sm text-muted-foreground\", props.class)}\n      {...rest}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription\n}\n",
      "path": "src/registry/ui/dialog.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/drawer.tsx",
      "content": "import type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type {\n  ContentProps,\n  DescriptionProps,\n  DynamicProps,\n  LabelProps,\n  OverlayProps\n} from \"@corvu/drawer\"\nimport DrawerPrimitive from \"@corvu/drawer\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = DrawerPrimitive\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\ntype DrawerOverlayProps<T extends ValidComponent = \"div\"> = OverlayProps<T> & { class?: string }\n\nconst DrawerOverlay = <T extends ValidComponent = \"div\">(\n  props: DynamicProps<T, DrawerOverlayProps<T>>\n) => {\n  const [, rest] = splitProps(props as DrawerOverlayProps, [\"class\"])\n  const drawerContext = DrawerPrimitive.useContext()\n  return (\n    <DrawerPrimitive.Overlay\n      class={cn(\n        \"fixed inset-0 z-50 data-[transitioning]:transition-colors data-[transitioning]:duration-300\",\n        props.class\n      )}\n      style={{\n        \"background-color\": `rgb(0 0 0 / ${0.8 * drawerContext.openPercentage()})`\n      }}\n      {...rest}\n    />\n  )\n}\n\ntype DrawerContentProps<T extends ValidComponent = \"div\"> = ContentProps<T> & {\n  class?: string\n  children?: JSX.Element\n}\n\nconst DrawerContent = <T extends ValidComponent = \"div\">(\n  props: DynamicProps<T, DrawerContentProps<T>>\n) => {\n  const [, rest] = splitProps(props as DrawerContentProps, [\"class\", \"children\"])\n  return (\n    <DrawerPortal>\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        class={cn(\n          \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background after:absolute after:inset-x-0 after:top-full after:h-1/2 after:bg-inherit data-[transitioning]:transition-transform data-[transitioning]:duration-300 md:select-none\",\n          props.class\n        )}\n        {...rest}\n      >\n        <div class=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n        {props.children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nconst DrawerHeader: Component<ComponentProps<\"div\">> = (props) => {\n  const [, rest] = splitProps(props, [\"class\"])\n  return <div class={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", props.class)} {...rest} />\n}\n\nconst DrawerFooter: Component<ComponentProps<\"div\">> = (props) => {\n  const [, rest] = splitProps(props, [\"class\"])\n  return <div class={cn(\"t-auto flex flex-col gap-2 p-4\", props.class)} {...rest} />\n}\n\ntype DrawerTitleProps<T extends ValidComponent = \"div\"> = LabelProps<T> & { class?: string }\n\nconst DrawerTitle = <T extends ValidComponent = \"div\">(\n  props: DynamicProps<T, DrawerTitleProps<T>>\n) => {\n  const [, rest] = splitProps(props as DrawerTitleProps, [\"class\"])\n  return (\n    <DrawerPrimitive.Label\n      class={cn(\"text-lg font-semibold leading-none tracking-tight\", props.class)}\n      {...rest}\n    />\n  )\n}\n\ntype DrawerDescriptionProps<T extends ValidComponent = \"div\"> = DescriptionProps<T> & {\n  class?: string\n}\n\nconst DrawerDescription = <T extends ValidComponent = \"div\">(\n  props: DynamicProps<T, DrawerDescriptionProps<T>>\n) => {\n  const [, rest] = splitProps(props as DrawerDescriptionProps, [\"class\"])\n  return (\n    <DrawerPrimitive.Description\n      class={cn(\"text-sm text-muted-foreground\", props.class)}\n      {...rest}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription\n}\n",
      "path": "src/registry/ui/drawer.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/dropdown-menu.tsx",
      "content": "import type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as DropdownMenuPrimitive from \"@kobalte/core/dropdown-menu\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenu: Component<DropdownMenuPrimitive.DropdownMenuRootProps> = (props) => {\n  return <DropdownMenuPrimitive.Root gutter={4} {...props} />\n}\n\ntype DropdownMenuContentProps<T extends ValidComponent = \"div\"> =\n  DropdownMenuPrimitive.DropdownMenuContentProps<T> & {\n    class?: string | undefined\n  }\n\nconst DropdownMenuContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DropdownMenuContentProps<T>>\n) => {\n  const [, rest] = splitProps(props as DropdownMenuContentProps, [\"class\"])\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        class={cn(\n          \"z-50 min-w-32 origin-[var(--kb-menu-content-transform-origin)] animate-content-hide overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[expanded]:animate-content-show\",\n          props.class\n        )}\n        {...rest}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\ntype DropdownMenuItemProps<T extends ValidComponent = \"div\"> =\n  DropdownMenuPrimitive.DropdownMenuItemProps<T> & {\n    class?: string | undefined\n  }\n\nconst DropdownMenuItem = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DropdownMenuItemProps<T>>\n) => {\n  const [, rest] = splitProps(props as DropdownMenuItemProps, [\"class\"])\n  return (\n    <DropdownMenuPrimitive.Item\n      class={cn(\n        \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        props.class\n      )}\n      {...rest}\n    />\n  )\n}\n\nconst DropdownMenuShortcut: Component<ComponentProps<\"span\">> = (props) => {\n  const [, rest] = splitProps(props, [\"class\"])\n  return <span class={cn(\"ml-auto text-xs tracking-widest opacity-60\", props.class)} {...rest} />\n}\n\nconst DropdownMenuLabel: Component<ComponentProps<\"div\"> & { inset?: boolean }> = (props) => {\n  const [, rest] = splitProps(props, [\"class\", \"inset\"])\n  return (\n    <div\n      class={cn(\"px-2 py-1.5 text-sm font-semibold\", props.inset && \"pl-8\", props.class)}\n      {...rest}\n    />\n  )\n}\n\ntype DropdownMenuSeparatorProps<T extends ValidComponent = \"hr\"> =\n  DropdownMenuPrimitive.DropdownMenuSeparatorProps<T> & {\n    class?: string | undefined\n  }\n\nconst DropdownMenuSeparator = <T extends ValidComponent = \"hr\">(\n  props: PolymorphicProps<T, DropdownMenuSeparatorProps<T>>\n) => {\n  const [, rest] = splitProps(props as DropdownMenuSeparatorProps, [\"class\"])\n  return (\n    <DropdownMenuPrimitive.Separator\n      class={cn(\"-mx-1 my-1 h-px bg-muted\", props.class)}\n      {...rest}\n    />\n  )\n}\n\ntype DropdownMenuSubTriggerProps<T extends ValidComponent = \"div\"> =\n  DropdownMenuPrimitive.DropdownMenuSubTriggerProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst DropdownMenuSubTrigger = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DropdownMenuSubTriggerProps<T>>\n) => {\n  const [, rest] = splitProps(props as DropdownMenuSubTriggerProps, [\"class\", \"children\"])\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      class={cn(\n        \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n        props.class\n      )}\n      {...rest}\n    >\n      {props.children}\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"ml-auto size-4\"\n      >\n        <path d=\"M9 6l6 6l-6 6\" />\n      </svg>\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\ntype DropdownMenuSubContentProps<T extends ValidComponent = \"div\"> =\n  DropdownMenuPrimitive.DropdownMenuSubContentProps<T> & {\n    class?: string | undefined\n  }\n\nconst DropdownMenuSubContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DropdownMenuSubContentProps<T>>\n) => {\n  const [, rest] = splitProps(props as DropdownMenuSubContentProps, [\"class\"])\n  return (\n    <DropdownMenuPrimitive.SubContent\n      class={cn(\n        \"z-50 min-w-32 origin-[var(--kb-menu-content-transform-origin)] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in\",\n        props.class\n      )}\n      {...rest}\n    />\n  )\n}\n\ntype DropdownMenuCheckboxItemProps<T extends ValidComponent = \"div\"> =\n  DropdownMenuPrimitive.DropdownMenuCheckboxItemProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst DropdownMenuCheckboxItem = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DropdownMenuCheckboxItemProps<T>>\n) => {\n  const [, rest] = splitProps(props as DropdownMenuCheckboxItemProps, [\"class\", \"children\"])\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      class={cn(\n        \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        props.class\n      )}\n      {...rest}\n    >\n      <span class=\"absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-4\"\n          >\n            <path d=\"M5 12l5 5l10 -10\" />\n          </svg>\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {props.children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\ntype DropdownMenuGroupLabelProps<T extends ValidComponent = \"span\"> =\n  DropdownMenuPrimitive.DropdownMenuGroupLabelProps<T> & {\n    class?: string | undefined\n  }\n\nconst DropdownMenuGroupLabel = <T extends ValidComponent = \"span\">(\n  props: PolymorphicProps<T, DropdownMenuGroupLabelProps<T>>\n) => {\n  const [, rest] = splitProps(props as DropdownMenuGroupLabelProps, [\"class\"])\n  return (\n    <DropdownMenuPrimitive.GroupLabel\n      class={cn(\"px-2 py-1.5 text-sm font-semibold\", props.class)}\n      {...rest}\n    />\n  )\n}\n\ntype DropdownMenuRadioItemProps<T extends ValidComponent = \"div\"> =\n  DropdownMenuPrimitive.DropdownMenuRadioItemProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst DropdownMenuRadioItem = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DropdownMenuRadioItemProps<T>>\n) => {\n  const [, rest] = splitProps(props as DropdownMenuRadioItemProps, [\"class\", \"children\"])\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      class={cn(\n        \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        props.class\n      )}\n      {...rest}\n    >\n      <span class=\"absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-2 fill-current\"\n          >\n            <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\" />\n          </svg>\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {props.children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuPortal,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuShortcut,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n  DropdownMenuCheckboxItem,\n  DropdownMenuGroup,\n  DropdownMenuGroupLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem\n}\n",
      "path": "src/registry/ui/dropdown-menu.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/flex.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { mergeProps, splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype JustifyContent = \"start\" | \"end\" | \"center\" | \"between\" | \"around\" | \"evenly\"\ntype AlignItems = \"start\" | \"end\" | \"center\" | \"baseline\" | \"stretch\"\ntype FlexDirection = \"row\" | \"col\" | \"row-reverse\" | \"col-reverse\"\n\ntype FlexProps = ComponentProps<\"div\"> & {\n  flexDirection?: FlexDirection\n  justifyContent?: JustifyContent\n  alignItems?: AlignItems\n}\n\nconst Flex: Component<FlexProps> = (rawProps) => {\n  const props = mergeProps(\n    {\n      flexDirection: \"row\",\n      justifyContent: \"between\",\n      alignItems: \"center\"\n    } satisfies FlexProps,\n    rawProps\n  )\n  const [local, others] = splitProps(props, [\n    \"flexDirection\",\n    \"justifyContent\",\n    \"alignItems\",\n    \"class\"\n  ])\n\n  return (\n    <div\n      class={cn(\n        \"flex w-full\",\n        flexDirectionClassNames[local.flexDirection],\n        justifyContentClassNames[local.justifyContent],\n        alignItemsClassNames[local.alignItems],\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport { Flex }\n\nconst justifyContentClassNames: { [key in JustifyContent]: string } = {\n  start: \"justify-start\",\n  end: \"justify-end\",\n  center: \"justify-center\",\n  between: \"justify-between\",\n  around: \"justify-around\",\n  evenly: \"justify-evenly\"\n}\n\nconst alignItemsClassNames: { [key in AlignItems]: string } = {\n  start: \"items-start\",\n  end: \"items-end\",\n  center: \"items-center\",\n  baseline: \"items-baseline\",\n  stretch: \"items-stretch\"\n}\n\nconst flexDirectionClassNames: { [key in FlexDirection]: string } = {\n  row: \"flex-row\",\n  col: \"flex-col\",\n  \"row-reverse\": \"flex-row-reverse\",\n  \"col-reverse\": \"flex-col-reverse\"\n}\n",
      "path": "src/registry/ui/flex.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/grid.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { mergeProps, splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype Cols = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12\ntype Span = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13\n\ntype GridProps = ComponentProps<\"div\"> & {\n  cols?: Cols\n  colsSm?: Cols\n  colsMd?: Cols\n  colsLg?: Cols\n}\n\nconst Grid: Component<GridProps> = (rawProps) => {\n  const props = mergeProps({ cols: 1 } satisfies GridProps, rawProps)\n  const [local, others] = splitProps(props, [\"cols\", \"colsSm\", \"colsMd\", \"colsLg\", \"class\"])\n\n  return (\n    <div\n      class={cn(\n        \"grid\",\n        gridCols[local.cols],\n        local.colsSm && gridColsSm[local.colsSm],\n        local.colsMd && gridColsMd[local.colsMd],\n        local.colsLg && gridColsLg[local.colsLg],\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype ColProps = ComponentProps<\"div\"> & {\n  span?: Span\n  spanSm?: Span\n  spanMd?: Span\n  spanLg?: Span\n}\n\nconst Col: Component<ColProps> = (rawProps) => {\n  const props = mergeProps({ span: 1 as Span }, rawProps)\n  const [local, others] = splitProps(props, [\"span\", \"spanSm\", \"spanMd\", \"spanLg\", \"class\"])\n\n  return (\n    <div\n      class={cn(\n        colSpan[local.span],\n        local.spanSm && colSpanSm[local.spanSm],\n        local.spanMd && colSpanMd[local.spanMd],\n        local.spanLg && colSpanLg[local.spanLg],\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport { Grid, Col }\n\nconst gridCols: { [key in Cols]: string } = {\n  0: \"grid-cols-none\",\n  1: \"grid-cols-1\",\n  2: \"grid-cols-2\",\n  3: \"grid-cols-3\",\n  4: \"grid-cols-4\",\n  5: \"grid-cols-5\",\n  6: \"grid-cols-6\",\n  7: \"grid-cols-7\",\n  8: \"grid-cols-8\",\n  9: \"grid-cols-9\",\n  10: \"grid-cols-10\",\n  11: \"grid-cols-11\",\n  12: \"grid-cols-12\"\n}\n\nconst gridColsSm: { [key in Cols]: string } = {\n  0: \"sm:grid-cols-none\",\n  1: \"sm:grid-cols-1\",\n  2: \"sm:grid-cols-2\",\n  3: \"sm:grid-cols-3\",\n  4: \"sm:grid-cols-4\",\n  5: \"sm:grid-cols-5\",\n  6: \"sm:grid-cols-6\",\n  7: \"sm:grid-cols-7\",\n  8: \"sm:grid-cols-8\",\n  9: \"sm:grid-cols-9\",\n  10: \"sm:grid-cols-10\",\n  11: \"sm:grid-cols-11\",\n  12: \"sm:grid-cols-12\"\n}\n\nconst gridColsMd: { [key in Cols]: string } = {\n  0: \"md:grid-cols-none\",\n  1: \"md:grid-cols-1\",\n  2: \"md:grid-cols-2\",\n  3: \"md:grid-cols-3\",\n  4: \"md:grid-cols-4\",\n  5: \"md:grid-cols-5\",\n  6: \"md:grid-cols-6\",\n  7: \"md:grid-cols-7\",\n  8: \"md:grid-cols-8\",\n  9: \"md:grid-cols-9\",\n  10: \"md:grid-cols-10\",\n  11: \"md:grid-cols-11\",\n  12: \"md:grid-cols-12\"\n}\n\nconst gridColsLg: { [key in Cols]: string } = {\n  0: \"lg:grid-cols-none\",\n  1: \"lg:grid-cols-1\",\n  2: \"lg:grid-cols-2\",\n  3: \"lg:grid-cols-3\",\n  4: \"lg:grid-cols-4\",\n  5: \"lg:grid-cols-5\",\n  6: \"lg:grid-cols-6\",\n  7: \"lg:grid-cols-7\",\n  8: \"lg:grid-cols-8\",\n  9: \"lg:grid-cols-9\",\n  10: \"lg:grid-cols-10\",\n  11: \"lg:grid-cols-11\",\n  12: \"lg:grid-cols-12\"\n}\n\nconst colSpan: { [key in Span]: string } = {\n  1: \"col-span-1\",\n  2: \"col-span-2\",\n  3: \"col-span-3\",\n  4: \"col-span-4\",\n  5: \"col-span-5\",\n  6: \"col-span-6\",\n  7: \"col-span-7\",\n  8: \"col-span-8\",\n  9: \"col-span-9\",\n  10: \"col-span-10\",\n  11: \"col-span-11\",\n  12: \"col-span-12\",\n  13: \"col-span-13\"\n}\n\nconst colSpanSm: { [key in Span]: string } = {\n  1: \"sm:col-span-1\",\n  2: \"sm:col-span-2\",\n  3: \"sm:col-span-3\",\n  4: \"sm:col-span-4\",\n  5: \"sm:col-span-5\",\n  6: \"sm:col-span-6\",\n  7: \"sm:col-span-7\",\n  8: \"sm:col-span-8\",\n  9: \"sm:col-span-9\",\n  10: \"sm:col-span-10\",\n  11: \"sm:col-span-11\",\n  12: \"sm:col-span-12\",\n  13: \"sm:col-span-13\"\n}\n\nconst colSpanMd: { [key in Span]: string } = {\n  1: \"md:col-span-1\",\n  2: \"md:col-span-2\",\n  3: \"md:col-span-3\",\n  4: \"md:col-span-4\",\n  5: \"md:col-span-5\",\n  6: \"md:col-span-6\",\n  7: \"md:col-span-7\",\n  8: \"md:col-span-8\",\n  9: \"md:col-span-9\",\n  10: \"md:col-span-10\",\n  11: \"md:col-span-11\",\n  12: \"md:col-span-12\",\n  13: \"md:col-span-13\"\n}\n\nconst colSpanLg: { [key in Span]: string } = {\n  1: \"lg:col-span-1\",\n  2: \"lg:col-span-2\",\n  3: \"lg:col-span-3\",\n  4: \"lg:col-span-4\",\n  5: \"lg:col-span-5\",\n  6: \"lg:col-span-6\",\n  7: \"lg:col-span-7\",\n  8: \"lg:col-span-8\",\n  9: \"lg:col-span-9\",\n  10: \"lg:col-span-10\",\n  11: \"lg:col-span-11\",\n  12: \"lg:col-span-12\",\n  13: \"lg:col-span-13\"\n}\n",
      "path": "src/registry/ui/grid.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/hover-card.tsx",
      "content": "import type { Component, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as HoverCardPrimitive from \"@kobalte/core/hover-card\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCard: Component<HoverCardPrimitive.HoverCardRootProps> = (props) => {\n  return <HoverCardPrimitive.Root gutter={4} {...props} />\n}\n\ntype HoverCardContentProps<T extends ValidComponent = \"div\"> =\n  HoverCardPrimitive.HoverCardContentProps<T> & {\n    class?: string | undefined\n  }\n\nconst HoverCardContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, HoverCardContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as HoverCardContentProps, [\"class\"])\n  return (\n    <HoverCardPrimitive.Portal>\n      <HoverCardPrimitive.Content\n        class={cn(\n          \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          local.class\n        )}\n        {...others}\n      />\n    </HoverCardPrimitive.Portal>\n  )\n}\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
      "path": "src/registry/ui/hover-card.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/label.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Label: Component<ComponentProps<\"label\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <label\n      class={cn(\n        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport { Label }\n",
      "path": "src/registry/ui/label.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/menubar.tsx",
      "content": "import type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as MenubarPrimitive from \"@kobalte/core/menubar\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarGroup = MenubarPrimitive.Group\nconst MenubarPortal = MenubarPrimitive.Portal\nconst MenubarSub = MenubarPrimitive.Sub\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\ntype MenubarRootProps<T extends ValidComponent = \"div\"> = MenubarPrimitive.MenubarRootProps<T> & {\n  class?: string | undefined\n}\n\nconst Menubar = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, MenubarRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as MenubarRootProps, [\"class\"])\n  return (\n    <MenubarPrimitive.Root\n      class={cn(\n        \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst MenubarMenu: Component<MenubarPrimitive.MenubarMenuProps> = (props) => {\n  return <MenubarPrimitive.Menu gutter={8} {...props} />\n}\n\ntype MenubarTriggerProps<T extends ValidComponent = \"button\"> =\n  MenubarPrimitive.MenubarTriggerProps<T> & { class?: string | undefined }\n\nconst MenubarTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, MenubarTriggerProps<T>>\n) => {\n  const [local, others] = splitProps(props as MenubarTriggerProps, [\"class\"])\n  return (\n    <MenubarPrimitive.Trigger\n      class={cn(\n        \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype MenubarContentProps<T extends ValidComponent = \"div\"> =\n  MenubarPrimitive.MenubarContentProps<T> & { class?: string | undefined }\n\nconst MenubarContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, MenubarContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as MenubarContentProps, [\"class\"])\n  return (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        class={cn(\n          \"z-50 min-w-48 origin-[var(--kb-menu-content-transform-origin)] animate-content-hide overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[expanded]:animate-content-show\",\n          local.class\n        )}\n        {...others}\n      />\n    </MenubarPrimitive.Portal>\n  )\n}\n\ntype MenubarSubTriggerProps<T extends ValidComponent = \"div\"> =\n  MenubarPrimitive.MenubarSubTriggerProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n    inset?: boolean\n  }\n\nconst MenubarSubTrigger = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, MenubarSubTriggerProps<T>>\n) => {\n  const [local, others] = splitProps(props as MenubarSubTriggerProps, [\n    \"class\",\n    \"children\",\n    \"inset\"\n  ])\n  return (\n    <MenubarPrimitive.SubTrigger\n      class={cn(\n        \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n        local.inset && \"pl-8\",\n        local.class\n      )}\n      {...others}\n    >\n      {local.children}\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"ml-auto size-4\"\n      >\n        <path d=\"M9 6l6 6l-6 6\" />\n      </svg>\n    </MenubarPrimitive.SubTrigger>\n  )\n}\n\ntype MenubarSubContentProps<T extends ValidComponent = \"div\"> =\n  MenubarPrimitive.MenubarSubContentProps<T> & {\n    class?: string | undefined\n  }\n\nconst MenubarSubContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, MenubarSubContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as MenubarSubContentProps, [\"class\"])\n  return (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.SubContent\n        class={cn(\n          \"z-50 min-w-32 origin-[var(--kb-menu-content-transform-origin)] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in\",\n          local.class\n        )}\n        {...others}\n      />\n    </MenubarPrimitive.Portal>\n  )\n}\n\ntype MenubarItemProps<T extends ValidComponent = \"div\"> = MenubarPrimitive.MenubarItemProps<T> & {\n  class?: string | undefined\n  inset?: boolean\n}\n\nconst MenubarItem = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, MenubarItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as MenubarItemProps, [\"class\", \"inset\"])\n  return (\n    <MenubarPrimitive.Item\n      class={cn(\n        \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        local.inset && \"pl-8\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype MenubarCheckboxItemProps<T extends ValidComponent = \"div\"> =\n  MenubarPrimitive.MenubarCheckboxItemProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst MenubarCheckboxItem = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, MenubarCheckboxItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as MenubarCheckboxItemProps, [\"class\", \"children\"])\n  return (\n    <MenubarPrimitive.CheckboxItem\n      class={cn(\n        \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        local.class\n      )}\n      {...others}\n    >\n      <span class=\"absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-4\"\n          >\n            <path d=\"M5 12l5 5l10 -10\" />\n          </svg>\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {local.children}\n    </MenubarPrimitive.CheckboxItem>\n  )\n}\n\ntype MenubarRadioItemProps<T extends ValidComponent = \"div\"> =\n  MenubarPrimitive.MenubarRadioItemProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst MenubarRadioItem = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, MenubarRadioItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as MenubarRadioItemProps, [\"class\", \"children\"])\n  return (\n    <MenubarPrimitive.RadioItem\n      class={cn(\n        \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        local.class\n      )}\n      {...others}\n    >\n      <span class=\"absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-2 fill-current\"\n          >\n            <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\" />\n          </svg>\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {local.children}\n    </MenubarPrimitive.RadioItem>\n  )\n}\n\ntype MenubarItemLabelProps<T extends ValidComponent = \"div\"> =\n  MenubarPrimitive.MenubarItemLabelProps<T> & {\n    class?: string | undefined\n    inset?: boolean\n  }\n\nconst MenubarItemLabel = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, MenubarItemLabelProps<T>>\n) => {\n  const [local, others] = splitProps(props as MenubarItemLabelProps, [\"class\", \"inset\"])\n  return (\n    <MenubarPrimitive.ItemLabel\n      class={cn(\"px-2 py-1.5 text-sm font-semibold\", local.inset && \"pl-8\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype MenubarGroupLabelProps<T extends ValidComponent = \"span\"> =\n  MenubarPrimitive.MenubarGroupLabelProps<T> & {\n    class?: string | undefined\n    inset?: boolean\n  }\n\nconst MenubarGroupLabel = <T extends ValidComponent = \"span\">(\n  props: PolymorphicProps<T, MenubarGroupLabelProps<T>>\n) => {\n  const [local, others] = splitProps(props as MenubarGroupLabelProps, [\"class\", \"inset\"])\n  return (\n    <MenubarPrimitive.GroupLabel\n      class={cn(\"px-2 py-1.5 text-sm font-semibold\", local.inset && \"pl-8\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype MenubarSeparatorProps<T extends ValidComponent = \"hr\"> =\n  MenubarPrimitive.MenubarSeparatorProps<T> & { class?: string | undefined }\n\nconst MenubarSeparator = <T extends ValidComponent = \"hr\">(\n  props: PolymorphicProps<T, MenubarSeparatorProps<T>>\n) => {\n  const [local, others] = splitProps(props as MenubarSeparatorProps, [\"class\"])\n  return (\n    <MenubarPrimitive.Separator class={cn(\"-mx-1 my-1 h-px bg-muted\", local.class)} {...others} />\n  )\n}\n\nconst MenubarShortcut: Component<ComponentProps<\"span\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <span\n      class={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", local.class)}\n      {...others}\n    />\n  )\n}\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarItemLabel,\n  MenubarGroupLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut\n}\n",
      "path": "src/registry/ui/menubar.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/navigation-menu.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core\"\nimport * as NavigationMenuPrimitive from \"@kobalte/core/navigation-menu\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Menu\n\ntype NavigationMenuProps<T extends ValidComponent = \"ul\"> =\n  NavigationMenuPrimitive.NavigationMenuRootProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst NavigationMenu = <T extends ValidComponent = \"ul\">(\n  props: PolymorphicProps<T, NavigationMenuProps<T>>\n) => {\n  const [local, others] = splitProps(props as NavigationMenuProps, [\"class\", \"children\"])\n  return (\n    <NavigationMenuPrimitive.Root\n      gutter={6}\n      class={cn(\n        \"group/menu flex w-max flex-1 list-none items-center justify-center data-[orientation=vertical]:flex-col [&>li]:w-full\",\n        local.class\n      )}\n      {...others}\n    >\n      {local.children}\n      <NavigationMenuViewport />\n    </NavigationMenuPrimitive.Root>\n  )\n}\n\ntype NavigationMenuTriggerProps<T extends ValidComponent = \"button\"> =\n  NavigationMenuPrimitive.NavigationMenuTriggerProps<T> & {\n    class?: string | undefined\n  }\n\nconst NavigationMenuTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, NavigationMenuTriggerProps<T>>\n) => {\n  const [local, others] = splitProps(props as NavigationMenuTriggerProps, [\"class\"])\n  return (\n    <NavigationMenuPrimitive.Trigger\n      class={cn(\n        \"group/trigger inline-flex h-10 w-full items-center justify-center whitespace-nowrap rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[expanded]:bg-accent/50\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\nconst NavigationMenuIcon = () => {\n  return (\n    <NavigationMenuPrimitive.Icon aria-hidden=\"true\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"relative top-px ml-1 size-3 transition duration-200 group-data-[expanded]/trigger:rotate-180 group-data-[orientation=vertical]/menu:-rotate-90 group-data-[orientation=vertical]/menu:group-data-[expanded]/trigger:rotate-90\"\n      >\n        <path d=\"M6 9l6 6l6 -6\" />\n      </svg>\n    </NavigationMenuPrimitive.Icon>\n  )\n}\n\ntype NavigationMenuViewportProps<T extends ValidComponent = \"li\"> =\n  NavigationMenuPrimitive.NavigationMenuViewportProps<T> & { class?: string | undefined }\n\nconst NavigationMenuViewport = <T extends ValidComponent = \"li\">(\n  props: PolymorphicProps<T, NavigationMenuViewportProps<T>>\n) => {\n  const [local, others] = splitProps(props as NavigationMenuViewportProps, [\"class\"])\n  return (\n    <NavigationMenuPrimitive.Viewport\n      class={cn(\n        // base settings\n        \"pointer-events-none z-[1000] flex h-[var(--kb-navigation-menu-viewport-height)] w-[var(--kb-navigation-menu-viewport-width)] origin-[var(--kb-menu-content-transform-origin)] items-center justify-center overflow-x-clip overflow-y-visible rounded-md border bg-popover opacity-0 shadow-lg data-[expanded]:pointer-events-auto data-[orientation=vertical]:overflow-y-clip data-[orientation=vertical]:overflow-x-visible data-[expanded]:rounded-md\",\n        // animate\n        \"animate-content-hide transition-[width,height] duration-200 ease-in data-[expanded]:animate-content-show data-[expanded]:opacity-100 data-[expanded]:ease-out\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype NavigationMenuContentProps<T extends ValidComponent = \"ul\"> =\n  NavigationMenuPrimitive.NavigationMenuContentProps<T> & {\n    class?: string | undefined\n  }\n\nconst NavigationMenuContent = <T extends ValidComponent = \"ul\">(\n  props: PolymorphicProps<T, NavigationMenuContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as NavigationMenuContentProps, [\"class\"])\n  return (\n    <NavigationMenuPrimitive.Portal>\n      <NavigationMenuPrimitive.Content\n        class={cn(\n          // base settings\n          \"pointer-events-none absolute left-0 top-0 box-border p-4 focus:outline-none data-[expanded]:pointer-events-auto\",\n          // base animation settings\n          \"data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out\",\n          // left to right\n          \"data-[orientation=horizontal]:data-[motion=from-start]:slide-in-from-left-52 data-[orientation=horizontal]:data-[motion=to-end]:slide-out-to-right-52\",\n          // right to left\n          \"data-[orientation=horizontal]:data-[motion=from-end]:slide-in-from-right-52 data-[orientation=horizontal]:data-[motion=to-start]:slide-out-to-left-52\",\n          // top to bottom\n          \"data-[orientation=vertical]:data-[motion=from-start]:slide-in-from-top-52 data-[orientation=vertical]:data-[motion=to-end]:slide-out-to-bottom-52\",\n          //bottom to top\n          \"data-[orientation=vertical]:data-[motion=from-end]:slide-in-from-bottom-52 data-[orientation=vertical]:data-[motion=to-start]:slide-out-to-bottom-52\",\n          local.class\n        )}\n        {...others}\n      />\n    </NavigationMenuPrimitive.Portal>\n  )\n}\n\ntype NavigationMenuLinkProps<T extends ValidComponent = \"a\"> =\n  NavigationMenuPrimitive.NavigationMenuItemProps<T> & { class?: string | undefined }\n\nconst NavigationMenuLink = <T extends ValidComponent = \"a\">(\n  props: PolymorphicProps<T, NavigationMenuLinkProps<T>>\n) => {\n  const [local, others] = splitProps(props as NavigationMenuLinkProps, [\"class\"])\n  return (\n    <NavigationMenuPrimitive.Item\n      class={cn(\n        \"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors  hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype NavigationMenuLabelProps<T extends ValidComponent = \"div\"> =\n  NavigationMenuPrimitive.NavigationMenuItemLabelProps<T> & { class?: string | undefined }\n\nconst NavigationMenuLabel = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, NavigationMenuLabelProps<T>>\n) => {\n  const [local, others] = splitProps(props as NavigationMenuLabelProps, [\"class\"])\n  return (\n    <NavigationMenuPrimitive.ItemLabel\n      class={cn(\"text-sm font-medium leading-none\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype NavigationMenuDescriptionProps<T extends ValidComponent = \"div\"> =\n  NavigationMenuPrimitive.NavigationMenuItemDescriptionProps<T> & { class?: string | undefined }\n\nconst NavigationMenuDescription = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, NavigationMenuDescriptionProps<T>>\n) => {\n  const [local, others] = splitProps(props as NavigationMenuDescriptionProps, [\"class\"])\n  return (\n    <NavigationMenuPrimitive.ItemDescription\n      class={cn(\"text-sm leading-snug text-muted-foreground\", local.class)}\n      {...others}\n    />\n  )\n}\n\nexport {\n  NavigationMenu,\n  NavigationMenuItem,\n  NavigationMenuTrigger,\n  NavigationMenuIcon,\n  NavigationMenuViewport,\n  NavigationMenuContent,\n  NavigationMenuLink,\n  NavigationMenuLabel,\n  NavigationMenuDescription\n}\n",
      "path": "src/registry/ui/navigation-menu.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/number-field.tsx",
      "content": "import type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\"\nimport { Show, splitProps } from \"solid-js\"\n\nimport * as NumberFieldPrimitive from \"@kobalte/core/number-field\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NumberField = NumberFieldPrimitive.Root\n\nconst NumberFieldGroup: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div\n      class={cn(\n        \"relative rounded-md focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype NumberFieldLabelProps<T extends ValidComponent = \"label\"> =\n  NumberFieldPrimitive.NumberFieldLabelProps<T> & {\n    class?: string | undefined\n  }\n\nconst NumberFieldLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, NumberFieldLabelProps<T>>\n) => {\n  const [local, others] = splitProps(props as NumberFieldLabelProps, [\"class\"])\n  return (\n    <NumberFieldPrimitive.Label\n      class={cn(\n        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype NumberFieldInputProps<T extends ValidComponent = \"input\"> =\n  NumberFieldPrimitive.NumberFieldInputProps<T> & {\n    class?: string | undefined\n  }\n\nconst NumberFieldInput = <T extends ValidComponent = \"input\">(\n  props: PolymorphicProps<T, NumberFieldInputProps<T>>\n) => {\n  const [local, others] = splitProps(props as NumberFieldInputProps, [\"class\"])\n  return (\n    <NumberFieldPrimitive.Input\n      class={cn(\n        \"flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50 data-[invalid]:border-error-foreground data-[invalid]:text-error-foreground\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype NumberFieldIncrementTriggerProps<T extends ValidComponent = \"button\"> =\n  NumberFieldPrimitive.NumberFieldIncrementTriggerProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst NumberFieldIncrementTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, NumberFieldIncrementTriggerProps<T>>\n) => {\n  const [local, others] = splitProps(props as NumberFieldIncrementTriggerProps, [\n    \"class\",\n    \"children\"\n  ])\n  return (\n    <NumberFieldPrimitive.IncrementTrigger\n      class={cn(\n        \"absolute right-1 top-1 inline-flex size-4 items-center justify-center\",\n        local.class\n      )}\n      {...others}\n    >\n      <Show\n        when={local.children}\n        fallback={\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-4\"\n          >\n            <path d=\"M6 15l6 -6l6 6\" />\n          </svg>\n        }\n      >\n        {(children) => children()}\n      </Show>\n    </NumberFieldPrimitive.IncrementTrigger>\n  )\n}\n\ntype NumberFieldDecrementTriggerProps<T extends ValidComponent = \"button\"> =\n  NumberFieldPrimitive.NumberFieldDecrementTriggerProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst NumberFieldDecrementTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, NumberFieldDecrementTriggerProps<T>>\n) => {\n  const [local, others] = splitProps(props as NumberFieldDecrementTriggerProps, [\n    \"class\",\n    \"children\"\n  ])\n  return (\n    <NumberFieldPrimitive.DecrementTrigger\n      class={cn(\n        \"absolute bottom-1 right-1 inline-flex size-4 items-center justify-center\",\n        local.class\n      )}\n      {...others}\n    >\n      <Show\n        when={local.children}\n        fallback={\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-4\"\n          >\n            <path d=\"M6 9l6 6l6 -6\" />\n          </svg>\n        }\n      >\n        {(children) => children()}\n      </Show>\n    </NumberFieldPrimitive.DecrementTrigger>\n  )\n}\n\ntype NumberFieldDescriptionProps<T extends ValidComponent = \"div\"> =\n  NumberFieldPrimitive.NumberFieldDescriptionProps<T> & {\n    class?: string | undefined\n  }\n\nconst NumberFieldDescription = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, NumberFieldDescriptionProps<T>>\n) => {\n  const [local, others] = splitProps(props as NumberFieldDescriptionProps, [\"class\"])\n  return (\n    <NumberFieldPrimitive.Description\n      class={cn(\"text-sm text-muted-foreground\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype NumberFieldErrorMessageProps<T extends ValidComponent = \"div\"> =\n  NumberFieldPrimitive.NumberFieldErrorMessageProps<T> & {\n    class?: string | undefined\n  }\n\nconst NumberFieldErrorMessage = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, NumberFieldErrorMessageProps<T>>\n) => {\n  const [local, others] = splitProps(props as NumberFieldErrorMessageProps, [\"class\"])\n  return (\n    <NumberFieldPrimitive.ErrorMessage\n      class={cn(\"text-sm text-error-foreground\", local.class)}\n      {...others}\n    />\n  )\n}\n\nexport {\n  NumberField,\n  NumberFieldGroup,\n  NumberFieldLabel,\n  NumberFieldInput,\n  NumberFieldIncrementTrigger,\n  NumberFieldDecrementTrigger,\n  NumberFieldDescription,\n  NumberFieldErrorMessage\n}\n",
      "path": "src/registry/ui/number-field.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/otp-field.tsx",
      "content": "import type { Component, ComponentProps, ValidComponent } from \"solid-js\"\nimport { Show, splitProps } from \"solid-js\"\n\nimport type { DynamicProps, RootProps } from \"@corvu/otp-field\"\nimport OtpField from \"@corvu/otp-field\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport const REGEXP_ONLY_DIGITS = \"^\\\\d*$\"\nexport const REGEXP_ONLY_CHARS = \"^[a-zA-Z]*$\"\nexport const REGEXP_ONLY_DIGITS_AND_CHARS = \"^[a-zA-Z0-9]*$\"\n\ntype OTPFieldProps<T extends ValidComponent = \"div\"> = RootProps<T> & { class?: string }\n\nconst OTPField = <T extends ValidComponent = \"div\">(props: DynamicProps<T, OTPFieldProps<T>>) => {\n  const [local, others] = splitProps(props as OTPFieldProps, [\"class\"])\n  return (\n    <OtpField\n      class={cn(\n        \"flex items-center gap-2 disabled:cursor-not-allowed has-[:disabled]:opacity-50\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst OTPFieldInput = OtpField.Input\n\nconst OTPFieldGroup: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"flex items-center\", local.class)} {...others} />\n}\n\nconst OTPFieldSlot: Component<ComponentProps<\"div\"> & { index: number }> = (props) => {\n  const [local, others] = splitProps(props, [\"class\", \"index\"])\n  const context = OtpField.useContext()\n  const char = () => context.value()[local.index]\n  const showFakeCaret = () => context.value().length === local.index && context.isInserting()\n\n  return (\n    <div\n      class={cn(\n        \"group relative flex size-10 items-center justify-center border-y border-r border-input text-sm first:rounded-l-md first:border-l last:rounded-r-md\",\n        local.class\n      )}\n      {...others}\n    >\n      <div\n        class={cn(\n          \"absolute inset-0 z-10 transition-all group-first:rounded-l-md group-last:rounded-r-md\",\n          context.activeSlots().includes(local.index) && \"ring-2 ring-ring ring-offset-background\"\n        )}\n      />\n      {char()}\n      <Show when={showFakeCaret()}>\n        <div class=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div class=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      </Show>\n    </div>\n  )\n}\n\nconst OTPFieldSeparator: Component<ComponentProps<\"div\">> = (props) => {\n  return (\n    <div {...props}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"size-6\"\n      >\n        <circle cx=\"12.1\" cy=\"12.1\" r=\"1\" />\n      </svg>\n    </div>\n  )\n}\n\nexport { OTPField, OTPFieldInput, OTPFieldGroup, OTPFieldSlot, OTPFieldSeparator }\n",
      "path": "src/registry/ui/otp-field.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/pagination.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { Show, splitProps } from \"solid-js\"\n\nimport * as PaginationPrimitive from \"@kobalte/core/pagination\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst PaginationItems = PaginationPrimitive.Items\n\ntype PaginationRootProps<T extends ValidComponent = \"nav\"> =\n  PaginationPrimitive.PaginationRootProps<T> & { class?: string | undefined }\n\nconst Pagination = <T extends ValidComponent = \"nav\">(\n  props: PolymorphicProps<T, PaginationRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as PaginationRootProps, [\"class\"])\n  return (\n    <PaginationPrimitive.Root\n      class={cn(\"[&>*]:flex [&>*]:flex-row [&>*]:items-center [&>*]:gap-1\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype PaginationItemProps<T extends ValidComponent = \"button\"> =\n  PaginationPrimitive.PaginationItemProps<T> & { class?: string | undefined }\n\nconst PaginationItem = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, PaginationItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as PaginationItemProps, [\"class\"])\n  return (\n    <PaginationPrimitive.Item\n      class={cn(\n        buttonVariants({\n          variant: \"ghost\"\n        }),\n        \"size-10 data-[current]:border\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype PaginationEllipsisProps<T extends ValidComponent = \"div\"> =\n  PaginationPrimitive.PaginationEllipsisProps<T> & {\n    class?: string | undefined\n  }\n\nconst PaginationEllipsis = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, PaginationEllipsisProps<T>>\n) => {\n  const [local, others] = splitProps(props as PaginationEllipsisProps, [\"class\"])\n  return (\n    <PaginationPrimitive.Ellipsis\n      class={cn(\"flex size-10 items-center justify-center\", local.class)}\n      {...others}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"size-4\"\n      >\n        <circle cx=\"12\" cy=\"12\" r=\"1\" />\n        <circle cx=\"19\" cy=\"12\" r=\"1\" />\n        <circle cx=\"5\" cy=\"12\" r=\"1\" />\n      </svg>\n      <span class=\"sr-only\">More pages</span>\n    </PaginationPrimitive.Ellipsis>\n  )\n}\n\ntype PaginationPreviousProps<T extends ValidComponent = \"button\"> =\n  PaginationPrimitive.PaginationPreviousProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst PaginationPrevious = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, PaginationPreviousProps<T>>\n) => {\n  const [local, others] = splitProps(props as PaginationPreviousProps, [\"class\", \"children\"])\n  return (\n    <PaginationPrimitive.Previous\n      class={cn(\n        buttonVariants({\n          variant: \"ghost\"\n        }),\n        \"gap-1 pl-2.5\",\n        local.class\n      )}\n      {...others}\n    >\n      <Show\n        when={local.children}\n        fallback={\n          <>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              class=\"size-4\"\n            >\n              <path d=\"M15 6l-6 6l6 6\" />\n            </svg>\n            <span>Previous</span>\n          </>\n        }\n      >\n        {(children) => children()}\n      </Show>\n    </PaginationPrimitive.Previous>\n  )\n}\n\ntype PaginationNextProps<T extends ValidComponent = \"button\"> =\n  PaginationPrimitive.PaginationNextProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst PaginationNext = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, PaginationNextProps<T>>\n) => {\n  const [local, others] = splitProps(props as PaginationNextProps, [\"class\", \"children\"])\n  return (\n    <PaginationPrimitive.Next\n      class={cn(\n        buttonVariants({\n          variant: \"ghost\"\n        }),\n        \"gap-1 pl-2.5\",\n        local.class\n      )}\n      {...others}\n    >\n      <Show\n        when={local.children}\n        fallback={\n          <>\n            <span>Next</span>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              class=\"size-4\"\n            >\n              <path d=\"M9 6l6 6l-6 6\" />\n            </svg>\n          </>\n        }\n      >\n        {(children) => children()}\n      </Show>\n    </PaginationPrimitive.Next>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationItems,\n  PaginationItem,\n  PaginationEllipsis,\n  PaginationPrevious,\n  PaginationNext\n}\n",
      "path": "src/registry/ui/pagination.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/popover.tsx",
      "content": "import type { Component, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as PopoverPrimitive from \"@kobalte/core/popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst Popover: Component<PopoverPrimitive.PopoverRootProps> = (props) => {\n  return <PopoverPrimitive.Root gutter={4} {...props} />\n}\n\ntype PopoverContentProps<T extends ValidComponent = \"div\"> =\n  PopoverPrimitive.PopoverContentProps<T> & { class?: string | undefined }\n\nconst PopoverContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, PopoverContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as PopoverContentProps, [\"class\"])\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        class={cn(\n          \"z-50 w-72 origin-[var(--kb-popover-content-transform-origin)] rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[expanded]:animate-in data-[closed]:animate-out data-[closed]:fade-out-0 data-[expanded]:fade-in-0 data-[closed]:zoom-out-95 data-[expanded]:zoom-in-95\",\n          local.class\n        )}\n        {...others}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
      "path": "src/registry/ui/popover.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/progress-circle.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { mergeProps, splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype Size = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"\n\nconst sizes: Record<Size, { radius: number; strokeWidth: number }> = {\n  xs: { radius: 15, strokeWidth: 3 },\n  sm: { radius: 19, strokeWidth: 4 },\n  md: { radius: 32, strokeWidth: 6 },\n  lg: { radius: 52, strokeWidth: 8 },\n  xl: { radius: 80, strokeWidth: 10 }\n}\n\ntype ProgressCircleProps = ComponentProps<\"div\"> & {\n  value?: number\n  size?: Size\n  radius?: number\n  strokeWidth?: number\n  showAnimation?: boolean\n}\n\nconst ProgressCircle: Component<ProgressCircleProps> = (rawProps) => {\n  const props = mergeProps({ size: \"md\" as Size, showAnimation: true }, rawProps)\n  const [local, others] = splitProps(props, [\n    \"class\",\n    \"children\",\n    \"value\",\n    \"size\",\n    \"radius\",\n    \"strokeWidth\",\n    \"showAnimation\"\n  ])\n\n  const value = () => getLimitedValue(local.value)\n  const radius = () => local.radius ?? sizes[local.size].radius\n  const strokeWidth = () => local.strokeWidth ?? sizes[local.size].strokeWidth\n  const normalizedRadius = () => radius() - strokeWidth() / 2\n  const circumference = () => normalizedRadius() * 2 * Math.PI\n  const strokeDashoffset = () => (value() / 100) * circumference()\n  const offset = () => circumference() - strokeDashoffset()\n\n  return (\n    <div class={cn(\"flex flex-col items-center justify-center\", local.class)} {...others}>\n      <svg\n        width={radius() * 2}\n        height={radius() * 2}\n        viewBox={`0 0 ${radius() * 2} ${radius() * 2}`}\n        class=\"-rotate-90\"\n      >\n        <circle\n          r={normalizedRadius()}\n          cx={radius()}\n          cy={radius()}\n          stroke-width={strokeWidth()}\n          fill=\"transparent\"\n          stroke=\"\"\n          stroke-linecap=\"round\"\n          class={cn(\"stroke-secondary transition-colors ease-linear\")}\n        />\n        {value() >= 0 ? (\n          <circle\n            r={normalizedRadius()}\n            cx={radius()}\n            cy={radius()}\n            stroke-width={strokeWidth()}\n            stroke-dasharray={circumference() + \" \" + circumference()}\n            stroke-dashoffset={offset()}\n            fill=\"transparent\"\n            stroke=\"\"\n            stroke-linecap=\"round\"\n            class={cn(\n              \"stroke-primary transition-colors ease-linear\",\n              local.showAnimation ? \"transition-all duration-300 ease-in-out\" : \"\"\n            )}\n          />\n        ) : null}\n      </svg>\n      <div class={cn(\"absolute flex\")}>{local.children}</div>\n    </div>\n  )\n}\n\nfunction getLimitedValue(input: number | undefined) {\n  if (input === undefined) {\n    return 0\n  } else if (input > 100) {\n    return 100\n  }\n  return input\n}\n\nexport { ProgressCircle }\n",
      "path": "src/registry/ui/progress-circle.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/progress.tsx",
      "content": "import type { Component, JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as ProgressPrimitive from \"@kobalte/core/progress\"\n\nimport { Label } from \"@/components/ui/label\"\n\ntype ProgressRootProps<T extends ValidComponent = \"div\"> =\n  ProgressPrimitive.ProgressRootProps<T> & { children?: JSX.Element }\n\nconst Progress = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ProgressRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as ProgressRootProps, [\"children\"])\n  return (\n    <ProgressPrimitive.Root {...others}>\n      {local.children}\n      <ProgressPrimitive.Track class=\"relative h-2 w-full overflow-hidden rounded-full bg-secondary\">\n        <ProgressPrimitive.Fill class=\"h-full w-[var(--kb-progress-fill-width)] flex-1 bg-primary transition-all\" />\n      </ProgressPrimitive.Track>\n    </ProgressPrimitive.Root>\n  )\n}\n\nconst ProgressLabel: Component<ProgressPrimitive.ProgressLabelProps> = (props) => {\n  return <ProgressPrimitive.Label as={Label} {...props} />\n}\n\nconst ProgressValueLabel: Component<ProgressPrimitive.ProgressValueLabelProps> = (props) => {\n  return <ProgressPrimitive.ValueLabel as={Label} {...props} />\n}\n\nexport { Progress, ProgressLabel, ProgressValueLabel }\n",
      "path": "src/registry/ui/progress.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/radio-group.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as RadioGroupPrimitive from \"@kobalte/core/radio-group\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype RadioGroupRootProps<T extends ValidComponent = \"div\"> =\n  RadioGroupPrimitive.RadioGroupRootProps<T> & { class?: string | undefined }\n\nconst RadioGroup = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, RadioGroupRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as RadioGroupRootProps, [\"class\"])\n  return <RadioGroupPrimitive.Root class={cn(\"grid gap-2\", local.class)} {...others} />\n}\n\ntype RadioGroupItemProps<T extends ValidComponent = \"div\"> =\n  RadioGroupPrimitive.RadioGroupItemProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst RadioGroupItem = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, RadioGroupItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as RadioGroupItemProps, [\"class\", \"children\"])\n  return (\n    <RadioGroupPrimitive.Item class={cn(\"flex items-center space-x-2\", local.class)} {...others}>\n      <RadioGroupPrimitive.ItemInput />\n      <RadioGroupPrimitive.ItemControl class=\"aspect-square size-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\">\n        <RadioGroupPrimitive.ItemIndicator class=\"flex h-full items-center justify-center \">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-2.5 fill-current text-current\"\n          >\n            <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\" />\n          </svg>\n        </RadioGroupPrimitive.ItemIndicator>\n      </RadioGroupPrimitive.ItemControl>\n      {local.children}\n    </RadioGroupPrimitive.Item>\n  )\n}\n\ntype RadioGroupLabelProps<T extends ValidComponent = \"label\"> =\n  RadioGroupPrimitive.RadioGroupLabelProps<T> & {\n    class?: string | undefined\n  }\n\nconst RadioGroupItemLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, RadioGroupLabelProps<T>>\n) => {\n  const [local, others] = splitProps(props as RadioGroupLabelProps, [\"class\"])\n  return (\n    <RadioGroupPrimitive.ItemLabel\n      class={cn(\n        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport { RadioGroup, RadioGroupItem, RadioGroupItemLabel }\n",
      "path": "src/registry/ui/radio-group.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/resizable.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { Show, splitProps } from \"solid-js\"\n\nimport type { DynamicProps, HandleProps, RootProps } from \"@corvu/resizable\"\nimport ResizablePrimitive from \"@corvu/resizable\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype ResizableProps<T extends ValidComponent = \"div\"> = RootProps<T> & { class?: string }\n\nconst Resizable = <T extends ValidComponent = \"div\">(props: DynamicProps<T, ResizableProps<T>>) => {\n  const [, rest] = splitProps(props as ResizableProps, [\"class\"])\n  return (\n    <ResizablePrimitive\n      class={cn(\"flex size-full data-[orientation=vertical]:flex-col\", props.class)}\n      {...rest}\n    />\n  )\n}\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\ntype ResizableHandleProps<T extends ValidComponent = \"button\"> = HandleProps<T> & {\n  class?: string\n  withHandle?: boolean\n}\n\nconst ResizableHandle = <T extends ValidComponent = \"button\">(\n  props: DynamicProps<T, ResizableHandleProps<T>>\n) => {\n  const [, rest] = splitProps(props as ResizableHandleProps, [\"class\", \"withHandle\"])\n  return (\n    <ResizablePrimitive.Handle\n      class={cn(\n        \"relative flex w-px shrink-0 items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[orientation=vertical]:h-px data-[orientation=vertical]:w-full data-[orientation=vertical]:after:left-0 data-[orientation=vertical]:after:h-1 data-[orientation=vertical]:after:w-full data-[orientation=vertical]:after:-translate-y-1/2 data-[orientation=vertical]:after:translate-x-0 [&[data-orientation=vertical]>div]:rotate-90\",\n        props.class\n      )}\n      {...rest}\n    >\n      <Show when={props.withHandle}>\n        <div class=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-2.5\"\n          >\n            <path d=\"M9 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n            <path d=\"M9 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n            <path d=\"M9 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n            <path d=\"M15 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n            <path d=\"M15 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n            <path d=\"M15 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n          </svg>\n        </div>\n      </Show>\n    </ResizablePrimitive.Handle>\n  )\n}\n\nexport { Resizable, ResizablePanel, ResizableHandle }\n",
      "path": "src/registry/ui/resizable.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/select.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as SelectPrimitive from \"@kobalte/core/select\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\nconst SelectValue = SelectPrimitive.Value\nconst SelectHiddenSelect = SelectPrimitive.HiddenSelect\n\ntype SelectTriggerProps<T extends ValidComponent = \"button\"> =\n  SelectPrimitive.SelectTriggerProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst SelectTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, SelectTriggerProps<T>>\n) => {\n  const [local, others] = splitProps(props as SelectTriggerProps, [\"class\", \"children\"])\n  return (\n    <SelectPrimitive.Trigger\n      class={cn(\n        \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        local.class\n      )}\n      {...others}\n    >\n      {local.children}\n      <SelectPrimitive.Icon\n        as=\"svg\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"size-4 opacity-50\"\n      >\n        <path d=\"M8 9l4 -4l4 4\" />\n        <path d=\"M16 15l-4 4l-4 -4\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\ntype SelectContentProps<T extends ValidComponent = \"div\"> =\n  SelectPrimitive.SelectContentProps<T> & { class?: string | undefined }\n\nconst SelectContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SelectContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as SelectContentProps, [\"class\"])\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        class={cn(\n          \"relative z-50 min-w-32 overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md animate-in fade-in-80\",\n          local.class\n        )}\n        {...others}\n      >\n        <SelectPrimitive.Listbox class=\"m-0 p-1\" />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\ntype SelectItemProps<T extends ValidComponent = \"li\"> = SelectPrimitive.SelectItemProps<T> & {\n  class?: string | undefined\n  children?: JSX.Element\n}\n\nconst SelectItem = <T extends ValidComponent = \"li\">(\n  props: PolymorphicProps<T, SelectItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as SelectItemProps, [\"class\", \"children\"])\n  return (\n    <SelectPrimitive.Item\n      class={cn(\n        \"relative mt-0 flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        local.class\n      )}\n      {...others}\n    >\n      <SelectPrimitive.ItemIndicator class=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          class=\"size-4\"\n        >\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n          <path d=\"M5 12l5 5l10 -10\" />\n        </svg>\n      </SelectPrimitive.ItemIndicator>\n      <SelectPrimitive.ItemLabel>{local.children}</SelectPrimitive.ItemLabel>\n    </SelectPrimitive.Item>\n  )\n}\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n  {\n    variants: {\n      variant: {\n        label: \"data-[invalid]:text-destructive\",\n        description: \"font-normal text-muted-foreground\",\n        error: \"text-xs text-destructive\"\n      }\n    },\n    defaultVariants: {\n      variant: \"label\"\n    }\n  }\n)\n\ntype SelectLabelProps<T extends ValidComponent = \"label\"> = SelectPrimitive.SelectLabelProps<T> & {\n  class?: string | undefined\n}\n\nconst SelectLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, SelectLabelProps<T>>\n) => {\n  const [local, others] = splitProps(props as SelectLabelProps, [\"class\"])\n  return <SelectPrimitive.Label class={cn(labelVariants(), local.class)} {...others} />\n}\n\ntype SelectDescriptionProps<T extends ValidComponent = \"div\"> =\n  SelectPrimitive.SelectDescriptionProps<T> & {\n    class?: string | undefined\n  }\n\nconst SelectDescription = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SelectDescriptionProps<T>>\n) => {\n  const [local, others] = splitProps(props as SelectDescriptionProps, [\"class\"])\n  return (\n    <SelectPrimitive.Description\n      class={cn(labelVariants({ variant: \"description\" }), local.class)}\n      {...others}\n    />\n  )\n}\n\ntype SelectErrorMessageProps<T extends ValidComponent = \"div\"> =\n  SelectPrimitive.SelectErrorMessageProps<T> & {\n    class?: string | undefined\n  }\n\nconst SelectErrorMessage = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SelectErrorMessageProps<T>>\n) => {\n  const [local, others] = splitProps(props as SelectErrorMessageProps, [\"class\"])\n  return (\n    <SelectPrimitive.ErrorMessage\n      class={cn(labelVariants({ variant: \"error\" }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport {\n  Select,\n  SelectValue,\n  SelectHiddenSelect,\n  SelectTrigger,\n  SelectContent,\n  SelectItem,\n  SelectLabel,\n  SelectDescription,\n  SelectErrorMessage\n}\n",
      "path": "src/registry/ui/select.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/separator.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as SeparatorPrimitive from \"@kobalte/core/separator\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype SeparatorRootProps<T extends ValidComponent = \"hr\"> =\n  SeparatorPrimitive.SeparatorRootProps<T> & { class?: string | undefined }\n\nconst Separator = <T extends ValidComponent = \"hr\">(\n  props: PolymorphicProps<T, SeparatorRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as SeparatorRootProps, [\"class\", \"orientation\"])\n  return (\n    <SeparatorPrimitive.Root\n      orientation={local.orientation ?? \"horizontal\"}\n      class={cn(\n        \"shrink-0 bg-border\",\n        local.orientation === \"vertical\" ? \"h-full w-px\" : \"h-px w-full\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport { Separator }\n",
      "path": "src/registry/ui/separator.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/sheet.tsx",
      "content": "import type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as SheetPrimitive from \"@kobalte/core/dialog\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\nconst SheetTrigger = SheetPrimitive.Trigger\nconst SheetClose = SheetPrimitive.CloseButton\n\nconst portalVariants = cva(\"fixed inset-0 z-50 flex\", {\n  variants: {\n    position: {\n      top: \"items-start\",\n      bottom: \"items-end\",\n      left: \"justify-start\",\n      right: \"justify-end\"\n    }\n  },\n  defaultVariants: { position: \"right\" }\n})\n\ntype PortalProps = SheetPrimitive.DialogPortalProps & VariantProps<typeof portalVariants>\n\nconst SheetPortal: Component<PortalProps> = (props) => {\n  const [local, others] = splitProps(props, [\"position\", \"children\"])\n  return (\n    <SheetPrimitive.Portal {...others}>\n      <div class={portalVariants({ position: local.position })}>{local.children}</div>\n    </SheetPrimitive.Portal>\n  )\n}\n\ntype DialogOverlayProps<T extends ValidComponent = \"div\"> = SheetPrimitive.DialogOverlayProps<T> & {\n  class?: string | undefined\n}\n\nconst SheetOverlay = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DialogOverlayProps<T>>\n) => {\n  const [local, others] = splitProps(props as DialogOverlayProps, [\"class\"])\n  return (\n    <SheetPrimitive.Overlay\n      class={cn(\n        \"fixed inset-0 z-50 bg-black/80 data-[expanded=]:animate-in data-[closed=]:animate-out data-[closed=]:fade-out-0 data-[expanded=]:fade-in-0\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[closed=]:duration-300 data-[expanded=]:duration-500 data-[expanded=]:animate-in data-[closed=]:animate-out\",\n  {\n    variants: {\n      position: {\n        top: \"inset-x-0 top-0 border-b data-[closed=]:slide-out-to-top data-[expanded=]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[closed=]:slide-out-to-bottom data-[expanded=]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[closed=]:slide-out-to-left data-[expanded=]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[closed=]:slide-out-to-right data-[expanded=]:slide-in-from-right sm:max-w-sm\"\n      }\n    },\n    defaultVariants: {\n      position: \"right\"\n    }\n  }\n)\n\ntype DialogContentProps<T extends ValidComponent = \"div\"> = SheetPrimitive.DialogContentProps<T> &\n  VariantProps<typeof sheetVariants> & { class?: string | undefined; children?: JSX.Element }\n\nconst SheetContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DialogContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as DialogContentProps, [\"position\", \"class\", \"children\"])\n  return (\n    <SheetPortal position={local.position}>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        class={cn(\n          sheetVariants({ position: local.position }),\n          local.class,\n          \"max-h-screen overflow-y-auto\"\n        )}\n        {...others}\n      >\n        {local.children}\n        <SheetPrimitive.CloseButton class=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-4\"\n          >\n            <path d=\"M18 6l-12 12\" />\n            <path d=\"M6 6l12 12\" />\n          </svg>\n          <span class=\"sr-only\">Close</span>\n        </SheetPrimitive.CloseButton>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nconst SheetHeader: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div class={cn(\"flex flex-col space-y-2 text-center sm:text-left\", local.class)} {...others} />\n  )\n}\n\nconst SheetFooter: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div\n      class={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype DialogTitleProps<T extends ValidComponent = \"h2\"> = SheetPrimitive.DialogTitleProps<T> & {\n  class?: string | undefined\n}\n\nconst SheetTitle = <T extends ValidComponent = \"h2\">(\n  props: PolymorphicProps<T, DialogTitleProps<T>>\n) => {\n  const [local, others] = splitProps(props as DialogTitleProps, [\"class\"])\n  return (\n    <SheetPrimitive.Title\n      class={cn(\"text-lg font-semibold text-foreground\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype DialogDescriptionProps<T extends ValidComponent = \"p\"> =\n  SheetPrimitive.DialogDescriptionProps<T> & { class?: string | undefined }\n\nconst SheetDescription = <T extends ValidComponent = \"p\">(\n  props: PolymorphicProps<T, DialogDescriptionProps<T>>\n) => {\n  const [local, others] = splitProps(props as DialogDescriptionProps, [\"class\"])\n  return (\n    <SheetPrimitive.Description\n      class={cn(\"text-sm text-muted-foreground\", local.class)}\n      {...others}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription\n}\n",
      "path": "src/registry/ui/sheet.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/sidebar.tsx",
      "content": "import type { Accessor, Component, ComponentProps, JSX, ValidComponent } from \"solid-js\"\nimport {\n  createContext,\n  createEffect,\n  createMemo,\n  createSignal,\n  Match,\n  mergeProps,\n  onCleanup,\n  Show,\n  splitProps,\n  Switch,\n  useContext\n} from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core\"\nimport { Polymorphic } from \"@kobalte/core\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport type { ButtonProps } from \"@/components/ui/button\"\nimport { Button } from \"@/components/ui/button\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { TextField, TextFieldInput } from \"@/components/ui/text-field\"\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\"\n\nconst MOBILE_BREAKPOINT = 768\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: Accessor<\"expanded\" | \"collapsed\">\n  open: Accessor<boolean>\n  setOpen: (open: boolean) => void\n  openMobile: Accessor<boolean>\n  setOpenMobile: (open: boolean) => void\n  isMobile: Accessor<boolean>\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a Sidebar.\")\n  }\n\n  return context\n}\n\nexport function useIsMobile(fallback = false) {\n  const [isMobile, setIsMobile] = createSignal(fallback)\n\n  createEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = (e: MediaQueryListEvent | MediaQueryList) => {\n      setIsMobile(e.matches)\n    }\n    mql.addEventListener(\"change\", onChange)\n    onChange(mql)\n    onCleanup(() => mql.removeEventListener(\"change\", onChange))\n  })\n\n  return isMobile\n}\n\ntype SidebarProviderProps = Omit<ComponentProps<\"div\">, \"style\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n  style?: JSX.CSSProperties\n}\n\nconst SidebarProvider: Component<SidebarProviderProps> = (rawProps) => {\n  const props = mergeProps({ defaultOpen: true }, rawProps)\n  const [local, others] = splitProps(props, [\n    \"defaultOpen\",\n    \"open\",\n    \"onOpenChange\",\n    \"class\",\n    \"style\",\n    \"children\"\n  ])\n\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = createSignal(false)\n\n  // This is the internal state of the sidebar.\n  // We use open and onOpenChange for control from outside the component.\n  const [_open, _setOpen] = createSignal(local.defaultOpen)\n  const open = () => local.open ?? _open()\n  const setOpen = (value: boolean | ((value: boolean) => boolean)) => {\n    if (local.onOpenChange) {\n      return local.onOpenChange?.(typeof value === \"function\" ? value(open()) : value)\n    }\n    _setOpen(value)\n\n    // This sets the cookie to keep the sidebar state.\n    document.cookie = `${SIDEBAR_COOKIE_NAME}=${open()}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n  }\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = () => {\n    return isMobile() ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  createEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    onCleanup(() => window.removeEventListener(\"keydown\", handleKeyDown))\n  })\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = () => (open() ? \"expanded\" : \"collapsed\")\n\n  const contextValue = {\n    state,\n    open,\n    setOpen,\n    isMobile,\n    openMobile,\n    setOpenMobile,\n    toggleSidebar\n  }\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <div\n        style={{\n          \"--sidebar-width\": SIDEBAR_WIDTH,\n          \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n          ...local.style\n        }}\n        class={cn(\n          \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n          local.class\n        )}\n        {...others}\n      >\n        {local.children}\n      </div>\n    </SidebarContext.Provider>\n  )\n}\n\ntype SidebarProps = ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}\n\nconst Sidebar: Component<SidebarProps> = (rawProps) => {\n  const props = mergeProps<SidebarProps[]>(\n    {\n      side: \"left\",\n      variant: \"sidebar\",\n      collapsible: \"offcanvas\"\n    },\n    rawProps\n  )\n  const [local, others] = splitProps(props, [\"side\", \"variant\", \"collapsible\", \"class\", \"children\"])\n\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  return (\n    <Switch>\n      <Match when={local.collapsible === \"none\"}>\n        <div\n          class={cn(\n            \"test w-(--sidebar-width) flex h-full flex-col bg-sidebar text-sidebar-foreground\",\n            local.class\n          )}\n          {...others}\n        >\n          {local.children}\n        </div>\n      </Match>\n      <Match when={isMobile()}>\n        <Sheet open={openMobile()} onOpenChange={setOpenMobile} {...others}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            class=\"w-(--sidebar-width) bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={{\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE\n            }}\n            position={local.side}\n          >\n            <div class=\"flex size-full flex-col\">{local.children}</div>\n          </SheetContent>\n        </Sheet>\n      </Match>\n      <Match when={!isMobile()}>\n        <div\n          class=\"group peer hidden md:block\"\n          data-state={state()}\n          data-collapsible={state() === \"collapsed\" ? local.collapsible : \"\"}\n          data-variant={local.variant}\n          data-side={local.side}\n        >\n          {/* This is what handles the sidebar gap on desktop */}\n          <div\n            class={cn(\n              \"w-(--sidebar-width) relative h-svh bg-transparent transition-[width] duration-200 ease-linear\",\n              \"group-data-[collapsible=offcanvas]:w-0\",\n              \"group-data-[side=right]:rotate-180\",\n              local.variant === \"floating\" || local.variant === \"inset\"\n                ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n                : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\"\n            )}\n          />\n          <div\n            class={cn(\n              \"w-(--sidebar-width) fixed inset-y-0 z-10 hidden h-svh transition-[left,right,width] duration-200 ease-linear md:flex\",\n              local.side === \"left\"\n                ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n                : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n              // Adjust the padding for floating and inset variants.\n              local.variant === \"floating\" || local.variant === \"inset\"\n                ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n                : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n              local.class\n            )}\n            {...others}\n          >\n            <div\n              data-sidebar=\"sidebar\"\n              class=\"flex size-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n            >\n              {local.children}\n            </div>\n          </div>\n        </div>\n      </Match>\n    </Switch>\n  )\n}\n\ntype SidebarTriggerProps<T extends ValidComponent = \"button\"> = ButtonProps<T> & {\n  onClick?: (event: MouseEvent) => void\n}\n\nconst SidebarTrigger = <T extends ValidComponent = \"button\">(props: SidebarTriggerProps<T>) => {\n  const [local, others] = splitProps(props as SidebarTriggerProps, [\"class\", \"onClick\"])\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      class={cn(\"size-7\", local.class)}\n      onClick={(event: MouseEvent) => {\n        local.onClick?.(event)\n        toggleSidebar()\n      }}\n      {...others}\n    >\n      <svg\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"size-4\"\n      >\n        <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" />\n        <path d=\"M9 3v18\" />\n      </svg>\n      <span class=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nconst SidebarRail: Component<ComponentProps<\"button\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      class={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst SidebarInset: Component<ComponentProps<\"main\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <main\n      class={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype SidebarInputProps<T extends ValidComponent = \"input\"> = ComponentProps<\n  typeof TextFieldInput<T>\n>\n\nconst SidebarInput = <T extends ValidComponent = \"input\">(props: SidebarInputProps<T>) => {\n  const [local, others] = splitProps(props as SidebarInputProps, [\"class\"])\n  return (\n    <TextField>\n      <TextFieldInput\n        data-sidebar=\"input\"\n        class={cn(\n          \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n          local.class\n        )}\n        {...others}\n      />\n    </TextField>\n  )\n}\n\nconst SidebarHeader: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div data-sidebar=\"header\" class={cn(\"flex flex-col gap-2 p-2\", local.class)} {...others} />\n  )\n}\n\nconst SidebarFooter: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div data-sidebar=\"footer\" class={cn(\"flex flex-col gap-2 p-2\", local.class)} {...others} />\n  )\n}\n\ntype SidebarSeparatorProps<T extends ValidComponent = \"hr\"> = ComponentProps<typeof Separator<T>>\n\nconst SidebarSeparator = <T extends ValidComponent = \"hr\">(props: SidebarSeparatorProps<T>) => {\n  const [local, others] = splitProps(props as SidebarSeparatorProps, [\"class\"])\n  return (\n    <Separator\n      data-sidebar=\"separator\"\n      class={cn(\"mx-2 w-auto bg-sidebar-border\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst SidebarContent: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div\n      data-sidebar=\"content\"\n      class={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst SidebarGroup: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div\n      data-sidebar=\"group\"\n      class={cn(\"relative flex w-full min-w-0 flex-col p-2\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype SidebarGroupLabelProps<T extends ValidComponent = \"div\"> = ComponentProps<T>\n\nconst SidebarGroupLabel = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SidebarGroupLabelProps<T>>\n) => {\n  const [local, others] = splitProps(props as SidebarGroupLabelProps, [\"class\"])\n\n  return (\n    <Polymorphic<SidebarGroupLabelProps>\n      as=\"div\"\n      data-sidebar=\"group-label\"\n      class={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype SidebarGroupActionProps<T extends ValidComponent = \"button\"> = ComponentProps<T>\n\nconst SidebarGroupAction = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, SidebarGroupActionProps<T>>\n) => {\n  const [local, others] = splitProps(props as SidebarGroupActionProps, [\"class\"])\n  return (\n    <Polymorphic<SidebarGroupActionProps>\n      as=\"button\"\n      data-sidebar=\"group-action\"\n      class={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst SidebarGroupContent: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div data-sidebar=\"group-content\" class={cn(\"w-full text-sm\", local.class)} {...others} />\n}\n\nconst SidebarMenu: Component<ComponentProps<\"ul\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <ul\n      data-sidebar=\"menu\"\n      class={cn(\"flex w-full min-w-0 flex-col gap-1\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst SidebarMenuItem: Component<ComponentProps<\"li\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <li data-sidebar=\"menu-item\" class={cn(\"group/menu-item relative\", local.class)} {...others} />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\"\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n)\n\ntype SidebarMenuButtonProps<T extends ValidComponent = \"button\"> = ComponentProps<T> &\n  VariantProps<typeof sidebarMenuButtonVariants> & {\n    isActive?: boolean\n    tooltip?: string\n  }\n\nconst SidebarMenuButton = <T extends ValidComponent = \"button\">(\n  rawProps: PolymorphicProps<T, SidebarMenuButtonProps<T>>\n) => {\n  const props = mergeProps({ isActive: false, variant: \"default\", size: \"default\" }, rawProps)\n  const [local, others] = splitProps(props as SidebarMenuButtonProps, [\n    \"isActive\",\n    \"tooltip\",\n    \"variant\",\n    \"size\",\n    \"class\"\n  ])\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Polymorphic<SidebarMenuButtonProps>\n      as=\"button\"\n      data-sidebar=\"menu-button\"\n      data-size={local.size}\n      data-active={local.isActive}\n      class={cn(\n        sidebarMenuButtonVariants({ variant: local.variant, size: local.size }),\n        local.class\n      )}\n      {...others}\n    />\n  )\n\n  return (\n    <Show when={local.tooltip} fallback={button}>\n      <Tooltip placement=\"right\">\n        <TooltipTrigger class=\"w-full\">{button}</TooltipTrigger>\n        <TooltipContent hidden={state() !== \"collapsed\" || isMobile()}>\n          {local.tooltip}\n        </TooltipContent>\n      </Tooltip>\n    </Show>\n  )\n}\n\ntype SidebarMenuActionProps<T extends ValidComponent = \"button\"> = ComponentProps<T> & {\n  showOnHover?: boolean\n}\n\nconst SidebarMenuAction = <T extends ValidComponent = \"button\">(\n  rawProps: PolymorphicProps<T, SidebarMenuActionProps<T>>\n) => {\n  const props = mergeProps({ showOnHover: false }, rawProps)\n  const [local, others] = splitProps(props as SidebarMenuActionProps, [\"class\", \"showOnHover\"])\n\n  return (\n    <Polymorphic<SidebarMenuActionProps>\n      as=\"button\"\n      data-sidebar=\"menu-action\"\n      class={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        local.showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst SidebarMenuBadge: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div\n      data-sidebar=\"menu-badge\"\n      class={cn(\n        \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype SidebarMenuSkeletonProps = ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}\n\nconst SidebarMenuSkeleton: Component<SidebarMenuSkeletonProps> = (rawProps) => {\n  const props = mergeProps({ showIcon: false }, rawProps)\n  const [local, others] = splitProps(props, [\"class\", \"showIcon\"])\n\n  // Random width between 50 to 90%.\n  const width = createMemo(() => `${Math.floor(Math.random() * 40) + 50}%`)\n\n  return (\n    <div\n      data-sidebar=\"menu-skeleton\"\n      class={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", local.class)}\n      {...others}\n    >\n      {local.showIcon && <Skeleton class=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\n      <Skeleton\n        class=\"max-w-(--skeleton-width) h-4 flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={{\n          \"--skeleton-width\": width()\n        }}\n      />\n    </div>\n  )\n}\n\nconst SidebarMenuSub: Component<ComponentProps<\"ul\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <ul\n      data-sidebar=\"menu-sub\"\n      class={cn(\n        \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst SidebarMenuSubItem: Component<ComponentProps<\"li\">> = (props) => <li {...props} />\n\ntype SidebarMenuSubButtonProps<T extends ValidComponent = \"a\"> = ComponentProps<T> & {\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}\n\nconst SidebarMenuSubButton = <T extends ValidComponent = \"a\">(\n  rawProps: PolymorphicProps<T, SidebarMenuSubButtonProps<T>>\n) => {\n  const props = mergeProps({ size: \"md\" }, rawProps)\n  const [local, others] = splitProps(props as SidebarMenuSubButtonProps, [\n    \"size\",\n    \"isActive\",\n    \"class\"\n  ])\n\n  return (\n    <Polymorphic<SidebarMenuSubButtonProps>\n      as=\"a\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={local.size}\n      data-active={local.isActive}\n      class={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        local.size === \"sm\" && \"text-xs\",\n        local.size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar\n}\n",
      "path": "src/registry/ui/sidebar.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/skeleton.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as SkeletonPrimitive from \"@kobalte/core/skeleton\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype SkeletonRootProps<T extends ValidComponent = \"div\"> =\n  SkeletonPrimitive.SkeletonRootProps<T> & { class?: string | undefined }\n\nconst Skeleton = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SkeletonRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as SkeletonRootProps, [\"class\"])\n  return (\n    <SkeletonPrimitive.Root\n      class={cn(\"bg-primary/10 data-[animate='true']:animate-pulse\", local.class)}\n      {...others}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "path": "src/registry/ui/skeleton.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/slider.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as SliderPrimitive from \"@kobalte/core/slider\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\ntype SliderRootProps<T extends ValidComponent = \"div\"> = SliderPrimitive.SliderRootProps<T> & {\n  class?: string | undefined\n}\n\nconst Slider = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SliderRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as SliderRootProps, [\"class\"])\n  return (\n    <SliderPrimitive.Root\n      class={cn(\"relative flex w-full touch-none select-none flex-col items-center\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype SliderTrackProps<T extends ValidComponent = \"div\"> = SliderPrimitive.SliderTrackProps<T> & {\n  class?: string | undefined\n}\n\nconst SliderTrack = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SliderTrackProps<T>>\n) => {\n  const [local, others] = splitProps(props as SliderTrackProps, [\"class\"])\n  return (\n    <SliderPrimitive.Track\n      class={cn(\"relative h-2 w-full grow rounded-full bg-secondary\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype SliderFillProps<T extends ValidComponent = \"div\"> = SliderPrimitive.SliderFillProps<T> & {\n  class?: string | undefined\n}\n\nconst SliderFill = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SliderFillProps<T>>\n) => {\n  const [local, others] = splitProps(props as SliderFillProps, [\"class\"])\n  return (\n    <SliderPrimitive.Fill\n      class={cn(\"absolute h-full rounded-full bg-primary\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype SliderThumbProps<T extends ValidComponent = \"span\"> = SliderPrimitive.SliderThumbProps<T> & {\n  class?: string | undefined\n  children?: JSX.Element\n}\n\nconst SliderThumb = <T extends ValidComponent = \"span\">(\n  props: PolymorphicProps<T, SliderThumbProps<T>>\n) => {\n  const [local, others] = splitProps(props as SliderThumbProps, [\"class\", \"children\"])\n  return (\n    <SliderPrimitive.Thumb\n      class={cn(\n        \"top-[-6px] block size-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n        local.class\n      )}\n      {...others}\n    >\n      <SliderPrimitive.Input />\n    </SliderPrimitive.Thumb>\n  )\n}\n\nconst SliderLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, SliderPrimitive.SliderLabelProps<T>>\n) => {\n  return <SliderPrimitive.Label as={Label} {...props} />\n}\n\nconst SliderValueLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, SliderPrimitive.SliderValueLabelProps<T>>\n) => {\n  return <SliderPrimitive.ValueLabel as={Label} {...props} />\n}\n\nexport { Slider, SliderTrack, SliderFill, SliderThumb, SliderLabel, SliderValueLabel }\n",
      "path": "src/registry/ui/slider.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/sonner.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\n\nimport { Toaster as Sonner } from \"solid-sonner\"\n\ntype ToasterProps = ComponentProps<typeof Sonner>\n\nconst Toaster: Component<ToasterProps> = (props) => {\n  return (\n    <Sonner\n      class=\"toaster group\"\n      toastOptions={{\n        classes: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton: \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton: \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\"\n        }\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n",
      "path": "src/registry/ui/sonner.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/switch.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core\"\nimport * as SwitchPrimitive from \"@kobalte/core/switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = SwitchPrimitive.Root\nconst SwitchDescription = SwitchPrimitive.Description\nconst SwitchErrorMessage = SwitchPrimitive.ErrorMessage\n\ntype SwitchControlProps = SwitchPrimitive.SwitchControlProps & {\n  class?: string | undefined\n  children?: JSX.Element\n}\n\nconst SwitchControl = <T extends ValidComponent = \"input\">(\n  props: PolymorphicProps<T, SwitchControlProps>\n) => {\n  const [local, others] = splitProps(props as SwitchControlProps, [\"class\", \"children\"])\n  return (\n    <>\n      <SwitchPrimitive.Input\n        class={cn(\n          \"[&:focus-visible+div]:outline-none [&:focus-visible+div]:ring-2 [&:focus-visible+div]:ring-ring [&:focus-visible+div]:ring-offset-2 [&:focus-visible+div]:ring-offset-background\",\n          local.class\n        )}\n      />\n      <SwitchPrimitive.Control\n        class={cn(\n          \"inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent bg-input transition-[color,background-color,box-shadow] data-[disabled]:cursor-not-allowed data-[checked]:bg-primary data-[disabled]:opacity-50\",\n          local.class\n        )}\n        {...others}\n      >\n        {local.children}\n      </SwitchPrimitive.Control>\n    </>\n  )\n}\n\ntype SwitchThumbProps = SwitchPrimitive.SwitchThumbProps & { class?: string | undefined }\n\nconst SwitchThumb = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SwitchThumbProps>\n) => {\n  const [local, others] = splitProps(props as SwitchThumbProps, [\"class\"])\n  return (\n    <SwitchPrimitive.Thumb\n      class={cn(\n        \"pointer-events-none block size-5 translate-x-0 rounded-full bg-background shadow-lg ring-0 transition-transform data-[checked]:translate-x-5\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype SwitchLabelProps = SwitchPrimitive.SwitchLabelProps & { class?: string | undefined }\n\nconst SwitchLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, SwitchLabelProps>\n) => {\n  const [local, others] = splitProps(props as SwitchLabelProps, [\"class\"])\n  return (\n    <SwitchPrimitive.Label\n      class={cn(\n        \"text-sm font-medium leading-none data-[disabled]:cursor-not-allowed data-[disabled]:opacity-70\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport { Switch, SwitchControl, SwitchThumb, SwitchLabel, SwitchDescription, SwitchErrorMessage }\n",
      "path": "src/registry/ui/switch.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/table.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table: Component<ComponentProps<\"table\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div class=\"relative w-full overflow-auto\">\n      <table class={cn(\"w-full caption-bottom text-sm\", local.class)} {...others} />\n    </div>\n  )\n}\n\nconst TableHeader: Component<ComponentProps<\"thead\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <thead class={cn(\"[&_tr]:border-b\", local.class)} {...others} />\n}\n\nconst TableBody: Component<ComponentProps<\"tbody\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <tbody class={cn(\"[&_tr:last-child]:border-0\", local.class)} {...others} />\n}\n\nconst TableFooter: Component<ComponentProps<\"tfoot\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <tfoot class={cn(\"bg-primary font-medium text-primary-foreground\", local.class)} {...others} />\n  )\n}\n\nconst TableRow: Component<ComponentProps<\"tr\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <tr\n      class={cn(\n        \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst TableHead: Component<ComponentProps<\"th\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <th\n      class={cn(\n        \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst TableCell: Component<ComponentProps<\"td\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <td class={cn(\"p-2 align-middle [&:has([role=checkbox])]:pr-0\", local.class)} {...others} />\n  )\n}\n\nconst TableCaption: Component<ComponentProps<\"caption\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <caption class={cn(\"mt-4 text-sm text-muted-foreground\", local.class)} {...others} />\n}\n\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption }\n",
      "path": "src/registry/ui/table.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/tabs.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as TabsPrimitive from \"@kobalte/core/tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\ntype TabsListProps<T extends ValidComponent = \"div\"> = TabsPrimitive.TabsListProps<T> & {\n  class?: string | undefined\n}\n\nconst TabsList = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TabsListProps<T>>\n) => {\n  const [local, others] = splitProps(props as TabsListProps, [\"class\"])\n  return (\n    <TabsPrimitive.List\n      class={cn(\n        \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype TabsTriggerProps<T extends ValidComponent = \"button\"> = TabsPrimitive.TabsTriggerProps<T> & {\n  class?: string | undefined\n}\n\nconst TabsTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, TabsTriggerProps<T>>\n) => {\n  const [local, others] = splitProps(props as TabsTriggerProps, [\"class\"])\n  return (\n    <TabsPrimitive.Trigger\n      class={cn(\n        \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[selected]:bg-background data-[selected]:text-foreground data-[selected]:shadow-sm\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype TabsContentProps<T extends ValidComponent = \"div\"> = TabsPrimitive.TabsContentProps<T> & {\n  class?: string | undefined\n}\n\nconst TabsContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TabsContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as TabsContentProps, [\"class\"])\n  return (\n    <TabsPrimitive.Content\n      class={cn(\n        \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype TabsIndicatorProps<T extends ValidComponent = \"div\"> = TabsPrimitive.TabsIndicatorProps<T> & {\n  class?: string | undefined\n}\n\nconst TabsIndicator = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TabsIndicatorProps<T>>\n) => {\n  const [local, others] = splitProps(props as TabsIndicatorProps, [\"class\"])\n  return (\n    <TabsPrimitive.Indicator\n      class={cn(\n        \"duration-250ms absolute transition-all data-[orientation=horizontal]:-bottom-px data-[orientation=vertical]:-right-px data-[orientation=horizontal]:h-[2px] data-[orientation=vertical]:w-[2px]\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent, TabsIndicator }\n",
      "path": "src/registry/ui/tabs.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/text-field.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { mergeProps, splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core\"\nimport * as TextFieldPrimitive from \"@kobalte/core/text-field\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype TextFieldRootProps<T extends ValidComponent = \"div\"> =\n  TextFieldPrimitive.TextFieldRootProps<T> & {\n    class?: string | undefined\n  }\n\nconst TextField = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TextFieldRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldRootProps, [\"class\"])\n  return <TextFieldPrimitive.Root class={cn(\"flex flex-col gap-1\", local.class)} {...others} />\n}\n\ntype TextFieldInputProps<T extends ValidComponent = \"input\"> =\n  TextFieldPrimitive.TextFieldInputProps<T> & {\n    class?: string | undefined\n    type?:\n      | \"button\"\n      | \"checkbox\"\n      | \"color\"\n      | \"date\"\n      | \"datetime-local\"\n      | \"email\"\n      | \"file\"\n      | \"hidden\"\n      | \"image\"\n      | \"month\"\n      | \"number\"\n      | \"password\"\n      | \"radio\"\n      | \"range\"\n      | \"reset\"\n      | \"search\"\n      | \"submit\"\n      | \"tel\"\n      | \"text\"\n      | \"time\"\n      | \"url\"\n      | \"week\"\n  }\n\nconst TextFieldInput = <T extends ValidComponent = \"input\">(\n  rawProps: PolymorphicProps<T, TextFieldInputProps<T>>\n) => {\n  const props = mergeProps<TextFieldInputProps<T>[]>({ type: \"text\" }, rawProps)\n  const [local, others] = splitProps(props as TextFieldInputProps, [\"type\", \"class\"])\n  return (\n    <TextFieldPrimitive.Input\n      type={local.type}\n      class={cn(\n        \"flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[invalid]:border-error-foreground data-[invalid]:text-error-foreground\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype TextFieldTextAreaProps<T extends ValidComponent = \"textarea\"> =\n  TextFieldPrimitive.TextFieldTextAreaProps<T> & { class?: string | undefined }\n\nconst TextFieldTextArea = <T extends ValidComponent = \"textarea\">(\n  props: PolymorphicProps<T, TextFieldTextAreaProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldTextAreaProps, [\"class\"])\n  return (\n    <TextFieldPrimitive.TextArea\n      class={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n  {\n    variants: {\n      variant: {\n        label: \"data-[invalid]:text-destructive\",\n        description: \"font-normal text-muted-foreground\",\n        error: \"text-xs text-destructive\"\n      }\n    },\n    defaultVariants: {\n      variant: \"label\"\n    }\n  }\n)\n\ntype TextFieldLabelProps<T extends ValidComponent = \"label\"> =\n  TextFieldPrimitive.TextFieldLabelProps<T> & { class?: string | undefined }\n\nconst TextFieldLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, TextFieldLabelProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldLabelProps, [\"class\"])\n  return <TextFieldPrimitive.Label class={cn(labelVariants(), local.class)} {...others} />\n}\n\ntype TextFieldDescriptionProps<T extends ValidComponent = \"div\"> =\n  TextFieldPrimitive.TextFieldDescriptionProps<T> & {\n    class?: string | undefined\n  }\n\nconst TextFieldDescription = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TextFieldDescriptionProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldDescriptionProps, [\"class\"])\n  return (\n    <TextFieldPrimitive.Description\n      class={cn(labelVariants({ variant: \"description\" }), local.class)}\n      {...others}\n    />\n  )\n}\n\ntype TextFieldErrorMessageProps<T extends ValidComponent = \"div\"> =\n  TextFieldPrimitive.TextFieldErrorMessageProps<T> & {\n    class?: string | undefined\n  }\n\nconst TextFieldErrorMessage = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TextFieldErrorMessageProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldErrorMessageProps, [\"class\"])\n  return (\n    <TextFieldPrimitive.ErrorMessage\n      class={cn(labelVariants({ variant: \"error\" }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport {\n  TextField,\n  TextFieldInput,\n  TextFieldTextArea,\n  TextFieldLabel,\n  TextFieldDescription,\n  TextFieldErrorMessage\n}\n",
      "path": "src/registry/ui/text-field.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/timeline.tsx",
      "content": "import type { ComponentProps, ParentComponent } from \"solid-js\"\nimport { For, mergeProps, Show, splitProps, type Component, type JSXElement } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport type TimelinePropsItem = Omit<\n  TimelineItemProps,\n  \"isActive\" | \"isActiveBullet\" | \"bulletSize\" | \"lineSize\"\n> & {\n  bulletSize?: number\n}\n\nexport type TimelineProps = {\n  items: TimelinePropsItem[]\n  activeItem: number\n  bulletSize?: number\n  lineSize?: number\n}\n\n/*\n  No bullet or line is active when activeItem is -1\n  First bullet is active only if activeItem is 0 or more\n  First line is active only if activeItem is 1 or more\n*/\n\nconst Timeline: Component<TimelineProps> = (rawProps) => {\n  const props = mergeProps({ bulletSize: 16, lineSize: 2 }, rawProps)\n\n  return (\n    <ul\n      style={{\n        \"padding-left\": `${props.bulletSize / 2}px`\n      }}\n    >\n      <For each={props.items}>\n        {(item, index) => (\n          <TimelineItem\n            title={item.title}\n            description={item.description}\n            bullet={item.bullet}\n            isLast={index() === props.items.length - 1}\n            isActive={props.activeItem === -1 ? false : props.activeItem >= index() + 1}\n            isActiveBullet={props.activeItem === -1 ? false : props.activeItem >= index()}\n            bulletSize={props.bulletSize}\n            lineSize={props.lineSize}\n          />\n        )}\n      </For>\n    </ul>\n  )\n}\n\nexport type TimelineItemProps = {\n  title: JSXElement\n  description?: JSXElement\n  bullet?: JSXElement\n  isLast?: boolean\n  isActive: boolean\n  isActiveBullet: boolean\n  class?: string\n  bulletSize: number\n  lineSize: number\n}\n\nconst TimelineItem: Component<TimelineItemProps> = (props) => {\n  const [local, others] = splitProps(props, [\n    \"class\",\n    \"bullet\",\n    \"description\",\n    \"title\",\n    \"isLast\",\n    \"isActive\",\n    \"isActiveBullet\",\n    \"bulletSize\",\n    \"lineSize\"\n  ])\n  return (\n    <li\n      class={cn(\n        \"relative border-l pb-8 pl-8\",\n        local.isLast && \"border-l-transparent pb-0\",\n        local.isActive && !local.isLast && \"border-l-primary\",\n        local.class\n      )}\n      style={{\n        \"border-left-width\": `${local.lineSize}px`\n      }}\n      {...others}\n    >\n      <TimelineItemBullet\n        lineSize={local.lineSize}\n        bulletSize={local.bulletSize}\n        isActive={local.isActiveBullet}\n      >\n        {local.bullet}\n      </TimelineItemBullet>\n      <TimelineItemTitle>{local.title}</TimelineItemTitle>\n      <Show when={local.description}>\n        <TimelineItemDescription>{local.description}</TimelineItemDescription>\n      </Show>\n    </li>\n  )\n}\n\nexport type TimelineItemBulletProps = {\n  children?: JSXElement\n  isActive?: boolean\n  bulletSize: number\n  lineSize: number\n}\n\nconst TimelineItemBullet: Component<TimelineItemBulletProps> = (props) => {\n  return (\n    <div\n      class={cn(\n        `absolute top-0 flex items-center justify-center rounded-full border bg-background`,\n        props.isActive && \"border-primary\"\n      )}\n      style={{\n        width: `${props.bulletSize}px`,\n        height: `${props.bulletSize}px`,\n        left: `${-props.bulletSize / 2 - props.lineSize / 2}px`,\n        \"border-width\": `${props.lineSize}px`\n      }}\n      aria-hidden=\"true\"\n    >\n      {props.children}\n    </div>\n  )\n}\n\nconst TimelineItemTitle: ParentComponent = (props) => {\n  return <div class=\"mb-1 text-base font-semibold leading-none\">{props.children}</div>\n}\n\nconst TimelineItemDescription: Component<ComponentProps<\"p\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\", \"children\"])\n  return (\n    <p class={cn(\"text-sm text-muted-foreground\", local.class)} {...others}>\n      {local.children}\n    </p>\n  )\n}\n\nexport { Timeline }\n",
      "path": "src/registry/ui/timeline.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/toast.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { Match, splitProps, Switch } from \"solid-js\"\nimport { Portal } from \"solid-js/web\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as ToastPrimitive from \"@kobalte/core/toast\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--kb-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--kb-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[opened]:animate-in data-[closed]:animate-out data-[swipe=end]:animate-out data-[closed]:fade-out-80 data-[closed]:slide-out-to-right-full data-[opened]:slide-in-from-top-full data-[opened]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n        success: \"success border-success-foreground bg-success text-success-foreground\",\n        warning: \"warning border-warning-foreground bg-warning text-warning-foreground\",\n        error: \"error border-error-foreground bg-error text-error-foreground\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\"\n    }\n  }\n)\ntype ToastVariant = NonNullable<VariantProps<typeof toastVariants>[\"variant\"]>\n\ntype ToastListProps<T extends ValidComponent = \"ol\"> = ToastPrimitive.ToastListProps<T> & {\n  class?: string | undefined\n}\n\nconst Toaster = <T extends ValidComponent = \"ol\">(\n  props: PolymorphicProps<T, ToastListProps<T>>\n) => {\n  const [local, others] = splitProps(props as ToastListProps, [\"class\"])\n  return (\n    <Portal>\n      <ToastPrimitive.Region>\n        <ToastPrimitive.List\n          class={cn(\n            \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse gap-2 p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n            local.class\n          )}\n          {...others}\n        />\n      </ToastPrimitive.Region>\n    </Portal>\n  )\n}\n\ntype ToastRootProps<T extends ValidComponent = \"li\"> = ToastPrimitive.ToastRootProps<T> &\n  VariantProps<typeof toastVariants> & { class?: string | undefined }\n\nconst Toast = <T extends ValidComponent = \"li\">(props: PolymorphicProps<T, ToastRootProps<T>>) => {\n  const [local, others] = splitProps(props as ToastRootProps, [\"class\", \"variant\"])\n  return (\n    <ToastPrimitive.Root\n      class={cn(toastVariants({ variant: local.variant }), local.class)}\n      {...others}\n    />\n  )\n}\n\ntype ToastCloseButtonProps<T extends ValidComponent = \"button\"> =\n  ToastPrimitive.ToastCloseButtonProps<T> & { class?: string | undefined }\n\nconst ToastClose = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ToastCloseButtonProps<T>>\n) => {\n  const [local, others] = splitProps(props as ToastCloseButtonProps, [\"class\"])\n  return (\n    <ToastPrimitive.CloseButton\n      class={cn(\n        \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-destructive-foreground group-[.error]:text-error-foreground group-[.success]:text-success-foreground group-[.warning]:text-warning-foreground\",\n        local.class\n      )}\n      {...others}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"size-4\"\n      >\n        <path d=\"M18 6l-12 12\" />\n        <path d=\"M6 6l12 12\" />\n      </svg>\n    </ToastPrimitive.CloseButton>\n  )\n}\n\ntype ToastTitleProps<T extends ValidComponent = \"div\"> = ToastPrimitive.ToastTitleProps<T> & {\n  class?: string | undefined\n}\n\nconst ToastTitle = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ToastTitleProps<T>>\n) => {\n  const [local, others] = splitProps(props as ToastTitleProps, [\"class\"])\n  return <ToastPrimitive.Title class={cn(\"text-sm font-semibold\", local.class)} {...others} />\n}\n\ntype ToastDescriptionProps<T extends ValidComponent = \"div\"> =\n  ToastPrimitive.ToastDescriptionProps<T> & { class?: string | undefined }\n\nconst ToastDescription = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ToastDescriptionProps<T>>\n) => {\n  const [local, others] = splitProps(props as ToastDescriptionProps, [\"class\"])\n  return <ToastPrimitive.Description class={cn(\"text-sm opacity-90\", local.class)} {...others} />\n}\n\nfunction showToast(props: {\n  title?: JSX.Element\n  description?: JSX.Element\n  variant?: ToastVariant\n  duration?: number\n}) {\n  ToastPrimitive.toaster.show((data) => (\n    <Toast toastId={data.toastId} variant={props.variant} duration={props.duration}>\n      <div class=\"grid gap-1\">\n        {props.title && <ToastTitle>{props.title}</ToastTitle>}\n        {props.description && <ToastDescription>{props.description}</ToastDescription>}\n      </div>\n      <ToastClose />\n    </Toast>\n  ))\n}\n\nfunction showToastPromise<T, U>(\n  promise: Promise<T> | (() => Promise<T>),\n  options: {\n    loading?: JSX.Element\n    success?: (data: T) => JSX.Element\n    error?: (error: U) => JSX.Element\n    duration?: number\n  }\n) {\n  const variant: { [key in ToastPrimitive.ToastPromiseState]: ToastVariant } = {\n    pending: \"default\",\n    fulfilled: \"success\",\n    rejected: \"error\"\n  }\n  return ToastPrimitive.toaster.promise<T, U>(promise, (props) => (\n    <Toast toastId={props.toastId} variant={variant[props.state]} duration={options.duration}>\n      <Switch>\n        <Match when={props.state === \"pending\"}>{options.loading}</Match>\n        <Match when={props.state === \"fulfilled\"}>{options.success?.(props.data!)}</Match>\n        <Match when={props.state === \"rejected\"}>{options.error?.(props.error!)}</Match>\n      </Switch>\n    </Toast>\n  ))\n}\n\nexport { Toaster, Toast, ToastClose, ToastTitle, ToastDescription, showToast, showToastPromise }\n",
      "path": "src/registry/ui/toast.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/toggle-group.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { createContext, splitProps, useContext } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as ToggleGroupPrimitive from \"@kobalte/core/toggle-group\"\nimport type { VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = createContext<VariantProps<typeof toggleVariants>>({\n  size: \"default\",\n  variant: \"default\"\n})\n\ntype ToggleGroupRootProps<T extends ValidComponent = \"div\"> =\n  ToggleGroupPrimitive.ToggleGroupRootProps<T> &\n    VariantProps<typeof toggleVariants> & { class?: string | undefined; children?: JSX.Element }\n\nconst ToggleGroup = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ToggleGroupRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as ToggleGroupRootProps, [\n    \"class\",\n    \"children\",\n    \"size\",\n    \"variant\"\n  ])\n\n  return (\n    <ToggleGroupPrimitive.Root\n      class={cn(\"flex items-center justify-center gap-1\", local.class)}\n      {...others}\n    >\n      <ToggleGroupContext.Provider\n        value={{\n          get size() {\n            return local.size\n          },\n          get variant() {\n            return local.variant\n          }\n        }}\n      >\n        {local.children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  )\n}\n\ntype ToggleGroupItemProps<T extends ValidComponent = \"button\"> =\n  ToggleGroupPrimitive.ToggleGroupItemProps<T> &\n    VariantProps<typeof toggleVariants> & { class?: string | undefined }\n\nconst ToggleGroupItem = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ToggleGroupItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as ToggleGroupItemProps, [\"class\", \"size\", \"variant\"])\n  const context = useContext(ToggleGroupContext)\n  return (\n    <ToggleGroupPrimitive.Item\n      class={cn(\n        toggleVariants({\n          size: context.size || local.size,\n          variant: context.variant || local.variant\n        }),\n        \"hover:bg-muted hover:text-muted-foreground data-[pressed]:bg-accent data-[pressed]:text-accent-foreground\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport { ToggleGroup, ToggleGroupItem }\n",
      "path": "src/registry/ui/toggle-group.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/toggle.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as ToggleButtonPrimitive from \"@kobalte/core/toggle-button\"\nimport { cva } from \"class-variance-authority\"\nimport type { VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline: \"border border-input bg-transparent shadow-sm\"\n      },\n      size: {\n        default: \"h-9 px-3\",\n        sm: \"h-8 px-2\",\n        lg: \"h-10 px-3\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n)\n\ntype ToggleButtonRootProps<T extends ValidComponent = \"button\"> =\n  ToggleButtonPrimitive.ToggleButtonRootProps<T> &\n    VariantProps<typeof toggleVariants> & { class?: string | undefined }\n\nconst Toggle = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ToggleButtonRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as ToggleButtonRootProps, [\"class\", \"variant\", \"size\"])\n  return (\n    <ToggleButtonPrimitive.Root\n      class={cn(toggleVariants({ variant: local.variant, size: local.size }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport type { ToggleButtonRootProps as ToggleProps }\nexport { toggleVariants, Toggle }\n",
      "path": "src/registry/ui/toggle.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/tooltip.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { splitProps, type Component } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as TooltipPrimitive from \"@kobalte/core/tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst Tooltip: Component<TooltipPrimitive.TooltipRootProps> = (props) => {\n  return <TooltipPrimitive.Root gutter={4} {...props} />\n}\n\ntype TooltipContentProps<T extends ValidComponent = \"div\"> =\n  TooltipPrimitive.TooltipContentProps<T> & { class?: string | undefined }\n\nconst TooltipContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TooltipContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as TooltipContentProps, [\"class\"])\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        class={cn(\n          \"z-50 origin-[var(--kb-popover-content-transform-origin)] overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95\",\n          local.class\n        )}\n        {...others}\n      />\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent }\n",
      "path": "src/registry/ui/tooltip.tsx"
    }
  ]
}
