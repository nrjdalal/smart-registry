{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-destructive",
  "type": "registry:component",
  "title": "Button Destructive",
  "description": "custom shadcn/ui button.",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "https://uitopia.vercel.app/r/button.json",
    "https://uitopia.vercel.app/r/stack.json"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/button-destructive.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Stack } from \"@/components/ui/stack\";\n\nexport default function ButtonDestructive() {\n  return (\n    <Stack\n      align=\"start\"\n      direction={{ md: \"row\", sm: \"column\" }}\n      gap={4}\n      justify=\"space-between\"\n    >\n      <Button\n        className=\"border border-zinc-950/25 bg-gradient-to-t from-destructive to-destructive/85 text-white shadow-md shadow-zinc-950/20 ring-1 ring-white/20 ring-inset transition-[filter] duration-200 hover:brightness-110 active:brightness-90 dark:border-white/15 dark:ring-transparent\"\n        variant=\"destructive\"\n      >\n        Destructive\n      </Button>\n\n      <Button\n        className=\"inset-shadow-2xs inset-shadow-white/25 border border-zinc-950/35 bg-linear-to-b from-destructive/85 to-destructive text-white shadow-md shadow-zinc-950/20 ring-0 transition-[filter] duration-200 hover:brightness-110 active:brightness-95 dark:border-0 dark:border-zinc-950/50 dark:bg-linear-to-t dark:from-destructive/75\"\n        variant=\"destructive\"\n      >\n        <span className=\"relative [text-shadow:0_1px_0_var(--color-red-800)]\">\n          Destructive\n        </span>\n      </Button>\n\n      <Button\n        className=\"border border-zinc-950/40 border-b-2 bg-linear-to-t from-destructive to-destructive/85 text-white shadow-md shadow-zinc-950/20 ring-1 ring-white/25 ring-inset transition-[filter] duration-200 hover:brightness-110 active:brightness-90 dark:inset-shadow-2xs dark:inset-shadow-white/10 dark:border-zinc-950/50 dark:border-x-0 dark:border-t-0 dark:ring-white/5\"\n        variant=\"destructive\"\n      >\n        <span className=\"[text-shadow:0_1px_0_var(--color-red-800)]\">\n          Destructive\n        </span>\n      </Button>\n    </Stack>\n  );\n}\n",
      "path": "registry/components/button-destructive.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    defaultVariants: {\n      size: \"default\",\n      variant: \"default\",\n    },\n    variants: {\n      size: {\n        default: \"h-9 px-4 py-2\",\n        icon: \"h-9 w-9\",\n        lg: \"h-10 rounded-md px-8\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n      },\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90 ring-1 ring-inset ring-white/20 ring-offset-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n      },\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ className, size, variant }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "registry/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/stack.tsx",
      "content": "import type { ComponentProps } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ntype Direction = \"row\" | \"column\";\ntype ResponsiveDirection = {\n  sm?: Direction;\n  md?: Direction;\n};\n\ntype FlexAlignItems = \"stretch\" | \"start\" | \"end\" | \"center\";\ntype FlexJustifyContent =\n  | \"stretch\"\n  | \"start\"\n  | \"end\"\n  | \"space-between\"\n  | \"space-around\"\n  | \"space-evenly\"\n  | \"center\";\n\ninterface StackProps extends ComponentProps<\"div\"> {\n  children: React.ReactNode;\n  direction?: ResponsiveDirection;\n  gap?: number;\n  padding?: number;\n  grow?: boolean;\n  shrink?: boolean;\n  wrap?: boolean;\n  align?: FlexAlignItems;\n  justify?: FlexJustifyContent;\n  className?: string;\n}\n\nexport function Stack({\n  direction = { md: \"row\", sm: \"column\" },\n  align = \"start\",\n  justify = \"start\",\n  wrap = false,\n  shrink = false,\n  grow = false,\n  padding = 0,\n  gap = 0,\n  children,\n  className,\n  ...etc\n}: StackProps) {\n  const directionClasses = [\n    direction.sm === \"row\" ? \"flex-row\" : \"flex-col\",\n    direction.md === \"row\" ? \"md:flex-row\" : \"md:flex-col\",\n  ];\n\n  const alignClasses = {\n    center: \"items-center\",\n    end: \"items-end\",\n    start: \"items-start\",\n    stretch: \"items-stretch\",\n  }[align];\n\n  const justifyClasses = {\n    center: \"justify-center\",\n    end: \"justify-end\",\n    \"space-around\": \"justify-around\",\n    \"space-between\": \"justify-between\",\n    \"space-evenly\": \"justify-evenly\",\n    start: \"justify-start\",\n    stretch: \"justify-stretch\",\n  }[justify];\n\n  return (\n    <div\n      className={cn(\n        \"flex\",\n        wrap && \"flex-wrap\",\n        grow && \"flex-grow\",\n        shrink && \"flex-shrink\",\n        directionClasses,\n        alignClasses,\n        justifyClasses,\n        gap && `gap-${gap}`,\n        padding && `p-${padding}`,\n        className,\n      )}\n      {...etc}\n    >\n      {children}\n    </div>\n  );\n}\n",
      "path": "registry/ui/stack.tsx"
    }
  ]
}
