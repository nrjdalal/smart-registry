{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "DropdownMenu/dropdownmenu.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/components/Button/Button.tsx",
      "content": "// Tremor Button [v0.2.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx\"\nimport { focusRing } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"disabled:dark:bg-blue-800 disabled:dark:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"disabled:dark:bg-gray-800 disabled:dark:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"disabled:dark:bg-red-950 disabled:dark:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/src/components/Button/Button.tsx"
    },
    {
      "type": "registry:file",
      "target": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/components/DropdownMenu/DropdownMenu.tsx",
      "content": "// Tremor Dropdown Menu [v0.0.2]\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitives from \"@radix-ui/react-dropdown-menu\"\nimport {\n  RiArrowRightSLine,\n  RiCheckboxBlankCircleLine,\n  RiCheckLine,\n  RiRadioButtonFill,\n} from \"@remixicon/react\"\n\nimport { cx } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx\"\n\nconst DropdownMenu = DropdownMenuPrimitives.Root\nDropdownMenu.displayName = \"DropdownMenu\"\n\nconst DropdownMenuTrigger = DropdownMenuPrimitives.Trigger\nDropdownMenuTrigger.displayName = \"DropdownMenuTrigger\"\n\nconst DropdownMenuGroup = DropdownMenuPrimitives.Group\nDropdownMenuGroup.displayName = \"DropdownMenuGroup\"\n\nconst DropdownMenuSubMenu = DropdownMenuPrimitives.Sub\nDropdownMenuSubMenu.displayName = \"DropdownMenuSubMenu\"\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitives.RadioGroup\nDropdownMenuRadioGroup.displayName = \"DropdownMenuRadioGroup\"\n\nconst DropdownMenuSubMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.SubTrigger>,\n  Omit<\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.SubTrigger>,\n    \"asChild\"\n  >\n>(({ className, children, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.SubTrigger\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"relative flex cursor-default select-none items-center rounded py-1.5 pl-2 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      \"data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600\",\n      // focus\n      \"focus-visible:bg-gray-100 data-[state=open]:bg-gray-100 focus-visible:dark:bg-gray-900 data-[state=open]:dark:bg-gray-900\",\n      // hover\n      \"hover:bg-gray-100 hover:dark:bg-gray-900\",\n      //\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <RiArrowRightSLine className=\"ml-auto size-4 shrink-0\" aria-hidden=\"true\" />\n  </DropdownMenuPrimitives.SubTrigger>\n))\nDropdownMenuSubMenuTrigger.displayName = \"DropdownMenuSubMenuTrigger\"\n\nconst DropdownMenuSubMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.SubContent>\n>(({ className, collisionPadding = 8, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.Portal>\n    <DropdownMenuPrimitives.SubContent\n      ref={forwardedRef}\n      collisionPadding={collisionPadding}\n      className={cx(\n        // base\n        \"relative z-50 overflow-hidden rounded-md border p-1 shadow-xl shadow-black/[2.5%]\",\n        // widths\n        \"min-w-32\",\n        // heights\n        \"max-h-[var(--radix-popper-available-height)]\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // border color\n        \"border-gray-200 dark:border-gray-800\",\n        // transition\n        \"will-change-[transform,opacity]\",\n        // \"data-[state=open]:animate-slideDownAndFade\",\n        \"data-[state=closed]:animate-hide\",\n        \"data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade\",\n        className,\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitives.Portal>\n))\nDropdownMenuSubMenuContent.displayName = \"DropdownMenuSubMenuContent\"\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Content>\n>(\n  (\n    {\n      className,\n      sideOffset = 8,\n      collisionPadding = 8,\n      align = \"center\",\n      loop = true,\n      ...props\n    },\n    forwardedRef,\n  ) => (\n    <DropdownMenuPrimitives.Portal>\n      <DropdownMenuPrimitives.Content\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"relative z-50 overflow-hidden rounded-md border p-1 shadow-xl shadow-black/[2.5%]\",\n          // widths\n          \"min-w-48\",\n          // heights\n          \"max-h-[var(--radix-popper-available-height)]\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // text color\n          \"text-gray-900 dark:text-gray-50\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // transition\n          \"will-change-[transform,opacity]\",\n          \"data-[state=closed]:animate-hide\",\n          \"data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade\",\n          className,\n        )}\n        sideOffset={sideOffset}\n        align={align}\n        collisionPadding={collisionPadding}\n        loop={loop}\n        {...props}\n      />\n    </DropdownMenuPrimitives.Portal>\n  ),\n)\nDropdownMenuContent.displayName = \"DropdownMenuContent\"\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.Item>,\n  Omit<\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Item>,\n    \"asChild\"\n  > & {\n    shortcut?: string\n    hint?: string\n  }\n>(({ className, shortcut, hint, children, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.Item\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"group/DropdownMenuItem relative flex cursor-pointer select-none items-center rounded py-1.5 pl-2 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      \"data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600\",\n      // focus\n      \"focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900\",\n      // hover\n      \"hover:bg-gray-100 hover:dark:bg-gray-900\",\n      className,\n    )}\n    tremor-id=\"tremor-raw\"\n    {...props}\n  >\n    {children}\n    {hint && (\n      <span\n        className={cx(\"ml-auto pl-2 text-sm text-gray-400 dark:text-gray-600\")}\n      >\n        {hint}\n      </span>\n    )}\n    {shortcut && (\n      <span\n        className={cx(\"ml-auto pl-2 text-sm text-gray-400 dark:text-gray-600\")}\n      >\n        {shortcut}\n      </span>\n    )}\n  </DropdownMenuPrimitives.Item>\n))\nDropdownMenuItem.displayName = \"DropdownMenuItem\"\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.CheckboxItem>,\n  Omit<\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.CheckboxItem>,\n    \"asChild\"\n  > & {\n    shortcut?: string\n    hint?: string\n  }\n>(\n  (\n    { className, hint, shortcut, children, checked, ...props },\n    forwardedRef,\n  ) => (\n    <DropdownMenuPrimitives.CheckboxItem\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"relative flex cursor-pointer select-none items-center gap-x-2 rounded py-1.5 pl-8 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // disabled\n        \"data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600\",\n        // focus\n        \"focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900\",\n        // hover\n        \"hover:bg-gray-100 hover:dark:bg-gray-900\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"absolute left-2 flex size-4 items-center justify-center\">\n        <DropdownMenuPrimitives.ItemIndicator>\n          <RiCheckLine\n            aria-hidden=\"true\"\n            className=\"size-full shrink-0 text-gray-800 dark:text-gray-200\"\n          />\n        </DropdownMenuPrimitives.ItemIndicator>\n      </span>\n      {children}\n      {hint && (\n        <span\n          className={cx(\n            \"ml-auto text-sm font-normal text-gray-400 dark:text-gray-600\",\n          )}\n        >\n          {hint}\n        </span>\n      )}\n      {shortcut && (\n        <span\n          className={cx(\n            \"ml-auto text-sm font-normal tracking-widest text-gray-400 dark:border-gray-800 dark:text-gray-600\",\n          )}\n        >\n          {shortcut}\n        </span>\n      )}\n    </DropdownMenuPrimitives.CheckboxItem>\n  ),\n)\nDropdownMenuCheckboxItem.displayName = \"DropdownMenuCheckboxItem\"\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.RadioItem>,\n  Omit<\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.RadioItem>,\n    \"asChild\"\n  > & {\n    shortcut?: string\n    hint?: string\n  }\n>(({ className, hint, shortcut, children, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.RadioItem\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"group/DropdownMenuRadioItem relative flex cursor-pointer select-none items-center gap-x-2 rounded py-1.5 pl-8 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      \"data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600\",\n      // focus\n      \"focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900\",\n      // hover\n      \"hover:bg-gray-100 hover:dark:bg-gray-900\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex size-4 items-center justify-center\">\n      <RiRadioButtonFill\n        aria-hidden=\"true\"\n        className=\"size-full shrink-0 text-blue-500 group-data-[state=checked]/DropdownMenuRadioItem:flex group-data-[state=unchecked]/DropdownMenuRadioItem:hidden dark:text-blue-500\"\n      />\n      <RiCheckboxBlankCircleLine\n        aria-hidden=\"true\"\n        className=\"size-full shrink-0 text-gray-300 group-data-[state=unchecked]/DropdownMenuRadioItem:flex group-data-[state=checked]/DropdownMenuRadioItem:hidden dark:text-gray-700\"\n      />\n    </span>\n    {children}\n    {hint && (\n      <span\n        className={cx(\n          \"ml-auto text-sm font-normal text-gray-400 dark:text-gray-600\",\n        )}\n      >\n        {hint}\n      </span>\n    )}\n    {shortcut && (\n      <span\n        className={cx(\n          \"ml-auto text-sm font-normal tracking-widest text-gray-400 dark:border-gray-800 dark:text-gray-600\",\n        )}\n      >\n        {shortcut}\n      </span>\n    )}\n  </DropdownMenuPrimitives.RadioItem>\n))\nDropdownMenuRadioItem.displayName = \"DropdownMenuRadioItem\"\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Label>\n>(({ className, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.Label\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"px-2 py-2 text-xs font-medium tracking-wide\",\n      // text color\n      \"text-gray-500 dark:text-gray-500\",\n      className,\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = \"DropdownMenuLabel\"\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Separator>\n>(({ className, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.Separator\n    ref={forwardedRef}\n    className={cx(\n      \"-mx-1 my-1 h-px border-t border-gray-200 dark:border-gray-800\",\n      className,\n    )}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = \"DropdownMenuSeparator\"\n\nconst DropdownMenuIconWrapper = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <div\n      className={cx(\n        // text color\n        \"text-gray-600 dark:text-gray-400\",\n        // disabled\n        \"group-data-[disabled]/DropdownMenuItem:text-gray-400 group-data-[disabled]/DropdownMenuItem:dark:text-gray-700\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\nDropdownMenuIconWrapper.displayName = \"DropdownMenuIconWrapper\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuSubMenuTrigger,\n  DropdownMenuSubMenu,\n  DropdownMenuSubMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuIconWrapper,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n}\n",
      "path": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/src/components/DropdownMenu/DropdownMenu.tsx"
    },
    {
      "type": "registry:file",
      "target": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/src/utils/cx.ts"
    },
    {
      "type": "registry:file",
      "target": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/src/utils/focusRing.ts"
    },
    {
      "type": "registry:component",
      "target": "components/DropdownMenu/dropdownmenu.stories.tsx",
      "content": "import React from \"react\"\nimport { DropdownMenuCheckboxItemProps } from \"@radix-ui/react-dropdown-menu\"\nimport {\n  RiAddCircleLine,\n  RiAddLine,\n  RiArrowUpCircleLine,\n  RiDiscordLine,\n  RiFolder5Line,\n  RiHeartPulseLine,\n  RiIdCardLine,\n  RiLogoutBoxLine,\n  RiMailAddLine,\n  RiMessageLine,\n  RiSettings2Line,\n  RiSlackLine,\n  RiStackLine,\n  RiTelegramLine,\n  RiUserAddLine,\n  RiUserSmileLine,\n  RiWhatsappLine,\n} from \"@remixicon/react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Button } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/components/Button/Button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuIconWrapper,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuSubMenu,\n  DropdownMenuSubMenuContent,\n  DropdownMenuSubMenuTrigger,\n  DropdownMenuTrigger,\n} from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/components/DropdownMenu/DropdownMenu\"\n\nconst meta: Meta<typeof DropdownMenu> = {\n  title: \"ui/DropdownMenu\",\n  component: DropdownMenu,\n}\n\nexport default meta\ntype Story = StoryObj<typeof DropdownMenu>\n\ntype Checked = DropdownMenuCheckboxItemProps[\"checked\"]\n\nexport const Default: Story = {\n  render: () => {\n    const [position, setPosition] = React.useState(\"bottom\")\n    const [showStatusBar, setShowStatusBar] = React.useState<Checked>(true)\n    const [showActivityBar, setShowActivityBar] = React.useState<Checked>(false)\n    const [showPanel, setShowPanel] = React.useState<Checked>(false)\n    return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"secondary\">Open</Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuLabel>My Account</DropdownMenuLabel>\n          <DropdownMenuSeparator />\n\n          <DropdownMenuGroup>\n            <DropdownMenuItem>\n              <span className=\"flex items-center gap-x-2\">\n                <RiArrowUpCircleLine className=\"size-4 text-blue-500\" />\n                <span className=\"text-blue-500\">Upgrade</span>\n              </span>\n            </DropdownMenuItem>\n            <DropdownMenuItem disabled shortcut=\"⌘B\">\n              <span className=\"flex items-center gap-x-2\">\n                <DropdownMenuIconWrapper>\n                  <RiIdCardLine className=\"size-4 text-inherit\" />\n                </DropdownMenuIconWrapper>\n                <span>Billing</span>\n              </span>\n            </DropdownMenuItem>\n            <DropdownMenuItem shortcut=\"⌘S\">\n              <span className=\"flex items-center gap-x-2\">\n                <DropdownMenuIconWrapper>\n                  <RiSettings2Line className=\"size-4 text-inherit\" />\n                </DropdownMenuIconWrapper>\n                <span>Account Settings</span>\n              </span>\n            </DropdownMenuItem>\n          </DropdownMenuGroup>\n\n          <DropdownMenuSeparator />\n\n          <DropdownMenuGroup>\n            <DropdownMenuItem hint=\"Pro\">\n              <span className=\"flex items-center gap-x-2\">\n                <RiUserSmileLine className=\"size-4 text-inherit\" />\n                <span>Manage workspace</span>\n              </span>\n            </DropdownMenuItem>\n\n            <DropdownMenuSubMenu>\n              <DropdownMenuSubMenuTrigger>\n                <span className=\"flex items-center gap-x-2\">\n                  <RiAddCircleLine className=\"size-4 text-inherit\" />\n                  <span>Invite users</span>\n                </span>\n              </DropdownMenuSubMenuTrigger>\n              <DropdownMenuSubMenuContent>\n                <DropdownMenuItem>\n                  <span className=\"flex items-center gap-x-2\">\n                    <RiMailAddLine className=\"size-4 text-inherit\" />\n                    <span>Email</span>\n                  </span>\n                </DropdownMenuItem>\n\n                <DropdownMenuSubMenu>\n                  <DropdownMenuSubMenuTrigger>\n                    <span className=\"flex items-center gap-x-2\">\n                      <RiMessageLine className=\"size-4 text-inherit\" />\n                      <span>Message</span>\n                    </span>\n                  </DropdownMenuSubMenuTrigger>\n                  <DropdownMenuSubMenuContent>\n                    <DropdownMenuItem>\n                      <span className=\"flex items-center gap-x-2\">\n                        <RiWhatsappLine className=\"size-4 text-inherit\" />\n                        <span>Whatsapp</span>\n                      </span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem>\n                      <span className=\"flex items-center gap-x-2\">\n                        <RiTelegramLine className=\"size-4 text-inherit\" />\n                        <span>Telegram</span>\n                      </span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem>\n                      <span className=\"flex items-center gap-x-2\">\n                        <RiDiscordLine className=\"size-4 text-inherit\" />\n                        <span>Discord</span>\n                      </span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem>\n                      <span className=\"flex items-center gap-x-2\">\n                        <RiSlackLine className=\"size-4 text-inherit\" />\n                        <span>Slack</span>\n                      </span>\n                    </DropdownMenuItem>\n                  </DropdownMenuSubMenuContent>\n                </DropdownMenuSubMenu>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>\n                  <span className=\"flex items-center gap-x-2\">\n                    <RiAddCircleLine className=\"size-4 text-inherit\" />\n                    <span>More...</span>\n                  </span>\n                </DropdownMenuItem>\n              </DropdownMenuSubMenuContent>\n            </DropdownMenuSubMenu>\n            <DropdownMenuItem shortcut=\"⌘T\">\n              <span className=\"flex items-center gap-x-2\">\n                <RiAddLine className=\"size-4 text-inherit\" />\n                <span>New Workspace</span>\n              </span>\n            </DropdownMenuItem>\n          </DropdownMenuGroup>\n\n          <DropdownMenuSeparator />\n          <DropdownMenuRadioGroup value={position} onValueChange={setPosition}>\n            <DropdownMenuRadioItem value=\"alpha\" hint=\"A-Z\">\n              Alphabetical\n            </DropdownMenuRadioItem>\n            <DropdownMenuRadioItem value=\"alpha-reverse\" hint=\"Z-A\">\n              Reverse Alphabetical\n            </DropdownMenuRadioItem>\n            <DropdownMenuRadioItem value=\"asc\" hint=\"1-99\">\n              Created at\n            </DropdownMenuRadioItem>\n          </DropdownMenuRadioGroup>\n          <DropdownMenuSeparator />\n\n          <DropdownMenuCheckboxItem\n            checked={showStatusBar}\n            onCheckedChange={setShowStatusBar}\n          >\n            Public\n          </DropdownMenuCheckboxItem>\n          <DropdownMenuCheckboxItem\n            checked={showActivityBar}\n            onCheckedChange={setShowActivityBar}\n          >\n            Private\n          </DropdownMenuCheckboxItem>\n          <DropdownMenuCheckboxItem\n            checked={showPanel}\n            onCheckedChange={setShowPanel}\n            disabled\n          >\n            Restricted\n          </DropdownMenuCheckboxItem>\n\n          <DropdownMenuSeparator />\n\n          <DropdownMenuItem>\n            <span className=\"flex items-center gap-x-2\">\n              <RiHeartPulseLine className=\"size-4 text-inherit\" />\n              <span>Support</span>\n            </span>\n          </DropdownMenuItem>\n          <DropdownMenuItem shortcut=\"⇧⌘Q\">\n            <span className=\"flex items-center gap-x-2\">\n              <RiLogoutBoxLine className=\"size-4 text-inherit\" />\n              <span>Sign out</span>\n            </span>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    )\n  },\n}\n\nexport const Simple: Story = {\n  render: () => {\n    return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"secondary\">Open</Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent>\n          <DropdownMenuLabel>My Account</DropdownMenuLabel>\n          <DropdownMenuGroup>\n            <DropdownMenuItem shortcut=\"⇧⌘P\">Profile</DropdownMenuItem>\n            <DropdownMenuItem disabled shortcut=\"⌘B\">\n              Billing\n            </DropdownMenuItem>\n            <DropdownMenuItem shortcut=\"⌘S\">Settings</DropdownMenuItem>\n            <DropdownMenuItem shortcut=\"⌘K\">Shortcuts</DropdownMenuItem>\n          </DropdownMenuGroup>\n\n          <DropdownMenuSeparator />\n\n          <DropdownMenuGroup>\n            <DropdownMenuItem hint=\"Pro\">Team</DropdownMenuItem>\n            <DropdownMenuSubMenu>\n              <DropdownMenuSubMenuTrigger>\n                Invite users\n              </DropdownMenuSubMenuTrigger>\n              <DropdownMenuSubMenuContent>\n                <DropdownMenuItem>Email</DropdownMenuItem>\n                <DropdownMenuItem>Message</DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>More...</DropdownMenuItem>\n              </DropdownMenuSubMenuContent>\n            </DropdownMenuSubMenu>\n            <DropdownMenuItem shortcut=\"⌘+T\">New Team</DropdownMenuItem>\n          </DropdownMenuGroup>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    )\n  },\n}\n\nexport const WithIcons: Story = {\n  render: () => {\n    return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"secondary\">Open</Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent>\n          <DropdownMenuLabel>My Account</DropdownMenuLabel>\n          <DropdownMenuGroup>\n            <DropdownMenuItem shortcut=\"⌘W\">\n              <div className=\"flex items-center space-x-2\">\n                <RiStackLine className=\"size-4 text-gray-500\" />\n                <span>Workspaces</span>\n              </div>\n            </DropdownMenuItem>\n            <DropdownMenuItem shortcut=\"⌘M\">\n              <div className=\"flex items-center space-x-2\">\n                <RiFolder5Line className=\"size-4 text-gray-500\" />\n                <span>Metrics catalogue (with long edge case)</span>\n              </div>\n            </DropdownMenuItem>\n            <DropdownMenuItem shortcut=\"⌘S\">\n              <div className=\"flex items-center space-x-2\">\n                <RiSettings2Line className=\"size-4 text-gray-500\" />\n                <span>Settings</span>\n              </div>\n            </DropdownMenuItem>\n            <DropdownMenuItem disabled shortcut=\"⌘U\">\n              <div className=\"flex items-center space-x-2\">\n                <DropdownMenuIconWrapper>\n                  <RiUserAddLine className=\"size-4 text-inherit\" />\n                </DropdownMenuIconWrapper>\n                <span>Invite users</span>\n              </div>\n            </DropdownMenuItem>\n          </DropdownMenuGroup>\n\n          <DropdownMenuSeparator />\n\n          <DropdownMenuGroup>\n            <DropdownMenuItem>Log out all</DropdownMenuItem>\n          </DropdownMenuGroup>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    )\n  },\n}\n\nexport const WithRadioItem: Story = {\n  render: () => {\n    const [sort, setSort] = React.useState(\"alpha\")\n    return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"secondary\">Open</Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent>\n          <DropdownMenuLabel>Sorting</DropdownMenuLabel>\n\n          <DropdownMenuSeparator />\n\n          <DropdownMenuGroup>\n            <DropdownMenuRadioGroup value={sort} onValueChange={setSort}>\n              <DropdownMenuRadioItem value=\"alpha\" hint=\"A–Z\">\n                Alphabetical\n              </DropdownMenuRadioItem>\n              <DropdownMenuRadioItem value=\"alpha-reverse\" hint=\"Z-A\">\n                Reverse Alphabetical\n              </DropdownMenuRadioItem>\n              <DropdownMenuRadioItem value=\"asc\" hint=\"1-99\">\n                Created At\n              </DropdownMenuRadioItem>\n            </DropdownMenuRadioGroup>\n          </DropdownMenuGroup>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    )\n  },\n}\n\nexport const WithCheckboxItem: Story = {\n  render: () => {\n    const [showStatusBar, setShowStatusBar] = React.useState<Checked>(true)\n    const [showActivityBar, setShowActivityBar] = React.useState<Checked>(true)\n    const [showPanel, setShowPanel] = React.useState<Checked>(false)\n    return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"secondary\">Open</Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent>\n          <DropdownMenuLabel>Layout</DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          <DropdownMenuCheckboxItem\n            checked={showStatusBar}\n            onCheckedChange={setShowStatusBar}\n            hint=\"Pro\"\n          >\n            Show status bar\n          </DropdownMenuCheckboxItem>\n          <DropdownMenuCheckboxItem\n            checked={showActivityBar}\n            onCheckedChange={setShowActivityBar}\n          >\n            Show activity bar\n          </DropdownMenuCheckboxItem>\n          <DropdownMenuCheckboxItem\n            checked={showPanel}\n            onCheckedChange={setShowPanel}\n            hint=\"Base\"\n          >\n            Show panel\n          </DropdownMenuCheckboxItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    )\n  },\n}\n",
      "path": "src/components/DropdownMenu/dropdownmenu.stories.tsx"
    }
  ]
}
