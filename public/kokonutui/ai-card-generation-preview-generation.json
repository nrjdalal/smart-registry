{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-card-generation-preview-generation",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "lucide-react",
    "next",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/blocks/ai-card-generation/preview-generation.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nconst AVAILABLE_TEXTS = [\n    \"Creating your masterpiece...\",\n    \"Finding the good colors...\",\n    \"Adding the final touches...\",\n];\nconst PROGRESS_INTERVAL_MS = 30;\nconst TEXT_CHANGE_INTERVAL_MS = 1000;\n\ninterface PreviewProps {\n    isLoading: boolean;\n    imageUrl: string;\n}\n\nexport const Preview = ({ isLoading, imageUrl }: PreviewProps) => {\n    const [currentTextIndex, setCurrentTextIndex] = useState(0);\n    const [progress, setProgress] = useState(0);\n\n    useEffect(() => {\n        if (!isLoading) {\n            setProgress(0);\n            return;\n        }\n\n        setProgress(0);\n        const progressInterval = setInterval(() => {\n            setProgress((prev) => {\n                if (prev >= 100) {\n                    clearInterval(progressInterval);\n                    return 100;\n                }\n                return prev + 1;\n            });\n        }, PROGRESS_INTERVAL_MS);\n\n        return () => clearInterval(progressInterval);\n    }, [isLoading]);\n\n    useEffect(() => {\n        if (!isLoading) {\n            return;\n        }\n\n        setCurrentTextIndex(0);\n        const textInterval = setInterval(() => {\n            setCurrentTextIndex((prev) => (prev + 1) % AVAILABLE_TEXTS.length);\n        }, TEXT_CHANGE_INTERVAL_MS);\n\n        return () => clearInterval(textInterval);\n    }, [isLoading]);\n\n    return (\n        <div className=\"aspect-video rounded-xl mb-4 flex items-center justify-center\">\n            {isLoading ? (\n                <Card className=\"w-full max-w-md border-0 shadow-none bg-transparent\">\n                    <CardContent className=\"flex flex-col items-center gap-4 p-6\">\n                        <div className=\"relative w-12 h-12\">\n                            <Loader2 className=\"w-full h-full animate-spin text-fuchsia-500\" />\n                            <div className=\"absolute inset-0 bg-gradient-to-tr from-transparent via-transparent to-fuchsia-500/10 rounded-full animate-spin-slow\" />\n                        </div>\n                        <div className=\"space-y-1 text-center\">\n                            <p className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\">\n                                {AVAILABLE_TEXTS[currentTextIndex]}\n                            </p>\n                            <p className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                                This usually takes 10-15 seconds\n                            </p>\n                        </div>\n                        <div className=\"w-full h-1.5 bg-zinc-200 dark:bg-zinc-700 rounded-full overflow-hidden\">\n                            <div\n                                className=\"h-full bg-fuchsia-500 transition-all duration-300 ease-linear\"\n                                style={{ width: `${progress}%` }}\n                            />\n                        </div>\n                    </CardContent>\n                </Card>\n            ) : (\n                <div className=\"flex flex-col items-center gap-2\">\n                    <Image\n                        src={imageUrl}\n                        width={400}\n                        height={400}\n                        alt=\"Generated preview\"\n                        className=\"rounded-xl object-contain\"\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n",
      "path": "components/kokonutui/blocks/ai-card-generation/preview-generation.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n}\n",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border border-zinc-200 bg-white text-zinc-950 shadow-xs dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-zinc-500 dark:text-zinc-400\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "path": "components/ui/card.tsx"
    }
  ]
}
