{
  "url": "https://solid-ui.com/docs/components/tooltip",
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tooltip",
  "type": "registry:ui",
  "title": "Tooltip",
  "description": "A tooltip component",
  "dependencies": [
    "@kobalte/core",
    "clsx",
    "solid-js",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:ui",
      "target": "components/ui/tooltip.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { splitProps, type Component } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as TooltipPrimitive from \"@kobalte/core/tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst Tooltip: Component<TooltipPrimitive.TooltipRootProps> = (props) => {\n  return <TooltipPrimitive.Root gutter={4} {...props} />\n}\n\ntype TooltipContentProps<T extends ValidComponent = \"div\"> =\n  TooltipPrimitive.TooltipContentProps<T> & { class?: string | undefined }\n\nconst TooltipContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TooltipContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as TooltipContentProps, [\"class\"])\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        class={cn(\n          \"z-50 origin-[var(--kb-popover-content-transform-origin)] overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95\",\n          local.class\n        )}\n        {...others}\n      />\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent }\n",
      "path": "src/registry/ui/tooltip.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import type { ClassValue } from \"clsx\"\nimport { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return val > max ? max : val < min ? min : val\n}\n\nexport function toggleValue<T>(array: T[], value: T): T[] {\n  return array.includes(value) ? array.filter((item) => item !== value) : [...array, value]\n}\n",
      "path": "src/lib/utils.ts"
    }
  ]
}
