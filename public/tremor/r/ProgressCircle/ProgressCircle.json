{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ProgressCircle/ProgressCircle",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:component",
      "target": "components/ProgressCircle/ProgressCircle.tsx",
      "content": "// Tremor ProgressCircle [v0.0.3]\n\nimport React from \"react\"\nimport { tv, VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx\"\n\nconst progressCircleVariants = tv({\n  slots: {\n    background: \"\",\n    circle: \"\",\n  },\n  variants: {\n    variant: {\n      default: {\n        background: \"stroke-blue-200 dark:stroke-blue-500/30\",\n        circle: \"stroke-blue-500 dark:stroke-blue-500\",\n      },\n      neutral: {\n        background: \"stroke-gray-200 dark:stroke-gray-500/40\",\n        circle: \"stroke-gray-500 dark:stroke-gray-500\",\n      },\n      warning: {\n        background: \"stroke-yellow-200 dark:stroke-yellow-500/30\",\n        circle: \"stroke-yellow-500 dark:stroke-yellow-500\",\n      },\n      error: {\n        background: \"stroke-red-200 dark:stroke-red-500/30\",\n        circle: \"stroke-red-500 dark:stroke-red-500\",\n      },\n      success: {\n        background: \"stroke-emerald-200 dark:stroke-emerald-500/30\",\n        circle: \"stroke-emerald-500 dark:stroke-emerald-500\",\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n})\n\ninterface ProgressCircleProps\n  extends Omit<React.SVGProps<SVGSVGElement>, \"value\">,\n    VariantProps<typeof progressCircleVariants> {\n  value?: number\n  max?: number\n  showAnimation?: boolean\n  radius?: number\n  strokeWidth?: number\n  children?: React.ReactNode\n}\n\nconst ProgressCircle = React.forwardRef<SVGSVGElement, ProgressCircleProps>(\n  (\n    {\n      value = 0,\n      max = 100,\n      radius = 32,\n      strokeWidth = 6,\n      showAnimation = true,\n      variant,\n      className,\n      children,\n      ...props\n    }: ProgressCircleProps,\n    forwardedRef,\n  ) => {\n    const safeValue = Math.min(max, Math.max(value, 0))\n    const normalizedRadius = radius - strokeWidth / 2\n    const circumference = normalizedRadius * 2 * Math.PI\n    const offset = circumference - (safeValue / max) * circumference\n\n    const { background, circle } = progressCircleVariants({ variant })\n    return (\n      <div\n        className={cx(\"relative\")}\n        role=\"progressbar\"\n        aria-label=\"Progress circle\"\n        aria-valuenow={value}\n        aria-valuemin={0}\n        aria-valuemax={max}\n        data-max={max}\n        data-value={safeValue ?? null}\n        tremor-id=\"tremor-raw\"\n      >\n        <svg\n          ref={forwardedRef}\n          width={radius * 2}\n          height={radius * 2}\n          viewBox={`0 0 ${radius * 2} ${radius * 2}`}\n          className={cx(\"-rotate-90 transform\", className)}\n          {...props}\n        >\n          <circle\n            r={normalizedRadius}\n            cx={radius}\n            cy={radius}\n            strokeWidth={strokeWidth}\n            fill=\"transparent\"\n            stroke=\"\"\n            strokeLinecap=\"round\"\n            className={cx(\"transition-colors ease-linear\", background())}\n          />\n          {safeValue >= 0 ? (\n            <circle\n              r={normalizedRadius}\n              cx={radius}\n              cy={radius}\n              strokeWidth={strokeWidth}\n              strokeDasharray={`${circumference} ${circumference}`}\n              strokeDashoffset={offset}\n              fill=\"transparent\"\n              stroke=\"\"\n              strokeLinecap=\"round\"\n              className={cx(\n                \"transition-colors ease-linear\",\n                circle(),\n                showAnimation &&\n                  \"transform-gpu transition-all duration-300 ease-in-out\",\n              )}\n            />\n          ) : null}\n        </svg>\n        <div\n          className={cx(\"absolute inset-0 flex items-center justify-center\")}\n        >\n          {children}\n        </div>\n      </div>\n    )\n  },\n)\n\nProgressCircle.displayName = \"ProgressCircle\"\n\nexport { ProgressCircle, type ProgressCircleProps }\n",
      "path": "src/components/ProgressCircle/ProgressCircle.tsx"
    }
  ]
}
