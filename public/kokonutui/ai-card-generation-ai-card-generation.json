{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-card-generation-ai-card-generation",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-select",
    "clsx",
    "lucide-react",
    "next",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/blocks/ai-card-generation/ai-card-generation.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Preview } from \"@/components/kokonutui/blocks/ai-card-generation/preview-generation\";\nimport { ErrorGeneration } from \"@/components/kokonutui/blocks/ai-card-generation/error-generation\";\nimport { FormGeneration } from \"@/components/kokonutui/blocks/ai-card-generation/form-generation\";\nimport { HeaderGeneration } from \"@/components/kokonutui/blocks/ai-card-generation/header-generation\";\n\ninterface CardSettings {\n    style: string;\n    backgroundColor: string;\n    lighting: string;\n    pose: string;\n    aspectRatio: string;\n}\n\nexport default function AICardGeneration() {\n    const [showForm, setShowForm] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [settings, setSettings] = useState<CardSettings>({\n        style: \"artistic\",\n        backgroundColor: \"studio\",\n        lighting: \"studio\",\n        pose: \"profile\",\n        aspectRatio: \"4:5\",\n    });\n\n    const handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        setShowForm(false);\n        setIsLoading(true);\n        setError(null);\n\n        /**\n         * Fake Submission, update with your own\n         */\n        try {\n            await new Promise((resolve) => setTimeout(resolve, 3000));\n            setShowForm(false);\n        } catch (err) {\n            setError(\"Failed to generate video. Please try again.\");\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleBackToSettings = () => {\n        setShowForm(true);\n        setError(null);\n    };\n\n    return (\n        <div className=\"group relative overflow-hidden w-full max-w-sm bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-2xl transition-all duration-300 hover:shadow-[0_8px_30px_rgb(0,0,0,0.12)] dark:hover:shadow-[0_8px_30px_rgb(0,0,0,0.2)] min-h-[500px] flex flex-col justify-between gap-2 m-8\">\n            <HeaderGeneration />\n            <div className=\"flex-1 overflow-hidden flex flex-col\">\n                {error && <ErrorGeneration error={error} />}\n\n                {showForm ? (\n                    <FormGeneration\n                        onSubmit={handleSubmit}\n                        settings={settings}\n                        onSettingsChange={setSettings}\n                    />\n                ) : (\n                    <div className=\"p-4\">\n                        <Preview\n                            isLoading={isLoading}\n                            imageUrl=\"https://ferf1mheo22r9ira.public.blob.vercel-storage.com/profile-mjss82WnWBRO86MHHGxvJ2TVZuyrDv.jpeg\"\n                        />\n\n                        {!isLoading && (\n                            <div className=\"space-y-4\">\n                                <div className=\"p-3 space-y-2 bg-zinc-50 dark:bg-zinc-800/50 rounded-xl\">\n                                    <div className=\"flex justify-between text-sm\">\n                                        <span className=\"text-zinc-500\">\n                                            Quality\n                                        </span>\n                                        <span className=\"text-zinc-900 dark:text-zinc-100\">\n                                            1080p\n                                        </span>\n                                    </div>\n                                    <div className=\"flex justify-between text-sm\">\n                                        <span className=\"text-zinc-500\">\n                                            Duration\n                                        </span>\n                                        <span className=\"text-zinc-900 dark:text-zinc-100\">\n                                            00:07\n                                        </span>\n                                    </div>\n                                </div>\n\n                                <div className=\"flex items-center justify-between gap-2\">\n                                    <button\n                                        type=\"button\"\n                                        onClick={handleBackToSettings}\n                                        className=\"w-full h-9 flex items-center justify-center gap-2 border border-zinc-200 dark:border-zinc-700 text-zinc-900 dark:text-zinc-100 text-sm font-medium rounded-xl hover:bg-zinc-50 dark:hover:bg-zinc-800 transition-colors\"\n                                    >\n                                        Back to Settings\n                                    </button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"w-full h-9 flex items-center justify-center gap-2 bg-zinc-900 hover:bg-zinc-800 dark:bg-white dark:hover:bg-zinc-100 dark:text-zinc-900 text-white text-sm font-medium rounded-xl transition-colors\"\n                                    >\n                                        Download\n                                    </button>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n",
      "path": "components/kokonutui/blocks/ai-card-generation/ai-card-generation.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/kokonutui/blocks/ai-card-generation/error-generation.tsx",
      "content": "import React from \"react\";\nimport { AlertCircle } from \"lucide-react\";\n\ninterface ErrorProps {\n    error: string;\n}\n\nexport const ErrorGeneration = ({ error }: ErrorProps) => {\n    return (\n        <div className=\"m-4 px-4 py-3 flex items-center gap-2 text-sm text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/10 rounded-xl\">\n            <AlertCircle className=\"w-4 h-4 shrink-0\" />\n            <p>{error}</p>\n        </div>\n    );\n};",
      "path": "components/kokonutui/blocks/ai-card-generation/error-generation.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/kokonutui/blocks/ai-card-generation/form-generation.tsx",
      "content": "import { MessageCircle, Sparkles } from \"lucide-react\";\nimport { SettingsGeneration } from \"@/components/kokonutui/blocks/ai-card-generation/settings-generation\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface VideoSettings {\n    style: string;\n    backgroundColor: string;\n    lighting: string;\n    pose: string;\n    aspectRatio: string;\n}\n\ninterface FormProps {\n    onSubmit: (e: React.FormEvent) => void;\n    settings: VideoSettings;\n    onSettingsChange: (settings: VideoSettings) => void;\n}\n\nexport const FormGeneration = ({\n    onSubmit,\n    settings,\n    onSettingsChange,\n}: FormProps) => {\n    return (\n        <form\n            onSubmit={onSubmit}\n            className=\"flex flex-col gap-2 flex-1 p-4 justify-between\"\n        >\n            <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2\">\n                    <MessageCircle className=\"w-4 h-4 text-zinc-500\" />\n                    <span className=\"text-sm text-zinc-500\">Prompt</span>\n                </div>\n                <Input\n                    type=\"text\"\n                    size={16}\n                    defaultValue=\"Picture of a women with orange background\"\n                    placeholder=\"Describe the portrait you want to create...\"\n                    className=\"w-full bg-zinc-100 dark:bg-zinc-800 text-sm text-zinc-900 dark:text-zinc-100 placeholder:text-zinc-500 rounded-xl focus:outline-hidden focus-visible:ring-offset-0 focus-visible:ring-0 focus-visible:border-zinc-900 dark:focus-visible:border-zinc-100\"\n                />\n            </div>\n\n            <SettingsGeneration\n                settings={settings}\n                onSettingsChange={onSettingsChange}\n            />\n\n            <button\n                type=\"submit\"\n                className=\"w-full h-9 flex items-center justify-center gap-2 bg-zinc-900 hover:bg-zinc-800 dark:bg-white dark:hover:bg-zinc-100 dark:text-zinc-900 text-white text-sm font-medium rounded-xl transition-colors self-end\"\n            >\n                <Sparkles className=\"w-4 h-4\" />\n                Generate Portrait\n            </button>\n        </form>\n    );\n};\n",
      "path": "components/kokonutui/blocks/ai-card-generation/form-generation.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/kokonutui/blocks/ai-card-generation/header-generation.tsx",
      "content": "import React from \"react\";\n\nexport const HeaderGeneration = () => {\n    return (\n        <div className=\"p-4 flex items-center justify-between border-b border-zinc-200 dark:border-zinc-800\">\n            <div className=\"flex items-center gap-3\">\n                <div>\n                    <h3 className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100\">\n                        AI Portrait Generation\n                    </h3>\n                    <p className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                        Create stunning portraits with AI\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n};\n",
      "path": "components/kokonutui/blocks/ai-card-generation/header-generation.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/kokonutui/blocks/ai-card-generation/preview-generation.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nconst AVAILABLE_TEXTS = [\n    \"Creating your masterpiece...\",\n    \"Finding the good colors...\",\n    \"Adding the final touches...\",\n];\nconst PROGRESS_INTERVAL_MS = 30;\nconst TEXT_CHANGE_INTERVAL_MS = 1000;\n\ninterface PreviewProps {\n    isLoading: boolean;\n    imageUrl: string;\n}\n\nexport const Preview = ({ isLoading, imageUrl }: PreviewProps) => {\n    const [currentTextIndex, setCurrentTextIndex] = useState(0);\n    const [progress, setProgress] = useState(0);\n\n    useEffect(() => {\n        if (!isLoading) {\n            setProgress(0);\n            return;\n        }\n\n        setProgress(0);\n        const progressInterval = setInterval(() => {\n            setProgress((prev) => {\n                if (prev >= 100) {\n                    clearInterval(progressInterval);\n                    return 100;\n                }\n                return prev + 1;\n            });\n        }, PROGRESS_INTERVAL_MS);\n\n        return () => clearInterval(progressInterval);\n    }, [isLoading]);\n\n    useEffect(() => {\n        if (!isLoading) {\n            return;\n        }\n\n        setCurrentTextIndex(0);\n        const textInterval = setInterval(() => {\n            setCurrentTextIndex((prev) => (prev + 1) % AVAILABLE_TEXTS.length);\n        }, TEXT_CHANGE_INTERVAL_MS);\n\n        return () => clearInterval(textInterval);\n    }, [isLoading]);\n\n    return (\n        <div className=\"aspect-video rounded-xl mb-4 flex items-center justify-center\">\n            {isLoading ? (\n                <Card className=\"w-full max-w-md border-0 shadow-none bg-transparent\">\n                    <CardContent className=\"flex flex-col items-center gap-4 p-6\">\n                        <div className=\"relative w-12 h-12\">\n                            <Loader2 className=\"w-full h-full animate-spin text-fuchsia-500\" />\n                            <div className=\"absolute inset-0 bg-gradient-to-tr from-transparent via-transparent to-fuchsia-500/10 rounded-full animate-spin-slow\" />\n                        </div>\n                        <div className=\"space-y-1 text-center\">\n                            <p className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\">\n                                {AVAILABLE_TEXTS[currentTextIndex]}\n                            </p>\n                            <p className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                                This usually takes 10-15 seconds\n                            </p>\n                        </div>\n                        <div className=\"w-full h-1.5 bg-zinc-200 dark:bg-zinc-700 rounded-full overflow-hidden\">\n                            <div\n                                className=\"h-full bg-fuchsia-500 transition-all duration-300 ease-linear\"\n                                style={{ width: `${progress}%` }}\n                            />\n                        </div>\n                    </CardContent>\n                </Card>\n            ) : (\n                <div className=\"flex flex-col items-center gap-2\">\n                    <Image\n                        src={imageUrl}\n                        width={400}\n                        height={400}\n                        alt=\"Generated preview\"\n                        className=\"rounded-xl object-contain\"\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n",
      "path": "components/kokonutui/blocks/ai-card-generation/preview-generation.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/kokonutui/blocks/ai-card-generation/settings-generation.tsx",
      "content": "import React from \"react\";\nimport {\n    Select,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue,\n} from \"@/components/ui/select\";\nimport { Palette, Image, Sun, User, Monitor } from \"lucide-react\";\n\ninterface VideoSettings {\n    style: string;\n    backgroundColor: string;\n    lighting: string;\n    pose: string;\n    aspectRatio: string;\n}\n\ninterface SettingsProps {\n    settings: VideoSettings;\n    onSettingsChange: (settings: VideoSettings) => void;\n}\n\nexport const SettingsGeneration = ({\n    settings,\n    onSettingsChange,\n}: SettingsProps) => {\n    return (\n        <div className=\"space-y-4 p-4 rounded-xl bg-zinc-50 dark:bg-zinc-800/50\">\n            <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"flex items-center gap-2\">\n                    <Palette className=\"w-4 h-4 text-zinc-500\" />\n                    <span className=\"text-sm text-zinc-500\">Style</span>\n                </div>\n                <Select\n                    value={settings.style}\n                    onValueChange={(value) =>\n                        onSettingsChange({ ...settings, style: value })\n                    }\n                >\n                    <SelectTrigger className=\"w-[140px] h-8 bg-white dark:bg-zinc-900 border-zinc-200 dark:border-zinc-700\">\n                        <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                        <SelectItem value=\"professional\">\n                            Professional\n                        </SelectItem>\n                        <SelectItem value=\"artistic\">Artistic</SelectItem>\n                        <SelectItem value=\"casual\">Casual</SelectItem>\n                        <SelectItem value=\"vintage\">Vintage</SelectItem>\n                    </SelectContent>\n                </Select>\n            </div>\n\n            <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"flex items-center gap-2\">\n                    <Image className=\"w-4 h-4 text-zinc-500\" />\n                    <span className=\"text-sm text-zinc-500\">Background</span>\n                </div>\n                <Select\n                    value={settings.backgroundColor}\n                    onValueChange={(value) =>\n                        onSettingsChange({\n                            ...settings,\n                            backgroundColor: value,\n                        })\n                    }\n                >\n                    <SelectTrigger className=\"w-[140px] h-8 bg-white dark:bg-zinc-900 border-zinc-200 dark:border-zinc-700\">\n                        <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                        <SelectItem value=\"studio\">Studio</SelectItem>\n                        <SelectItem value=\"gradient\">Gradient</SelectItem>\n                        <SelectItem value=\"solid\">Solid Color</SelectItem>\n                        <SelectItem value=\"transparent\">Transparent</SelectItem>\n                    </SelectContent>\n                </Select>\n            </div>\n\n            <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"flex items-center gap-2\">\n                    <Sun className=\"w-4 h-4 text-zinc-500\" />\n                    <span className=\"text-sm text-zinc-500\">Lighting</span>\n                </div>\n                <Select\n                    value={settings.lighting}\n                    onValueChange={(value) =>\n                        onSettingsChange({ ...settings, lighting: value })\n                    }\n                >\n                    <SelectTrigger className=\"w-[140px] h-8 bg-white dark:bg-zinc-900 border-zinc-200 dark:border-zinc-700\">\n                        <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                        <SelectItem value=\"soft\">Soft</SelectItem>\n                        <SelectItem value=\"dramatic\">Dramatic</SelectItem>\n                        <SelectItem value=\"natural\">Natural</SelectItem>\n                        <SelectItem value=\"studio\">Studio</SelectItem>\n                    </SelectContent>\n                </Select>\n            </div>\n\n            <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"flex items-center gap-2\">\n                    <User className=\"w-4 h-4 text-zinc-500\" />\n                    <span className=\"text-sm text-zinc-500\">Pose</span>\n                </div>\n                <Select\n                    value={settings.pose}\n                    onValueChange={(value) =>\n                        onSettingsChange({ ...settings, pose: value })\n                    }\n                >\n                    <SelectTrigger className=\"w-[140px] h-8 bg-white dark:bg-zinc-900 border-zinc-200 dark:border-zinc-700\">\n                        <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                        <SelectItem value=\"headshot\">Headshot</SelectItem>\n                        <SelectItem value=\"half-body\">Half Body</SelectItem>\n                        <SelectItem value=\"full-body\">Full Body</SelectItem>\n                        <SelectItem value=\"profile\">Profile</SelectItem>\n                    </SelectContent>\n                </Select>\n            </div>\n\n            <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"flex items-center gap-2\">\n                    <Monitor className=\"w-4 h-4 text-zinc-500\" />\n                    <span className=\"text-sm text-zinc-500\">Quality</span>\n                </div>\n                <span className=\"text-sm text-zinc-900 dark:text-zinc-100\">\n                    720p\n                </span>\n            </div>\n        </div>\n    );\n};\n",
      "path": "components/kokonutui/blocks/ai-card-generation/settings-generation.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n}\n",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border border-zinc-200 bg-white text-zinc-950 shadow-xs dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-zinc-500 dark:text-zinc-400\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "path": "components/ui/card.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-zinc-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-zinc-950 placeholder:text-zinc-500 focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:file:text-zinc-50 dark:placeholder:text-zinc-400 dark:focus-visible:ring-zinc-300\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "path": "components/ui/input.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-zinc-200 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-zinc-500 focus:outline-hidden focus:ring-2 focus:ring-zinc-950 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:placeholder:text-zinc-400 dark:focus:ring-zinc-300\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-zinc-200 bg-white text-zinc-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-hidden focus:bg-zinc-100 focus:text-zinc-900 data-disabled:pointer-events-none data-disabled:opacity-50 dark:focus:bg-zinc-800 dark:focus:text-zinc-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-zinc-100 dark:bg-zinc-800\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
      "path": "components/ui/select.tsx"
    }
  ]
}
