{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "css-box",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/css-box.tsx",
      "content": "\"use client\";\n\nimport { motion, useMotionValue, useSpring, useTransform } from \"motion/react\";\nimport {\n  forwardRef,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n} from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface FaceProps {\n  transform: string;\n  className?: string;\n  showBackface?: boolean;\n  children?: ReactNode;\n  style?: React.CSSProperties;\n}\n\nconst CubeFace = ({\n  transform,\n  className,\n  showBackface,\n  children,\n  style,\n}: FaceProps) => (\n  <div\n    className={cn(\n      \"absolute\",\n      showBackface ? \"backface-visible\" : \"backface-hidden\",\n      className,\n    )}\n    style={{ transform, ...style }}\n  >\n    {children}\n  </div>\n);\n\ninterface CubeFaces {\n  front?: ReactNode;\n  back?: ReactNode;\n  right?: ReactNode;\n  left?: ReactNode;\n  top?: ReactNode;\n  bottom?: ReactNode;\n}\n\nexport interface CSSBoxRef {\n  showFront: () => void;\n  showBack: () => void;\n  showLeft: () => void;\n  showRight: () => void;\n  showTop: () => void;\n  showBottom: () => void;\n  rotateTo: (x: number, y: number) => void;\n  getCurrentRotation: () => { x: number; y: number };\n}\n\ninterface CSSBoxProps extends React.HTMLProps<HTMLDivElement> {\n  width: number;\n  height: number;\n  depth: number;\n  className?: string;\n  perspective?: number;\n  stiffness?: number;\n  damping?: number;\n  showBackface?: boolean;\n  faces?: CubeFaces;\n  draggable?: boolean;\n}\n\nconst CSSBox = forwardRef<CSSBoxRef, CSSBoxProps>(\n  (\n    {\n      width,\n      height,\n      depth,\n      className,\n      perspective = 600,\n      stiffness = 100,\n      damping = 30,\n      showBackface = false,\n      faces = {},\n      draggable = true,\n      ...props\n    },\n    ref,\n  ) => {\n    const isDragging = useRef(false);\n    const startPosition = useRef({ x: 0, y: 0 });\n    const startRotation = useRef({ x: 0, y: 0 });\n\n    const baseRotateX = useMotionValue(0);\n    const baseRotateY = useMotionValue(0);\n\n    const springRotateX = useSpring(baseRotateX, {\n      stiffness,\n      damping,\n      ...(isDragging.current ? { stiffness: stiffness / 2 } : {}),\n    });\n    const springRotateY = useSpring(baseRotateY, {\n      stiffness,\n      damping,\n      ...(isDragging.current ? { stiffness: stiffness / 2 } : {}),\n    });\n\n    const currentRotation = useRef({ x: 0, y: 0 });\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        showFront: () => {\n          baseRotateX.set(0);\n          baseRotateY.set(0);\n        },\n        showBack: () => {\n          baseRotateX.set(0);\n          baseRotateY.set(180);\n        },\n        showLeft: () => {\n          baseRotateX.set(0);\n          baseRotateY.set(-90);\n        },\n        showRight: () => {\n          baseRotateX.set(0);\n          baseRotateY.set(90);\n        },\n        showTop: () => {\n          baseRotateX.set(-90);\n          baseRotateY.set(0);\n        },\n        showBottom: () => {\n          baseRotateX.set(90);\n          baseRotateY.set(0);\n        },\n        rotateTo: (x: number, y: number) => {\n          baseRotateX.set(x);\n          baseRotateY.set(y);\n        },\n\n        getCurrentRotation: () => currentRotation.current,\n      }),\n      [],\n    );\n\n    const transform = useTransform(\n      [springRotateX, springRotateY],\n      ([x, y]) =>\n        `translateZ(-${depth / 2}px) rotateX(${x}deg) rotateY(${y}deg)`,\n    );\n    const handleStart = useCallback(\n      (e: React.MouseEvent | React.TouchEvent) => {\n        if (!draggable) return;\n        isDragging.current = true;\n        const point = \"touches\" in e ? e.touches[0] : e;\n        if (!point) return;\n        startPosition.current = { x: point.clientX, y: point.clientY };\n        startRotation.current = {\n          x: baseRotateX.get(),\n          y: baseRotateY.get(),\n        };\n      },\n      [draggable],\n    );\n\n    const handleMove = useCallback((e: MouseEvent | TouchEvent) => {\n      if (!isDragging.current) return;\n      const point = \"touches\" in e ? e.touches[0] : e;\n      if (!point) return;\n      const deltaX = point.clientX - startPosition.current.x;\n      const deltaY = point.clientY - startPosition.current.y;\n      baseRotateX.set(startRotation.current.x - deltaY / 2);\n      baseRotateY.set(startRotation.current.y + deltaX / 2);\n    }, []);\n\n    const handleEnd = useCallback(() => {\n      isDragging.current = false;\n    }, []);\n\n    useEffect(() => {\n      if (draggable) {\n        window.addEventListener(\"mousemove\", handleMove);\n        window.addEventListener(\"mouseup\", handleEnd);\n        window.addEventListener(\"touchmove\", handleMove);\n        window.addEventListener(\"touchend\", handleEnd);\n        return () => {\n          window.removeEventListener(\"mousemove\", handleMove);\n          window.removeEventListener(\"mouseup\", handleEnd);\n          window.removeEventListener(\"touchmove\", handleMove);\n          window.removeEventListener(\"touchend\", handleEnd);\n        };\n      }\n    }, [draggable, handleMove, handleEnd]);\n\n    useEffect(() => {\n      const unsubscribeX = baseRotateX.on(\"change\", (v) => {\n        currentRotation.current.x = v;\n      });\n      const unsubscribeY = baseRotateY.on(\"change\", (v) => {\n        currentRotation.current.y = v;\n      });\n      return () => {\n        unsubscribeX();\n        unsubscribeY();\n      };\n    }, []);\n\n    return (\n      <div\n        className={cn(draggable && \"cursor-move\", className)}\n        style={{\n          width,\n          height,\n          perspective: `${perspective}px`,\n        }}\n        onMouseDown={handleStart}\n        onTouchStart={handleStart}\n        {...props}\n      >\n        <motion.div\n          className=\"relative h-full w-full [transform-style:preserve-3d]\"\n          style={{ transform }}\n        >\n          {/* Front and Back */}\n          <CubeFace\n            transform={`rotateY(0deg) translateZ(${depth / 2}px)`}\n            style={{ width, height }}\n            showBackface={showBackface}\n          >\n            {faces.front}\n          </CubeFace>\n\n          <CubeFace\n            transform={`rotateY(180deg) translateZ(${depth / 2}px)`}\n            style={{ width, height }}\n            showBackface={showBackface}\n          >\n            {faces.back}\n          </CubeFace>\n\n          {/* Right and Left */}\n          <CubeFace\n            transform={`rotateY(90deg) translateZ(${width / 2}px)`}\n            style={{\n              width: depth,\n              height,\n              left: (width - depth) / 2,\n            }}\n            showBackface={showBackface}\n          >\n            {faces.right}\n          </CubeFace>\n\n          <CubeFace\n            transform={`rotateY(-90deg) translateZ(${width / 2}px)`}\n            style={{\n              width: depth,\n              height,\n              left: (width - depth) / 2,\n            }}\n            showBackface={showBackface}\n          >\n            {faces.left}\n          </CubeFace>\n\n          {/* Top and Bottom */}\n          <CubeFace\n            transform={`rotateX(90deg) translateZ(${height / 2}px)`}\n            style={{\n              width,\n              height: depth,\n              top: (height - depth) / 2,\n            }}\n            showBackface={showBackface}\n          >\n            {faces.top}\n          </CubeFace>\n\n          <CubeFace\n            transform={`rotateX(-90deg) translateZ(${height / 2}px)`}\n            style={{\n              width,\n              height: depth,\n              top: (height - depth) / 2,\n            }}\n            showBackface={showBackface}\n          >\n            {faces.bottom}\n          </CubeFace>\n        </motion.div>\n      </div>\n    );\n  },\n);\n\nCSSBox.displayName = \"CSSBox\";\n\nexport default CSSBox;\n",
      "path": "registry/components/css-box.tsx"
    }
  ]
}
