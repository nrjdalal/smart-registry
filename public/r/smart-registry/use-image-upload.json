{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "smart-registry/use-image-upload",
  "type": "registry:hook",
  "dependencies": [
    "react"
  ],
  "files": [
    {
      "type": "registry:hook",
      "target": "hooks/smart-registry/use-image-upload.ts",
      "content": "\"use client\"\n\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ninterface UseImageUploadProps {\n  onUpload?: (url: string) => void\n}\n\nexport function useImageUpload({ onUpload }: UseImageUploadProps = {}) {\n  const previewRef = useRef<string | null>(null)\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null)\n  const [fileName, setFileName] = useState<string | null>(null)\n\n  const handleThumbnailClick = useCallback(() => {\n    fileInputRef.current?.click()\n  }, [])\n\n  const handleFileChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const file = event.target.files?.[0]\n      if (file) {\n        setFileName(file.name)\n        const url = URL.createObjectURL(file)\n        setPreviewUrl(url)\n        previewRef.current = url\n        onUpload?.(url)\n      }\n    },\n    [onUpload],\n  )\n\n  const handleRemove = useCallback(() => {\n    if (previewUrl) {\n      URL.revokeObjectURL(previewUrl)\n    }\n    setPreviewUrl(null)\n    setFileName(null)\n    previewRef.current = null\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\"\n    }\n  }, [previewUrl])\n\n  useEffect(() => {\n    return () => {\n      if (previewRef.current) {\n        URL.revokeObjectURL(previewRef.current)\n      }\n    }\n  }, [])\n\n  return {\n    previewUrl,\n    fileName,\n    fileInputRef,\n    handleThumbnailClick,\n    handleFileChange,\n    handleRemove,\n  }\n}\n",
      "path": "registry/default/hooks/use-image-upload.ts"
    }
  ]
}