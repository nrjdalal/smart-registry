{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "textarea.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "clsx",
    "tailwind-merge"
  ],
  "devDependencies": [
    "@storybook/react"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Textarea/textarea.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Card } from \"@/components/Card/Card\"\nimport { Textarea } from \"@/components/Textarea/Textarea\"\n\nconst meta: Meta<typeof Textarea> = {\n  title: \"ui/Textarea\",\n  component: Textarea,\n}\n\nexport default meta\ntype Story = StoryObj<typeof Textarea>\n\nexport const Default: Story = {}\n\nexport const Placeholder: Story = {\n  args: {\n    placeholder: \"Write something...\",\n  },\n}\n\nexport const Disabled: Story = {\n  args: {\n    disabled: true,\n  },\n}\n\nexport const HasError: Story = {\n  args: {\n    hasError: true,\n  },\n}\n\nexport const WithCard: Story = {\n  render: () => (\n    <Card className=\"sm:w-96\">\n      <h3 className=\"font-medium text-gray-900 dark:text-gray-50\">\n        Submit details\n      </h3>\n      <p className=\"mt-4 text-sm text-gray-500\">Insert some text</p>\n      <Textarea id=\"textarea\" name=\"textarea\" className=\"mt-2\" />\n      <p className=\"mt-4 text-sm text-gray-500\">This is disabled</p>\n      <Textarea id=\"textarea\" name=\"textarea\" className=\"mt-2\" disabled />\n    </Card>\n  ),\n}\n",
      "path": "src/components/Textarea/textarea.stories.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Card/Card.tsx",
      "content": "// Tremor Card [v1.0.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\n\nimport { cx } from \"@/utils/cx\"\n\ninterface CardProps extends React.ComponentPropsWithoutRef<\"div\"> {\n  asChild?: boolean\n}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({ className, asChild, ...props }, forwardedRef) => {\n    const Component = asChild ? Slot : \"div\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"relative w-full rounded-lg border p-6 text-left shadow-xs\",\n          // background color\n          \"bg-white dark:bg-[#090E1A]\",\n          // border color\n          \"border-gray-200 dark:border-gray-900\",\n          className,\n        )}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      />\n    )\n  },\n)\n\nCard.displayName = \"Card\"\n\nexport { Card, type CardProps }\n",
      "path": "src/components/Card/Card.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Textarea/Textarea.tsx",
      "content": "// Tremor Textarea [v1.0.0]\n\nimport React from \"react\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusInput } from \"@/utils/focusInput\"\nimport { hasErrorInput } from \"@/utils/hasErrorInput\"\n\ninterface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  hasError?: boolean\n}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, hasError, ...props }: TextareaProps, forwardedRef) => {\n    return (\n      <textarea\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"flex min-h-[4rem] w-full rounded-md border px-3 py-1.5 shadow-xs outline-hidden transition-colors sm:text-sm\",\n          // text color\n          \"text-gray-900 dark:text-gray-50\",\n          // border color\n          \"border-gray-300 dark:border-gray-800\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // placeholder color\n          \"placeholder-gray-400 dark:placeholder-gray-500\",\n          // disabled\n          \"disabled:border-gray-300 disabled:bg-gray-100 disabled:text-gray-300\",\n          \"dark:disabled:border-gray-700 dark:disabled:bg-gray-800 dark:disabled:text-gray-500\",\n          // focus\n          focusInput,\n          // error\n          hasError ? hasErrorInput : \"\",\n          // invalid (optional)\n          // \"dark:aria-invalid:ring-red-400/20 aria-invalid:ring-2 aria-invalid:ring-red-200 aria-invalid:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n          className,\n        )}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      />\n    )\n  },\n)\n\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea, type TextareaProps }\n",
      "path": "src/components/Textarea/Textarea.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusInput.ts",
      "content": "// Tremor focusInput [v0.0.2]\n\nexport const focusInput = [\n  // base\n  \"focus:ring-2\",\n  // ring color\n  \"focus:ring-blue-200 dark:focus:ring-blue-700/30\",\n  // border color\n  \"focus:border-blue-500 dark:focus:border-blue-700\",\n]\n",
      "path": "src/utils/focusInput.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/hasErrorInput.ts",
      "content": "// Tremor hasErrorInput [v0.0.1]\n\nexport const hasErrorInput = [\n  // base\n  \"ring-2\",\n  // border color\n  \"border-red-500 dark:border-red-700\",\n  // ring color\n  \"ring-red-200 dark:ring-red-700/30\",\n]\n",
      "path": "src/utils/hasErrorInput.ts"
    }
  ]
}
