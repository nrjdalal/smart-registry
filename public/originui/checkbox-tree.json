{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox-tree",
  "type": "registry:ui",
  "files": [
    {
      "type": "registry:ui",
      "target": "components/ui/checkbox-tree.tsx",
      "content": "/**\n * IMPORTANT: This component was built for demo purposes only and has not been tested in production.\n * It serves as a proof of concept for a checkbox tree implementation.\n * If you&lsquo;re interested in collaborating to create a more robust, production-ready\n * headless component, your contributions are welcome!\n */\n\n\"use client\"\n\nimport React, { useCallback, useMemo, useState } from \"react\"\n\ninterface TreeNode {\n  id: string\n  label: string\n  defaultChecked?: boolean\n  children?: TreeNode[]\n}\n\nfunction useCheckboxTree(initialTree: TreeNode) {\n  const initialCheckedNodes = useMemo(() => {\n    const checkedSet = new Set<string>()\n    const initializeCheckedNodes = (node: TreeNode) => {\n      if (node.defaultChecked) {\n        checkedSet.add(node.id)\n      }\n      node.children?.forEach(initializeCheckedNodes)\n    }\n    initializeCheckedNodes(initialTree)\n    return checkedSet\n  }, [initialTree])\n\n  const [checkedNodes, setCheckedNodes] =\n    useState<Set<string>>(initialCheckedNodes)\n\n  const isChecked = useCallback(\n    (node: TreeNode): boolean | \"indeterminate\" => {\n      if (!node.children) {\n        return checkedNodes.has(node.id)\n      }\n\n      const childrenChecked = node.children.map((child) => isChecked(child))\n      if (childrenChecked.every((status) => status === true)) {\n        return true\n      }\n      if (\n        childrenChecked.some(\n          (status) => status === true || status === \"indeterminate\"\n        )\n      ) {\n        return \"indeterminate\"\n      }\n      return false\n    },\n    [checkedNodes]\n  )\n\n  const handleCheck = useCallback(\n    (node: TreeNode) => {\n      const newCheckedNodes = new Set(checkedNodes)\n\n      const toggleNode = (n: TreeNode, check: boolean) => {\n        if (check) {\n          newCheckedNodes.add(n.id)\n        } else {\n          newCheckedNodes.delete(n.id)\n        }\n        n.children?.forEach((child) => toggleNode(child, check))\n      }\n\n      const currentStatus = isChecked(node)\n      const newCheck = currentStatus !== true\n\n      toggleNode(node, newCheck)\n      setCheckedNodes(newCheckedNodes)\n    },\n    [checkedNodes, isChecked]\n  )\n\n  return { isChecked, handleCheck }\n}\n\ninterface CheckboxTreeProps {\n  tree: TreeNode\n  renderNode: (props: {\n    node: TreeNode\n    isChecked: boolean | \"indeterminate\"\n    onCheckedChange: () => void\n    children: React.ReactNode\n  }) => React.ReactNode\n}\n\nexport function CheckboxTree({ tree, renderNode }: CheckboxTreeProps) {\n  const { isChecked, handleCheck } = useCheckboxTree(tree)\n\n  const renderTreeNode = (node: TreeNode): React.ReactNode => {\n    const children = node.children?.map(renderTreeNode)\n\n    return renderNode({\n      node,\n      isChecked: isChecked(node),\n      onCheckedChange: () => handleCheck(node),\n      children,\n    })\n  }\n\n  return renderTreeNode(tree)\n}\n",
      "path": "registry/default/ui/checkbox-tree.tsx"
    }
  ]
}
