{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "installer",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "@radix-ui/react-tabs",
    "@vercel/analytics",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "next",
    "react",
    "sonner",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/installer.tsx",
      "content": "'use client';\n\nimport {\n  Snippet,\n  SnippetCopyButton,\n  SnippetHeader,\n  SnippetTabsContent,\n  SnippetTabsList,\n  SnippetTabsTrigger,\n} from '@/packages/snippet';\nimport { track } from '@vercel/analytics/react';\nimport Image from 'next/image';\nimport { useState } from 'react';\nimport { toast } from 'sonner';\nimport kibo from '@/public/logomark';\nimport shadcn from '@/public/shadcn';\n\ntype InstallerProps = {\n  packageName: string;\n};\n\nexport const Installer = ({ packageName }: InstallerProps) => {\n  const [value, setValue] = useState('kibo-ui');\n\n  const commands = {\n    'kibo-ui': {\n      image: kibo,\n      code: `npx kibo-ui@latest add ${packageName}`,\n    },\n    shadcn: {\n      image: shadcn,\n      code: `npx shadcn@latest add https://www.kibo-ui.com/registry/${packageName}.json`,\n    },\n  };\n\n  return (\n    <Snippet\n      value={value}\n      onValueChange={setValue}\n      className=\"not-prose shiki shiki-themes github-light github-dark\"\n    >\n      <SnippetHeader>\n        <SnippetTabsList>\n          {Object.entries(commands).map(([key, command]) => (\n            <SnippetTabsTrigger key={key} value={key}>\n              <Image\n                src={command.image}\n                alt=\"\"\n                width={14}\n                height={14}\n                className=\"dark:invert\"\n              />\n              {key}\n            </SnippetTabsTrigger>\n          ))}\n        </SnippetTabsList>\n        <SnippetCopyButton\n          value={commands[value as keyof typeof commands].code}\n          onCopy={() => {\n            toast.success('Copied to clipboard');\n            track('Copy installer code', {\n              cli: value,\n              package: packageName,\n            });\n          }}\n          onError={() => toast.error('Failed to copy to clipboard')}\n        />\n      </SnippetHeader>\n      {Object.entries(commands).map(([key, command]) => (\n        <SnippetTabsContent key={key} value={key}>\n          {command.code}\n        </SnippetTabsContent>\n      ))}\n    </Snippet>\n  );\n};\n",
      "path": "components/installer.tsx"
    },
    {
      "type": "registry:file",
      "target": "packages/shadcn-ui/components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@repo/shadcn-ui/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "path": "../../packages/shadcn-ui/components/ui/button.tsx"
    },
    {
      "type": "registry:file",
      "target": "packages/shadcn-ui/components/ui/tabs.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@repo/shadcn-ui/lib/utils\"\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "path": "../../packages/shadcn-ui/components/ui/tabs.tsx"
    },
    {
      "type": "registry:file",
      "target": "packages/shadcn-ui/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "../../packages/shadcn-ui/lib/utils.ts"
    },
    {
      "type": "registry:file",
      "target": "packages/snippet/index.tsx",
      "content": "'use client';\n\nimport { Button } from '@/packages/shadcn-ui/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/packages/shadcn-ui/components/ui/tabs';\nimport { cn } from '@/packages/shadcn-ui/lib/utils';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport {\n  type ComponentProps,\n  type HTMLAttributes,\n  type ReactElement,\n  cloneElement,\n  useState,\n} from 'react';\n\nexport type SnippetProps = ComponentProps<typeof Tabs>;\n\nexport const Snippet = ({ className, ...props }: SnippetProps) => (\n  <Tabs\n    className={cn(\n      'group w-full gap-0 overflow-hidden rounded-md border shadow-sm',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type SnippetHeaderProps = HTMLAttributes<HTMLDivElement>;\n\nexport const SnippetHeader = ({ className, ...props }: SnippetHeaderProps) => (\n  <div\n    className={cn(\n      'flex flex-row items-center justify-between border-b bg-secondary p-1',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type SnippetCopyButtonProps = ComponentProps<typeof Button> & {\n  value: string;\n  onCopy?: () => void;\n  onError?: (error: Error) => void;\n  timeout?: number;\n};\n\nexport const SnippetCopyButton = ({\n  asChild,\n  value,\n  onCopy,\n  onError,\n  timeout = 2000,\n  children,\n  ...props\n}: SnippetCopyButtonProps) => {\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copyToClipboard = () => {\n    if (\n      typeof window === 'undefined' ||\n      !navigator.clipboard.writeText ||\n      !value\n    ) {\n      return;\n    }\n\n    navigator.clipboard.writeText(value).then(() => {\n      setIsCopied(true);\n      onCopy?.();\n\n      setTimeout(() => setIsCopied(false), timeout);\n    }, onError);\n  };\n\n  if (asChild) {\n    return cloneElement(children as ReactElement, {\n      // @ts-expect-error - we know this is a button\n      onClick: copyToClipboard,\n    });\n  }\n\n  const icon = isCopied ? <CheckIcon size={14} /> : <CopyIcon size={14} />;\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={copyToClipboard}\n      className=\"opacity-0 transition-opacity group-hover:opacity-100\"\n      {...props}\n    >\n      {children ?? icon}\n    </Button>\n  );\n};\n\nexport type SnippetTabsListProps = ComponentProps<typeof TabsList>;\n\nexport const SnippetTabsList = TabsList;\n\nexport type SnippetTabsTriggerProps = ComponentProps<typeof TabsTrigger>;\n\nexport const SnippetTabsTrigger = ({\n  className,\n  ...props\n}: SnippetTabsTriggerProps) => (\n  <TabsTrigger className={cn('gap-1.5', className)} {...props} />\n);\n\nexport type SnippetTabsContentProps = ComponentProps<typeof TabsContent>;\n\nexport const SnippetTabsContent = ({\n  className,\n  children,\n  ...props\n}: SnippetTabsContentProps) => (\n  <TabsContent\n    asChild\n    className={cn('mt-0 bg-background p-4 text-sm', className)}\n    {...props}\n  >\n    <pre>{children}</pre>\n  </TabsContent>\n);\n",
      "path": "../../packages/snippet/index.tsx"
    },
    {
      "type": "registry:file",
      "target": "public/logomark.svg",
      "content": "<svg fill=\"none\" height=\"116\" viewBox=\"0 0 117 116\" width=\"117\" xmlns=\"http://www.w3.org/2000/svg\"><path clip-rule=\"evenodd\" d=\"m29.8378 0h87.0002v29 58l-29.0002 29v-87h-87.000031zm-29.000031 95.7389v-37.7389h37.738831zm58.000031 20.2611h-37.249l37.249-37.2488z\" fill=\"#000\" fill-rule=\"evenodd\"/></svg>",
      "path": "public/logomark.svg"
    },
    {
      "type": "registry:file",
      "target": "public/shadcn.svg",
      "content": "<svg height=\"256\" viewBox=\"0 0 256 256\" width=\"256\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\"><path d=\"m0 0h256v256h-256z\"/><g stroke=\"#09090b\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"32\"><path d=\"m208 128-80 80\"/><path d=\"m192 40-152 152\"/></g></g></svg>",
      "path": "public/shadcn.svg"
    }
  ]
}
