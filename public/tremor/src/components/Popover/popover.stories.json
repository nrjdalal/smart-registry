{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "src/components/Popover/popover.stories",
  "type": "registry:file",
  "dependencies": [
    "@radix-ui/react-dialog",
    "@radix-ui/react-label",
    "@radix-ui/react-popover",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "src/components/Button/Button.tsx",
      "content": "// Tremor Button [v0.2.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"../../utils/cx\"\nimport { focusRing } from \"../../utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"disabled:dark:bg-blue-800 disabled:dark:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"disabled:dark:bg-gray-800 disabled:dark:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"disabled:dark:bg-red-950 disabled:dark:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:file",
      "target": "src/components/Dialog/Dialog.tsx",
      "content": "// Tremor Dialog [v0.0.1]\n\nimport React from \"react\"\nimport * as DialogPrimitives from \"@radix-ui/react-dialog\"\n\nimport { cx } from \"../../utils/cx\"\nimport { focusRing } from \"../../utils/focusRing\"\n\nconst Dialog = (\n  props: React.ComponentPropsWithoutRef<typeof DialogPrimitives.Root>,\n) => {\n  return <DialogPrimitives.Root {...props} />\n}\nDialog.displayName = \"Dialog\"\n\nconst DialogTrigger = DialogPrimitives.Trigger\n\nDialogTrigger.displayName = \"DialogTrigger\"\n\nconst DialogClose = DialogPrimitives.Close\n\nDialogClose.displayName = \"DialogClose\"\n\nconst DialogPortal = DialogPrimitives.Portal\n\nDialogPortal.displayName = \"DialogPortal\"\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Overlay>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DialogPrimitives.Overlay\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"fixed inset-0 z-50 overflow-y-auto\",\n        // background color\n        \"bg-black/70\",\n        // transition\n        \"data-[state=open]:animate-dialogOverlayShow\",\n        className,\n      )}\n      {...props}\n    />\n  )\n})\n\nDialogOverlay.displayName = \"DialogOverlay\"\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Content>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DialogPortal>\n      <DialogOverlay>\n        <DialogPrimitives.Content\n          ref={forwardedRef}\n          className={cx(\n            // base\n            \"fixed left-1/2 top-1/2 z-50 w-[95vw] max-w-lg -translate-x-1/2 -translate-y-1/2 overflow-y-auto rounded-md border p-6 shadow-lg\",\n            // border color\n            \"border-gray-200 dark:border-gray-900\",\n            // background color\n            \"bg-white dark:bg-[#090E1A]\",\n            // transition\n            \"data-[state=open]:animate-dialogContentShow\",\n            focusRing,\n            className,\n          )}\n          tremor-id=\"tremor-raw\"\n          {...props}\n        />\n      </DialogOverlay>\n    </DialogPortal>\n  )\n})\n\nDialogContent.displayName = \"DialogContent\"\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={cx(\"flex flex-col gap-y-1\", className)} {...props} />\n}\n\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Title>\n>(({ className, ...props }, forwardedRef) => (\n  <DialogPrimitives.Title\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-lg font-semibold\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nDialogTitle.displayName = \"DialogTitle\"\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Description>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DialogPrimitives.Description\n      ref={forwardedRef}\n      className={cx(\"text-gray-500 dark:text-gray-500\", className)}\n      {...props}\n    />\n  )\n})\n\nDialogDescription.displayName = \"DialogDescription\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cx(\n        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nDialogFooter.displayName = \"DialogFooter\"\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n}\n",
      "path": "src/components/Dialog/Dialog.tsx"
    },
    {
      "type": "registry:file",
      "target": "src/components/Divider/Divider.tsx",
      "content": "// Tremor Divider [v0.0.2]\n\nimport React from \"react\"\n\nimport { cx } from \"../../utils/cx\"\n\ntype DividerProps = React.ComponentPropsWithoutRef<\"div\">\n\nconst Divider = React.forwardRef<HTMLDivElement, DividerProps>(\n  ({ className, children, ...props }, forwardedRef) => (\n    <div\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"mx-auto my-6 flex w-full items-center justify-between gap-3 text-sm\",\n        // text color\n        \"text-gray-500 dark:text-gray-500\",\n        className,\n      )}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    >\n      {children ? (\n        <>\n          <div\n            className={cx(\n              // base\n              \"h-[1px] w-full\",\n              // background color\n              \"bg-gray-200 dark:bg-gray-800\",\n            )}\n          />\n          <div className=\"whitespace-nowrap text-inherit\">{children}</div>\n          <div\n            className={cx(\n              // base\n              \"h-[1px] w-full\",\n              // background color\n              \"bg-gray-200 dark:bg-gray-800\",\n            )}\n          />\n        </>\n      ) : (\n        <div\n          className={cx(\n            // base\n            \"h-[1px] w-full\",\n            // background color\n            \"bg-gray-200 dark:bg-gray-800\",\n          )}\n        />\n      )}\n    </div>\n  ),\n)\n\nDivider.displayName = \"Divider\"\n\nexport { Divider }\n",
      "path": "src/components/Divider/Divider.tsx"
    },
    {
      "type": "registry:file",
      "target": "src/components/Input/Input.tsx",
      "content": "// Tremor Input [v1.0.5]\n\nimport React from \"react\"\nimport { RiEyeFill, RiEyeOffFill, RiSearchLine } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"../../utils/cx\"\nimport { focusInput } from \"../../utils/focusInput\"\nimport { focusRing } from \"../../utils/focusRing\"\nimport { hasErrorInput } from \"../../utils/hasErrorInput\"\n\nconst inputStyles = tv({\n  base: [\n    // base\n    \"relative block w-full appearance-none rounded-md border px-2.5 py-2 shadow-sm outline-none transition sm:text-sm\",\n    // border color\n    \"border-gray-300 dark:border-gray-800\",\n    // text color\n    \"text-gray-900 dark:text-gray-50\",\n    // placeholder color\n    \"placeholder-gray-400 dark:placeholder-gray-500\",\n    // background color\n    \"bg-white dark:bg-gray-950\",\n    // disabled\n    \"disabled:border-gray-300 disabled:bg-gray-100 disabled:text-gray-400\",\n    \"disabled:dark:border-gray-700 disabled:dark:bg-gray-800 disabled:dark:text-gray-500\",\n    // file\n    [\n      \"file:-my-2 file:-ml-2.5 file:cursor-pointer file:rounded-l-[5px] file:rounded-r-none file:border-0 file:px-3 file:py-2 file:outline-none focus:outline-none disabled:pointer-events-none file:disabled:pointer-events-none\",\n      \"file:border-solid file:border-gray-300 file:bg-gray-50 file:text-gray-500 file:hover:bg-gray-100 file:dark:border-gray-800 file:dark:bg-gray-950 file:hover:dark:bg-gray-900/20 file:disabled:dark:border-gray-700\",\n      \"file:[border-inline-end-width:1px] file:[margin-inline-end:0.75rem]\",\n      \"file:disabled:bg-gray-100 file:disabled:text-gray-500 file:disabled:dark:bg-gray-800\",\n    ],\n    // focus\n    focusInput,\n    // invalid (optional)\n    // \"aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n    // remove search cancel button (optional)\n    \"[&::-webkit-search-cancel-button]:hidden [&::-webkit-search-decoration]:hidden\",\n  ],\n  variants: {\n    hasError: {\n      true: hasErrorInput,\n    },\n    // number input\n    enableStepper: {\n      false:\n        \"[appearance:textfield] [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none\",\n    },\n  },\n})\n\ninterface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement>,\n    VariantProps<typeof inputStyles> {\n  inputClassName?: string\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      className,\n      inputClassName,\n      hasError,\n      enableStepper = true,\n      type,\n      ...props\n    }: InputProps,\n    forwardedRef,\n  ) => {\n    const [typeState, setTypeState] = React.useState(type)\n\n    const isPassword = type === \"password\"\n    const isSearch = type === \"search\"\n\n    return (\n      <div className={cx(\"relative w-full\", className)} tremor-id=\"tremor-raw\">\n        <input\n          ref={forwardedRef}\n          type={isPassword ? typeState : type}\n          className={cx(\n            inputStyles({ hasError, enableStepper }),\n            {\n              \"pl-8\": isSearch,\n              \"pr-10\": isPassword,\n            },\n            inputClassName,\n          )}\n          {...props}\n        />\n        {isSearch && (\n          <div\n            className={cx(\n              // base\n              \"pointer-events-none absolute bottom-0 left-2 flex h-full items-center justify-center\",\n              // text color\n              \"text-gray-400 dark:text-gray-600\",\n            )}\n          >\n            <RiSearchLine\n              className=\"size-[1.125rem] shrink-0\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        )}\n        {isPassword && (\n          <div\n            className={cx(\n              \"absolute bottom-0 right-0 flex h-full items-center justify-center px-3\",\n            )}\n          >\n            <button\n              aria-label=\"Change password visibility\"\n              className={cx(\n                // base\n                \"h-fit w-fit rounded-sm outline-none transition-all\",\n                // text\n                \"text-gray-400 dark:text-gray-600\",\n                // hover\n                \"hover:text-gray-500 hover:dark:text-gray-500\",\n                focusRing,\n              )}\n              type=\"button\"\n              onClick={() => {\n                setTypeState(typeState === \"password\" ? \"text\" : \"password\")\n              }}\n            >\n              <span className=\"sr-only\">\n                {typeState === \"password\" ? \"Show password\" : \"Hide password\"}\n              </span>\n              {typeState === \"password\" ? (\n                <RiEyeFill aria-hidden=\"true\" className=\"size-5 shrink-0\" />\n              ) : (\n                <RiEyeOffFill aria-hidden=\"true\" className=\"size-5 shrink-0\" />\n              )}\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  },\n)\n\nInput.displayName = \"Input\"\n\nexport { Input, inputStyles, type InputProps }\n",
      "path": "src/components/Input/Input.tsx"
    },
    {
      "type": "registry:file",
      "target": "src/components/Popover/Popover.tsx",
      "content": "// Tremor Popover [v0.0.3]\n\nimport React from \"react\"\nimport * as PopoverPrimitives from \"@radix-ui/react-popover\"\n\nimport { cx } from \"../../utils/cx\"\n\nconst Popover = (\n  props: React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Root>,\n) => {\n  return <PopoverPrimitives.Root {...props} />\n}\n\nPopover.displayName = \"Popover\"\n\nconst PopoverTrigger = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Trigger>\n>((props, forwardedRef) => {\n  return <PopoverPrimitives.Trigger ref={forwardedRef} {...props} />\n})\n\nPopoverTrigger.displayName = \"PopoverTrigger\"\n\nconst PopoverAnchor = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Anchor>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Anchor>\n>((props, forwardedRef) => {\n  return <PopoverPrimitives.Anchor ref={forwardedRef} {...props} />\n})\n\nPopoverAnchor.displayName = \"PopoverAnchor\"\n\nconst PopoverClose = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Close>\n>((props, forwardedRef) => {\n  return <PopoverPrimitives.Close ref={forwardedRef} {...props} />\n})\n\nPopoverClose.displayName = \"PopoverClose\"\n\ntype ContentProps = React.ComponentPropsWithoutRef<\n  typeof PopoverPrimitives.Content\n>\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Content>,\n  ContentProps\n>(\n  (\n    {\n      className,\n      sideOffset = 10,\n      side = \"bottom\",\n      align = \"center\",\n      collisionPadding,\n      avoidCollisions = true,\n      ...props\n    }: ContentProps,\n    forwardedRef,\n  ) => {\n    return (\n      <PopoverPrimitives.Portal>\n        <PopoverPrimitives.Content\n          ref={forwardedRef}\n          sideOffset={sideOffset}\n          side={side}\n          align={align}\n          collisionPadding={collisionPadding}\n          avoidCollisions={avoidCollisions}\n          className={cx(\n            // base\n            \"max-h-[var(--radix-popper-available-height)] min-w-60 overflow-hidden rounded-md border p-2.5 text-sm shadow-md\",\n            // border color\n            \"border-gray-200 dark:border-gray-800\",\n            // text color\n            \"text-gray-900 dark:text-gray-50\",\n            // background color\n            \"bg-white dark:bg-gray-950\",\n            // transition\n            \"will-change-[transform,opacity]\",\n            \"data-[state=closed]:animate-hide\",\n            \"data-[state=open]:data-[side=bottom]:animate-slideDownAndFade data-[state=open]:data-[side=left]:animate-slideLeftAndFade data-[state=open]:data-[side=right]:animate-slideRightAndFade data-[state=open]:data-[side=top]:animate-slideUpAndFade\",\n\n            className,\n          )}\n          tremor-id=\"tremor-raw\"\n          // https://github.com/radix-ui/primitives/issues/1159\n          onWheel={(event) => {\n            event.stopPropagation()\n            const isScrollingDown = event.deltaY > 0\n            if (isScrollingDown) {\n              event.currentTarget.dispatchEvent(\n                new KeyboardEvent(\"keydown\", { key: \"ArrowDown\" }),\n              )\n            } else {\n              event.currentTarget.dispatchEvent(\n                new KeyboardEvent(\"keydown\", { key: \"ArrowUp\" }),\n              )\n            }\n          }}\n          {...props}\n        />\n      </PopoverPrimitives.Portal>\n    )\n  },\n)\nPopoverContent.displayName = \"PopoverContent\"\n\nexport { Popover, PopoverAnchor, PopoverClose, PopoverContent, PopoverTrigger }\n",
      "path": "src/components/Popover/Popover.tsx"
    },
    {
      "type": "registry:file",
      "target": "src/components/Popover/popover.stories.tsx",
      "content": "import React from \"react\"\nimport { Label } from \"@radix-ui/react-label\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Button } from \"../Button/Button\"\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"../Dialog/Dialog\"\nimport { Divider } from \"../Divider/Divider\"\nimport { Input } from \"../Input/Input\"\nimport {\n  Popover,\n  PopoverClose,\n  PopoverContent,\n  PopoverTrigger,\n} from \"./Popover\"\n\nconst meta: Meta<typeof Popover> = {\n  title: \"ui/Popover\",\n  component: Popover,\n}\n\nexport default meta\ntype Story = StoryObj<typeof Popover>\n\nexport const Default: Story = {\n  render: () => (\n    <Popover>\n      <PopoverTrigger>\n        <Button variant=\"primary\">Open</Button>\n      </PopoverTrigger>\n      <PopoverContent>Place content for the popover here</PopoverContent>\n    </Popover>\n  ),\n}\n\nexport const WithSeperator: Story = {\n  render: () => (\n    <Popover>\n      <PopoverTrigger>\n        <Button>Open</Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"p-0\">\n        <p className=\"p-2\">Place content for the popover here</p>\n        <Divider className=\"my-0\" />\n        <p className=\"p-2\">Place content for the popover here</p>\n      </PopoverContent>\n    </Popover>\n  ),\n}\n\nexport const Close: Story = {\n  parameters: {\n    layout: \"centered\",\n  },\n  render: () => (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button>Open</Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"p-0\">\n        <form>\n          <div className=\"flex flex-col gap-2 p-2\">\n            <label htmlFor=\"number\">Salary</label>\n            <Input\n              id=\"number\"\n              name=\"number\"\n              type=\"number\"\n              placeholder=\"$100K\"\n            />\n          </div>\n          <div className=\"flex flex-col gap-2 p-2\">\n            <Label htmlFor=\"name\">Name</Label>\n            <Input id=\"name\" name=\"name\" type=\"text\" placeholder=\"Emma\" />\n          </div>\n          <div className=\"flex items-center gap-2 border-t border-gray-200 p-2 dark:border-gray-800\">\n            <PopoverClose asChild>\n              <Button className=\"w-full\" variant=\"secondary\">\n                Clear\n              </Button>\n            </PopoverClose>\n            <Button className=\"mx-auto w-full\" type=\"submit\">\n              Apply\n            </Button>\n          </div>\n        </form>\n      </PopoverContent>\n    </Popover>\n  ),\n}\n\nexport const PopoverInDialog: Story = {\n  render: () => {\n    const [dialogOpen, setDialogOpen] = React.useState(false)\n    return (\n      <>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>Open Dialog</Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-sm\">\n            <DialogHeader>\n              <DialogTitle>Select shirt size</DialogTitle>\n              <DialogDescription className=\"text-sm leading-7\">\n                Shirt type\n              </DialogDescription>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button>Open</Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"z-50 p-0\">\n                  <form>\n                    <div className=\"flex flex-col gap-2 p-2\">\n                      <label htmlFor=\"number\">Salary</label>\n                      <Input\n                        id=\"number\"\n                        name=\"number\"\n                        type=\"number\"\n                        placeholder=\"$100K\"\n                      />\n                    </div>\n                    <div className=\"flex flex-col gap-2 p-2\">\n                      <Label htmlFor=\"name\">Name</Label>\n                      <Input\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"text\"\n                        placeholder=\"Emma\"\n                      />\n                    </div>\n                    <div className=\"flex items-center gap-2 border-t border-gray-200 p-2 dark:border-gray-800\">\n                      <PopoverClose asChild>\n                        <Button className=\"w-full\" variant=\"secondary\">\n                          Clear\n                        </Button>\n                      </PopoverClose>\n                      <Button className=\"mx-auto w-full\" type=\"submit\">\n                        Apply\n                      </Button>\n                    </div>\n                  </form>\n                </PopoverContent>\n              </Popover>\n              {/* <Select>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {data3.map((group) => (\n                    <SelectGroup key={group.label}>\n                      <SelectGroupLabel>{group.label}</SelectGroupLabel>\n                      {group.items.map((item) => (\n                        <SelectItem key={item.value} value={item.value}>\n                          {item.label}\n                        </SelectItem>\n                      ))}\n                    </SelectGroup>\n                  ))}\n                </SelectContent>\n              </Select> */}\n            </DialogHeader>\n            <DialogFooter className=\"mt-6\">\n              <DialogClose asChild>\n                <Button\n                  className=\"mt-2 w-full sm:mt-0 sm:w-fit\"\n                  variant=\"secondary\"\n                >\n                  Go back\n                </Button>\n              </DialogClose>\n              <DialogClose asChild>\n                <Button className=\"w-full sm:w-fit\">Ok, got it!</Button>\n              </DialogClose>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </>\n    )\n  },\n}\n",
      "path": "src/components/Popover/popover.stories.tsx"
    },
    {
      "type": "registry:file",
      "target": "src/utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:file",
      "target": "src/utils/focusInput.ts",
      "content": "// Tremor focusInput [v0.0.1]\n\nexport const focusInput = [\n  // base\n  \"focus:ring-2\",\n  // ring color\n  \"focus:ring-blue-200 focus:dark:ring-blue-700/30\",\n  // border color\n  \"focus:border-blue-500 focus:dark:border-blue-700\",\n]\n",
      "path": "src/utils/focusInput.ts"
    },
    {
      "type": "registry:file",
      "target": "src/utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    },
    {
      "type": "registry:file",
      "target": "src/utils/hasErrorInput.ts",
      "content": "// Tremor hasErrorInput [v0.0.1]\n\nexport const hasErrorInput = [\n  // base\n  \"ring-2\",\n  // border color\n  \"border-red-500 dark:border-red-700\",\n  // ring color\n  \"ring-red-200 dark:ring-red-700/30\",\n]\n",
      "path": "src/utils/hasErrorInput.ts"
    }
  ]
}
