{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "BarList/BarList",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:file",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    },
    {
      "type": "registry:component",
      "target": "components/BarList/BarList.tsx",
      "content": "// Tremor BarList [v0.1.1]\n\nimport React from \"react\"\n\nimport { cx } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx\"\nimport { focusRing } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/focusRing\"\n\ntype Bar<T> = T & {\n  key?: string\n  href?: string\n  value: number\n  name: string\n}\n\ninterface BarListProps<T = unknown>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  data: Bar<T>[]\n  valueFormatter?: (value: number) => string\n  showAnimation?: boolean\n  onValueChange?: (payload: Bar<T>) => void\n  sortOrder?: \"ascending\" | \"descending\" | \"none\"\n}\n\nfunction BarListInner<T>(\n  {\n    data = [],\n    valueFormatter = (value) => value.toString(),\n    showAnimation = false,\n    onValueChange,\n    sortOrder = \"descending\",\n    className,\n    ...props\n  }: BarListProps<T>,\n  forwardedRef: React.ForwardedRef<HTMLDivElement>,\n) {\n  const Component = onValueChange ? \"button\" : \"div\"\n  const sortedData = React.useMemo(() => {\n    if (sortOrder === \"none\") {\n      return data\n    }\n    return [...data].sort((a, b) => {\n      return sortOrder === \"ascending\" ? a.value - b.value : b.value - a.value\n    })\n  }, [data, sortOrder])\n\n  const widths = React.useMemo(() => {\n    const maxValue = Math.max(...sortedData.map((item) => item.value), 0)\n    return sortedData.map((item) =>\n      item.value === 0 ? 0 : Math.max((item.value / maxValue) * 100, 2),\n    )\n  }, [sortedData])\n\n  const rowHeight = \"h-8\"\n\n  return (\n    <div\n      ref={forwardedRef}\n      className={cx(\"flex justify-between space-x-6\", className)}\n      aria-sort={sortOrder}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    >\n      <div className=\"relative w-full space-y-1.5\">\n        {sortedData.map((item, index) => (\n          <Component\n            key={item.key ?? item.name}\n            onClick={() => {\n              onValueChange?.(item)\n            }}\n            className={cx(\n              // base\n              \"group w-full rounded\",\n              // focus\n              focusRing,\n              onValueChange\n                ? [\n                    \"!-m-0 cursor-pointer\",\n                    // hover\n                    \"hover:bg-gray-50 hover:dark:bg-gray-900\",\n                  ]\n                : \"\",\n            )}\n          >\n            <div\n              className={cx(\n                // base\n                \"flex items-center rounded transition-all\",\n                rowHeight,\n                // background color\n                \"bg-blue-200 dark:bg-blue-900\",\n                onValueChange\n                  ? \"group-hover:bg-blue-300 group-hover:dark:bg-blue-800\"\n                  : \"\",\n                // margin and duration\n                {\n                  \"mb-0\": index === sortedData.length - 1,\n                  \"duration-800\": showAnimation,\n                },\n              )}\n              style={{ width: `${widths[index]}%` }}\n            >\n              <div className={cx(\"absolute left-2 flex max-w-full pr-2\")}>\n                {item.href ? (\n                  <a\n                    href={item.href}\n                    className={cx(\n                      // base\n                      \"truncate whitespace-nowrap rounded text-sm\",\n                      // text color\n                      \"text-gray-900 dark:text-gray-50\",\n                      // hover\n                      \"hover:underline hover:underline-offset-2\",\n                      // focus\n                      focusRing,\n                    )}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    onClick={(event) => event.stopPropagation()}\n                  >\n                    {item.name}\n                  </a>\n                ) : (\n                  <p\n                    className={cx(\n                      // base\n                      \"truncate whitespace-nowrap text-sm\",\n                      // text color\n                      \"text-gray-900 dark:text-gray-50\",\n                    )}\n                  >\n                    {item.name}\n                  </p>\n                )}\n              </div>\n            </div>\n          </Component>\n        ))}\n      </div>\n      <div>\n        {sortedData.map((item, index) => (\n          <div\n            key={item.key ?? item.name}\n            className={cx(\n              \"flex items-center justify-end\",\n              rowHeight,\n              index === sortedData.length - 1 ? \"mb-0\" : \"mb-1.5\",\n            )}\n          >\n            <p\n              className={cx(\n                // base\n                \"truncate whitespace-nowrap text-sm leading-none\",\n                // text color\n                \"text-gray-900 dark:text-gray-50\",\n              )}\n            >\n              {valueFormatter(item.value)}\n            </p>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nBarListInner.displayName = \"BarList\"\n\nconst BarList = React.forwardRef(BarListInner) as <T>(\n  p: BarListProps<T> & { ref?: React.ForwardedRef<HTMLDivElement> },\n) => ReturnType<typeof BarListInner>\n\nexport { BarList, type BarListProps }\n",
      "path": "src/components/BarList/BarList.tsx"
    }
  ]
}
