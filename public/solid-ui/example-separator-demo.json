{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-separator-demo",
  "type": "registry:file",
  "dependencies": [
    "@kobalte/core",
    "clsx",
    "solid-js",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "example/separator-demo.tsx",
      "content": "import { Separator } from \"@/components/ui/separator\"\n\nexport default function SeparatorDemo() {\n  return (\n    <div>\n      <div class=\"space-y-1\">\n        <h4 class=\"text-sm font-medium leading-none\">Radix Primitives</h4>\n        <p class=\"text-sm text-muted-foreground\">An open-source UI component library.</p>\n      </div>\n      <Separator class=\"my-4\" />\n      <div class=\"flex h-5 items-center space-x-4 text-sm\">\n        <div>Blog</div>\n        <Separator orientation=\"vertical\" />\n        <div>Docs</div>\n        <Separator orientation=\"vertical\" />\n        <div>Source</div>\n      </div>\n    </div>\n  )\n}\n",
      "path": "src/registry/example/separator-demo.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import type { ClassValue } from \"clsx\"\nimport { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return val > max ? max : val < min ? min : val\n}\n\nexport function toggleValue<T>(array: T[], value: T): T[] {\n  return array.includes(value) ? array.filter((item) => item !== value) : [...array, value]\n}\n",
      "path": "src/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/separator.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as SeparatorPrimitive from \"@kobalte/core/separator\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype SeparatorRootProps<T extends ValidComponent = \"hr\"> =\n  SeparatorPrimitive.SeparatorRootProps<T> & { class?: string | undefined }\n\nconst Separator = <T extends ValidComponent = \"hr\">(\n  props: PolymorphicProps<T, SeparatorRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as SeparatorRootProps, [\"class\", \"orientation\"])\n  return (\n    <SeparatorPrimitive.Root\n      orientation={local.orientation ?? \"horizontal\"}\n      class={cn(\n        \"shrink-0 bg-border\",\n        local.orientation === \"vertical\" ? \"h-full w-px\" : \"h-px w-full\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport { Separator }\n",
      "path": "src/registry/ui/separator.tsx"
    }
  ]
}
