{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "DonutChart/donutchart.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-label",
    "@radix-ui/react-switch",
    "@storybook/react",
    "clsx",
    "react",
    "recharts",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "utils/chartColors.ts",
      "content": "// Tremor chartColors [v0.1.0]\n\nexport type ColorUtility = \"bg\" | \"stroke\" | \"fill\" | \"text\"\n\nexport const chartColors = {\n  blue: {\n    bg: \"bg-blue-500\",\n    stroke: \"stroke-blue-500\",\n    fill: \"fill-blue-500\",\n    text: \"text-blue-500\",\n  },\n  emerald: {\n    bg: \"bg-emerald-500\",\n    stroke: \"stroke-emerald-500\",\n    fill: \"fill-emerald-500\",\n    text: \"text-emerald-500\",\n  },\n  violet: {\n    bg: \"bg-violet-500\",\n    stroke: \"stroke-violet-500\",\n    fill: \"fill-violet-500\",\n    text: \"text-violet-500\",\n  },\n  amber: {\n    bg: \"bg-amber-500\",\n    stroke: \"stroke-amber-500\",\n    fill: \"fill-amber-500\",\n    text: \"text-amber-500\",\n  },\n  gray: {\n    bg: \"bg-gray-500\",\n    stroke: \"stroke-gray-500\",\n    fill: \"fill-gray-500\",\n    text: \"text-gray-500\",\n  },\n  cyan: {\n    bg: \"bg-cyan-500\",\n    stroke: \"stroke-cyan-500\",\n    fill: \"fill-cyan-500\",\n    text: \"text-cyan-500\",\n  },\n  pink: {\n    bg: \"bg-pink-500\",\n    stroke: \"stroke-pink-500\",\n    fill: \"fill-pink-500\",\n    text: \"text-pink-500\",\n  },\n  lime: {\n    bg: \"bg-lime-500\",\n    stroke: \"stroke-lime-500\",\n    fill: \"fill-lime-500\",\n    text: \"text-lime-500\",\n  },\n  fuchsia: {\n    bg: \"bg-fuchsia-500\",\n    stroke: \"stroke-fuchsia-500\",\n    fill: \"fill-fuchsia-500\",\n    text: \"text-fuchsia-500\",\n  },\n} as const satisfies {\n  [color: string]: {\n    [key in ColorUtility]: string\n  }\n}\n\nexport type AvailableChartColorsKeys = keyof typeof chartColors\n\nexport const AvailableChartColors: AvailableChartColorsKeys[] = Object.keys(\n  chartColors,\n) as Array<AvailableChartColorsKeys>\n\nexport const constructCategoryColors = (\n  categories: string[],\n  colors: AvailableChartColorsKeys[],\n): Map<string, AvailableChartColorsKeys> => {\n  const categoryColors = new Map<string, AvailableChartColorsKeys>()\n  categories.forEach((category, index) => {\n    categoryColors.set(category, colors[index % colors.length])\n  })\n  return categoryColors\n}\n\nexport const getColorClassName = (\n  color: AvailableChartColorsKeys,\n  type: ColorUtility,\n): string => {\n  const fallbackColor = {\n    bg: \"bg-gray-500\",\n    stroke: \"stroke-gray-500\",\n    fill: \"fill-gray-500\",\n    text: \"text-gray-500\",\n  }\n  return chartColors[color]?.[type] ?? fallbackColor[type]\n}\n",
      "path": "src/utils/chartColors.ts"
    },
    {
      "type": "registry:file",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:file",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    },
    {
      "type": "registry:component",
      "target": "components/DonutChart/donutchart.stories.tsx",
      "content": "import React from \"react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Label } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/components/Label/Label\"\nimport { Switch } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/components/Switch/Switch\"\nimport { DonutChart, TooltipProps } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/components/DonutChart/DonutChart\"\n\nconst chartdata = [\n  {\n    name: \"SolarCells\",\n    amount: 4890,\n  },\n  {\n    name: \"Glass\",\n    amount: 2103,\n  },\n  {\n    name: \"JunctionBox\",\n    amount: 2050,\n  },\n  {\n    name: \"Adhesive\",\n    amount: 1300,\n  },\n  {\n    name: \"BackSheet\",\n    amount: 1100,\n  },\n  {\n    name: \"Frame\",\n    amount: 700,\n  },\n  {\n    name: \"Encapsulant\",\n    amount: 200,\n  },\n]\n\nconst meta: Meta<typeof DonutChart> = {\n  title: \"visualization/DonutChart\",\n  component: DonutChart,\n  args: { category: \"name\", value: \"amount\", data: chartdata },\n}\n\nexport default meta\ntype Story = StoryObj<typeof DonutChart>\n\nexport const Default: Story = {\n  render: () => (\n    <DonutChart\n      data-testid=\"donut-chart\"\n      category=\"name\"\n      value=\"amount\"\n      data={chartdata}\n    />\n  ),\n}\n\nexport const ValueFormatter: Story = {\n  args: { showLabel: true, valueFormatter: (v) => `${v} units` },\n}\n\nexport const CustomLabel: Story = {\n  args: { showLabel: true, label: \"Custom Label\" },\n}\n\nexport const LabelDisabled: Story = {\n  args: {\n    label: \"Custom Label\",\n    showLabel: false,\n  },\n}\n\nexport const OtherColors: Story = {\n  args: { colors: [\"blue\", \"amber\", \"pink\", \"emerald\", \"violet\", \"cyan\"] },\n}\n\nexport const MoreDatapointsThanColors: Story = {\n  args: {\n    data: [\n      // extra long data array\n      ...chartdata,\n      ...chartdata,\n    ],\n  },\n}\n\nexport const LongValues: Story = {\n  args: {\n    data: chartdata.map((dataPoint) => ({\n      ...dataPoint,\n      amount: dataPoint.amount * 10000000,\n    })),\n  },\n}\n\nexport const VariantPie: Story = {\n  args: { variant: \"pie\" },\n}\n\nexport const WithOnValueChange: Story = {\n  args: {\n    onValueChange: console.log,\n  },\n}\n\nexport const OnValueChangePie: Story = {\n  args: {\n    variant: \"pie\",\n    onValueChange: console.log,\n  },\n}\n\nexport const WithTooltipCallback: Story = {\n  render: () => {\n    const [callback, setCallBack] = React.useState<TooltipProps | null>(null)\n    const [checked, setChecked] = React.useState(true)\n    return (\n      <>\n        <div className=\"flex items-center gap-3\">\n          <Label htmlFor=\"a\">showTooltip</Label>\n          <Switch id=\"a\" checked={checked} onCheckedChange={setChecked} />\n        </div>\n\n        <DonutChart\n          data={chartdata}\n          category=\"name\"\n          value=\"amount\"\n          tooltipCallback={(tooltipContent) => setCallBack(tooltipContent)}\n          showTooltip={checked}\n        />\n        <pre>{JSON.stringify(callback, null, 2)}</pre>\n      </>\n    )\n  },\n}\n\nexport const CustomTooltip: Story = {\n  args: {\n    category: \"name\",\n    value: \"amount\",\n    customTooltip: (props: TooltipProps) => {\n      const { payload, active } = props\n      if (!active || !payload || payload.length === 0) return null\n      return (\n        <div className=\"w-fit rounded-md border bg-white p-2 text-sm shadow-sm\">\n          <div className=\"flex flex-1 space-x-2.5\">\n            <div\n              className={`flex w-1.5 flex-col bg-${payload[0].color}-500 rounded`}\n            />\n            <div className=\"w-full\">\n              <div className=\"flex items-center justify-between space-x-2\">\n                <p className=\"whitespace-nowrap text-right text-gray-700\">\n                  {payload[0].category}\n                </p>\n                <p className=\"whitespace-nowrap text-right font-medium text-gray-900\">\n                  {payload[0].value}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    },\n  },\n}\n",
      "path": "src/components/DonutChart/donutchart.stories.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/DonutChart/DonutChart.tsx",
      "content": "// Tremor DonutChart [v0.0.1]\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\"use client\"\n\nimport React from \"react\"\nimport {\n  Pie,\n  PieChart as ReChartsDonutChart,\n  ResponsiveContainer,\n  Sector,\n  Tooltip,\n} from \"recharts\"\n\nimport {\n  AvailableChartColors,\n  AvailableChartColorsKeys,\n  constructCategoryColors,\n  getColorClassName,\n} from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/chartColors\"\nimport { cx } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx\"\n\nconst sumNumericArray = (arr: number[]): number =>\n  arr.reduce((sum, num) => sum + num, 0)\n\nconst parseData = (\n  data: Record<string, any>[],\n  categoryColors: Map<string, AvailableChartColorsKeys>,\n  category: string,\n) =>\n  data.map((dataPoint) => ({\n    ...dataPoint,\n    color: categoryColors.get(dataPoint[category]) || AvailableChartColors[0],\n    className: getColorClassName(\n      categoryColors.get(dataPoint[category]) || AvailableChartColors[0],\n      \"fill\",\n    ),\n  }))\n\nconst calculateDefaultLabel = (data: any[], valueKey: string): number =>\n  sumNumericArray(data.map((dataPoint) => dataPoint[valueKey]))\n\nconst parseLabelInput = (\n  labelInput: string | undefined,\n  valueFormatter: (value: number) => string,\n  data: any[],\n  valueKey: string,\n): string => labelInput || valueFormatter(calculateDefaultLabel(data, valueKey))\n\n//#region Tooltip\n\ntype TooltipProps = Pick<ChartTooltipProps, \"active\" | \"payload\">\n\ntype PayloadItem = {\n  category: string\n  value: number\n  color: AvailableChartColorsKeys\n}\n\ninterface ChartTooltipProps {\n  active: boolean | undefined\n  payload: PayloadItem[]\n  valueFormatter: (value: number) => string\n}\n\nconst ChartTooltip = ({\n  active,\n  payload,\n  valueFormatter,\n}: ChartTooltipProps) => {\n  if (active && payload && payload.length) {\n    return (\n      <div\n        className={cx(\n          // base\n          \"rounded-md border text-sm shadow-md\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n        )}\n      >\n        <div className={cx(\"space-y-1 px-4 py-2\")}>\n          {payload.map(({ value, category, color }, index) => (\n            <div\n              key={`id-${index}`}\n              className=\"flex items-center justify-between space-x-8\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <span\n                  aria-hidden=\"true\"\n                  className={cx(\n                    \"size-2 shrink-0 rounded-full\",\n                    getColorClassName(color, \"bg\"),\n                  )}\n                />\n                <p\n                  className={cx(\n                    // base\n                    \"whitespace-nowrap text-right\",\n                    // text color\n                    \"text-gray-700 dark:text-gray-300\",\n                  )}\n                >\n                  {category}\n                </p>\n              </div>\n              <p\n                className={cx(\n                  // base\n                  \"whitespace-nowrap text-right font-medium tabular-nums\",\n                  // text color\n                  \"text-gray-900 dark:text-gray-50\",\n                )}\n              >\n                {valueFormatter(value)}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n  return null\n}\n\nconst renderInactiveShape = (props: any) => {\n  const { cx, cy, innerRadius, outerRadius, startAngle, endAngle, className } =\n    props\n\n  return (\n    <Sector\n      cx={cx}\n      cy={cy}\n      innerRadius={innerRadius}\n      outerRadius={outerRadius}\n      startAngle={startAngle}\n      endAngle={endAngle}\n      className={className}\n      fill=\"\"\n      opacity={0.3}\n      style={{ outline: \"none\" }}\n    />\n  )\n}\n\ntype DonutChartVariant = \"donut\" | \"pie\"\n\ntype BaseEventProps = {\n  eventType: \"sector\"\n  categoryClicked: string\n  [key: string]: number | string\n}\n\ntype DonutChartEventProps = BaseEventProps | null | undefined\n\ninterface DonutChartProps extends React.HTMLAttributes<HTMLDivElement> {\n  data: Record<string, any>[]\n  category: string\n  value: string\n  colors?: AvailableChartColorsKeys[]\n  variant?: DonutChartVariant\n  valueFormatter?: (value: number) => string\n  label?: string\n  showLabel?: boolean\n  showTooltip?: boolean\n  onValueChange?: (value: DonutChartEventProps) => void\n  tooltipCallback?: (tooltipCallbackContent: TooltipProps) => void\n  customTooltip?: React.ComponentType<TooltipProps>\n}\n\nconst DonutChart = React.forwardRef<HTMLDivElement, DonutChartProps>(\n  (\n    {\n      data = [],\n      value,\n      category,\n      colors = AvailableChartColors,\n      variant = \"donut\",\n      valueFormatter = (value: number) => value.toString(),\n      label,\n      showLabel = false,\n      showTooltip = true,\n      onValueChange,\n      tooltipCallback,\n      customTooltip,\n      className,\n      ...other\n    },\n    forwardedRef,\n  ) => {\n    const CustomTooltip = customTooltip\n    const [activeIndex, setActiveIndex] = React.useState<number | undefined>(\n      undefined,\n    )\n    const isDonut = variant === \"donut\"\n    const parsedLabelInput = parseLabelInput(label, valueFormatter, data, value)\n\n    const categories = Array.from(new Set(data.map((item) => item[category])))\n    const categoryColors = constructCategoryColors(categories, colors)\n\n    const prevActiveRef = React.useRef<boolean | undefined>(undefined)\n    const prevCategoryRef = React.useRef<string | undefined>(undefined)\n\n    const handleShapeClick = (\n      data: any,\n      index: number,\n      event: React.MouseEvent,\n    ) => {\n      event.stopPropagation()\n      if (!onValueChange) return\n\n      if (activeIndex === index) {\n        setActiveIndex(undefined)\n        onValueChange(null)\n      } else {\n        setActiveIndex(index)\n        onValueChange({\n          eventType: \"sector\",\n          categoryClicked: data.payload[category],\n          ...data.payload,\n        })\n      }\n    }\n\n    return (\n      <div\n        ref={forwardedRef}\n        className={cx(\"h-40 w-40\", className)}\n        tremor-id=\"tremor-raw\"\n        {...other}\n      >\n        <ResponsiveContainer className=\"size-full\">\n          <ReChartsDonutChart\n            onClick={\n              onValueChange && activeIndex !== undefined\n                ? () => {\n                    setActiveIndex(undefined)\n                    onValueChange(null)\n                  }\n                : undefined\n            }\n            margin={{ top: 0, left: 0, right: 0, bottom: 0 }}\n          >\n            {showLabel && isDonut && (\n              <text\n                className=\"fill-gray-700 dark:fill-gray-300\"\n                x=\"50%\"\n                y=\"50%\"\n                textAnchor=\"middle\"\n                dominantBaseline=\"middle\"\n              >\n                {parsedLabelInput}\n              </text>\n            )}\n            <Pie\n              className={cx(\n                \"stroke-white dark:stroke-gray-950 [&_.recharts-pie-sector]:outline-none\",\n                onValueChange ? \"cursor-pointer\" : \"cursor-default\",\n              )}\n              data={parseData(data, categoryColors, category)}\n              cx=\"50%\"\n              cy=\"50%\"\n              startAngle={90}\n              endAngle={-270}\n              innerRadius={isDonut ? \"75%\" : \"0%\"}\n              outerRadius=\"100%\"\n              stroke=\"\"\n              strokeLinejoin=\"round\"\n              dataKey={value}\n              nameKey={category}\n              isAnimationActive={false}\n              onClick={handleShapeClick}\n              activeIndex={activeIndex}\n              inactiveShape={renderInactiveShape}\n              style={{ outline: \"none\" }}\n            />\n            {showTooltip && (\n              <Tooltip\n                wrapperStyle={{ outline: \"none\" }}\n                isAnimationActive={false}\n                content={({ active, payload }) => {\n                  const cleanPayload = payload\n                    ? payload.map((item: any) => ({\n                        category: item.payload[category],\n                        value: item.value,\n                        color: categoryColors.get(\n                          item.payload[category],\n                        ) as AvailableChartColorsKeys,\n                      }))\n                    : []\n\n                  const payloadCategory: string = cleanPayload[0]?.category\n\n                  if (\n                    tooltipCallback &&\n                    (active !== prevActiveRef.current ||\n                      payloadCategory !== prevCategoryRef.current)\n                  ) {\n                    tooltipCallback({\n                      active,\n                      payload: cleanPayload,\n                    })\n                    prevActiveRef.current = active\n                    prevCategoryRef.current = payloadCategory\n                  }\n\n                  return showTooltip && active ? (\n                    CustomTooltip ? (\n                      <CustomTooltip active={active} payload={cleanPayload} />\n                    ) : (\n                      <ChartTooltip\n                        active={active}\n                        payload={cleanPayload}\n                        valueFormatter={valueFormatter}\n                      />\n                    )\n                  ) : null\n                }}\n              />\n            )}\n          </ReChartsDonutChart>\n        </ResponsiveContainer>\n      </div>\n    )\n  },\n)\n\nDonutChart.displayName = \"DonutChart\"\n\nexport { DonutChart, type DonutChartEventProps, type TooltipProps }\n",
      "path": "src/components/DonutChart/DonutChart.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Label/Label.tsx",
      "content": "// Tremor Label [v0.0.2]\n\nimport React from \"react\"\nimport * as LabelPrimitives from \"@radix-ui/react-label\"\n\nimport { cx } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx\"\n\ninterface LabelProps\n  extends React.ComponentPropsWithoutRef<typeof LabelPrimitives.Root> {\n  disabled?: boolean\n}\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitives.Root>,\n  LabelProps\n>(({ className, disabled, ...props }, forwardedRef) => (\n  <LabelPrimitives.Root\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-sm leading-none\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      {\n        \"text-gray-400 dark:text-gray-600\": disabled,\n      },\n      className,\n    )}\n    aria-disabled={disabled}\n    tremor-id=\"tremor-raw\"\n    {...props}\n  />\n))\n\nLabel.displayName = \"Label\"\n\nexport { Label }\n",
      "path": "src/components/Label/Label.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Switch/Switch.tsx",
      "content": "// Tremor Switch [v0.0.1]\n\nimport React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\nimport { tv, VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx\"\nimport { focusRing } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/focusRing\"\n\nconst switchVariants = tv({\n  slots: {\n    root: [\n      // base\n      \"group relative isolate inline-flex shrink-0 cursor-pointer items-center rounded-full p-0.5 shadow-inner outline-none ring-1 ring-inset transition-all\",\n      \"bg-gray-200 dark:bg-gray-950\",\n      // ring color\n      \"ring-black/5 dark:ring-gray-800\",\n      // checked\n      \"data-[state=checked]:bg-blue-500 data-[state=checked]:dark:bg-blue-500\",\n      // disabled\n      \"data-[disabled]:cursor-default\",\n      // disabled checked\n      \"data-[disabled]:data-[state=checked]:bg-blue-200\",\n      \"data-[disabled]:data-[state=checked]:ring-gray-300\",\n      // disabled checked dark\n      \"data-[disabled]:data-[state=checked]:dark:ring-gray-900\",\n      \"data-[disabled]:data-[state=checked]:dark:bg-blue-900\",\n      // disabled unchecked\n      \"data-[disabled]:data-[state=unchecked]:ring-gray-300\",\n      \"data-[disabled]:data-[state=unchecked]:bg-gray-100\",\n      // disabled unchecked dark\n      \"data-[disabled]:data-[state=unchecked]:dark:ring-gray-700\",\n      \"data-[disabled]:data-[state=unchecked]:dark:bg-gray-800\",\n      focusRing,\n    ],\n    thumb: [\n      // base\n      \"pointer-events-none relative inline-block transform appearance-none rounded-full border-none shadow-lg outline-none transition-all duration-150 ease-in-out focus:border-none focus:outline-none focus:outline-transparent\",\n      // background color\n      \"bg-white dark:bg-gray-50\",\n      // disabled\n      \"group-data-[disabled]:shadow-none\",\n      \"group-data-[disabled]:bg-gray-50 group-data-[disabled]:dark:bg-gray-500\",\n    ],\n  },\n  variants: {\n    size: {\n      default: {\n        root: \"h-5 w-9\",\n        thumb:\n          \"h-4 w-4 data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\",\n      },\n      small: {\n        root: \"h-4 w-7\",\n        thumb:\n          \"h-3 w-3 data-[state=checked]:translate-x-3 data-[state=unchecked]:translate-x-0\",\n      },\n    },\n  },\n  defaultVariants: {\n    size: \"default\",\n  },\n})\n\ninterface SwitchProps\n  extends Omit<\n      React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>,\n      \"asChild\"\n    >,\n    VariantProps<typeof switchVariants> {}\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  SwitchProps\n>(({ className, size, ...props }: SwitchProps, forwardedRef) => {\n  const { root, thumb } = switchVariants({ size })\n  return (\n    <SwitchPrimitives.Root\n      ref={forwardedRef}\n      className={cx(root(), className)}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    >\n      <SwitchPrimitives.Thumb className={cx(thumb())} />\n    </SwitchPrimitives.Root>\n  )\n})\n\nSwitch.displayName = \"Switch\"\n\nexport { Switch }\n",
      "path": "src/components/Switch/Switch.tsx"
    }
  ]
}
