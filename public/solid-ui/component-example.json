{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "component-example",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "solid-js",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/component-example.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ComponentExample: Component<ComponentProps<\"div\">> = (props) => {\n  const [, rest] = splitProps(props, [\"class\", \"children\"])\n  return (\n    <div class=\"no-mdx mt-6 rounded-lg border\">\n      <div class={cn(\"flex min-h-[350px] items-center justify-center p-10\", props.class)} {...rest}>\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nexport { ComponentExample }\n",
      "path": "src/components/component-example.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import type { ClassValue } from \"clsx\"\nimport { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return val > max ? max : val < min ? min : val\n}\n\nexport function toggleValue<T>(array: T[], value: T): T[] {\n  return array.includes(value) ? array.filter((item) => item !== value) : [...array, value]\n}\n",
      "path": "src/lib/utils.ts"
    }
  ]
}
