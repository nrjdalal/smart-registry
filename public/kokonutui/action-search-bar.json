{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "action-search-bar",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/action-search-bar.tsx",
      "content": "\"use client\";\n\n/**\n * @author: @kokonutui\n * @description: A modern search bar component with action buttons and suggestions\n * @version: 1.0.0\n * @date: 2025-06-26\n * @license: MIT\n * @website: https://kokonutui.com\n * @github: https://github.com/kokonut-labs/kokonutui\n */\n\nimport { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport {\n    Search,\n    Send,\n    BarChart2,\n    Video,\n    PlaneTakeoff,\n    AudioLines,\n    LayoutGrid,\n} from \"lucide-react\";\nimport useDebounce from \"@/hooks/use-debounce\";\n\ninterface Action {\n    id: string;\n    label: string;\n    icon: React.ReactNode;\n    description?: string;\n    short?: string;\n    end?: string;\n}\n\ninterface SearchResult {\n    actions: Action[];\n}\n\nconst ANIMATION_VARIANTS = {\n    container: {\n        hidden: { opacity: 0, height: 0 },\n        show: {\n            opacity: 1,\n            height: \"auto\",\n            transition: {\n                height: { duration: 0.4 },\n                staggerChildren: 0.1,\n            },\n        },\n        exit: {\n            opacity: 0,\n            height: 0,\n            transition: {\n                height: { duration: 0.3 },\n                opacity: { duration: 0.2 },\n            },\n        },\n    },\n    item: {\n        hidden: { opacity: 0, y: 20 },\n        show: {\n            opacity: 1,\n            y: 0,\n            transition: { duration: 0.3 },\n        },\n        exit: {\n            opacity: 0,\n            y: -10,\n            transition: { duration: 0.2 },\n        },\n    },\n} as const;\n\nconst allActionsSample = [\n    {\n        id: \"1\",\n        label: \"Book tickets\",\n        icon: <PlaneTakeoff className=\"h-4 w-4 text-blue-500\" />,\n        description: \"Operator\",\n        short: \"⌘K\",\n        end: \"Agent\",\n    },\n    {\n        id: \"2\",\n        label: \"Summarize\",\n        icon: <BarChart2 className=\"h-4 w-4 text-orange-500\" />,\n        description: \"gpt-5\",\n        short: \"⌘cmd+p\",\n        end: \"Command\",\n    },\n    {\n        id: \"3\",\n        label: \"Screen Studio\",\n        icon: <Video className=\"h-4 w-4 text-purple-500\" />,\n        description: \"Claude 4.1\",\n        short: \"\",\n        end: \"Application\",\n    },\n    {\n        id: \"4\",\n        label: \"Talk to Jarvis\",\n        icon: <AudioLines className=\"h-4 w-4 text-green-500\" />,\n        description: \"gpt-5 voice\",\n        short: \"\",\n        end: \"Active\",\n    },\n    {\n        id: \"5\",\n        label: \"Kokonut UI - Pro\",\n        icon: <LayoutGrid className=\"h-4 w-4 text-blue-500\" />,\n        description: \"Components\",\n        short: \"\",\n        end: \"Link\",\n    },\n];\n\nfunction ActionSearchBar({\n    actions = allActionsSample,\n    defaultOpen = false,\n}: {\n    actions?: Action[];\n    defaultOpen?: boolean;\n}) {\n    const [query, setQuery] = useState(\"\");\n    const [result, setResult] = useState<SearchResult | null>(null);\n    const [isFocused, setIsFocused] = useState(defaultOpen);\n    const [isTyping, setIsTyping] = useState(false);\n    const [selectedAction, setSelectedAction] = useState<Action | null>(null);\n    const [activeIndex, setActiveIndex] = useState(-1);\n    const debouncedQuery = useDebounce(query, 200);\n\n    const filteredActions = useMemo(() => {\n        if (!debouncedQuery) return actions;\n\n        const normalizedQuery = debouncedQuery.toLowerCase().trim();\n        return actions.filter((action) => {\n            const searchableText =\n                `${action.label} ${action.description || \"\"}`.toLowerCase();\n            return searchableText.includes(normalizedQuery);\n        });\n    }, [debouncedQuery, actions]);\n\n    useEffect(() => {\n        if (!isFocused) {\n            setResult(null);\n            setActiveIndex(-1);\n            return;\n        }\n\n        setResult({ actions: filteredActions });\n        setActiveIndex(-1);\n    }, [filteredActions, isFocused]);\n\n    const handleInputChange = useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            setQuery(e.target.value);\n            setIsTyping(true);\n            setActiveIndex(-1);\n        },\n        []\n    );\n\n    const handleKeyDown = useCallback(\n        (e: React.KeyboardEvent<HTMLInputElement>) => {\n            if (!result?.actions.length) return;\n\n            switch (e.key) {\n                case \"ArrowDown\":\n                    e.preventDefault();\n                    setActiveIndex((prev) =>\n                        prev < result.actions.length - 1 ? prev + 1 : 0\n                    );\n                    break;\n                case \"ArrowUp\":\n                    e.preventDefault();\n                    setActiveIndex((prev) =>\n                        prev > 0 ? prev - 1 : result.actions.length - 1\n                    );\n                    break;\n                case \"Enter\":\n                    e.preventDefault();\n                    if (activeIndex >= 0 && result.actions[activeIndex]) {\n                        setSelectedAction(result.actions[activeIndex]);\n                    }\n                    break;\n                case \"Escape\":\n                    setIsFocused(false);\n                    setActiveIndex(-1);\n                    break;\n            }\n        },\n        [result?.actions, activeIndex]\n    );\n\n    const handleActionClick = useCallback((action: Action) => {\n        setSelectedAction(action);\n    }, []);\n\n    const handleFocus = useCallback(() => {\n        setSelectedAction(null);\n        setIsFocused(true);\n        setActiveIndex(-1);\n    }, []);\n\n    const handleBlur = useCallback(() => {\n        setTimeout(() => {\n            setIsFocused(false);\n            setActiveIndex(-1);\n        }, 200);\n    }, []);\n\n    return (\n        <div className=\"w-full max-w-xl mx-auto\">\n            <div className=\"relative flex flex-col justify-start items-center min-h-[300px]\">\n                <div className=\"w-full max-w-sm sticky top-0 bg-background z-10 pt-4 pb-1\">\n                    <label\n                        className=\"text-xs font-medium text-gray-500 dark:text-gray-400 mb-1 block\"\n                        htmlFor=\"search\"\n                    >\n                        Search Commands\n                    </label>\n                    <div className=\"relative\">\n                        <Input\n                            type=\"text\"\n                            placeholder=\"What's up?\"\n                            value={query}\n                            onChange={handleInputChange}\n                            onFocus={handleFocus}\n                            onBlur={handleBlur}\n                            onKeyDown={handleKeyDown}\n                            role=\"combobox\"\n                            aria-expanded={isFocused && !!result}\n                            aria-autocomplete=\"list\"\n                            aria-activedescendant={\n                                activeIndex >= 0\n                                    ? `action-${result?.actions[activeIndex]?.id}`\n                                    : undefined\n                            }\n                            id=\"search\"\n                            autoComplete=\"off\"\n                            className=\"pl-3 pr-9 py-1.5 h-9 text-sm rounded-lg focus-visible:ring-offset-0\"\n                        />\n                        <div className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4\">\n                            <AnimatePresence mode=\"popLayout\">\n                                {query.length > 0 ? (\n                                    <motion.div\n                                        key=\"send\"\n                                        initial={{ y: -20, opacity: 0 }}\n                                        animate={{ y: 0, opacity: 1 }}\n                                        exit={{ y: 20, opacity: 0 }}\n                                        transition={{ duration: 0.2 }}\n                                    >\n                                        <Send className=\"w-4 h-4 text-gray-400 dark:text-gray-500\" />\n                                    </motion.div>\n                                ) : (\n                                    <motion.div\n                                        key=\"search\"\n                                        initial={{ y: -20, opacity: 0 }}\n                                        animate={{ y: 0, opacity: 1 }}\n                                        exit={{ y: 20, opacity: 0 }}\n                                        transition={{ duration: 0.2 }}\n                                    >\n                                        <Search className=\"w-4 h-4 text-gray-400 dark:text-gray-500\" />\n                                    </motion.div>\n                                )}\n                            </AnimatePresence>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"w-full max-w-sm\">\n                    <AnimatePresence>\n                        {isFocused && result && !selectedAction && (\n                            <motion.div\n                                className=\"w-full border rounded-md shadow-xs overflow-hidden dark:border-gray-800 bg-white dark:bg-black mt-1\"\n                                variants={ANIMATION_VARIANTS.container}\n                                role=\"listbox\"\n                                aria-label=\"Search results\"\n                                initial=\"hidden\"\n                                animate=\"show\"\n                                exit=\"exit\"\n                            >\n                                <motion.ul role=\"none\">\n                                    {result.actions.map((action) => (\n                                        <motion.li\n                                            key={action.id}\n                                            id={`action-${action.id}`}\n                                            className={`px-3 py-2 flex items-center justify-between hover:bg-gray-200 dark:hover:bg-zinc-900 cursor-pointer rounded-md ${\n                                                activeIndex ===\n                                                result.actions.indexOf(action)\n                                                    ? \"bg-gray-100 dark:bg-zinc-800\"\n                                                    : \"\"\n                                            }`}\n                                            variants={ANIMATION_VARIANTS.item}\n                                            layout\n                                            onClick={() =>\n                                                handleActionClick(action)\n                                            }\n                                            role=\"option\"\n                                            aria-selected={\n                                                activeIndex ===\n                                                result.actions.indexOf(action)\n                                            }\n                                        >\n                                            <div className=\"flex items-center gap-2 justify-between\">\n                                                <div className=\"flex items-center gap-2\">\n                                                    <span\n                                                        className=\"text-gray-500\"\n                                                        aria-hidden=\"true\"\n                                                    >\n                                                        {action.icon}\n                                                    </span>\n                                                    <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                                                        {action.label}\n                                                    </span>\n                                                    {action.description && (\n                                                        <span className=\"text-xs text-gray-400\">\n                                                            {action.description}\n                                                        </span>\n                                                    )}\n                                                </div>\n                                            </div>\n                                            <div className=\"flex items-center gap-2\">\n                                                {action.short && (\n                                                    <span\n                                                        className=\"text-xs text-gray-400\"\n                                                        aria-label={`Keyboard shortcut: ${action.short}`}\n                                                    >\n                                                        {action.short}\n                                                    </span>\n                                                )}\n                                                {action.end && (\n                                                    <span className=\"text-xs text-gray-400 text-right\">\n                                                        {action.end}\n                                                    </span>\n                                                )}\n                                            </div>\n                                        </motion.li>\n                                    ))}\n                                </motion.ul>\n                                <div className=\"mt-2 px-3 py-2 border-t border-gray-100 dark:border-gray-800\">\n                                    <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                                        <span>Press ⌘K to open commands</span>\n                                        <span>ESC to cancel</span>\n                                    </div>\n                                </div>\n                            </motion.div>\n                        )}\n                    </AnimatePresence>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ActionSearchBar;\n",
      "path": "components/kokonutui/action-search-bar.tsx"
    },
    {
      "type": "registry:hook",
      "target": "hooks/use-debounce.ts",
      "content": "import { useEffect, useState } from \"react\";\n\nfunction useDebounce<T>(value: T, delay: number = 500): T {\n    const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => {\n            clearTimeout(timer);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n}\n\nexport default useDebounce;\n",
      "path": "hooks/use-debounce.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-zinc-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-zinc-950 placeholder:text-zinc-500 focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:file:text-zinc-50 dark:placeholder:text-zinc-400 dark:focus-visible:ring-zinc-300\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "path": "components/ui/input.tsx"
    }
  ]
}
