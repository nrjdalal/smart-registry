{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Accordion/accordion.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-accordion",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Accordion/Accordion.tsx",
      "content": "// Tremor Accordion [v0.0.1]\n\nimport React from \"react\"\nimport * as AccordionPrimitives from \"@radix-ui/react-accordion\"\nimport { RiAddLine } from \"@remixicon/react\"\n\nimport { cx } from \"@/utils/cx\"\n\nconst Accordion = AccordionPrimitives.Root\n\nAccordion.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitives.Trigger>\n>(({ className, children, ...props }, forwardedRef) => (\n  <AccordionPrimitives.Header className=\"flex\">\n    <AccordionPrimitives.Trigger\n      className={cx(\n        // base\n        \"group flex flex-1 cursor-pointer items-center justify-between py-3 text-left text-sm font-medium leading-none\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // disabled\n        \"data-[disabled]:cursor-default data-[disabled]:text-gray-400 dark:data-[disabled]:text-gray-600\",\n        //focus\n        \"focus-visible:z-10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-inset focus-visible:ring-blue-500\",\n        className,\n      )}\n      {...props}\n      ref={forwardedRef}\n    >\n      {children}\n      <RiAddLine\n        className={cx(\n          // base\n          \"size-5 shrink-0 transition-transform duration-150 ease-[cubic-bezier(0.87,_0,_0.13,_1)] group-data-[state=open]:-rotate-45\",\n          // text color\n          \"text-gray-400 dark:text-gray-600\",\n          // disabled\n          \"group-data-[disabled]:text-gray-300 group-data-[disabled]:dark:text-gray-700\",\n        )}\n        aria-hidden=\"true\"\n        focusable=\"false\"\n      />\n    </AccordionPrimitives.Trigger>\n  </AccordionPrimitives.Header>\n))\n\nAccordionTrigger.displayName = \"AccordionTrigger\"\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitives.Content>\n>(({ className, children, ...props }, forwardedRef) => (\n  <AccordionPrimitives.Content\n    ref={forwardedRef}\n    className={cx(\n      \"transform-gpu data-[state=closed]:animate-accordionClose data-[state=open]:animate-accordionOpen\",\n    )}\n    {...props}\n  >\n    <div\n      className={cx(\n        // base\n        \"overflow-hidden pb-4 text-sm\",\n        // text color\n        \"text-gray-700 dark:text-gray-200\",\n        className,\n      )}\n    >\n      {children}\n    </div>\n  </AccordionPrimitives.Content>\n))\n\nAccordionContent.displayName = \"AccordionContent\"\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitives.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitives.Item>\n>(({ className, ...props }, forwardedRef) => (\n  <AccordionPrimitives.Item\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"overflow-hidden border-b first:mt-0\",\n      // border color\n      \"border-gray-200 dark:border-gray-800\",\n      className,\n    )}\n    tremor-id=\"tremor-raw\"\n    {...props}\n  />\n))\n\nAccordionItem.displayName = \"AccordionItem\"\n\nexport { Accordion, AccordionContent, AccordionItem, AccordionTrigger }\n",
      "path": "src/components/Accordion/Accordion.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Accordion/accordion.stories.tsx",
      "content": "import React from \"react\"\nimport {\n  RiAddCircleFill,\n  RiArrowLeftRightLine,\n  RiCheckboxMultipleFill,\n  RiCoupon3Fill,\n} from \"@remixicon/react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Badge } from \"@/components/Badge/Badge\"\nimport { Button } from \"@/components/Button/Button\"\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/Accordion/Accordion\"\n\nconst meta: Meta<typeof Accordion> = {\n  title: \"ui/Accordion\",\n  component: Accordion,\n}\n\nexport default meta\ntype Story = StoryObj<typeof Accordion>\n\nexport const Default: Story = {\n  render: () => (\n    <Accordion type=\"single\" className=\"mx-auto mt-3 max-w-sm\" collapsible>\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger>In the app</AccordionTrigger>\n        <AccordionContent>\n          <ol className=\"flex flex-col gap-2\">\n            <li>\n              <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                Step 1:\n              </span>{\" \"}\n              Tap the Inbox icon and then tap Add receipts.\n            </li>\n            <li>\n              <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                Step 2:\n              </span>{\" \"}\n              Tap the + symbol to attach a photo or PDF of the receipt for our\n              system to match.\n            </li>\n          </ol>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-2\">\n        <AccordionTrigger>Via browser extension</AccordionTrigger>\n        <AccordionContent>\n          <ol className=\"flex flex-col gap-2\">\n            <li>\n              <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                Step 1:\n              </span>{\" \"}\n              <span className=\"underline\">Download</span> the browser extension\n              for Chrome or Safari. (Firefox support is coming soon.)\n            </li>\n            <li>\n              <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                Step 2:\n              </span>{\" \"}\n              Click the extension icon at the top of your browser. Under the\n              Receipts tab, upload an image or click Screenshot current tab to\n              automatically attach the receipt to the expense.\n            </li>\n          </ol>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-3\" disabled>\n        <AccordionTrigger>Via email forwarding</AccordionTrigger>\n        <AccordionContent>\n          Yes! You can animate the Accordion with CSS or JavaScript.\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  ),\n}\n\nexport const WithIcons: Story = {\n  render: () => (\n    <div className=\"mx-auto max-w-lg\">\n      <h1 className=\"text-md font-semibold text-gray-900 dark:text-gray-50\">\n        Managing Your Booking Online\n      </h1>\n      <Accordion type=\"multiple\" className=\"mt-3\">\n        <AccordionItem value=\"item-1\">\n          <AccordionTrigger>\n            <span className=\"flex items-center gap-2\">\n              <RiCoupon3Fill className=\"size-4 text-blue-500\" />\n              Access Your Booking\n            </span>\n          </AccordionTrigger>\n          <AccordionContent>\n            <p>\n              Simply navigate to the \"My Trips\" section on our website and input\n              your booking reference and last name to view your itinerary\n              details.\n            </p>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-2\">\n          <AccordionTrigger>\n            <span className=\"flex items-center gap-2\">\n              <RiArrowLeftRightLine className=\"size-4 text-blue-500\" />\n              Change Flights\n            </span>\n          </AccordionTrigger>\n          <AccordionContent>\n            <ol className=\"flex flex-col gap-2\">\n              <li>\n                <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                  Step 1:\n                </span>{\" \"}\n                Within your booking details, select \"Change Flights.\"\n              </li>\n              <li>\n                <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                  Step 2:\n                </span>{\" \"}\n                Follow the prompts to select new flight options and confirm the\n                changes.\n              </li>\n              <li>\n                <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                  Step 3:\n                </span>{\" \"}\n                Review your new flight details and any fare differences.\n              </li>\n              <li>\n                <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                  Step 4:\n                </span>{\" \"}\n                Complete the change and receive your updated itinerary via\n                email.\n              </li>\n            </ol>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-3\">\n          <AccordionTrigger>\n            <span className=\"flex items-center gap-2\">\n              <RiAddCircleFill className=\"size-4 text-blue-500\" />\n              Add Special Requests\n            </span>\n          </AccordionTrigger>\n          <AccordionContent>\n            <p>\n              Look for the \"Special Requests\" option within your booking to\n              specify any meal preferences, seating arrangements, or assistance\n              services you may require during your flight.\n            </p>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-4\">\n          <AccordionTrigger>\n            <span className=\"flex items-center gap-2\">\n              <RiCheckboxMultipleFill className=\"size-4 text-blue-500\" />\n              Check-In Online\n            </span>\n          </AccordionTrigger>\n          <AccordionContent>\n            <ol className=\"flex flex-col gap-2\">\n              <li>\n                <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                  Step 1:\n                </span>{\" \"}\n                Starting 48 hours before your flight, access the \"Check-In\"\n                option.\n              </li>\n              <li>\n                <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                  Step 2:\n                </span>{\" \"}\n                Confirm your details and select your seats to complete the\n                online check-in process.\n              </li>\n            </ol>\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    </div>\n  ),\n}\n\nexport const OneItem: Story = {\n  render: () => (\n    <Accordion type=\"single\" collapsible>\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger>Can you render only one item?</AccordionTrigger>\n        <AccordionContent>Yes, absolutely!</AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  ),\n}\n\nexport const DefaultValueAndCollapsibleDisabled: Story = {\n  render: () => (\n    <div className=\"mx-auto max-w-lg\">\n      <h1 className=\"text-md font-semibold text-gray-900 dark:text-gray-50\">\n        Managing Your Booking Online\n      </h1>\n      <Accordion\n        type=\"single\"\n        defaultValue=\"item-1\"\n        className=\"mt-3\"\n        collapsible\n      >\n        <AccordionItem value=\"item-1\">\n          <AccordionTrigger>\n            <span className=\"flex items-center gap-2\">\n              <RiCoupon3Fill className=\"group-data-[disabled]:texdark:t-blue-200 group-data-[disabled]:t8xt-blue-200 size-4 text-blue-500\" />\n              Access Your Booking\n            </span>\n          </AccordionTrigger>\n          <AccordionContent>\n            <p>\n              Simply navigate to the \"My Trips\" section on our website and input\n              your booking reference and last name to view your itinerary\n              details.\n            </p>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-2\">\n          <AccordionTrigger>\n            <span className=\"flex items-center gap-2\">\n              <RiArrowLeftRightLine className=\"size-4 text-blue-500 group-data-[disabled]:text-blue-200 dark:group-data-[disabled]:text-blue-900\" />\n              Change Flights\n            </span>\n          </AccordionTrigger>\n          <AccordionContent>\n            <ol className=\"flex flex-col gap-2\">\n              <li>\n                <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                  Step 1:\n                </span>{\" \"}\n                Within your booking details, select \"Change Flights.\"\n              </li>\n              <li>\n                <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                  Step 2:\n                </span>{\" \"}\n                Follow the prompts to select new flight options and confirm the\n                changes.\n              </li>\n              <li>\n                <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                  Step 3:\n                </span>{\" \"}\n                Review your new flight details and any fare differences.\n              </li>\n              <li>\n                <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                  Step 4:\n                </span>{\" \"}\n                Complete the change and receive your updated itinerary via\n                email.\n              </li>\n            </ol>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-3\" disabled>\n          <AccordionTrigger>\n            <span className=\"flex items-center gap-2\">\n              <RiAddCircleFill className=\"size-4 text-blue-500 group-data-[disabled]:text-blue-200 dark:group-data-[disabled]:text-blue-900\" />\n              Add Special Requests\n            </span>\n          </AccordionTrigger>\n          <AccordionContent>\n            <p>\n              Look for the \"Special Requests\" option within your booking to\n              specify any meal preferences, seating arrangements, or assistance\n              services you may require during your flight.\n            </p>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-4\">\n          <AccordionTrigger>\n            <span className=\"flex items-center gap-2\">\n              <RiCheckboxMultipleFill className=\"size-4 text-blue-500 group-data-[disabled]:text-blue-200 dark:group-data-[disabled]:text-blue-900\" />\n              Check-In Online\n            </span>\n          </AccordionTrigger>\n          <AccordionContent>\n            <ol className=\"flex flex-col gap-2\">\n              <li>\n                <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                  Step 1:\n                </span>{\" \"}\n                Starting 48 hours before your flight, access the \"Check-In\"\n                option.\n              </li>\n              <li>\n                <span className=\"font-semibold text-gray-900 dark:text-gray-50\">\n                  Step 2:\n                </span>{\" \"}\n                Confirm your details and select your seats to complete the\n                online check-in process.\n              </li>\n            </ol>\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    </div>\n  ),\n}\n\nexport const TypeMultiple: Story = {\n  render: () => (\n    <Accordion type=\"multiple\">\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger>\n          Does NASA provide public access to space data?\n        </AccordionTrigger>\n        <AccordionContent>\n          Absolutely. NASA offers open access to a wealth of space data,\n          including satellite images, mission information, and scientific\n          discoveries through various platforms and APIs, encouraging public\n          engagement and educational use.\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value=\"item-2\">\n        <AccordionTrigger>\n          Are NASA's educational materials available for all age groups?\n        </AccordionTrigger>\n        <AccordionContent>\n          Yes. NASA provides a wide range of educational materials tailored for\n          different age groups, from K-12 to higher education. These resources\n          include lesson plans, interactive activities, and full courses, all\n          designed to inspire and educate the next generation of explorers.\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value=\"item-3\">\n        <AccordionTrigger>\n          Can the public participate in NASA missions?\n        </AccordionTrigger>\n        <AccordionContent>\n          Yes! Through various citizen science projects and initiatives, the\n          public can contribute to NASA missions and scientific research. These\n          opportunities allow individuals to analyze data, contribute to\n          problem-solving, and even participate in the discovery process.\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  ),\n}\n\nexport const DisabledAccordion: Story = {\n  render: () => (\n    <Accordion type=\"single\" collapsible disabled>\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger>\n          Did FutureTravel Corp. offer eco-friendly travel options?\n        </AccordionTrigger>\n        <AccordionContent>\n          Yes. FutureTravel Corp. was dedicated to sustainable travel, offering\n          a range of eco-friendly travel solutions including solar-powered\n          flights and zero-emission accommodations, setting a benchmark for\n          responsible tourism.\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value=\"item-2\">\n        <AccordionTrigger>\n          Was FutureTravel Corp. technology-driven?\n        </AccordionTrigger>\n        <AccordionContent>\n          Absolutely. The company was at the forefront of travel technology,\n          leveraging AI and machine learning to personalize travel experiences,\n          optimize routes, and ensure the highest levels of efficiency and\n          customer satisfaction.\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  ),\n}\n\nexport const DisabledAccordionItem: Story = {\n  render: () => (\n    <Accordion type=\"single\" collapsible>\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger>\n          Is it suitable for all skill levels?\n        </AccordionTrigger>\n        <AccordionContent>\n          Yes. From beginners to experts, Swiss ski resorts offer slopes and\n          facilities for every level.\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value=\"item-2\">\n        <AccordionTrigger>Are ski passes affordable?</AccordionTrigger>\n        <AccordionContent>\n          Ski passes vary, offering options for every budget, including day\n          passes and season-long access.\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value=\"item-3\" disabled>\n        <AccordionTrigger>\n          <span>\n            Is off-piste skiing available?\n            <Badge variant=\"warning\">Currently paused</Badge>\n          </span>\n        </AccordionTrigger>\n        <AccordionContent>\n          Yes! Adventurous skiers can explore extensive off-piste terrain under\n          proper safety measures.\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  ),\n}\n\nexport const Controlled: Story = {\n  render: () => {\n    const [value, setValue] = React.useState(\"\")\n\n    return (\n      <div className=\"flex flex-col gap-2\">\n        <Button\n          variant=\"secondary\"\n          className=\"w-fit\"\n          onClick={() =>\n            setValue((prevValue) => (prevValue === \"item-2\" ? \"\" : \"item-2\"))\n          } // Updated to use toggle functionality\n        >\n          {value === \"\" ? \"Open\" : \"Close\"} item number two\n        </Button>\n        <Accordion\n          type=\"single\"\n          collapsible\n          value={value}\n          onValueChange={setValue}\n        >\n          <AccordionItem value=\"item-1\">\n            <AccordionTrigger>In the app</AccordionTrigger>\n            <AccordionContent>\n              <ol className=\"flex flex-col gap-2\">\n                <li>\n                  <span className=\"font-semibold text-gray-800\">Step 1:</span>\n                  Tap the Inbox icon and then tap Add receipts.\n                </li>\n                <li>\n                  <span className=\"font-semibold text-gray-800\">Step 2:</span>\n                  Tap the + symbol to attach a photo or PDF of the receipt for\n                  our system to match.\n                </li>\n              </ol>\n            </AccordionContent>\n          </AccordionItem>\n\n          <AccordionItem value=\"item-2\">\n            <AccordionTrigger>Via browser extension</AccordionTrigger>\n            <AccordionContent>\n              <ol className=\"flex flex-col gap-2\">\n                <li>\n                  <span className=\"font-semibold text-gray-800\">Step 1:</span>\n                  <span className=\"underline\">Download</span> the browser\n                  extension for Chrome or Safari. (Firefox support is coming\n                  soon.)\n                </li>\n                <li>\n                  <span className=\"font-semibold text-gray-800\">Step 2:</span>\n                  Click the extension icon at the top of your browser. Under the\n                  Receipts tab, upload an image or click Screenshot current tab\n                  to automatically attach the receipt to the expense.\n                </li>\n              </ol>\n            </AccordionContent>\n          </AccordionItem>\n          <AccordionItem value=\"item-3\" disabled>\n            <AccordionTrigger>\n              <span>Via email forwarding</span>\n            </AccordionTrigger>\n            <AccordionContent>\n              Yes! You can animate the Accordion with CSS or JavaScript.\n            </AccordionContent>\n          </AccordionItem>\n        </Accordion>\n      </div>\n    )\n  },\n}\n",
      "path": "src/components/Accordion/accordion.stories.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Badge/Badge.tsx",
      "content": "// Tremor Badge [v0.0.1]\n\nimport React from \"react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\n\nconst badgeVariants = tv({\n  base: cx(\n    \"inline-flex items-center gap-x-1 whitespace-nowrap rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset\",\n  ),\n  variants: {\n    variant: {\n      default: [\n        \"bg-blue-50 text-blue-900 ring-blue-500/30\",\n        \"dark:bg-blue-400/10 dark:text-blue-400 dark:ring-blue-400/30\",\n      ],\n      neutral: [\n        \"bg-gray-50 text-gray-900 ring-gray-500/30\",\n        \"dark:bg-gray-400/10 dark:text-gray-400 dark:ring-gray-400/20\",\n      ],\n      success: [\n        \"bg-emerald-50 text-emerald-900 ring-emerald-600/30\",\n        \"dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-emerald-400/20\",\n      ],\n      error: [\n        \"bg-red-50 text-red-900 ring-red-600/20\",\n        \"dark:bg-red-400/10 dark:text-red-400 dark:ring-red-400/20\",\n      ],\n      warning: [\n        \"bg-yellow-50 text-yellow-900 ring-yellow-600/30\",\n        \"dark:bg-yellow-400/10 dark:text-yellow-500 dark:ring-yellow-400/20\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n})\n\ninterface BadgeProps\n  extends React.ComponentPropsWithoutRef<\"span\">,\n    VariantProps<typeof badgeVariants> {}\n\nconst Badge = React.forwardRef<HTMLSpanElement, BadgeProps>(\n  ({ className, variant, ...props }: BadgeProps, forwardedRef) => {\n    return (\n      <span\n        ref={forwardedRef}\n        className={cx(badgeVariants({ variant }), className)}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      />\n    )\n  },\n)\n\nBadge.displayName = \"Badge\"\n\nexport { Badge, badgeVariants, type BadgeProps }\n",
      "path": "src/components/Badge/Badge.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Button/Button.tsx",
      "content": "// Tremor Button [v0.2.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"disabled:dark:bg-blue-800 disabled:dark:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"disabled:dark:bg-gray-800 disabled:dark:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"disabled:dark:bg-red-950 disabled:dark:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    }
  ]
}
