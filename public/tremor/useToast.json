{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "useToast",
  "type": "registry:hook",
  "dependencies": [
    "@radix-ui/react-toast",
    "@remixicon/react",
    "clsx",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Toast/Toast.tsx",
      "content": "// Tremor Toast [v0.0.4]\n\nimport React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport {\n  RiCheckboxCircleFill,\n  RiCloseCircleFill,\n  RiErrorWarningFill,\n  RiInformationFill,\n  RiLoader2Fill,\n} from \"@remixicon/react\"\n\nimport { cx } from \"@/utils/cx\"\n\nconst ToastProvider = ToastPrimitives.Provider\nToastProvider.displayName = \"ToastProvider\"\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, forwardedRef) => (\n  <ToastPrimitives.Viewport\n    ref={forwardedRef}\n    className={cx(\n      \"fixed right-0 top-0 z-[9999] m-0 flex w-full max-w-[100vw] list-none flex-col gap-2 p-[var(--viewport-padding)] [--viewport-padding:_15px] sm:max-w-md sm:gap-4\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nToastViewport.displayName = \"ToastViewport\"\n\ninterface ActionProps {\n  label: string\n  altText: string\n  onClick: () => void | Promise<void>\n}\n\ninterface ToastProps\n  extends React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> {\n  variant?: \"info\" | \"success\" | \"warning\" | \"error\" | \"loading\"\n  title?: string\n  description?: string\n  action?: ActionProps\n  disableDismiss?: boolean\n}\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  ToastProps\n>(\n  (\n    {\n      className,\n      variant,\n      title,\n      description,\n      action,\n      disableDismiss = false,\n      ...props\n    }: ToastProps,\n    forwardedRef,\n  ) => {\n    let Icon: React.ReactNode\n\n    switch (variant) {\n      case \"success\":\n        Icon = (\n          <RiCheckboxCircleFill\n            className=\"size-5 shrink-0 text-emerald-600 dark:text-emerald-500\"\n            aria-hidden=\"true\"\n          />\n        )\n        break\n      case \"warning\":\n        Icon = (\n          <RiErrorWarningFill\n            className=\"size-5 shrink-0 text-amber-500 dark:text-amber-500\"\n            aria-hidden=\"true\"\n          />\n        )\n        break\n      case \"error\":\n        Icon = (\n          <RiCloseCircleFill\n            className=\"size-5 shrink-0 text-red-600 dark:text-red-500\"\n            aria-hidden=\"true\"\n          />\n        )\n        break\n      case \"loading\":\n        Icon = (\n          <RiLoader2Fill\n            className=\"size-5 shrink-0 animate-spin text-gray-600 dark:text-gray-500\"\n            aria-hidden=\"true\"\n          />\n        )\n        break\n      default:\n        Icon = (\n          <RiInformationFill\n            className=\"size-5 shrink-0 text-blue-500 dark:text-blue-500\"\n            aria-hidden=\"true\"\n          />\n        )\n        break\n    }\n\n    return (\n      <ToastPrimitives.Root\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"flex h-fit min-h-16 w-full overflow-hidden rounded-md border shadow-lg shadow-black/5\",\n          // background color\n          \"bg-white dark:bg-[#090E1A]\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // swipe\n          \"data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none\",\n          // transition\n          \"data-[state=open]:animate-slideLeftAndFade\",\n          \"data-[state=closed]:animate-hide\",\n          className,\n        )}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        <div\n          className={cx(\n            // base\n            \"flex flex-1 items-start gap-3 p-4\",\n            // border\n            !disableDismiss || action\n              ? \"border-r border-gray-200 dark:border-gray-800\"\n              : \"\",\n          )}\n        >\n          {Icon}\n          <div className=\"flex flex-col gap-1\">\n            {title && (\n              <ToastPrimitives.Title className=\"text-sm font-semibold text-gray-900 dark:text-gray-50\">\n                {title}\n              </ToastPrimitives.Title>\n            )}\n            {description && (\n              <ToastPrimitives.Description className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {description}\n              </ToastPrimitives.Description>\n            )}\n          </div>\n        </div>\n        <div className=\"flex flex-col\">\n          {action && (\n            <>\n              <ToastPrimitives.Action\n                altText={action.altText}\n                className={cx(\n                  // base\n                  \"flex flex-1 items-center justify-center px-6 text-sm font-semibold transition-colors\",\n                  // hover\n                  \"hover:bg-gray-50 hover:dark:bg-gray-900/30\",\n                  // text color\n                  \"text-gray-800 dark:text-gray-100\",\n                  // active\n                  \"active:bg-gray-100 active:dark:bg-gray-800\",\n                  {\n                    \"text-red-600 dark:text-red-500\": variant === \"error\",\n                  },\n                )}\n                onClick={(event) => {\n                  event.preventDefault()\n                  action.onClick()\n                }}\n                type=\"button\"\n              >\n                {action.label}\n              </ToastPrimitives.Action>\n              <div className=\"h-px w-full bg-gray-200 dark:bg-gray-800\" />\n            </>\n          )}\n          {!disableDismiss && (\n            <ToastPrimitives.Close\n              className={cx(\n                // base\n                \"flex flex-1 items-center justify-center px-6 text-sm transition-colors\",\n                // text color\n                \"text-gray-600 dark:text-gray-400\",\n                // hover\n                \"hover:bg-gray-50 hover:dark:bg-gray-900/30\",\n                // active\n                \"active:bg-gray-100\",\n                action ? \"h-1/2\" : \"h-full\",\n              )}\n              aria-label=\"Close\"\n            >\n              Close\n            </ToastPrimitives.Close>\n          )}\n        </div>\n      </ToastPrimitives.Root>\n    )\n  },\n)\nToast.displayName = \"Toast\"\n\ntype ToastActionElement = ActionProps\n\nexport {\n  Toast,\n  ToastProvider,\n  ToastViewport,\n  type ToastActionElement,\n  type ToastProps,\n}\n",
      "path": "src/components/Toast/Toast.tsx"
    },
    {
      "type": "registry:hook",
      "target": "hooks/useToast.ts",
      "content": "// Tremor useToast [v0.0.0]\n\n\"use client\"\n\nimport React from \"react\"\n\nimport type { ToastActionElement, ToastProps } from \"@/components/Toast/Toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\n// Updated with https://github.com/shadcn-ui/ui/pull/1038/files\nfunction dispatch(action: Action) {\n  if (action.type === \"ADD_TOAST\") {\n    const toastExists = memoryState.toasts.some((t) => t.id === action.toast.id)\n    if (toastExists) {\n      return\n    }\n  }\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast & { id?: string }) {\n  const id = props?.id || genId()\n\n  const update = (props: Toast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { toast, useToast }\n",
      "path": "src/hooks/useToast.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    }
  ]
}
