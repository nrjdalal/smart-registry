{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-calendar-day-view",
  "type": "registry:component",
  "dependencies": [
    "date-fns"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/event-calendar/day-view.tsx",
      "content": "\"use client\"\n\nimport React, { useMemo } from \"react\"\nimport {\n  addHours,\n  areIntervalsOverlapping,\n  differenceInMinutes,\n  eachHourOfInterval,\n  format,\n  getHours,\n  getMinutes,\n  isSameDay,\n  startOfDay,\n} from \"date-fns\"\n\nimport {\n  DraggableEvent,\n  DroppableCell,\n  EventItem,\n  isMultiDayEvent,\n  useCurrentTimeIndicator,\n  WeekCellsHeight,\n  type CalendarEvent,\n} from \"@/components/event-calendar\"\nimport {\n  EndHour,\n  StartHour,\n} from \"@/components/event-calendar/constants\"\nimport { cn } from \"@/lib/utils\"\n\ninterface DayViewProps {\n  currentDate: Date\n  events: CalendarEvent[]\n  onEventSelect: (event: CalendarEvent) => void\n  onEventCreate: (startTime: Date) => void\n}\n\ninterface PositionedEvent {\n  event: CalendarEvent\n  top: number\n  height: number\n  left: number\n  width: number\n  zIndex: number\n}\n\nexport function DayView({\n  currentDate,\n  events,\n  onEventSelect,\n  onEventCreate,\n}: DayViewProps) {\n  const hours = useMemo(() => {\n    const dayStart = startOfDay(currentDate)\n    return eachHourOfInterval({\n      start: addHours(dayStart, StartHour),\n      end: addHours(dayStart, EndHour - 1),\n    })\n  }, [currentDate])\n\n  const dayEvents = useMemo(() => {\n    return events\n      .filter((event) => {\n        const eventStart = new Date(event.start)\n        const eventEnd = new Date(event.end)\n        return (\n          isSameDay(currentDate, eventStart) ||\n          isSameDay(currentDate, eventEnd) ||\n          (currentDate > eventStart && currentDate < eventEnd)\n        )\n      })\n      .sort((a, b) => new Date(a.start).getTime() - new Date(b.start).getTime())\n  }, [currentDate, events])\n\n  // Filter all-day events\n  const allDayEvents = useMemo(() => {\n    return dayEvents.filter((event) => {\n      // Include explicitly marked all-day events or multi-day events\n      return event.allDay || isMultiDayEvent(event)\n    })\n  }, [dayEvents])\n\n  // Get only single-day time-based events\n  const timeEvents = useMemo(() => {\n    return dayEvents.filter((event) => {\n      // Exclude all-day events and multi-day events\n      return !event.allDay && !isMultiDayEvent(event)\n    })\n  }, [dayEvents])\n\n  // Process events to calculate positions\n  const positionedEvents = useMemo(() => {\n    const result: PositionedEvent[] = []\n    const dayStart = startOfDay(currentDate)\n\n    // Sort events by start time and duration\n    const sortedEvents = [...timeEvents].sort((a, b) => {\n      const aStart = new Date(a.start)\n      const bStart = new Date(b.start)\n      const aEnd = new Date(a.end)\n      const bEnd = new Date(b.end)\n\n      // First sort by start time\n      if (aStart < bStart) return -1\n      if (aStart > bStart) return 1\n\n      // If start times are equal, sort by duration (longer events first)\n      const aDuration = differenceInMinutes(aEnd, aStart)\n      const bDuration = differenceInMinutes(bEnd, bStart)\n      return bDuration - aDuration\n    })\n\n    // Track columns for overlapping events\n    const columns: { event: CalendarEvent; end: Date }[][] = []\n\n    sortedEvents.forEach((event) => {\n      const eventStart = new Date(event.start)\n      const eventEnd = new Date(event.end)\n\n      // Adjust start and end times if they're outside this day\n      const adjustedStart = isSameDay(currentDate, eventStart)\n        ? eventStart\n        : dayStart\n      const adjustedEnd = isSameDay(currentDate, eventEnd)\n        ? eventEnd\n        : addHours(dayStart, 24)\n\n      // Calculate top position and height\n      const startHour = getHours(adjustedStart) + getMinutes(adjustedStart) / 60\n      const endHour = getHours(adjustedEnd) + getMinutes(adjustedEnd) / 60\n      const top = (startHour - StartHour) * WeekCellsHeight\n      const height = (endHour - startHour) * WeekCellsHeight\n\n      // Find a column for this event\n      let columnIndex = 0\n      let placed = false\n\n      while (!placed) {\n        const col = columns[columnIndex] || []\n        if (col.length === 0) {\n          columns[columnIndex] = col\n          placed = true\n        } else {\n          const overlaps = col.some((c) =>\n            areIntervalsOverlapping(\n              { start: adjustedStart, end: adjustedEnd },\n              { start: new Date(c.event.start), end: new Date(c.event.end) }\n            )\n          )\n          if (!overlaps) {\n            placed = true\n          } else {\n            columnIndex++\n          }\n        }\n      }\n\n      // Ensure column is initialized before pushing\n      const currentColumn = columns[columnIndex] || []\n      columns[columnIndex] = currentColumn\n      currentColumn.push({ event, end: adjustedEnd })\n\n      // First column takes full width, others are indented by 10% and take 90% width\n      const width = columnIndex === 0 ? 1 : 0.9\n      const left = columnIndex === 0 ? 0 : columnIndex * 0.1\n\n      result.push({\n        event,\n        top,\n        height,\n        left,\n        width,\n        zIndex: 10 + columnIndex, // Higher columns get higher z-index\n      })\n    })\n\n    return result\n  }, [currentDate, timeEvents])\n\n  const handleEventClick = (event: CalendarEvent, e: React.MouseEvent) => {\n    e.stopPropagation()\n    onEventSelect(event)\n  }\n\n  const showAllDaySection = allDayEvents.length > 0\n  const { currentTimePosition, currentTimeVisible } = useCurrentTimeIndicator(\n    currentDate,\n    \"day\"\n  )\n\n  return (\n    <div data-slot=\"day-view\" className=\"contents\">\n      {showAllDaySection && (\n        <div className=\"border-border/70 bg-muted/50 border-t\">\n          <div className=\"grid grid-cols-[3rem_1fr] sm:grid-cols-[4rem_1fr]\">\n            <div className=\"relative\">\n              <span className=\"text-muted-foreground/70 absolute bottom-0 left-0 h-6 w-16 max-w-full pe-2 text-right text-[10px] sm:pe-4 sm:text-xs\">\n                All day\n              </span>\n            </div>\n            <div className=\"border-border/70 relative border-r p-1 last:border-r-0\">\n              {allDayEvents.map((event) => {\n                const eventStart = new Date(event.start)\n                const eventEnd = new Date(event.end)\n                const isFirstDay = isSameDay(currentDate, eventStart)\n                const isLastDay = isSameDay(currentDate, eventEnd)\n\n                return (\n                  <EventItem\n                    key={`spanning-${event.id}`}\n                    onClick={(e) => handleEventClick(event, e)}\n                    event={event}\n                    view=\"month\"\n                    isFirstDay={isFirstDay}\n                    isLastDay={isLastDay}\n                  >\n                    {/* Always show the title in day view for better usability */}\n                    <div>{event.title}</div>\n                  </EventItem>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"border-border/70 grid flex-1 grid-cols-[3rem_1fr] overflow-hidden border-t sm:grid-cols-[4rem_1fr]\">\n        <div>\n          {hours.map((hour, index) => (\n            <div\n              key={hour.toString()}\n              className=\"border-border/70 relative h-[var(--week-cells-height)] border-b last:border-b-0\"\n            >\n              {index > 0 && (\n                <span className=\"bg-background text-muted-foreground/70 absolute -top-3 left-0 flex h-6 w-16 max-w-full items-center justify-end pe-2 text-[10px] sm:pe-4 sm:text-xs\">\n                  {format(hour, \"h a\")}\n                </span>\n              )}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"relative\">\n          {/* Positioned events */}\n          {positionedEvents.map((positionedEvent) => (\n            <div\n              key={positionedEvent.event.id}\n              className=\"absolute z-10 px-0.5\"\n              style={{\n                top: `${positionedEvent.top}px`,\n                height: `${positionedEvent.height}px`,\n                left: `${positionedEvent.left * 100}%`,\n                width: `${positionedEvent.width * 100}%`,\n                zIndex: positionedEvent.zIndex,\n              }}\n            >\n              <div className=\"size-full\">\n                <DraggableEvent\n                  event={positionedEvent.event}\n                  view=\"day\"\n                  onClick={(e) => handleEventClick(positionedEvent.event, e)}\n                  showTime\n                  height={positionedEvent.height}\n                />\n              </div>\n            </div>\n          ))}\n\n          {/* Current time indicator */}\n          {currentTimeVisible && (\n            <div\n              className=\"pointer-events-none absolute right-0 left-0 z-20\"\n              style={{ top: `${currentTimePosition}%` }}\n            >\n              <div className=\"relative flex items-center\">\n                <div className=\"bg-primary absolute -left-1 h-2 w-2 rounded-full\"></div>\n                <div className=\"bg-primary h-[2px] w-full\"></div>\n              </div>\n            </div>\n          )}\n\n          {/* Time grid */}\n          {hours.map((hour) => {\n            const hourValue = getHours(hour)\n            return (\n              <div\n                key={hour.toString()}\n                className=\"border-border/70 relative h-[var(--week-cells-height)] border-b last:border-b-0\"\n              >\n                {/* Quarter-hour intervals */}\n                {[0, 1, 2, 3].map((quarter) => {\n                  const quarterHourTime = hourValue + quarter * 0.25\n                  return (\n                    <DroppableCell\n                      key={`${hour.toString()}-${quarter}`}\n                      id={`day-cell-${currentDate.toISOString()}-${quarterHourTime}`}\n                      date={currentDate}\n                      time={quarterHourTime}\n                      className={cn(\n                        \"absolute h-[calc(var(--week-cells-height)/4)] w-full\",\n                        quarter === 0 && \"top-0\",\n                        quarter === 1 &&\n                          \"top-[calc(var(--week-cells-height)/4)]\",\n                        quarter === 2 &&\n                          \"top-[calc(var(--week-cells-height)/4*2)]\",\n                        quarter === 3 &&\n                          \"top-[calc(var(--week-cells-height)/4*3)]\"\n                      )}\n                      onClick={() => {\n                        const startTime = new Date(currentDate)\n                        startTime.setHours(hourValue)\n                        startTime.setMinutes(quarter * 15)\n                        onEventCreate(startTime)\n                      }}\n                    />\n                  )\n                })}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/event-calendar/day-view.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/event-calendar/constants.ts",
      "content": "// Height of calendar events in pixels - used in month, week and day views\nexport const EventHeight = 24\n\n// Vertical gap between events in pixels - controls spacing in month view\nexport const EventGap = 4\n\n// Height of hour cells in week and day views - controls the scale of time display\nexport const WeekCellsHeight = 64\n\n// Number of days to show in the agenda view\nexport const AgendaDaysToShow = 30\n\n// Start and end hours for the week and day views\nexport const StartHour = 0\nexport const EndHour = 24\n\n// Default start and end times\nexport const DefaultStartHour = 9 // 9 AM\nexport const DefaultEndHour = 10 // 10 AM\n",
      "path": "registry/default/components/event-calendar/constants.ts"
    },
    {
      "type": "registry:component",
      "target": "components/event-calendar/index.ts",
      "content": "\"use client\"\n\n// Component exports\nexport { AgendaView } from \"./agenda-view\"\nexport { DayView } from \"./day-view\"\nexport { DraggableEvent } from \"./draggable-event\"\nexport { DroppableCell } from \"./droppable-cell\"\nexport { EventDialog } from \"./event-dialog\"\nexport { EventItem } from \"./event-item\"\nexport { EventsPopup } from \"./events-popup\"\nexport { EventCalendar } from \"./event-calendar\"\nexport { MonthView } from \"./month-view\"\nexport { WeekView } from \"./week-view\"\nexport { CalendarDndProvider, useCalendarDnd } from \"./calendar-dnd-context\"\n\n// Constants and utility exports\nexport * from \"./constants\"\nexport * from \"./utils\"\n\n// Hook exports\nexport * from \"./hooks/use-current-time-indicator\"\nexport * from \"./hooks/use-event-visibility\"\n\n// Type exports\nexport type { CalendarEvent, CalendarView, EventColor } from \"./types\"\n",
      "path": "registry/default/components/event-calendar/index.ts"
    }
  ]
}
