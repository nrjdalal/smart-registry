{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Slider/slider.spec",
  "type": "registry:component",
  "dependencies": [
    "@playwright/test"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Slider/slider.spec.ts",
      "content": "import { expect, test } from \"@playwright/test\"\n\ntest.describe(\"Slider component\", () => {\n  test(\"renders the slider\", async ({ page }) => {\n    await page.goto(\"http://localhost:6006/?path=/story/ui-slider--default\")\n    await expect(\n      page\n        .frameLocator('iframe[title=\"storybook-preview-iframe\"]')\n        .getByRole(\"slider\"),\n    ).toBeVisible()\n  })\n\n  test(\"can be dragged horizontally\", async ({ page }) => {\n    await page.goto(\"http://localhost:6006/?path=/story/ui-slider--default\")\n    const slider = page\n      .frameLocator('iframe[title=\"storybook-preview-iframe\"]')\n      .getByRole(\"slider\")\n    await expect(slider).toBeVisible()\n    const boundingBox = await slider.boundingBox()\n    if (boundingBox) {\n      await page.mouse.move(\n        boundingBox.x + boundingBox.width / 2,\n        boundingBox.y + boundingBox.height / 2,\n      )\n      await page.mouse.down()\n      await page.mouse.move(\n        boundingBox.x + boundingBox.width / 2 + 50,\n        boundingBox.y + boundingBox.height / 2,\n      )\n      await page.mouse.up()\n    }\n  })\n\n  test(\"can be dragged vertically\", async ({ page }) => {\n    await page.goto(\"http://localhost:6006/?path=/story/ui-slider--vertical\")\n    const slider = page\n      .frameLocator('iframe[title=\"storybook-preview-iframe\"]')\n      .getByRole(\"slider\")\n    await expect(slider).toBeVisible()\n    const boundingBox = await slider.boundingBox()\n    if (boundingBox) {\n      await page.mouse.move(\n        boundingBox.x + boundingBox.width / 2,\n        boundingBox.y + boundingBox.height / 2,\n      )\n      await page.mouse.down()\n      await page.mouse.move(\n        boundingBox.x + boundingBox.width / 2,\n        boundingBox.y + boundingBox.height / 2 + 50,\n      )\n      await page.mouse.up()\n    }\n  })\n\n  test(\"displays the correct value when changed\", async ({ page }) => {\n    await page.goto(\"http://localhost:6006/?path=/story/ui-slider--default\")\n    const slider = page\n      .frameLocator('iframe[title=\"storybook-preview-iframe\"]')\n      .getByRole(\"slider\")\n    await expect(slider).toBeVisible()\n    const boundingBox = await slider.boundingBox()\n    if (boundingBox) {\n      await page.mouse.move(\n        boundingBox.x + boundingBox.width / 2,\n        boundingBox.y + boundingBox.height / 2,\n      )\n      await page.mouse.down()\n      await page.mouse.move(\n        boundingBox.x + boundingBox.width / 2 + 50,\n        boundingBox.y + boundingBox.height / 2,\n      )\n      await page.mouse.up()\n    }\n    // Add an assertion to check the slider value if it is displayed in the UI\n  })\n\n  test(\"to be disabled\", async ({ page }) => {\n    await page.goto(\"http://localhost:6006/?path=/story/ui-slider--disabled\")\n    const slider = page\n      .frameLocator('iframe[title=\"storybook-preview-iframe\"]')\n      .getByRole(\"slider\")\n    const isDataDisabled = await slider.getAttribute(\"data-disabled\")\n    expect(isDataDisabled).not.toBeNull()\n  })\n})\n",
      "path": "src/components/Slider/slider.spec.ts"
    }
  ]
}
