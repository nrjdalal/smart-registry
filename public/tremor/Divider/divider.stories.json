{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Divider/divider.stories",
  "dependencies": [
    "@radix-ui/react-slot",
    "@remixicon/react",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Button/Button.tsx",
      "content": "// Tremor Button [v0.2.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"disabled:dark:bg-blue-800 disabled:dark:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"disabled:dark:bg-gray-800 disabled:dark:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"disabled:dark:bg-red-950 disabled:dark:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Divider/Divider.tsx",
      "content": "// Tremor Divider [v0.0.2]\n\nimport React from \"react\"\n\nimport { cx } from \"@/utils/cx\"\n\ntype DividerProps = React.ComponentPropsWithoutRef<\"div\">\n\nconst Divider = React.forwardRef<HTMLDivElement, DividerProps>(\n  ({ className, children, ...props }, forwardedRef) => (\n    <div\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"mx-auto my-6 flex w-full items-center justify-between gap-3 text-sm\",\n        // text color\n        \"text-gray-500 dark:text-gray-500\",\n        className,\n      )}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    >\n      {children ? (\n        <>\n          <div\n            className={cx(\n              // base\n              \"h-[1px] w-full\",\n              // background color\n              \"bg-gray-200 dark:bg-gray-800\",\n            )}\n          />\n          <div className=\"whitespace-nowrap text-inherit\">{children}</div>\n          <div\n            className={cx(\n              // base\n              \"h-[1px] w-full\",\n              // background color\n              \"bg-gray-200 dark:bg-gray-800\",\n            )}\n          />\n        </>\n      ) : (\n        <div\n          className={cx(\n            // base\n            \"h-[1px] w-full\",\n            // background color\n            \"bg-gray-200 dark:bg-gray-800\",\n          )}\n        />\n      )}\n    </div>\n  ),\n)\n\nDivider.displayName = \"Divider\"\n\nexport { Divider }\n",
      "path": "src/components/Divider/Divider.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Divider/divider.stories.tsx",
      "content": "import { RiCalendar2Line } from \"@remixicon/react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Button } from \"@/components/Button/Button\"\nimport { Divider } from \"@/components/Divider/Divider\"\n\nconst meta: Meta<typeof Divider> = {\n  title: \"ui/Divider\",\n  component: Divider,\n}\n\nexport default meta\ntype Story = StoryObj<typeof Divider>\n\nexport const Default: Story = {\n  render: () => <Divider />,\n}\n\nexport const WithChildren: Story = {\n  render: () => (\n    <div className=\"w-96\">\n      <Divider />\n      <Divider>\n        <RiCalendar2Line className=\"h-5 w-5\" />\n      </Divider>\n      <Divider>Standard</Divider>\n      <Divider>\n        <span className=\"px-4\">With little bit more space</span>\n      </Divider>\n    </div>\n  ),\n}\n\nexport const MoreText: Story = {\n  render: () => (\n    <>\n      <p className=\"text-sm text-gray-500 dark:text-gray-500\">Tickets Sold</p>\n      <p className=\"text-3xl font-semibold text-gray-900 dark:text-gray-50\">\n        1,587\n      </p>\n      <Divider>Details</Divider>\n      <p className=\"mt-2 text-sm leading-7 text-gray-500 dark:text-gray-500\">\n        Ticket sales peaked in March, largely due to the \"March Mountain\n        Madness\" event on March 12th, drawing significant tourist interest.\n        Operational efficiencies and local hotel partnerships further boosted\n        sales. Additionally, targeted social media promotions ahead of the event\n        significantly increased online bookings.\n      </p>\n    </>\n  ),\n}\n\nexport const ButtonChild: Story = {\n  render: () => (\n    <Divider>\n      <Button variant=\"secondary\" className=\"rounded-full\">\n        Show more\n      </Button>\n    </Divider>\n  ),\n}\n",
      "path": "src/components/Divider/divider.stories.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    }
  ],
  "type": "registry:component"
}
