{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "datepicker.stories",
  "type": "registry:component",
  "dependencies": [
    "@internationalized/date",
    "@radix-ui/react-popover",
    "@radix-ui/react-slot",
    "@react-aria/datepicker",
    "@react-stately/datepicker",
    "@remixicon/react",
    "clsx",
    "date-fns",
    "react",
    "react-day-picker",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/DatePicker/datepicker.stories.tsx",
      "content": "import * as React from \"react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\nimport { fr } from \"date-fns/locale\"\n\nimport { Button } from \"@/components/Button/Button\"\nimport { Divider } from \"@/components/Divider/Divider\"\nimport {\n  Popover,\n  PopoverClose,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/Popover/Popover\"\nimport { DatePicker } from \"@/components/DatePicker/DatePicker\"\n\nconst meta: Meta<typeof DatePicker> = {\n  title: \"ui/DatePicker\",\n  component: DatePicker,\n  render: (args) => {\n    return (\n      <div className=\"w-60\">\n        <DatePicker {...args} />\n      </div>\n    )\n  },\n}\n\nexport default meta\ntype Story = StoryObj<typeof DatePicker>\n\nconst presets = [\n  {\n    label: \"Today\",\n    date: new Date(),\n  },\n  {\n    label: \"Tomorrow\",\n    date: new Date(new Date().setDate(new Date().getDate() + 1)),\n  },\n  {\n    label: \"A week from now\",\n    date: new Date(new Date().setDate(new Date().getDate() + 7)),\n  },\n  {\n    label: \"A month from now\",\n    date: new Date(new Date().setMonth(new Date().getMonth() + 1)),\n  },\n  {\n    label: \"6 months from now\",\n    date: new Date(new Date().setMonth(new Date().getMonth() + 6)),\n  },\n  {\n    label: \"A year from now\",\n    date: new Date(new Date().setFullYear(new Date().getFullYear() + 1)),\n  },\n]\n\nexport const Single: Story = {\n  args: { toDate: new Date() },\n}\n\nexport const WithYearNavigation: Story = {\n  args: {\n    enableYearNavigation: true,\n  },\n}\n\nexport const SingleWithPresets: Story = {\n  args: {\n    presets,\n  },\n}\n\nexport const ShowTimePicker: Story = {\n  args: { showTimePicker: true },\n}\n\nexport const Localized: Story = {\n  args: {\n    placeholder: \"Choisissez une date\",\n    locale: fr,\n    translations: { cancel: \"Annuler\", apply: \"Applicer\" },\n    presets: [\n      {\n        label: \"Aujourd'hui\",\n        date: new Date(),\n      },\n      {\n        label: \"Demain\",\n        date: new Date(new Date().setDate(new Date().getDate() + 1)),\n      },\n      {\n        label: \"Dans une semaine\",\n        date: new Date(new Date().setDate(new Date().getDate() + 7)),\n      },\n      {\n        label: \"Dans un mois\",\n        date: new Date(new Date().setMonth(new Date().getMonth() + 1)),\n      },\n      {\n        label: \"Dans un an\",\n        date: new Date(new Date().setFullYear(new Date().getFullYear() + 1)),\n      },\n      {\n        label: \"Hier\",\n        date: new Date(new Date().setDate(new Date().getDate() - 1)),\n      },\n      {\n        label: \"La semaine dernière\",\n        date: new Date(new Date().setDate(new Date().getDate() - 7)),\n      },\n      {\n        label: \"Le mois dernier\",\n        date: new Date(new Date().setMonth(new Date().getMonth() - 1)),\n      },\n      {\n        label: \"L'année dernière\",\n        date: new Date(new Date().setFullYear(new Date().getFullYear() - 1)),\n      },\n    ],\n  },\n}\n\nconst ControlledDemo = () => {\n  const [value, setValue] = React.useState<Date | undefined>(undefined)\n\n  return (\n    <>\n      <p className=\"mb-6 text-gray-500\">\n        {value ? value.toString() : \"Select a date\"}\n      </p>\n      <div className=\"flex w-80 gap-2\">\n        <DatePicker\n          value={value}\n          onChange={(value) => {\n            setValue(value)\n          }}\n        />\n        <Button variant=\"destructive\" onClick={() => setValue(undefined)}>\n          Reset\n        </Button>\n        <Button variant=\"secondary\" onClick={() => setValue(new Date())}>\n          Today\n        </Button>\n      </div>\n    </>\n  )\n}\n\nexport const Controlled: Story = {\n  render: () => <ControlledDemo />,\n}\n\nconst ControlledTimeDemo = () => {\n  const [value, setValue] = React.useState<Date | undefined>(undefined)\n\n  return (\n    <>\n      <p className=\"mb-6 text-gray-500\">\n        {value ? value.toString() : \"Select a date\"}\n      </p>\n      <div className=\"flex w-96 gap-2\">\n        <DatePicker\n          className=\"w-60\"\n          showTimePicker\n          value={value}\n          onChange={(value) => {\n            setValue(value)\n          }}\n        />\n        <Button variant=\"destructive\" onClick={() => setValue(undefined)}>\n          Reset\n        </Button>\n        <Button variant=\"secondary\" onClick={() => setValue(new Date())}>\n          Today\n        </Button>\n      </div>\n    </>\n  )\n}\n\nexport const ControlledTime: Story = {\n  render: () => <ControlledTimeDemo />,\n}\n\ntype PopoverNestedProps = {\n  value?: Date\n  onChange?: (value: Date | undefined) => void\n}\nconst PopoverNested = ({ value, onChange }: PopoverNestedProps) => {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button>Open</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <DatePicker value={value} onChange={onChange} />\n        <Divider />\n        <div className=\"flex items-center justify-between gap-x-2 px-3 py-2 [&_button]:w-full\">\n          <PopoverClose asChild>\n            <Button variant=\"secondary\">Clear</Button>\n          </PopoverClose>\n          <PopoverClose asChild>\n            <Button>Apply</Button>\n          </PopoverClose>\n        </div>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nexport const AlignEnd: Story = {\n  args: { align: \"end\" },\n  parameters: {\n    layout: \"centered\",\n  },\n}\n\nconst PopoverNestedDemo = () => {\n  const [value, setValue] = React.useState<Date | undefined>(undefined)\n\n  return (\n    <div className=\"flex w-40 flex-col gap-y-4\">\n      <PopoverNested value={value} onChange={setValue} />\n    </div>\n  )\n}\n\nexport const PopoverNestedControlled: Story = {\n  render: () => <PopoverNestedDemo />,\n}\n",
      "path": "src/components/DatePicker/datepicker.stories.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Button/Button.tsx",
      "content": "// Tremor Button [v1.0.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-xs transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"dark:disabled:bg-blue-800 dark:disabled:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"dark:disabled:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"dark:disabled:bg-gray-800 dark:disabled:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"dark:disabled:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"dark:disabled:bg-red-950 dark:disabled:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Calendar/Calendar.tsx",
      "content": "// Tremor Calendar [v1.0.0]\n\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  RiArrowLeftDoubleLine,\n  RiArrowLeftSLine,\n  RiArrowRightDoubleLine,\n  RiArrowRightSLine,\n} from \"@remixicon/react\"\nimport { addYears, format, isSameMonth } from \"date-fns\"\nimport {\n  DayPicker,\n  useDayPicker,\n  useDayRender,\n  useNavigation,\n  type DayPickerRangeProps,\n  type DayPickerSingleProps,\n  type DayProps,\n  type Matcher,\n} from \"react-day-picker\"\n\nimport { cx } from \"../../utils/cx\"\nimport { focusRing } from \"../../utils/focusRing\"\n\ninterface NavigationButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  onClick: () => void\n  icon: React.ElementType\n  disabled?: boolean\n}\n\nconst NavigationButton = React.forwardRef<\n  HTMLButtonElement,\n  NavigationButtonProps\n>(\n  (\n    { onClick, icon, disabled, ...props }: NavigationButtonProps,\n    forwardedRef,\n  ) => {\n    const Icon = icon\n    return (\n      <button\n        ref={forwardedRef}\n        type=\"button\"\n        disabled={disabled}\n        className={cx(\n          \"flex size-8 shrink-0 select-none items-center justify-center rounded-sm border p-1 outline-hidden transition sm:size-[30px]\",\n          // text color\n          \"text-gray-600 hover:text-gray-800\",\n          \"dark:text-gray-400 dark:hover:text-gray-200\",\n          // border color\n          \"border-gray-300 dark:border-gray-800\",\n          // background color\n          \"hover:bg-gray-50 active:bg-gray-100\",\n          \"dark:hover:bg-gray-900 dark:active:bg-gray-800\",\n          // disabled\n          \"disabled:pointer-events-none\",\n          \"disabled:border-gray-200 dark:disabled:border-gray-800\",\n          \"disabled:text-gray-400 dark:disabled:text-gray-600\",\n          focusRing,\n        )}\n        onClick={onClick}\n        {...props}\n      >\n        <Icon className=\"size-full shrink-0\" />\n      </button>\n    )\n  },\n)\n\nNavigationButton.displayName = \"NavigationButton\"\n\ntype OmitKeys<T, K extends keyof T> = {\n  [P in keyof T as P extends K ? never : P]: T[P]\n}\n\ntype KeysToOmit = \"showWeekNumber\" | \"captionLayout\" | \"mode\"\n\ntype SingleProps = OmitKeys<DayPickerSingleProps, KeysToOmit>\ntype RangeProps = OmitKeys<DayPickerRangeProps, KeysToOmit>\n\ntype CalendarProps =\n  | ({\n      mode: \"single\"\n    } & SingleProps)\n  | ({\n      mode?: undefined\n    } & SingleProps)\n  | ({\n      mode: \"range\"\n    } & RangeProps)\n\nconst Calendar = ({\n  mode = \"single\",\n  weekStartsOn = 1,\n  numberOfMonths = 1,\n  enableYearNavigation = false,\n  disableNavigation,\n  locale,\n  className,\n  classNames,\n  ...props\n}: CalendarProps & { enableYearNavigation?: boolean }) => {\n  return (\n    <DayPicker\n      mode={mode}\n      weekStartsOn={weekStartsOn}\n      numberOfMonths={numberOfMonths}\n      locale={locale}\n      showOutsideDays={numberOfMonths === 1}\n      className={cx(className)}\n      classNames={{\n        months: \"flex space-y-0\",\n        month: \"space-y-4 p-3\",\n        nav: \"gap-1 flex items-center rounded-full size-full justify-between p-4\",\n        table: \"w-full border-collapse space-y-1\",\n        head_cell:\n          \"w-9 font-medium text-sm sm:text-xs text-center text-gray-400 dark:text-gray-600 pb-2\",\n        row: \"w-full mt-0.5\",\n        cell: cx(\n          \"relative p-0 text-center focus-within:relative\",\n          \"text-gray-900 dark:text-gray-50\",\n        ),\n        day: cx(\n          \"size-9 rounded-sm text-sm focus:z-10\",\n          \"text-gray-900 dark:text-gray-50\",\n          \"hover:bg-gray-200 dark:hover:bg-gray-700\",\n          focusRing,\n        ),\n        day_today: \"font-semibold\",\n        day_selected: cx(\n          \"rounded-sm\",\n          \"aria-selected:bg-blue-500 aria-selected:text-white\",\n          \"dark:aria-selected:bg-blue-500 dark:aria-selected:text-white\",\n        ),\n        day_disabled:\n          \"text-gray-300! dark:text-gray-700! line-through disabled:hover:bg-transparent\",\n        day_outside: \"text-gray-400 dark:text-gray-600\",\n        day_range_middle: cx(\n          \"rounded-none!\",\n          \"aria-selected:bg-gray-100! aria-selected:text-gray-900!\",\n          \"dark:aria-selected:bg-gray-900! dark:aria-selected:text-gray-50!\",\n        ),\n        day_range_start: \"rounded-r-none rounded-l!\",\n        day_range_end: \"rounded-l-none rounded-r!\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: () => (\n          <RiArrowLeftSLine aria-hidden=\"true\" className=\"size-4\" />\n        ),\n        IconRight: () => (\n          <RiArrowRightSLine aria-hidden=\"true\" className=\"size-4\" />\n        ),\n        Caption: ({ ...props }) => {\n          const {\n            goToMonth,\n            nextMonth,\n            previousMonth,\n            currentMonth,\n            displayMonths,\n          } = useNavigation()\n          const { numberOfMonths, fromDate, toDate } = useDayPicker()\n\n          const displayIndex = displayMonths.findIndex((month) =>\n            isSameMonth(props.displayMonth, month),\n          )\n          const isFirst = displayIndex === 0\n          const isLast = displayIndex === displayMonths.length - 1\n\n          const hideNextButton = numberOfMonths > 1 && (isFirst || !isLast)\n          const hidePreviousButton = numberOfMonths > 1 && (isLast || !isFirst)\n\n          const goToPreviousYear = () => {\n            const targetMonth = addYears(currentMonth, -1)\n            if (\n              previousMonth &&\n              (!fromDate || targetMonth.getTime() >= fromDate.getTime())\n            ) {\n              goToMonth(targetMonth)\n            }\n          }\n\n          const goToNextYear = () => {\n            const targetMonth = addYears(currentMonth, 1)\n            if (\n              nextMonth &&\n              (!toDate || targetMonth.getTime() <= toDate.getTime())\n            ) {\n              goToMonth(targetMonth)\n            }\n          }\n\n          return (\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-1\">\n                {enableYearNavigation && !hidePreviousButton && (\n                  <NavigationButton\n                    disabled={\n                      disableNavigation ||\n                      !previousMonth ||\n                      (fromDate &&\n                        addYears(currentMonth, -1).getTime() <\n                          fromDate.getTime())\n                    }\n                    aria-label=\"Go to previous year\"\n                    onClick={goToPreviousYear}\n                    icon={RiArrowLeftDoubleLine}\n                  />\n                )}\n                {!hidePreviousButton && (\n                  <NavigationButton\n                    disabled={disableNavigation || !previousMonth}\n                    aria-label=\"Go to previous month\"\n                    onClick={() => previousMonth && goToMonth(previousMonth)}\n                    icon={RiArrowLeftSLine}\n                  />\n                )}\n              </div>\n\n              <div\n                role=\"presentation\"\n                aria-live=\"polite\"\n                className=\"text-sm font-medium capitalize tabular-nums text-gray-900 dark:text-gray-50\"\n              >\n                {format(props.displayMonth, \"LLLL yyy\", { locale })}\n              </div>\n\n              <div className=\"flex items-center gap-1\">\n                {!hideNextButton && (\n                  <NavigationButton\n                    disabled={disableNavigation || !nextMonth}\n                    aria-label=\"Go to next month\"\n                    onClick={() => nextMonth && goToMonth(nextMonth)}\n                    icon={RiArrowRightSLine}\n                  />\n                )}\n                {enableYearNavigation && !hideNextButton && (\n                  <NavigationButton\n                    disabled={\n                      disableNavigation ||\n                      !nextMonth ||\n                      (toDate &&\n                        addYears(currentMonth, 1).getTime() > toDate.getTime())\n                    }\n                    aria-label=\"Go to next year\"\n                    onClick={goToNextYear}\n                    icon={RiArrowRightDoubleLine}\n                  />\n                )}\n              </div>\n            </div>\n          )\n        },\n        Day: ({ date, displayMonth }: DayProps) => {\n          const buttonRef = React.useRef<HTMLButtonElement>(null)\n          const { activeModifiers, buttonProps, divProps, isButton, isHidden } =\n            useDayRender(date, displayMonth, buttonRef)\n\n          const { selected, today, disabled, range_middle } = activeModifiers\n\n          if (isHidden) {\n            return <></>\n          }\n\n          if (!isButton) {\n            return (\n              <div\n                {...divProps}\n                className={cx(\n                  \"flex items-center justify-center\",\n                  divProps.className,\n                )}\n              />\n            )\n          }\n\n          const {\n            children: buttonChildren,\n            className: buttonClassName,\n            ...buttonPropsRest\n          } = buttonProps\n\n          return (\n            <button\n              ref={buttonRef}\n              {...buttonPropsRest}\n              type=\"button\"\n              className={cx(\"relative\", buttonClassName)}\n            >\n              {buttonChildren}\n              {today && (\n                <span\n                  className={cx(\n                    \"absolute inset-x-1/2 bottom-1.5 h-0.5 w-4 -translate-x-1/2 rounded-[2px]\",\n                    {\n                      \"bg-blue-500 dark:bg-blue-500\": !selected,\n                      \"bg-white! dark:bg-gray-950!\": selected,\n                      \"bg-gray-400! dark:bg-gray-600!\":\n                        selected && range_middle,\n                      \"bg-gray-400 text-gray-400 dark:bg-gray-400 dark:text-gray-600\":\n                        disabled,\n                    },\n                  )}\n                />\n              )}\n            </button>\n          )\n        },\n      }}\n      tremor-id=\"tremor-raw\"\n      {...(props as SingleProps & RangeProps)}\n    />\n  )\n}\n\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar, type Matcher }\n",
      "path": "src/components/Calendar/Calendar.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/DatePicker/DatePicker.tsx",
      "content": "// Tremor Date Picker [v2.0.0]\n\n\"use client\"\n\nimport * as React from \"react\"\nimport { Time } from \"@internationalized/date\"\nimport * as PopoverPrimitives from \"@radix-ui/react-popover\"\nimport {\n  useDateSegment,\n  useTimeField,\n  type AriaTimeFieldProps,\n  type TimeValue,\n} from \"@react-aria/datepicker\"\nimport {\n  useTimeFieldState,\n  type DateFieldState,\n  type DateSegment,\n} from \"@react-stately/datepicker\"\nimport { RiCalendar2Fill, RiSubtractFill } from \"@remixicon/react\"\nimport { format, type Locale } from \"date-fns\"\nimport { enUS } from \"date-fns/locale\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusInput } from \"@/utils/focusInput\"\nimport { focusRing } from \"@/utils/focusRing\"\nimport { hasErrorInput } from \"@/utils/hasErrorInput\"\nimport { Button } from \"@/components/Button/Button\"\nimport {\n  Calendar as CalendarPrimitive,\n  type Matcher,\n} from \"@/components/Calendar/Calendar\"\n\n//#region TimeInput\n// ============================================================================\n\nconst isBrowserLocaleClockType24h = () => {\n  const language =\n    typeof window !== \"undefined\" ? window.navigator.language : \"en-US\"\n\n  const hr = new Intl.DateTimeFormat(language, {\n    hour: \"numeric\",\n  }).format()\n\n  return Number.isInteger(Number(hr))\n}\n\ntype TimeSegmentProps = {\n  segment: DateSegment\n  state: DateFieldState\n}\n\nconst TimeSegment = ({ segment, state }: TimeSegmentProps) => {\n  const ref = React.useRef<HTMLDivElement>(null)\n  const { segmentProps } = useDateSegment(segment, state, ref)\n\n  // Skip rendering for any non-editable segments except colon\n  if (\n    !segment.isEditable &&\n    segment.type === \"literal\" &&\n    segment.text !== \":\"\n  ) {\n    return null\n  }\n\n  return (\n    <div\n      {...segmentProps}\n      ref={ref}\n      className={cx(\n        // base\n        \"relative block w-full appearance-none rounded-md border px-2.5 py-1.5 text-left uppercase tabular-nums shadow-xs outline-hidden transition sm:text-sm\",\n        // border color\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // focus\n        focusInput,\n        // invalid (optional)\n        \"group-aria-invalid/time-input:border-red-500 group-aria-invalid/time-input:ring-2 group-aria-invalid/time-input:ring-red-200 invalid:border-red-500 invalid:ring-2 invalid:ring-red-200 dark:group-aria-invalid/time-input:ring-red-400/20\",\n        {\n          \"w-fit! border-none bg-transparent px-0 text-gray-400 shadow-none\":\n            segment.type === \"literal\",\n          \"border-gray-300 bg-gray-100 text-gray-400 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-500\":\n            state.isDisabled && segment.text !== \":\",\n        },\n      )}\n    >\n      {segment.isPlaceholder ? segment.placeholder : segment.text}\n    </div>\n  )\n}\n\ntype TimeInputProps = Omit<\n  AriaTimeFieldProps<TimeValue>,\n  \"label\" | \"shouldForceLeadingZeros\" | \"description\" | \"errorMessage\"\n>\n\nconst TimeInput = React.forwardRef<HTMLDivElement, TimeInputProps>(\n  ({ hourCycle, ...props }: TimeInputProps, ref) => {\n    const innerRef = React.useRef<HTMLDivElement>(null)\n\n    React.useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n      ref,\n      () => innerRef?.current,\n    )\n\n    const locale = window !== undefined ? window.navigator.language : \"en-US\"\n\n    const state = useTimeFieldState({\n      hourCycle: hourCycle,\n      locale: locale,\n      shouldForceLeadingZeros: true,\n      autoFocus: true,\n      ...props,\n    })\n\n    const { fieldProps } = useTimeField(\n      {\n        ...props,\n        hourCycle: hourCycle,\n        shouldForceLeadingZeros: true,\n      },\n      state,\n      innerRef,\n    )\n\n    return (\n      <div\n        {...fieldProps}\n        ref={innerRef}\n        className=\"group/time-input inline-flex w-full gap-x-2\"\n      >\n        {state.segments.map((segment, i) => (\n          <TimeSegment key={i} segment={segment} state={state} />\n        ))}\n      </div>\n    )\n  },\n)\nTimeInput.displayName = \"TimeInput\"\n\n//#region Trigger\n// ============================================================================\n\nconst triggerStyles = tv({\n  base: [\n    // base\n    \"peer flex w-full cursor-pointer appearance-none items-center gap-x-2 truncate rounded-md border px-3 py-2 shadow-xs outline-hidden transition-all sm:text-sm\",\n    // background color\n    \"bg-white dark:bg-gray-950\",\n    // border color\n    \"border-gray-300 dark:border-gray-800\",\n    // text color\n    \"text-gray-900 dark:text-gray-50\",\n    // placeholder color\n    \"placeholder-gray-400 dark:placeholder-gray-500\",\n    // hover\n    \"hover:bg-gray-50 dark:hover:bg-gray-950/50\",\n    // disabled\n    \"disabled:pointer-events-none\",\n    \"disabled:bg-gray-100 disabled:text-gray-400\",\n    \"dark:disabled:border-gray-800 dark:disabled:bg-gray-800 dark:disabled:text-gray-500\",\n    // focus\n    focusInput,\n    // invalid (optional)\n    // \"dark:aria-invalid:ring-red-400/20 aria-invalid:ring-2 aria-invalid:ring-red-200 aria-invalid:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n  ],\n  variants: {\n    hasError: {\n      true: hasErrorInput,\n    },\n  },\n})\n\ninterface TriggerProps\n  extends React.ComponentProps<\"button\">,\n    VariantProps<typeof triggerStyles> {\n  placeholder?: string\n}\n\nconst Trigger = React.forwardRef<HTMLButtonElement, TriggerProps>(\n  (\n    { className, children, placeholder, hasError, ...props }: TriggerProps,\n    forwardedRef,\n  ) => {\n    return (\n      <PopoverPrimitives.Trigger asChild>\n        <button\n          ref={forwardedRef}\n          className={cx(triggerStyles({ hasError }), className)}\n          {...props}\n        >\n          <RiCalendar2Fill className=\"size-5 shrink-0 text-gray-400 dark:text-gray-600\" />\n          <span className=\"flex-1 overflow-hidden text-left text-ellipsis whitespace-nowrap text-gray-900 dark:text-gray-50\">\n            {children ? (\n              children\n            ) : placeholder ? (\n              <span className=\"text-gray-400 dark:text-gray-600\">\n                {placeholder}\n              </span>\n            ) : null}\n          </span>\n        </button>\n      </PopoverPrimitives.Trigger>\n    )\n  },\n)\n\nTrigger.displayName = \"DatePicker.Trigger\"\n\n//#region Popover\n// ============================================================================\n\nconst CalendarPopover = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Content>,\n  React.ComponentProps<typeof PopoverPrimitives.Content>\n>(({ align, className, children, ...props }, forwardedRef) => {\n  return (\n    <PopoverPrimitives.Portal>\n      <PopoverPrimitives.Content\n        ref={forwardedRef}\n        sideOffset={10}\n        side=\"bottom\"\n        align={align}\n        avoidCollisions\n        onOpenAutoFocus={(e) => e.preventDefault()}\n        className={cx(\n          // base\n          \"relative z-50 w-fit rounded-md border text-sm shadow-xl shadow-black/[2.5%]\",\n          // widths\n          \"max-w-[95vw] min-w-[calc(var(--radix-select-trigger-width)-2px)]\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // transition\n          \"will-change-[transform,opacity]\",\n          \"data-[state=closed]:animate-hide\",\n          \"data-[state=open]:data-[side=bottom]:animate-slide-down-and-fade data-[state=open]:data-[side=left]:animate-slide-left-and-fade data-[state=open]:data-[side=right]:animate-slide-right-and-fade data-[state=open]:data-[side=top]:animate-slide-up-and-fade\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </PopoverPrimitives.Content>\n    </PopoverPrimitives.Portal>\n  )\n})\n\nCalendarPopover.displayName = \"DatePicker.CalendarPopover\"\n\n//#region Preset\n// ============================================================================\n\ntype DateRange = {\n  from: Date | undefined\n  to?: Date | undefined\n}\n\ninterface Preset {\n  label: string\n}\n\ninterface DatePreset extends Preset {\n  date: Date\n}\n\ninterface DateRangePreset extends Preset {\n  dateRange: DateRange\n}\n\ntype PresetContainerProps<TPreset extends Preset, TValue> = {\n  presets: TPreset[]\n  onSelect: (value: TValue) => void\n  currentValue?: TValue\n}\n\nconst PresetContainer = <TPreset extends Preset, TValue>({\n  // Available preset configurations\n  presets,\n  // Event handler when a preset is selected\n  onSelect,\n  // Currently selected preset\n  currentValue,\n}: PresetContainerProps<TPreset, TValue>) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const isDateRangePresets = (preset: any): preset is DateRangePreset => {\n    return \"dateRange\" in preset\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const isDatePresets = (preset: any): preset is DatePreset => {\n    return \"date\" in preset\n  }\n\n  const handleClick = (preset: TPreset) => {\n    if (isDateRangePresets(preset)) {\n      onSelect(preset.dateRange as TValue)\n    } else if (isDatePresets(preset)) {\n      onSelect(preset.date as TValue)\n    }\n  }\n\n  const compareDates = (date1: Date, date2: Date) => {\n    return (\n      date1.getDate() === date2.getDate() &&\n      date1.getMonth() === date2.getMonth() &&\n      date1.getFullYear() === date2.getFullYear()\n    )\n  }\n\n  const compareRanges = (range1: DateRange, range2: DateRange) => {\n    const from1 = range1.from\n    const from2 = range2.from\n\n    let equalFrom = false\n\n    if (from1 && from2) {\n      const sameFrom = compareDates(from1, from2)\n\n      if (sameFrom) {\n        equalFrom = true\n      }\n    }\n\n    const to1 = range1.to\n    const to2 = range2.to\n\n    let equalTo = false\n\n    if (to1 && to2) {\n      const sameTo = compareDates(to1, to2)\n\n      if (sameTo) {\n        equalTo = true\n      }\n    }\n\n    return equalFrom && equalTo\n  }\n\n  const matchesCurrent = (preset: TPreset) => {\n    if (isDateRangePresets(preset)) {\n      const value = currentValue as DateRange | undefined\n\n      return value && compareRanges(value, preset.dateRange)\n    }\n    if (isDatePresets(preset)) {\n      const value = currentValue as Date | undefined\n\n      return value && compareDates(value, preset.date)\n    }\n\n    return false\n  }\n\n  return (\n    <ul className=\"flex items-start gap-x-2 sm:flex-col\">\n      {presets.map((preset) => {\n        return (\n          <li key={`preset-${preset.label}`} className=\"sm:w-full sm:py-px\">\n            <button\n              type=\"button\"\n              title={preset.label}\n              className={cx(\n                // base\n                \"relative w-full overflow-hidden rounded-sm border px-2.5 py-1.5 text-left text-base text-ellipsis whitespace-nowrap shadow-xs outline-hidden transition-all sm:border-none sm:py-2 sm:text-sm sm:shadow-none\",\n                // text color\n                \"text-gray-700 dark:text-gray-300\",\n                // border color\n                \"border-gray-200 dark:border-gray-800\",\n                // focus\n                focusRing,\n                // background color\n                \"focus-visible:bg-gray-100 dark:focus-visible:bg-gray-900\",\n                \"hover:bg-gray-100 dark:hover:bg-gray-900\",\n                {\n                  \"bg-gray-100 dark:bg-gray-900\": matchesCurrent(preset),\n                },\n              )}\n              onClick={() => handleClick(preset)}\n              aria-label={`Select ${preset.label}`}\n            >\n              <span>{preset.label}</span>\n            </button>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\nPresetContainer.displayName = \"DatePicker.PresetContainer\"\n\n//#region Date Picker Shared\n// ============================================================================\n\nconst formatDate = (\n  date: Date,\n  locale: Locale,\n  includeTime?: boolean,\n): string => {\n  const usesAmPm = !isBrowserLocaleClockType24h()\n  let dateString: string\n\n  if (includeTime) {\n    dateString = usesAmPm\n      ? format(date, \"dd MMM, yyyy h:mm a\", { locale })\n      : format(date, \"dd MMM, yyyy HH:mm\", { locale })\n  } else {\n    dateString = format(date, \"dd MMM, yyyy\", { locale })\n  }\n\n  return dateString\n}\n\ntype CalendarProps = {\n  fromYear?: number\n  toYear?: number\n  fromMonth?: Date\n  toMonth?: Date\n  fromDay?: Date\n  toDay?: Date\n  fromDate?: Date\n  toDate?: Date\n  locale?: Locale\n}\n\ntype Translations = {\n  cancel?: string\n  apply?: string\n  start?: string\n  end?: string\n  range?: string\n}\n\ninterface PickerProps extends CalendarProps {\n  className?: string\n  disabled?: boolean\n  disabledDays?: Matcher | Matcher[] | undefined\n  required?: boolean\n  showTimePicker?: boolean\n  placeholder?: string\n  enableYearNavigation?: boolean\n  disableNavigation?: boolean\n  hasError?: boolean\n  id?: string\n  // Customize the date picker for different languages.\n  translations?: Translations\n  align?: \"center\" | \"end\" | \"start\"\n  \"aria-invalid\"?: boolean\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  \"aria-required\"?: boolean\n}\n\n//#region Single Date Picker\n// ============================================================================\n\ninterface SingleProps extends Omit<PickerProps, \"translations\"> {\n  presets?: DatePreset[]\n  defaultValue?: Date\n  value?: Date\n  onChange?: (date: Date | undefined) => void\n  translations?: Omit<Translations, \"range\">\n}\n\nconst SingleDatePicker = ({\n  defaultValue,\n  value,\n  onChange,\n  presets,\n  disabled,\n  disabledDays,\n  disableNavigation,\n  className,\n  showTimePicker,\n  placeholder = \"Select date\",\n  hasError,\n  translations,\n  enableYearNavigation = false,\n  locale = enUS,\n  align = \"center\",\n  ...props\n}: SingleProps) => {\n  const [open, setOpen] = React.useState(false)\n  const [date, setDate] = React.useState<Date | undefined>(\n    value ?? defaultValue ?? undefined,\n  )\n  const [month, setMonth] = React.useState<Date | undefined>(date)\n\n  const [time, setTime] = React.useState<TimeValue | null>(\n    value\n      ? new Time(value.getHours(), value.getMinutes())\n      : defaultValue\n        ? new Time(defaultValue.getHours(), defaultValue.getMinutes())\n        : new Time(0, 0),\n  )\n\n  const initialDate = React.useMemo(() => {\n    return date\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open])\n\n  React.useEffect(() => {\n    setDate(value ?? defaultValue ?? undefined)\n  }, [value, defaultValue])\n\n  React.useEffect(() => {\n    if (date) {\n      setMonth(date)\n    }\n  }, [date])\n\n  React.useEffect(() => {\n    if (!open) {\n      setMonth(date)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open])\n\n  const onCancel = () => {\n    setDate(initialDate)\n    setTime(\n      initialDate\n        ? new Time(initialDate.getHours(), initialDate.getMinutes())\n        : new Time(0, 0),\n    )\n    setOpen(false)\n  }\n\n  const onOpenChange = (open: boolean) => {\n    if (!open) {\n      onCancel()\n    }\n\n    setOpen(open)\n  }\n\n  const onDateChange = (date: Date | undefined) => {\n    const newDate = date\n    if (showTimePicker) {\n      if (newDate && !time) {\n        setTime(new Time(0, 0))\n      }\n      if (newDate && time) {\n        newDate.setHours(time.hour)\n        newDate.setMinutes(time.minute)\n      }\n    }\n    setDate(newDate)\n  }\n\n  const onTimeChange = (time: TimeValue | null) => {\n    setTime(time)\n\n    if (!date) {\n      return\n    }\n\n    const newDate = new Date(date.getTime())\n\n    if (!time) {\n      newDate.setHours(0)\n      newDate.setMinutes(0)\n    } else {\n      newDate.setHours(time.hour)\n      newDate.setMinutes(time.minute)\n    }\n\n    setDate(newDate)\n  }\n\n  const formattedDate = React.useMemo(() => {\n    if (!date) {\n      return null\n    }\n\n    return formatDate(date, locale, showTimePicker)\n  }, [date, locale, showTimePicker])\n\n  const onApply = () => {\n    setOpen(false)\n    onChange?.(date)\n  }\n\n  React.useEffect(() => {\n    setDate(value ?? defaultValue ?? undefined)\n    setTime(\n      value\n        ? new Time(value.getHours(), value.getMinutes())\n        : defaultValue\n          ? new Time(defaultValue.getHours(), defaultValue.getMinutes())\n          : new Time(0, 0),\n    )\n  }, [value, defaultValue])\n\n  return (\n    <PopoverPrimitives.Root\n      tremor-id=\"tremor-raw\"\n      open={open}\n      onOpenChange={onOpenChange}\n    >\n      <Trigger\n        placeholder={placeholder}\n        disabled={disabled}\n        className={className}\n        hasError={hasError}\n        aria-required={props.required || props[\"aria-required\"]}\n        aria-invalid={props[\"aria-invalid\"]}\n        aria-label={props[\"aria-label\"]}\n        aria-labelledby={props[\"aria-labelledby\"]}\n      >\n        {formattedDate}\n      </Trigger>\n      <CalendarPopover align={align}>\n        <div className=\"flex\">\n          <div className=\"flex flex-col sm:flex-row sm:items-start\">\n            {presets && presets.length > 0 && (\n              <div\n                className={cx(\n                  \"relative flex h-14 w-full items-center sm:h-full sm:w-40\",\n                  \"border-b border-gray-200 sm:border-r sm:border-b-0 dark:border-gray-800\",\n                  \"overflow-auto\",\n                )}\n              >\n                <div className=\"absolute px-2 pr-2 sm:inset-0 sm:left-0 sm:py-2\">\n                  <PresetContainer\n                    currentValue={date}\n                    presets={presets}\n                    onSelect={onDateChange}\n                  />\n                </div>\n              </div>\n            )}\n            <div>\n              <CalendarPrimitive\n                mode=\"single\"\n                month={month}\n                onMonthChange={setMonth}\n                selected={date}\n                onSelect={onDateChange}\n                disabled={disabledDays}\n                locale={locale}\n                enableYearNavigation={enableYearNavigation}\n                disableNavigation={disableNavigation}\n                initialFocus\n                {...props}\n              />\n              {showTimePicker && (\n                <div className=\"border-t border-gray-200 p-3 dark:border-gray-800\">\n                  <TimeInput\n                    aria-label=\"Time\"\n                    onChange={onTimeChange}\n                    isDisabled={!date}\n                    value={time}\n                    isRequired={props.required}\n                  />\n                </div>\n              )}\n              <div className=\"flex items-center gap-x-2 border-t border-gray-200 p-3 dark:border-gray-800\">\n                <Button\n                  variant=\"secondary\"\n                  className=\"h-8 w-full\"\n                  type=\"button\"\n                  onClick={onCancel}\n                >\n                  {translations?.cancel ?? \"Cancel\"}\n                </Button>\n                <Button\n                  variant=\"primary\"\n                  className=\"h-8 w-full\"\n                  type=\"button\"\n                  onClick={onApply}\n                >\n                  {translations?.apply ?? \"Apply\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CalendarPopover>\n    </PopoverPrimitives.Root>\n  )\n}\n\n//#region Range Date Picker\n// ============================================================================\n\ninterface RangeProps extends PickerProps {\n  presets?: DateRangePreset[]\n  defaultValue?: DateRange\n  value?: DateRange\n  onChange?: (dateRange: DateRange | undefined) => void\n}\n\nconst RangeDatePicker = ({\n  defaultValue,\n  value,\n  onChange,\n  presets,\n  disabled,\n  disableNavigation,\n  disabledDays,\n  enableYearNavigation = false,\n  locale = enUS,\n  showTimePicker,\n  placeholder = \"Select date range\",\n  hasError,\n  translations,\n  align = \"center\",\n  className,\n  ...props\n}: RangeProps) => {\n  const [open, setOpen] = React.useState(false)\n  const [range, setRange] = React.useState<DateRange | undefined>(\n    value ?? defaultValue ?? undefined,\n  )\n  const [month, setMonth] = React.useState<Date | undefined>(range?.from)\n\n  const [startTime, setStartTime] = React.useState<TimeValue | null>(\n    value?.from\n      ? new Time(value.from.getHours(), value.from.getMinutes())\n      : defaultValue?.from\n        ? new Time(defaultValue.from.getHours(), defaultValue.from.getMinutes())\n        : new Time(0, 0),\n  )\n  const [endTime, setEndTime] = React.useState<TimeValue | null>(\n    value?.to\n      ? new Time(value.to.getHours(), value.to.getMinutes())\n      : defaultValue?.to\n        ? new Time(defaultValue.to.getHours(), defaultValue.to.getMinutes())\n        : new Time(0, 0),\n  )\n\n  const initialRange = React.useMemo(() => {\n    return range\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open])\n\n  React.useEffect(() => {\n    setRange(value ?? defaultValue ?? undefined)\n  }, [value, defaultValue])\n\n  React.useEffect(() => {\n    if (range) {\n      setMonth(range.from)\n    }\n  }, [range])\n\n  React.useEffect(() => {\n    if (!open) {\n      setMonth(range?.from)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open])\n\n  const onRangeChange = (range: DateRange | undefined) => {\n    const newRange = range\n    if (showTimePicker) {\n      if (newRange?.from && !startTime) {\n        setStartTime(new Time(0, 0))\n      }\n\n      if (newRange?.to && !endTime) {\n        setEndTime(new Time(0, 0))\n      }\n\n      if (newRange?.from && startTime) {\n        newRange.from.setHours(startTime.hour)\n        newRange.from.setMinutes(startTime.minute)\n      }\n\n      if (newRange?.to && endTime) {\n        newRange.to.setHours(endTime.hour)\n        newRange.to.setMinutes(endTime.minute)\n      }\n    }\n\n    setRange(newRange)\n  }\n\n  const onCancel = () => {\n    setRange(initialRange)\n    setStartTime(\n      initialRange?.from\n        ? new Time(initialRange.from.getHours(), initialRange.from.getMinutes())\n        : new Time(0, 0),\n    )\n    setEndTime(\n      initialRange?.to\n        ? new Time(initialRange.to.getHours(), initialRange.to.getMinutes())\n        : new Time(0, 0),\n    )\n    setOpen(false)\n  }\n\n  const onOpenChange = (open: boolean) => {\n    if (!open) {\n      onCancel()\n    }\n\n    setOpen(open)\n  }\n\n  const onTimeChange = (time: TimeValue | null, pos: \"start\" | \"end\") => {\n    switch (pos) {\n      case \"start\":\n        setStartTime(time)\n        break\n      case \"end\":\n        setEndTime(time)\n        break\n    }\n\n    if (!range) {\n      return\n    }\n\n    if (pos === \"start\") {\n      if (!range.from) {\n        return\n      }\n\n      const newDate = new Date(range.from.getTime())\n\n      if (!time) {\n        newDate.setHours(0)\n        newDate.setMinutes(0)\n      } else {\n        newDate.setHours(time.hour)\n        newDate.setMinutes(time.minute)\n      }\n\n      setRange({\n        ...range,\n        from: newDate,\n      })\n    }\n\n    if (pos === \"end\") {\n      if (!range.to) {\n        return\n      }\n\n      const newDate = new Date(range.to.getTime())\n\n      if (!time) {\n        newDate.setHours(0)\n        newDate.setMinutes(0)\n      } else {\n        newDate.setHours(time.hour)\n        newDate.setMinutes(time.minute)\n      }\n\n      setRange({\n        ...range,\n        to: newDate,\n      })\n    }\n  }\n\n  React.useEffect(() => {\n    setRange(value ?? defaultValue ?? undefined)\n\n    setStartTime(\n      value?.from\n        ? new Time(value.from.getHours(), value.from.getMinutes())\n        : defaultValue?.from\n          ? new Time(\n              defaultValue.from.getHours(),\n              defaultValue.from.getMinutes(),\n            )\n          : new Time(0, 0),\n    )\n    setEndTime(\n      value?.to\n        ? new Time(value.to.getHours(), value.to.getMinutes())\n        : defaultValue?.to\n          ? new Time(defaultValue.to.getHours(), defaultValue.to.getMinutes())\n          : new Time(0, 0),\n    )\n  }, [value, defaultValue])\n\n  const displayRange = React.useMemo(() => {\n    if (!range) {\n      return null\n    }\n\n    return `${range.from ? formatDate(range.from, locale, showTimePicker) : \"\"} - ${\n      range.to ? formatDate(range.to, locale, showTimePicker) : \"\"\n    }`\n  }, [range, locale, showTimePicker])\n\n  const onApply = () => {\n    setOpen(false)\n    onChange?.(range)\n  }\n\n  return (\n    <PopoverPrimitives.Root\n      tremor-id=\"tremor-raw\"\n      open={open}\n      onOpenChange={onOpenChange}\n    >\n      <Trigger\n        placeholder={placeholder}\n        disabled={disabled}\n        className={className}\n        hasError={hasError}\n        aria-required={props.required || props[\"aria-required\"]}\n        aria-invalid={props[\"aria-invalid\"]}\n        aria-label={props[\"aria-label\"]}\n        aria-labelledby={props[\"aria-labelledby\"]}\n      >\n        {displayRange}\n      </Trigger>\n      <CalendarPopover align={align}>\n        <div className=\"flex\">\n          <div className=\"flex flex-col overflow-x-auto sm:flex-row sm:items-start\">\n            {presets && presets.length > 0 && (\n              <div\n                className={cx(\n                  \"relative flex h-16 w-full items-center sm:h-full sm:w-40\",\n                  \"border-b border-gray-200 sm:border-r sm:border-b-0 dark:border-gray-800\",\n                  \"overflow-auto\",\n                )}\n              >\n                <div className=\"absolute px-3 sm:inset-0 sm:left-0 sm:p-2\">\n                  <PresetContainer\n                    currentValue={range}\n                    presets={presets}\n                    onSelect={onRangeChange}\n                  />\n                </div>\n              </div>\n            )}\n            <div className=\"overflow-x-auto\">\n              <CalendarPrimitive\n                mode=\"range\"\n                selected={range}\n                onSelect={onRangeChange}\n                month={month}\n                onMonthChange={setMonth}\n                numberOfMonths={2}\n                disabled={disabledDays}\n                disableNavigation={disableNavigation}\n                enableYearNavigation={enableYearNavigation}\n                locale={locale}\n                initialFocus\n                classNames={{\n                  months:\n                    \"flex flex-row divide-x divide-gray-200 dark:divide-gray-800 overflow-x-auto\",\n                }}\n                {...props}\n              />\n              {showTimePicker && (\n                <div className=\"flex items-center justify-evenly gap-x-3 border-t border-gray-200 p-3 dark:border-gray-800\">\n                  <div className=\"flex flex-1 items-center gap-x-2\">\n                    <span className=\"dark:text-gray-30 text-gray-700\">\n                      {translations?.start ?? \"Start\"}:\n                    </span>\n                    <TimeInput\n                      value={startTime}\n                      onChange={(v) => onTimeChange(v, \"start\")}\n                      aria-label=\"Start date time\"\n                      isDisabled={!range?.from}\n                      isRequired={props.required}\n                    />\n                  </div>\n                  <RiSubtractFill className=\"size-4 shrink-0 text-gray-400\" />\n                  <div className=\"flex flex-1 items-center gap-x-2\">\n                    <span className=\"dark:text-gray-30 text-gray-700\">\n                      {translations?.end ?? \"End\"}:\n                    </span>\n                    <TimeInput\n                      value={endTime}\n                      onChange={(v) => onTimeChange(v, \"end\")}\n                      aria-label=\"End date time\"\n                      isDisabled={!range?.to}\n                      isRequired={props.required}\n                    />\n                  </div>\n                </div>\n              )}\n              <div className=\"border-t border-gray-200 p-3 sm:flex sm:items-center sm:justify-between dark:border-gray-800\">\n                <p className=\"text-gray-900 tabular-nums dark:text-gray-50\">\n                  <span className=\"text-gray-700 dark:text-gray-300\">\n                    {translations?.range ?? \"Range\"}:\n                  </span>{\" \"}\n                  <span className=\"font-medium\">{displayRange}</span>\n                </p>\n                <div className=\"mt-2 flex items-center gap-x-2 sm:mt-0\">\n                  <Button\n                    variant=\"secondary\"\n                    className=\"h-8 w-full sm:w-fit\"\n                    type=\"button\"\n                    onClick={onCancel}\n                  >\n                    {translations?.cancel ?? \"Cancel\"}\n                  </Button>\n                  <Button\n                    variant=\"primary\"\n                    className=\"h-8 w-full sm:w-fit\"\n                    type=\"button\"\n                    onClick={onApply}\n                  >\n                    {translations?.apply ?? \"Apply\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CalendarPopover>\n    </PopoverPrimitives.Root>\n  )\n}\n\n//#region Preset Validation\n// ============================================================================\n\nconst validatePresets = (\n  presets: DateRangePreset[] | DatePreset[],\n  rules: PickerProps,\n) => {\n  const { toYear, fromYear, fromMonth, toMonth, fromDay, toDay } = rules\n\n  if (presets && presets.length > 0) {\n    const fromYearToUse = fromYear\n    const toYearToUse = toYear\n\n    for (const preset of presets) {\n      if (\"date\" in preset) {\n        const presetYear = preset.date.getFullYear()\n\n        if (fromYear && presetYear < fromYear) {\n          throw new Error(\n            `Preset ${preset.label} is before fromYear ${fromYearToUse}.`,\n          )\n        }\n\n        if (toYear && presetYear > toYear) {\n          throw new Error(\n            `Preset ${preset.label} is after toYear ${toYearToUse}.`,\n          )\n        }\n\n        if (fromMonth) {\n          const presetMonth = preset.date.getMonth()\n\n          if (presetMonth < fromMonth.getMonth()) {\n            throw new Error(\n              `Preset ${preset.label} is before fromMonth ${fromMonth}.`,\n            )\n          }\n        }\n\n        if (toMonth) {\n          const presetMonth = preset.date.getMonth()\n\n          if (presetMonth > toMonth.getMonth()) {\n            throw new Error(\n              `Preset ${preset.label} is after toMonth ${toMonth}.`,\n            )\n          }\n        }\n\n        if (fromDay) {\n          const presetDay = preset.date.getDate()\n\n          if (presetDay < fromDay.getDate()) {\n            throw new Error(\n              `Preset ${preset.label} is before fromDay ${fromDay}.`,\n            )\n          }\n        }\n\n        if (toDay) {\n          const presetDay = preset.date.getDate()\n\n          if (presetDay > toDay.getDate()) {\n            throw new Error(\n              `Preset ${preset.label} is after toDay ${format(\n                toDay,\n                \"MMM dd, yyyy\",\n              )}.`,\n            )\n          }\n        }\n      }\n\n      if (\"dateRange\" in preset) {\n        const presetFromYear = preset.dateRange.from?.getFullYear()\n        const presetToYear = preset.dateRange.to?.getFullYear()\n\n        if (presetFromYear && fromYear && presetFromYear < fromYear) {\n          throw new Error(\n            `Preset ${preset.label}'s 'from' is before fromYear ${fromYearToUse}.`,\n          )\n        }\n\n        if (presetToYear && toYear && presetToYear > toYear) {\n          throw new Error(\n            `Preset ${preset.label}'s 'to' is after toYear ${toYearToUse}.`,\n          )\n        }\n\n        if (fromMonth) {\n          const presetMonth = preset.dateRange.from?.getMonth()\n\n          if (presetMonth && presetMonth < fromMonth.getMonth()) {\n            throw new Error(\n              `Preset ${preset.label}'s 'from' is before fromMonth ${format(\n                fromMonth,\n                \"MMM, yyyy\",\n              )}.`,\n            )\n          }\n        }\n\n        if (toMonth) {\n          const presetMonth = preset.dateRange.to?.getMonth()\n\n          if (presetMonth && presetMonth > toMonth.getMonth()) {\n            throw new Error(\n              `Preset ${preset.label}'s 'to' is after toMonth ${format(\n                toMonth,\n                \"MMM, yyyy\",\n              )}.`,\n            )\n          }\n        }\n\n        if (fromDay) {\n          const presetDay = preset.dateRange.from?.getDate()\n\n          if (presetDay && presetDay < fromDay.getDate()) {\n            throw new Error(\n              `Preset ${\n                preset.dateRange.from\n              }'s 'from' is before fromDay ${format(fromDay, \"MMM dd, yyyy\")}.`,\n            )\n          }\n        }\n\n        if (toDay) {\n          const presetDay = preset.dateRange.to?.getDate()\n\n          if (presetDay && presetDay > toDay.getDate()) {\n            throw new Error(\n              `Preset ${preset.label}'s 'to' is after toDay ${format(\n                toDay,\n                \"MMM dd, yyyy\",\n              )}.`,\n            )\n          }\n        }\n      }\n    }\n  }\n}\n\n//#region Types & Exports\n// ============================================================================\n\ntype SingleDatePickerProps = {\n  presets?: DatePreset[]\n  defaultValue?: Date\n  value?: Date\n  onChange?: (date: Date | undefined) => void\n} & PickerProps\n\nconst DatePicker = ({ presets, ...props }: SingleDatePickerProps) => {\n  if (presets) {\n    validatePresets(presets, props)\n  }\n\n  return <SingleDatePicker presets={presets} {...(props as SingleProps)} />\n}\n\nDatePicker.displayName = \"DatePicker\"\n\ntype RangeDatePickerProps = {\n  presets?: DateRangePreset[]\n  defaultValue?: DateRange\n  value?: DateRange\n  onChange?: (dateRange: DateRange | undefined) => void\n} & PickerProps\n\nconst DateRangePicker = ({ presets, ...props }: RangeDatePickerProps) => {\n  if (presets) {\n    validatePresets(presets, props)\n  }\n\n  return <RangeDatePicker presets={presets} {...(props as RangeProps)} />\n}\n\nDateRangePicker.displayName = \"DateRangePicker\"\n\nexport {\n  DatePicker,\n  DateRangePicker,\n  type DatePreset,\n  type DateRangePreset,\n  type DateRange,\n}\n",
      "path": "src/components/DatePicker/DatePicker.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Divider/Divider.tsx",
      "content": "// Tremor Divider [v1.0.0]\n\nimport React from \"react\"\n\nimport { cx } from \"@/utils/cx\"\n\ntype DividerProps = React.ComponentPropsWithoutRef<\"div\">\n\nconst Divider = React.forwardRef<HTMLDivElement, DividerProps>(\n  ({ className, children, ...props }, forwardedRef) => (\n    <div\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"mx-auto my-6 flex w-full items-center justify-between gap-3 text-sm\",\n        // text color\n        \"text-gray-500 dark:text-gray-500\",\n        className,\n      )}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    >\n      {children ? (\n        <>\n          <div\n            className={cx(\n              // base\n              \"h-[1px] w-full\",\n              // background color\n              \"bg-gray-200 dark:bg-gray-800\",\n            )}\n          />\n          <div className=\"whitespace-nowrap text-inherit\">{children}</div>\n          <div\n            className={cx(\n              // base\n              \"h-[1px] w-full\",\n              // background color\n              \"bg-gray-200 dark:bg-gray-800\",\n            )}\n          />\n        </>\n      ) : (\n        <div\n          className={cx(\n            // base\n            \"h-[1px] w-full\",\n            // background color\n            \"bg-gray-200 dark:bg-gray-800\",\n          )}\n        />\n      )}\n    </div>\n  ),\n)\n\nDivider.displayName = \"Divider\"\n\nexport { Divider }\n",
      "path": "src/components/Divider/Divider.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Popover/Popover.tsx",
      "content": "// Tremor Popover [v0.0.3]\n\nimport React from \"react\"\nimport * as PopoverPrimitives from \"@radix-ui/react-popover\"\n\nimport { cx } from \"@/utils/cx\"\n\nconst Popover = (\n  props: React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Root>,\n) => {\n  return <PopoverPrimitives.Root {...props} />\n}\n\nPopover.displayName = \"Popover\"\n\nconst PopoverTrigger = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Trigger>\n>((props, forwardedRef) => {\n  return <PopoverPrimitives.Trigger ref={forwardedRef} {...props} />\n})\n\nPopoverTrigger.displayName = \"PopoverTrigger\"\n\nconst PopoverAnchor = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Anchor>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Anchor>\n>((props, forwardedRef) => {\n  return <PopoverPrimitives.Anchor ref={forwardedRef} {...props} />\n})\n\nPopoverAnchor.displayName = \"PopoverAnchor\"\n\nconst PopoverClose = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Close>\n>((props, forwardedRef) => {\n  return <PopoverPrimitives.Close ref={forwardedRef} {...props} />\n})\n\nPopoverClose.displayName = \"PopoverClose\"\n\ntype ContentProps = React.ComponentPropsWithoutRef<\n  typeof PopoverPrimitives.Content\n>\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Content>,\n  ContentProps\n>(\n  (\n    {\n      className,\n      sideOffset = 10,\n      side = \"bottom\",\n      align = \"center\",\n      collisionPadding,\n      avoidCollisions = true,\n      ...props\n    }: ContentProps,\n    forwardedRef,\n  ) => {\n    return (\n      <PopoverPrimitives.Portal>\n        <PopoverPrimitives.Content\n          ref={forwardedRef}\n          sideOffset={sideOffset}\n          side={side}\n          align={align}\n          collisionPadding={collisionPadding}\n          avoidCollisions={avoidCollisions}\n          className={cx(\n            // base\n            \"max-h-[var(--radix-popper-available-height)] min-w-60 overflow-hidden rounded-md border p-2.5 text-sm shadow-md\",\n            // border color\n            \"border-gray-200 dark:border-gray-800\",\n            // text color\n            \"text-gray-900 dark:text-gray-50\",\n            // background color\n            \"bg-white dark:bg-gray-950\",\n            // transition\n            \"will-change-[transform,opacity]\",\n            \"data-[state=closed]:animate-hide\",\n            \"data-[state=open]:data-[side=bottom]:animate-slide-down-and-fade data-[state=open]:data-[side=left]:animate-slide-left-and-fade data-[state=open]:data-[side=right]:animate-slide-right-and-fade data-[state=open]:data-[side=top]:animate-slide-up-and-fade\",\n\n            className,\n          )}\n          tremor-id=\"tremor-raw\"\n          // https://github.com/radix-ui/primitives/issues/1159\n          onWheel={(event) => {\n            event.stopPropagation()\n            const isScrollingDown = event.deltaY > 0\n            if (isScrollingDown) {\n              event.currentTarget.dispatchEvent(\n                new KeyboardEvent(\"keydown\", { key: \"ArrowDown\" }),\n              )\n            } else {\n              event.currentTarget.dispatchEvent(\n                new KeyboardEvent(\"keydown\", { key: \"ArrowUp\" }),\n              )\n            }\n          }}\n          {...props}\n        />\n      </PopoverPrimitives.Portal>\n    )\n  },\n)\nPopoverContent.displayName = \"PopoverContent\"\n\nexport { Popover, PopoverAnchor, PopoverClose, PopoverContent, PopoverTrigger }\n",
      "path": "src/components/Popover/Popover.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusInput.ts",
      "content": "// Tremor focusInput [v0.0.2]\n\nexport const focusInput = [\n  // base\n  \"focus:ring-2\",\n  // ring color\n  \"focus:ring-blue-200 dark:focus:ring-blue-700/30\",\n  // border color\n  \"focus:border-blue-500 dark:focus:border-blue-700\",\n]\n",
      "path": "src/utils/focusInput.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/hasErrorInput.ts",
      "content": "// Tremor hasErrorInput [v0.0.1]\n\nexport const hasErrorInput = [\n  // base\n  \"ring-2\",\n  // border color\n  \"border-red-500 dark:border-red-700\",\n  // ring color\n  \"ring-red-200 dark:ring-red-700/30\",\n]\n",
      "path": "src/utils/hasErrorInput.ts"
    }
  ]
}
