{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-05",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/pricing/pricing-05.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Check } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PricingTier {\n    name: string;\n    price: number;\n    description: string;\n    features: string[];\n    highlight?: boolean;\n}\n\nconst defaultTiers: PricingTier[] = [\n    {\n        name: \"Basic\",\n        price: 9,\n        description: \"Essential features for small teams\",\n        features: [\n            \"5 Team Members\",\n            \"Basic Analytics\",\n            \"Community Support\",\n            \"1GB Storage\",\n        ],\n    },\n    {\n        name: \"Pro\",\n        price: 29,\n        description: \"Everything you need to scale\",\n        highlight: true,\n        features: [\n            \"Unlimited Members\",\n            \"Advanced Analytics\",\n            \"Priority Support\",\n            \"Unlimited Storage\",\n            \"Custom Integrations\",\n        ],\n    },\n];\n\nexport default function Pricing_05() {\n    return (\n        <div className=\"w-full max-w-3xl mx-auto px-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {defaultTiers.map((tier) => (\n                    <div\n                        key={tier.name}\n                        className={cn(\n                            \"relative\",\n                            \"bg-white dark:bg-black\",\n                            \"border border-zinc-200 dark:border-zinc-800\",\n                            \"rounded-lg overflow-hidden\",\n                            tier.highlight && [\n                                \"before:absolute before:inset-0\",\n                                \"before:border before:border-black dark:before:border-white\",\n                                \"before:rounded-lg before:pointer-events-none\",\n                                \"before:-m-[1px]\"\n                            ]\n                        )}\n                    >\n                        {/* Header */}\n                        <div className=\"p-6 border-b border-zinc-100 dark:border-zinc-800\">\n                            <div className=\"flex justify-between items-baseline mb-2\">\n                                <h3 className=\"text-sm font-medium tracking-wide uppercase\">\n                                    {tier.name}\n                                </h3>\n                                {tier.highlight && (\n                                    <span className=\"text-[10px] font-medium uppercase tracking-wider px-2 py-0.5 rounded-full bg-zinc-900 text-white dark:bg-white dark:text-black\">\n                                        Popular\n                                    </span>\n                                )}\n                            </div>\n                            <div className=\"flex items-baseline gap-1\">\n                                <span className=\"text-2xl font-semibold\">${tier.price}</span>\n                                <span className=\"text-sm text-zinc-500 dark:text-zinc-400\">/month</span>\n                            </div>\n                            <p className=\"mt-2 text-xs text-zinc-500 dark:text-zinc-400\">\n                                {tier.description}\n                            </p>\n                        </div>\n\n                        {/* Features */}\n                        <div className=\"p-6\">\n                            <div className=\"space-y-3\">\n                                {tier.features.map((feature) => (\n                                    <div \n                                        key={feature}\n                                        className=\"flex items-start gap-3 text-sm\"\n                                    >\n                                        <Check className=\"w-4 h-4 mt-0.5 text-zinc-900 dark:text-white\" />\n                                        <span>{feature}</span>\n                                    </div>\n                                ))}\n                            </div>\n\n                            {/* CTA Button */}\n                            <div className=\"mt-6\">\n                                <Button \n                                    className={cn(\n                                        \"w-full h-9\",\n                                        \"text-xs font-medium tracking-wide\",\n                                        tier.highlight\n                                            ? \"bg-zinc-900 text-white hover:bg-zinc-800 dark:bg-white dark:text-black dark:hover:bg-zinc-100\"\n                                            : \"bg-white text-zinc-900 border border-zinc-200 hover:bg-zinc-50 dark:bg-black dark:text-white dark:border-zinc-800 dark:hover:bg-zinc-900\"\n                                    )}\n                                >\n                                    Get started\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n} ",
      "path": "components/kokonutui/pricing/pricing-05.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n}\n",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    }
  ]
}
