{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "liquid-glass-card",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/liquid-glass-card.tsx",
      "content": "\"use client\";\n\n/**\n * @author: @dorian_baffier\n * @description: Liquid Glass Card\n * @version: 1.0.0\n * @date: 2025-06-26\n * @license: MIT\n * @website: https://kokonutui.com\n * @github: https://github.com/kokonut-labs/kokonutui\n */\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { ArrowRight, ArrowLeft, Play, Pause } from \"lucide-react\";\n\nconst liquidbuttonVariants = cva(\n    \"inline-flex items-center transition-colors justify-center cursor-pointer gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-transparent hover:scale-105 duration-300 transition text-primary\",\n                destructive:\n                    \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n                outline:\n                    \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n                secondary:\n                    \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n                ghost: \"hover:bg-accent hover:text-accent-foreground\",\n                link: \"text-primary underline-offset-4 hover:underline\",\n            },\n            size: {\n                default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n                sm: \"h-8 text-xs gap-1.5 px-4 has-[>svg]:px-4\",\n                lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n                xl: \"h-12 rounded-md px-8 has-[>svg]:px-6\",\n                xxl: \"h-14 rounded-md px-10 has-[>svg]:px-8\",\n                icon: \"size-9\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"xxl\",\n        },\n    }\n);\n\ninterface LiquidButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof liquidbuttonVariants> {\n    asChild?: boolean;\n}\n\nfunction ButtonGlassFilter() {\n    const filterId = React.useId();\n    return (\n        <svg className=\"hidden\">\n            <title>Glass Effect Filter</title>\n            <defs>\n                <filter\n                    id={filterId}\n                    x=\"0%\"\n                    y=\"0%\"\n                    width=\"100%\"\n                    height=\"100%\"\n                    colorInterpolationFilters=\"sRGB\"\n                >\n                    <feTurbulence\n                        type=\"fractalNoise\"\n                        baseFrequency=\"0.05 0.05\"\n                        numOctaves=\"1\"\n                        seed=\"1\"\n                        result=\"turbulence\"\n                    />\n                    <feGaussianBlur\n                        in=\"turbulence\"\n                        stdDeviation=\"2\"\n                        result=\"blurredNoise\"\n                    />\n                    <feDisplacementMap\n                        in=\"SourceGraphic\"\n                        in2=\"blurredNoise\"\n                        scale=\"70\"\n                        xChannelSelector=\"R\"\n                        yChannelSelector=\"B\"\n                        result=\"displaced\"\n                    />\n                    <feGaussianBlur\n                        in=\"displaced\"\n                        stdDeviation=\"4\"\n                        result=\"finalBlur\"\n                    />\n                    <feComposite\n                        in=\"finalBlur\"\n                        in2=\"finalBlur\"\n                        operator=\"over\"\n                    />\n                </filter>\n            </defs>\n        </svg>\n    );\n}\n\nconst LiquidButton = React.forwardRef<HTMLButtonElement, LiquidButtonProps>(\n    (\n        { className, variant, size, asChild = false, children, ...props },\n        ref\n    ) => {\n        const Comp = asChild ? Slot : \"button\";\n        const filterId = React.useId();\n\n        return (\n            <>\n                <Comp\n                    data-slot=\"button\"\n                    className={cn(\n                        \"relative\",\n                        liquidbuttonVariants({ variant, size, className })\n                    )}\n                    ref={ref}\n                    {...props}\n                >\n                    <div\n                        className=\"absolute top-0 left-0 z-0 h-full w-full rounded-full \n              shadow-[0_0_6px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3px_rgba(0,0,0,0.9),inset_-3px_-3px_0.5px_-3px_rgba(0,0,0,0.85),inset_1px_1px_1px_-0.5px_rgba(0,0,0,0.6),inset_-1px_-1px_1px_-0.5px_rgba(0,0,0,0.6),inset_0_0_6px_6px_rgba(0,0,0,0.12),inset_0_0_2px_2px_rgba(0,0,0,0.06),0_0_12px_rgba(255,255,255,0.15)] \n          transition-all \n          dark:shadow-[0_0_8px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3.5px_rgba(255,255,255,0.09),inset_-3px_-3px_0.5px_-3.5px_rgba(255,255,255,0.85),inset_1px_1px_1px_-0.5px_rgba(255,255,255,0.6),inset_-1px_-1px_1px_-0.5px_rgba(255,255,255,0.6),inset_0_0_6px_6px_rgba(255,255,255,0.12),inset_0_0_2px_2px_rgba(255,255,255,0.06),0_0_12px_rgba(0,0,0,0.15)]\"\n                    />\n                    <div\n                        className=\"absolute top-0 left-0 isolate -z-10 h-full w-full overflow-hidden rounded-md\"\n                        style={{ backdropFilter: `url(\"#${filterId}\")` }}\n                    />\n\n                    <div className=\"pointer-events-none z-10\">{children}</div>\n                    <ButtonGlassFilter />\n                </Comp>\n            </>\n        );\n    }\n);\n\nLiquidButton.displayName = \"LiquidButton\";\n\nconst cardVariants = cva(\n    \"relative overflow-hidden rounded-lg transition-all duration-300 group bg-background/20\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"hover:scale-[1.01] text-foreground backdrop-blur-[2px]\",\n                primary:\n                    \"bg-primary/5 hover:bg-primary/5 text-foreground backdrop-blur-[2px]\",\n                destructive:\n                    \"bg-destructive/5 hover:bg-destructive/10 text-foreground backdrop-blur-[2px]\",\n                secondary:\n                    \"bg-secondary/5 hover:bg-secondary/10 text-foreground backdrop-blur-[2px]\",\n            },\n            size: {\n                default: \"p-6\",\n                sm: \"p-4\",\n                lg: \"p-8\",\n                xl: \"p-10\",\n            },\n            hover: {\n                default: \"hover:scale-[1.02]\",\n                none: \"\",\n                glow: \"hover:shadow-lg hover:shadow-primary/20\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n            hover: \"default\",\n        },\n    }\n);\n\nexport interface LiquidGlassCardProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof cardVariants> {\n    asChild?: boolean;\n    glassEffect?: boolean;\n}\n\nfunction GlassFilter() {\n    const filterId = React.useId();\n\n    return (\n        <svg className=\"hidden\">\n            <title>Glass Effect Filter</title>\n            <defs>\n                <filter\n                    id={filterId}\n                    x=\"-50%\"\n                    y=\"-50%\"\n                    width=\"200%\"\n                    height=\"200%\"\n                    colorInterpolationFilters=\"sRGB\"\n                >\n                    <feTurbulence\n                        type=\"fractalNoise\"\n                        baseFrequency=\"0.05 0.05\"\n                        numOctaves=\"1\"\n                        seed=\"1\"\n                        result=\"turbulence\"\n                    />\n                    <feGaussianBlur\n                        in=\"turbulence\"\n                        stdDeviation=\"2\"\n                        result=\"blurredNoise\"\n                    />\n                    <feDisplacementMap\n                        in=\"SourceGraphic\"\n                        in2=\"blurredNoise\"\n                        scale=\"30\"\n                        xChannelSelector=\"R\"\n                        yChannelSelector=\"B\"\n                        result=\"displaced\"\n                    />\n                    <feGaussianBlur\n                        in=\"displaced\"\n                        stdDeviation=\"4\"\n                        result=\"finalBlur\"\n                    />\n                    <feComposite\n                        in=\"finalBlur\"\n                        in2=\"finalBlur\"\n                        operator=\"over\"\n                    />\n                </filter>\n            </defs>\n        </svg>\n    );\n}\n\n// Card Header Component\ninterface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n    title: string;\n    subtitle?: string;\n    icon?: React.ReactNode;\n}\n\nfunction CardHeader({\n    title,\n    subtitle,\n    icon,\n    className,\n    ...props\n}: CardHeaderProps) {\n    return (\n        <div\n            className={cn(\"flex items-start justify-between gap-4\", className)}\n            {...props}\n        >\n            <div className=\"space-y-1.5\">\n                <h3 className=\"font-semibold leading-none tracking-tight text-foreground\">\n                    {title}\n                </h3>\n                {subtitle && (\n                    <p className=\"text-sm text-muted-foreground/80\">\n                        {subtitle}\n                    </p>\n                )}\n            </div>\n            {icon && <div className=\"text-muted-foreground/70\">{icon}</div>}\n        </div>\n    );\n}\n\n// Card Content Component\nfunction CardContent({\n    className,\n    ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n    return <div className={cn(\"pt-6 text-foreground\", className)} {...props} />;\n}\n\nconst LiquidGlassCard = React.forwardRef<HTMLDivElement, LiquidGlassCardProps>(\n    (\n        {\n            className,\n            variant,\n            size,\n            hover,\n            asChild = false,\n            glassEffect = true,\n            children,\n            ...props\n        },\n        ref\n    ) => {\n        const Comp = asChild ? Slot : \"div\";\n        const filterId = React.useId();\n\n        return (\n            <>\n                <Comp\n                    ref={ref}\n                    className={cn(\n                        \"relative\",\n                        cardVariants({ variant, size, hover, className })\n                    )}\n                    {...props}\n                >\n                    {/* Glass effect overlay */}\n                    <div\n                        className=\"absolute inset-0 z-0 h-full w-full rounded-lg \n          shadow-[0_0_6px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3px_rgba(0,0,0,0.9),inset_-3px_-3px_0.5px_-3px_rgba(0,0,0,0.85),inset_1px_1px_1px_-0.5px_rgba(0,0,0,0.6),inset_-1px_-1px_1px_-0.5px_rgba(0,0,0,0.6),inset_0_0_6px_6px_rgba(0,0,0,0.12),inset_0_0_2px_2px_rgba(0,0,0,0.06),0_0_12px_rgba(255,255,255,0.15)] \n          transition-all \n          pointer-events-none\n          dark:shadow-[0_0_8px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3.5px_rgba(255,255,255,0.09),inset_-3px_-3px_0.5px_-3.5px_rgba(255,255,255,0.85),inset_1px_1px_1px_-0.5px_rgba(255,255,255,0.6),inset_-1px_-1px_1px_-0.5px_rgba(255,255,255,0.6),inset_0_0_6px_6px_rgba(255,255,255,0.12),inset_0_0_2px_2px_rgba(255,255,255,0.06),0_0_12px_rgba(0,0,0,0.15)]\"\n                    />\n\n                    {/* Glass filter effect */}\n                    {glassEffect && (\n                        <div\n                            className=\"absolute inset-0 -z-10 h-full w-full overflow-hidden rounded-lg\"\n                            style={{ backdropFilter: `url(\"#${filterId}\")` }}\n                        />\n                    )}\n\n                    {/* Content */}\n                    <div className=\"relative z-10\">{children}</div>\n\n                    {/* Shine effect on hover */}\n                    <div className=\"absolute inset-0 z-20 rounded-lg bg-gradient-to-r from-transparent dark:via-white/5 via-black/5 to-transparent opacity-0 transition-opacity duration-200 group-hover:opacity-100 pointer-events-none\" />\n\n                    {glassEffect && <GlassFilter />}\n                </Comp>\n            </>\n        );\n    }\n);\n\nLiquidGlassCard.displayName = \"LiquidGlassCard\";\n\n// Remove the hello text and fix the time display\nexport function NotificationCenter() {\n    // Track current time and playing state\n    const [isPlaying, setIsPlaying] = React.useState(true);\n    const [currentTime, setCurrentTime] = React.useState(45);\n    const totalDuration = React.useMemo(() => 225, []); // 3:45 in seconds\n\n    // Format time in MM:SS\n    const formatTime = React.useCallback((timeInSeconds: number) => {\n        const minutes = Math.floor(timeInSeconds / 60);\n        const seconds = Math.floor(timeInSeconds % 60);\n        return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n    }, []);\n\n    // Calculate progress percentage\n    const progress = (currentTime / totalDuration) * 100;\n\n    // Update progress when playing\n    React.useEffect(() => {\n        let intervalId: NodeJS.Timeout;\n\n        if (isPlaying && currentTime < totalDuration) {\n            intervalId = setInterval(() => {\n                setCurrentTime((prev) => {\n                    if (prev >= totalDuration) {\n                        clearInterval(intervalId);\n                        setIsPlaying(false);\n                        return totalDuration;\n                    }\n                    return prev + 1;\n                });\n            }, 1000);\n        }\n\n        return () => {\n            if (intervalId) clearInterval(intervalId);\n        };\n    }, [isPlaying, currentTime, totalDuration]);\n\n    // Handle play/pause\n    const handlePlayPause = () => {\n        setIsPlaying(!isPlaying);\n    };\n\n    // Handle seek\n    const handleSeek = (\n        e:\n            | React.MouseEvent<HTMLButtonElement>\n            | React.KeyboardEvent<HTMLButtonElement>\n    ) => {\n        const bar = e.currentTarget.parentElement;\n        if (!bar) return;\n\n        const rect = bar.getBoundingClientRect();\n        let percent: number;\n\n        if (\"clientX\" in e) {\n            // Mouse event\n            const x = e.clientX - rect.left;\n            percent = x / rect.width;\n        } else {\n            // Keyboard event\n            switch (e.key) {\n                case \"ArrowLeft\":\n                    percent = (currentTime - 5) / totalDuration;\n                    break;\n                case \"ArrowRight\":\n                    percent = (currentTime + 5) / totalDuration;\n                    break;\n                default:\n                    return;\n            }\n        }\n\n        const newTime = percent * totalDuration;\n        setCurrentTime(Math.min(Math.max(0, newTime), totalDuration));\n    };\n\n    return (\n        <div className=\"w-full max-w-sm\">\n            <LiquidGlassCard\n                variant=\"primary\"\n                className=\"relative z-30\"\n                hover=\"glow\"\n            >\n                <div className=\"flex items-start gap-4\">\n                    {/* Profile Image */}\n                    <div className=\"relative h-16 w-16 shrink-0 overflow-hidden rounded-2xl\">\n                        <img\n                            src=\"https://ferf1mheo22r9ira.public.blob.vercel-storage.com/portrait2-x5MjJSaQ9ed0HZrewEhH7TkZwjZ66K.jpeg\"\n                            alt=\"Profile\"\n                            className=\"h-full w-full object-cover\"\n                        />\n                        <div className=\"absolute inset-0 ring-1 ring-inset ring-black/10 dark:ring-white/10\" />\n                    </div>\n\n                    <div className=\"flex-1\">\n                        <CardHeader\n                            title=\"Now Playing\"\n                            subtitle=\"Lofi Beats - Chill Mix\"\n                        />\n                    </div>\n                </div>\n\n                <CardContent>\n                    {/* Progress Bar */}\n                    <div className=\"space-y-2\">\n                        <div\n                            className=\"relative h-1.5 w-full overflow-hidden rounded-full bg-zinc-200/50 dark:bg-zinc-800/50\"\n                            role=\"presentation\"\n                        >\n                            {/* Background gradient */}\n                            <div className=\"absolute inset-0 bg-gradient-to-r from-zinc-300/20 via-zinc-300/30 to-zinc-300/20 dark:from-white/5 dark:via-white/10 dark:to-white/5\" />\n\n                            {/* Progress indicator */}\n                            <div\n                                className=\"absolute inset-y-0 left-0 flex bg-gradient-to-r from-black/50 via-black/50 to-black/50 dark:from-white/80 dark:via-white/80 dark:to-white/80 transition-all duration-200 ease-out\"\n                                style={{\n                                    width: `${progress}%`,\n                                }}\n                            >\n                                {/* Shine effect */}\n                                <div className=\"absolute inset-0 bg-gradient-to-t from-black/5 to-white/5\" />\n                            </div>\n\n                            {/* Interactive seek button (invisible but functional) */}\n                            <button\n                                type=\"button\"\n                                className=\"absolute inset-0 h-full w-full cursor-pointer\"\n                                onClick={handleSeek}\n                                onKeyDown={handleSeek}\n                                aria-label={`Seek to ${formatTime(currentTime)} of ${formatTime(totalDuration)}`}\n                                aria-valuemin={0}\n                                aria-valuemax={totalDuration}\n                                aria-valuenow={currentTime}\n                                role=\"slider\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between text-xs font-medium\">\n                            <span className=\"tabular-nums text-zinc-600 dark:text-zinc-400\">\n                                {formatTime(currentTime)}\n                            </span>\n                            <span className=\"tabular-nums text-zinc-600 dark:text-zinc-400\">\n                                {formatTime(totalDuration)}\n                            </span>\n                        </div>\n                    </div>\n\n                    <div className=\"mt-6 flex items-center justify-center gap-6\">\n                        <LiquidButton\n                            variant=\"default\"\n                            size=\"icon\"\n                            className=\"rounded-full text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100\"\n                            aria-label=\"Previous track\"\n                        >\n                            <ArrowLeft className=\"size-5\" />\n                        </LiquidButton>\n                        <LiquidButton\n                            variant=\"default\"\n                            size=\"icon\"\n                            className=\"rounded-full text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100\"\n                            aria-label={isPlaying ? \"Pause\" : \"Play\"}\n                            onClick={handlePlayPause}\n                        >\n                            {isPlaying ? (\n                                <Pause className=\"size-5\" />\n                            ) : (\n                                <Play className=\"size-5\" />\n                            )}\n                        </LiquidButton>\n                        <LiquidButton\n                            variant=\"default\"\n                            size=\"icon\"\n                            className=\"rounded-full text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100\"\n                            aria-label=\"Next track\"\n                        >\n                            <ArrowRight className=\"size-5\" />\n                        </LiquidButton>\n                    </div>\n                </CardContent>\n            </LiquidGlassCard>\n        </div>\n    );\n}\n\nexport default NotificationCenter;\n",
      "path": "components/kokonutui/liquid-glass-card.tsx"
    }
  ]
}
