{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-skeleton-demo",
  "type": "registry:file",
  "dependencies": [
    "@kobalte/core",
    "clsx",
    "solid-js",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "example/skeleton-demo.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\"\n\nexport default function SkeletonDemo() {\n  return (\n    <div class=\"flex items-center space-x-4\">\n      <Skeleton height={48} circle animate={false} />\n      <div class=\"space-y-2\">\n        <Skeleton height={16} width={250} radius={10} />\n        <Skeleton height={16} width={200} radius={10} />\n      </div>\n    </div>\n  )\n}\n",
      "path": "src/registry/example/skeleton-demo.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import type { ClassValue } from \"clsx\"\nimport { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return val > max ? max : val < min ? min : val\n}\n\nexport function toggleValue<T>(array: T[], value: T): T[] {\n  return array.includes(value) ? array.filter((item) => item !== value) : [...array, value]\n}\n",
      "path": "src/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/skeleton.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as SkeletonPrimitive from \"@kobalte/core/skeleton\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype SkeletonRootProps<T extends ValidComponent = \"div\"> =\n  SkeletonPrimitive.SkeletonRootProps<T> & { class?: string | undefined }\n\nconst Skeleton = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SkeletonRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as SkeletonRootProps, [\"class\"])\n  return (\n    <SkeletonPrimitive.Root\n      class={cn(\"bg-primary/10 data-[animate='true']:animate-pulse\", local.class)}\n      {...others}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "path": "src/registry/ui/skeleton.tsx"
    }
  ]
}
