{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "src/components/ProgressBar/ProgressBar",
  "type": "registry:file",
  "dependencies": [
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "src/components/ProgressBar/ProgressBar.tsx",
      "content": "// Tremor ProgressBar [v0.0.3]\n\nimport React from \"react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"../../utils/cx\"\n\nconst progressBarVariants = tv({\n  slots: {\n    background: \"\",\n    bar: \"\",\n  },\n  variants: {\n    variant: {\n      default: {\n        background: \"bg-blue-200 dark:bg-blue-500/30\",\n        bar: \"bg-blue-500 dark:bg-blue-500\",\n      },\n      neutral: {\n        background: \"bg-gray-200 dark:bg-gray-500/40\",\n        bar: \"bg-gray-500 dark:bg-gray-500\",\n      },\n      warning: {\n        background: \"bg-yellow-200 dark:bg-yellow-500/30\",\n        bar: \"bg-yellow-500 dark:bg-yellow-500\",\n      },\n      error: {\n        background: \"bg-red-200 dark:bg-red-500/30\",\n        bar: \"bg-red-500 dark:bg-red-500\",\n      },\n      success: {\n        background: \"bg-emerald-200 dark:bg-emerald-500/30\",\n        bar: \"bg-emerald-500 dark:bg-emerald-500\",\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n})\n\ninterface ProgressBarProps\n  extends React.HTMLProps<HTMLDivElement>,\n    VariantProps<typeof progressBarVariants> {\n  value?: number\n  max?: number\n  showAnimation?: boolean\n  label?: string\n}\n\nconst ProgressBar = React.forwardRef<HTMLDivElement, ProgressBarProps>(\n  (\n    {\n      value = 0,\n      max = 100,\n      label,\n      showAnimation = false,\n      variant,\n      className,\n      ...props\n    }: ProgressBarProps,\n    forwardedRef,\n  ) => {\n    const safeValue = Math.min(max, Math.max(value, 0))\n    const { background, bar } = progressBarVariants({ variant })\n    return (\n      <div\n        ref={forwardedRef}\n        className={cx(\"flex w-full items-center\", className)}\n        role=\"progressbar\"\n        aria-label=\"Progress bar\"\n        aria-valuenow={value}\n        aria-valuemax={max}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        <div\n          className={cx(\n            \"relative flex h-2 w-full items-center rounded-full\",\n            background(),\n          )}\n        >\n          <div\n            className={cx(\n              \"h-full flex-col rounded-full\",\n              bar(),\n              showAnimation &&\n                \"transform-gpu transition-all duration-300 ease-in-out\",\n            )}\n            style={{\n              width: max ? `${(safeValue / max) * 100}%` : `${safeValue}%`,\n            }}\n          />\n        </div>\n        {label ? (\n          <span\n            className={cx(\n              // base\n              \"ml-2 whitespace-nowrap text-sm font-medium leading-none\",\n              // text color\n              \"text-gray-900 dark:text-gray-50\",\n            )}\n          >\n            {label}\n          </span>\n        ) : null}\n      </div>\n    )\n  },\n)\n\nProgressBar.displayName = \"ProgressBar\"\n\nexport { ProgressBar, progressBarVariants, type ProgressBarProps }\n",
      "path": "src/components/ProgressBar/ProgressBar.tsx"
    },
    {
      "type": "registry:file",
      "target": "src/utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    }
  ]
}
