{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-554",
  "type": "registry:component",
  "dependencies": [
    "@origin-space/image-cropper",
    "@radix-ui/react-dialog",
    "@radix-ui/react-slider",
    "@radix-ui/react-slot",
    "@radix-ui/react-tooltip",
    "class-variance-authority",
    "lucide-react",
    "react"
  ],
  "registryDependencies": [
    "https://originui.com/r/button.json",
    "https://originui.com/r/cropper.json",
    "https://originui.com/r/dialog.json",
    "https://originui.com/r/select.json",
    "https://originui.com/r/slider.json"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/comp-554.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useEffect, useRef, useState } from \"react\"\nimport {\n  ArrowLeftIcon,\n  CircleUserRoundIcon,\n  XIcon,\n  ZoomInIcon,\n  ZoomOutIcon,\n} from \"lucide-react\"\n\nimport { useFileUpload } from \"@/hooks/use-file-upload\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Cropper,\n  CropperCropArea,\n  CropperDescription,\n  CropperImage,\n} from \"@/components/ui/cropper\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Slider } from \"@/components/ui/slider\"\n\n// Define type for pixel crop area\ntype Area = { x: number; y: number; width: number; height: number }\n\n// Helper function to create a cropped image blob\nconst createImage = (url: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const image = new Image()\n    image.addEventListener(\"load\", () => resolve(image))\n    image.addEventListener(\"error\", (error) => reject(error))\n    image.setAttribute(\"crossOrigin\", \"anonymous\") // Needed for canvas Tainted check\n    image.src = url\n  })\n\nasync function getCroppedImg(\n  imageSrc: string,\n  pixelCrop: Area,\n  outputWidth: number = pixelCrop.width, // Optional: specify output size\n  outputHeight: number = pixelCrop.height\n): Promise<Blob | null> {\n  try {\n    const image = await createImage(imageSrc)\n    const canvas = document.createElement(\"canvas\")\n    const ctx = canvas.getContext(\"2d\")\n\n    if (!ctx) {\n      return null\n    }\n\n    // Set canvas size to desired output size\n    canvas.width = outputWidth\n    canvas.height = outputHeight\n\n    // Draw the cropped image onto the canvas\n    ctx.drawImage(\n      image,\n      pixelCrop.x,\n      pixelCrop.y,\n      pixelCrop.width,\n      pixelCrop.height,\n      0,\n      0,\n      outputWidth, // Draw onto the output size\n      outputHeight\n    )\n\n    // Convert canvas to blob\n    return new Promise((resolve) => {\n      canvas.toBlob((blob) => {\n        resolve(blob)\n      }, \"image/jpeg\") // Specify format and quality if needed\n    })\n  } catch (error) {\n    console.error(\"Error in getCroppedImg:\", error)\n    return null\n  }\n}\n\nexport default function Component() {\n  const [\n    { files, isDragging },\n    {\n      handleDragEnter,\n      handleDragLeave,\n      handleDragOver,\n      handleDrop,\n      openFileDialog,\n      removeFile,\n      getInputProps,\n    },\n  ] = useFileUpload({\n    accept: \"image/*\",\n  })\n\n  const previewUrl = files[0]?.preview || null\n  const fileId = files[0]?.id\n\n  const [finalImageUrl, setFinalImageUrl] = useState<string | null>(null)\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n\n  // Ref to track the previous file ID to detect new uploads\n  const previousFileIdRef = useRef<string | undefined | null>(null)\n\n  // State to store the desired crop area in pixels\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState<Area | null>(null)\n\n  // State for zoom level\n  const [zoom, setZoom] = useState(1)\n\n  // Callback for Cropper to provide crop data - Wrap with useCallback\n  const handleCropChange = useCallback((pixels: Area | null) => {\n    setCroppedAreaPixels(pixels)\n  }, [])\n\n  const handleApply = async () => {\n    // Check if we have the necessary data\n    if (!previewUrl || !fileId || !croppedAreaPixels) {\n      console.error(\"Missing data for apply:\", {\n        previewUrl,\n        fileId,\n        croppedAreaPixels,\n      })\n      // Remove file if apply is clicked without crop data?\n      if (fileId) {\n        removeFile(fileId)\n        setCroppedAreaPixels(null)\n      }\n      return\n    }\n\n    try {\n      // 1. Get the cropped image blob using the helper\n      const croppedBlob = await getCroppedImg(previewUrl, croppedAreaPixels)\n\n      if (!croppedBlob) {\n        throw new Error(\"Failed to generate cropped image blob.\")\n      }\n\n      // 2. Create a NEW object URL from the cropped blob\n      const newFinalUrl = URL.createObjectURL(croppedBlob)\n\n      // 3. Revoke the OLD finalImageUrl if it exists\n      if (finalImageUrl) {\n        URL.revokeObjectURL(finalImageUrl)\n      }\n\n      // 4. Set the final avatar state to the NEW URL\n      setFinalImageUrl(newFinalUrl)\n\n      // 5. Close the dialog (don't remove the file yet)\n      setIsDialogOpen(false)\n    } catch (error) {\n      console.error(\"Error during apply:\", error)\n      // Close the dialog even if cropping fails\n      setIsDialogOpen(false)\n    }\n  }\n\n  const handleRemoveFinalImage = () => {\n    if (finalImageUrl) {\n      URL.revokeObjectURL(finalImageUrl)\n    }\n    setFinalImageUrl(null)\n  }\n\n  useEffect(() => {\n    const currentFinalUrl = finalImageUrl\n    // Cleanup function\n    return () => {\n      if (currentFinalUrl && currentFinalUrl.startsWith(\"blob:\")) {\n        URL.revokeObjectURL(currentFinalUrl)\n      }\n    }\n  }, [finalImageUrl])\n\n  // Effect to open dialog when a *new* file is ready\n  useEffect(() => {\n    // Check if fileId exists and is different from the previous one\n    if (fileId && fileId !== previousFileIdRef.current) {\n      setIsDialogOpen(true) // Open dialog for the new file\n      setCroppedAreaPixels(null) // Reset crop area for the new file\n      setZoom(1) // Reset zoom for the new file\n    }\n    // Update the ref to the current fileId for the next render\n    previousFileIdRef.current = fileId\n  }, [fileId]) // Depend only on fileId\n\n  return (\n    <div className=\"flex flex-col items-center gap-2\">\n      <div className=\"relative inline-flex\">\n        {/* Drop area - uses finalImageUrl */}\n        <button\n          className=\"border-input hover:bg-accent/50 data-[dragging=true]:bg-accent/50 focus-visible:border-ring focus-visible:ring-ring/50 relative flex size-16 items-center justify-center overflow-hidden rounded-full border border-dashed transition-colors outline-none focus-visible:ring-[3px] has-disabled:pointer-events-none has-disabled:opacity-50 has-[img]:border-none\"\n          onClick={openFileDialog}\n          onDragEnter={handleDragEnter}\n          onDragLeave={handleDragLeave}\n          onDragOver={handleDragOver}\n          onDrop={handleDrop}\n          data-dragging={isDragging || undefined}\n          aria-label={finalImageUrl ? \"Change image\" : \"Upload image\"}\n        >\n          {finalImageUrl ? (\n            <img\n              className=\"size-full object-cover\"\n              src={finalImageUrl}\n              alt=\"User avatar\"\n              width={64}\n              height={64}\n              style={{ objectFit: \"cover\" }}\n            />\n          ) : (\n            <div aria-hidden=\"true\">\n              <CircleUserRoundIcon className=\"size-4 opacity-60\" />\n            </div>\n          )}\n        </button>\n        {/* Remove button - depends on finalImageUrl */}\n        {finalImageUrl && (\n          <Button\n            onClick={handleRemoveFinalImage}\n            size=\"icon\"\n            className=\"border-background focus-visible:border-background absolute -top-1 -right-1 size-6 rounded-full border-2 shadow-none\"\n            aria-label=\"Remove image\"\n          >\n            <XIcon className=\"size-3.5\" />\n          </Button>\n        )}\n        <input\n          {...getInputProps()}\n          className=\"sr-only\"\n          aria-label=\"Upload image file\"\n          tabIndex={-1}\n        />\n      </div>\n\n      {/* Cropper Dialog - Use isDialogOpen for open prop */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"gap-0 p-0 sm:max-w-140 *:[button]:hidden\">\n          <DialogDescription className=\"sr-only\">\n            Crop image dialog\n          </DialogDescription>\n          <DialogHeader className=\"contents space-y-0 text-left\">\n            <DialogTitle className=\"flex items-center justify-between border-b p-4 text-base\">\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"-my-1 opacity-60\"\n                  onClick={() => setIsDialogOpen(false)}\n                  aria-label=\"Cancel\"\n                >\n                  <ArrowLeftIcon aria-hidden=\"true\" />\n                </Button>\n                <span>Crop image</span>\n              </div>\n              <Button\n                className=\"-my-1\"\n                onClick={handleApply}\n                disabled={!previewUrl}\n                autoFocus\n              >\n                Apply\n              </Button>\n            </DialogTitle>\n          </DialogHeader>\n          {previewUrl && (\n            <Cropper\n              className=\"h-96 sm:h-120\"\n              image={previewUrl}\n              zoom={zoom}\n              onCropChange={handleCropChange}\n              onZoomChange={setZoom}\n            >\n              <CropperDescription />\n              <CropperImage />\n              <CropperCropArea />\n            </Cropper>\n          )}\n          <DialogFooter className=\"border-t px-4 py-6\">\n            <div className=\"mx-auto flex w-full max-w-80 items-center gap-4\">\n              <ZoomOutIcon\n                className=\"shrink-0 opacity-60\"\n                size={16}\n                aria-hidden=\"true\"\n              />\n              <Slider\n                defaultValue={[1]}\n                value={[zoom]}\n                min={1}\n                max={3}\n                step={0.1}\n                onValueChange={(value) => setZoom(value[0])}\n                aria-label=\"Zoom slider\"\n              />\n              <ZoomInIcon\n                className=\"shrink-0 opacity-60\"\n                size={16}\n                aria-hidden=\"true\"\n              />\n            </div>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <p\n        aria-live=\"polite\"\n        role=\"region\"\n        className=\"text-muted-foreground mt-2 text-xs\"\n      >\n        Avatar{\" \"}\n        <a\n          href=\"https://github.com/origin-space/originui/tree/main/docs/use-file-upload.md\"\n          className=\"hover:text-foreground underline\"\n          target=\"_blank\"\n        >\n          uploader\n        </a>{\" \"}\n        with{\" \"}\n        <a\n          href=\"https://github.com/origin-space/image-cropper\"\n          className=\"hover:text-foreground underline\"\n          target=\"_blank\"\n        >\n          cropper\n        </a>\n      </p>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/comp-554.tsx"
    },
    {
      "type": "registry:hook",
      "target": "hooks/use-file-upload.ts",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport {\n  useCallback,\n  useRef,\n  useState,\n  type ChangeEvent,\n  type DragEvent,\n  type InputHTMLAttributes,\n} from \"react\"\n\nexport type FileMetadata = {\n  name: string\n  size: number\n  type: string\n  url: string\n  id: string\n}\n\nexport type FileWithPreview = {\n  file: File | FileMetadata\n  id: string\n  preview?: string\n}\n\nexport type FileUploadOptions = {\n  maxFiles?: number // Only used when multiple is true, defaults to Infinity\n  maxSize?: number // in bytes\n  accept?: string\n  multiple?: boolean // Defaults to false\n  initialFiles?: FileMetadata[]\n  onFilesChange?: (files: FileWithPreview[]) => void // Callback when files change\n  onFilesAdded?: (addedFiles: FileWithPreview[]) => void // Callback when new files are added\n}\n\nexport type FileUploadState = {\n  files: FileWithPreview[]\n  isDragging: boolean\n  errors: string[]\n}\n\nexport type FileUploadActions = {\n  addFiles: (files: FileList | File[]) => void\n  removeFile: (id: string) => void\n  clearFiles: () => void\n  clearErrors: () => void\n  handleDragEnter: (e: DragEvent<HTMLElement>) => void\n  handleDragLeave: (e: DragEvent<HTMLElement>) => void\n  handleDragOver: (e: DragEvent<HTMLElement>) => void\n  handleDrop: (e: DragEvent<HTMLElement>) => void\n  handleFileChange: (e: ChangeEvent<HTMLInputElement>) => void\n  openFileDialog: () => void\n  getInputProps: (\n    props?: InputHTMLAttributes<HTMLInputElement>\n  ) => InputHTMLAttributes<HTMLInputElement> & {\n    ref: React.Ref<HTMLInputElement>\n  }\n}\n\nexport const useFileUpload = (\n  options: FileUploadOptions = {}\n): [FileUploadState, FileUploadActions] => {\n  const {\n    maxFiles = Infinity,\n    maxSize = Infinity,\n    accept = \"*\",\n    multiple = false,\n    initialFiles = [],\n    onFilesChange,\n    onFilesAdded,\n  } = options\n\n  const [state, setState] = useState<FileUploadState>({\n    files: initialFiles.map((file) => ({\n      file,\n      id: file.id,\n      preview: file.url,\n    })),\n    isDragging: false,\n    errors: [],\n  })\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const validateFile = useCallback(\n    (file: File | FileMetadata): string | null => {\n      if (file instanceof File) {\n        if (file.size > maxSize) {\n          return `File \"${file.name}\" exceeds the maximum size of ${formatBytes(maxSize)}.`\n        }\n      } else {\n        if (file.size > maxSize) {\n          return `File \"${file.name}\" exceeds the maximum size of ${formatBytes(maxSize)}.`\n        }\n      }\n\n      if (accept !== \"*\") {\n        const acceptedTypes = accept.split(\",\").map((type) => type.trim())\n        const fileType = file instanceof File ? file.type || \"\" : file.type\n        const fileExtension = `.${file instanceof File ? file.name.split(\".\").pop() : file.name.split(\".\").pop()}`\n\n        const isAccepted = acceptedTypes.some((type) => {\n          if (type.startsWith(\".\")) {\n            return fileExtension.toLowerCase() === type.toLowerCase()\n          }\n          if (type.endsWith(\"/*\")) {\n            const baseType = type.split(\"/\")[0]\n            return fileType.startsWith(`${baseType}/`)\n          }\n          return fileType === type\n        })\n\n        if (!isAccepted) {\n          return `File \"${file instanceof File ? file.name : file.name}\" is not an accepted file type.`\n        }\n      }\n\n      return null\n    },\n    [accept, maxSize]\n  )\n\n  const createPreview = useCallback(\n    (file: File | FileMetadata): string | undefined => {\n      if (file instanceof File) {\n        return URL.createObjectURL(file)\n      }\n      return file.url\n    },\n    []\n  )\n\n  const generateUniqueId = useCallback((file: File | FileMetadata): string => {\n    if (file instanceof File) {\n      return `${file.name}-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`\n    }\n    return file.id\n  }, [])\n\n  const clearFiles = useCallback(() => {\n    setState((prev) => {\n      // Clean up object URLs\n      prev.files.forEach((file) => {\n        if (\n          file.preview &&\n          file.file instanceof File &&\n          file.file.type.startsWith(\"image/\")\n        ) {\n          URL.revokeObjectURL(file.preview)\n        }\n      })\n\n      if (inputRef.current) {\n        inputRef.current.value = \"\"\n      }\n\n      const newState = {\n        ...prev,\n        files: [],\n        errors: [],\n      }\n\n      onFilesChange?.(newState.files)\n      return newState\n    })\n  }, [onFilesChange])\n\n  const addFiles = useCallback(\n    (newFiles: FileList | File[]) => {\n      if (!newFiles || newFiles.length === 0) return\n\n      const newFilesArray = Array.from(newFiles)\n      const errors: string[] = []\n\n      // Clear existing errors when new files are uploaded\n      setState((prev) => ({ ...prev, errors: [] }))\n\n      // In single file mode, clear existing files first\n      if (!multiple) {\n        clearFiles()\n      }\n\n      // Check if adding these files would exceed maxFiles (only in multiple mode)\n      if (\n        multiple &&\n        maxFiles !== Infinity &&\n        state.files.length + newFilesArray.length > maxFiles\n      ) {\n        errors.push(`You can only upload a maximum of ${maxFiles} files.`)\n        setState((prev) => ({ ...prev, errors }))\n        return\n      }\n\n      const validFiles: FileWithPreview[] = []\n\n      newFilesArray.forEach((file) => {\n        // Only check for duplicates if multiple files are allowed\n        if (multiple) {\n          const isDuplicate = state.files.some(\n            (existingFile) =>\n              existingFile.file.name === file.name &&\n              existingFile.file.size === file.size\n          )\n\n          // Skip duplicate files silently\n          if (isDuplicate) {\n            return\n          }\n        }\n\n        // Check file size\n        if (file.size > maxSize) {\n          errors.push(\n            multiple\n              ? `Some files exceed the maximum size of ${formatBytes(maxSize)}.`\n              : `File exceeds the maximum size of ${formatBytes(maxSize)}.`\n          )\n          return\n        }\n\n        const error = validateFile(file)\n        if (error) {\n          errors.push(error)\n        } else {\n          validFiles.push({\n            file,\n            id: generateUniqueId(file),\n            preview: createPreview(file),\n          })\n        }\n      })\n\n      // Only update state if we have valid files to add\n      if (validFiles.length > 0) {\n        // Call the onFilesAdded callback with the newly added valid files\n        onFilesAdded?.(validFiles)\n\n        setState((prev) => {\n          const newFiles = !multiple\n            ? validFiles\n            : [...prev.files, ...validFiles]\n          onFilesChange?.(newFiles)\n          return {\n            ...prev,\n            files: newFiles,\n            errors,\n          }\n        })\n      } else if (errors.length > 0) {\n        setState((prev) => ({\n          ...prev,\n          errors,\n        }))\n      }\n\n      // Reset input value after handling files\n      if (inputRef.current) {\n        inputRef.current.value = \"\"\n      }\n    },\n    [\n      state.files.length,\n      maxFiles,\n      multiple,\n      maxSize,\n      validateFile,\n      createPreview,\n      generateUniqueId,\n      clearFiles,\n      onFilesChange,\n      onFilesAdded,\n    ]\n  )\n\n  const removeFile = useCallback(\n    (id: string) => {\n      setState((prev) => {\n        const fileToRemove = prev.files.find((file) => file.id === id)\n        if (\n          fileToRemove &&\n          fileToRemove.preview &&\n          fileToRemove.file instanceof File &&\n          fileToRemove.file.type.startsWith(\"image/\")\n        ) {\n          URL.revokeObjectURL(fileToRemove.preview)\n        }\n\n        const newFiles = prev.files.filter((file) => file.id !== id)\n        onFilesChange?.(newFiles)\n\n        return {\n          ...prev,\n          files: newFiles,\n          errors: [],\n        }\n      })\n    },\n    [onFilesChange]\n  )\n\n  const clearErrors = useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      errors: [],\n    }))\n  }, [])\n\n  const handleDragEnter = useCallback((e: DragEvent<HTMLElement>) => {\n    e.preventDefault()\n    e.stopPropagation()\n    setState((prev) => ({ ...prev, isDragging: true }))\n  }, [])\n\n  const handleDragLeave = useCallback((e: DragEvent<HTMLElement>) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    if (e.currentTarget.contains(e.relatedTarget as Node)) {\n      return\n    }\n\n    setState((prev) => ({ ...prev, isDragging: false }))\n  }, [])\n\n  const handleDragOver = useCallback((e: DragEvent<HTMLElement>) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }, [])\n\n  const handleDrop = useCallback(\n    (e: DragEvent<HTMLElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      setState((prev) => ({ ...prev, isDragging: false }))\n\n      // Don't process files if the input is disabled\n      if (inputRef.current?.disabled) {\n        return\n      }\n\n      if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n        // In single file mode, only use the first file\n        if (!multiple) {\n          const file = e.dataTransfer.files[0]\n          addFiles([file])\n        } else {\n          addFiles(e.dataTransfer.files)\n        }\n      }\n    },\n    [addFiles, multiple]\n  )\n\n  const handleFileChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files && e.target.files.length > 0) {\n        addFiles(e.target.files)\n      }\n    },\n    [addFiles]\n  )\n\n  const openFileDialog = useCallback(() => {\n    if (inputRef.current) {\n      inputRef.current.click()\n    }\n  }, [])\n\n  const getInputProps = useCallback(\n    (props: InputHTMLAttributes<HTMLInputElement> = {}) => {\n      return {\n        ...props,\n        type: \"file\" as const,\n        onChange: handleFileChange,\n        accept: props.accept || accept,\n        multiple: props.multiple !== undefined ? props.multiple : multiple,\n        ref: inputRef,\n      }\n    },\n    [accept, multiple, handleFileChange]\n  )\n\n  return [\n    state,\n    {\n      addFiles,\n      removeFile,\n      clearFiles,\n      clearErrors,\n      handleDragEnter,\n      handleDragLeave,\n      handleDragOver,\n      handleDrop,\n      handleFileChange,\n      openFileDialog,\n      getInputProps,\n    },\n  ]\n}\n\n// Helper function to format bytes to human-readable format\nexport const formatBytes = (bytes: number, decimals = 2): string => {\n  if (bytes === 0) return \"0 Bytes\"\n\n  const k = 1024\n  const dm = decimals < 0 ? 0 : decimals\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n\n  return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + sizes[i]\n}\n",
      "path": "registry/default/hooks/use-file-upload.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "path": "registry/default/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/cropper.tsx",
      "content": "\"use client\"\n\nimport { Cropper as CropperPrimitive } from \"@origin-space/image-cropper\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Cropper({\n  className,\n  ...props\n}: React.ComponentProps<typeof CropperPrimitive.Root>) {\n  return (\n    <CropperPrimitive.Root\n      data-slot=\"cropper\"\n      className={cn(\n        \"relative flex w-full cursor-move touch-none items-center justify-center overflow-hidden focus:outline-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CropperDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof CropperPrimitive.Description>) {\n  return (\n    <CropperPrimitive.Description\n      data-slot=\"cropper-description\"\n      className={cn(\"sr-only\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CropperImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof CropperPrimitive.Image>) {\n  return (\n    <CropperPrimitive.Image\n      data-slot=\"cropper-image\"\n      className={cn(\n        \"pointer-events-none h-full w-full object-cover\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CropperCropArea({\n  className,\n  ...props\n}: React.ComponentProps<typeof CropperPrimitive.CropArea>) {\n  return (\n    <CropperPrimitive.CropArea\n      data-slot=\"cropper-crop-area\"\n      className={cn(\n        \"pointer-events-none absolute border-3 border-white shadow-[0_0_0_9999px_rgba(0,0,0,0.3)] in-[[data-slot=cropper]:focus-visible]:ring-[3px] in-[[data-slot=cropper]:focus-visible]:ring-white/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Cropper, CropperDescription, CropperImage, CropperCropArea }\n",
      "path": "registry/default/ui/cropper.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-1/2 left-1/2 z-50 grid max-h-[calc(100%-2rem)] w-full max-w-[calc(100%-2rem)] -translate-x-1/2 -translate-y-1/2 gap-4 overflow-y-auto rounded-xl border p-6 shadow-lg duration-200 sm:max-w-100\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"group focus-visible:border-ring focus-visible:ring-ring/50 absolute top-3 right-3 flex size-7 items-center justify-center rounded transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:pointer-events-none\">\n          <XIcon\n            size={16}\n            className=\"opacity-60 transition-opacity group-hover:opacity-100\"\n          />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn(\"flex flex-col gap-1 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-3 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n",
      "path": "registry/default/ui/dialog.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/slider.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  showTooltip = false,\n  tooltipContent,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root> & {\n  showTooltip?: boolean\n  tooltipContent?: (value: number) => React.ReactNode\n}) {\n  const [internalValues, setInternalValues] = React.useState<number[]>(\n    Array.isArray(value)\n      ? value\n      : Array.isArray(defaultValue)\n        ? defaultValue\n        : [min, max]\n  )\n\n  React.useEffect(() => {\n    if (value !== undefined) {\n      setInternalValues(Array.isArray(value) ? value : [value])\n    }\n  }, [value])\n\n  const handleValueChange = (newValue: number[]) => {\n    setInternalValues(newValue)\n    props.onValueChange?.(newValue)\n  }\n\n  const [showTooltipState, setShowTooltipState] = React.useState(false)\n\n  const handlePointerDown = () => {\n    if (showTooltip) {\n      setShowTooltipState(true)\n    }\n  }\n\n  const handlePointerUp = React.useCallback(() => {\n    if (showTooltip) {\n      setShowTooltipState(false)\n    }\n  }, [showTooltip])\n\n  React.useEffect(() => {\n    if (showTooltip) {\n      document.addEventListener(\"pointerup\", handlePointerUp)\n      return () => {\n        document.removeEventListener(\"pointerup\", handlePointerUp)\n      }\n    }\n  }, [showTooltip, handlePointerUp])\n\n  const renderThumb = (value: number) => {\n    const thumb = (\n      <SliderPrimitive.Thumb\n        data-slot=\"slider-thumb\"\n        className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] outline-none hover:ring-4 focus-visible:ring-4 disabled:pointer-events-none disabled:opacity-50\"\n        onPointerDown={handlePointerDown}\n      />\n    )\n\n    if (!showTooltip) return thumb\n\n    return (\n      <TooltipProvider>\n        <Tooltip open={showTooltipState}>\n          <TooltipTrigger asChild>{thumb}</TooltipTrigger>\n          <TooltipContent\n            className=\"px-2 py-1 text-xs\"\n            sideOffset={8}\n            side={props.orientation === \"vertical\" ? \"right\" : \"top\"}\n          >\n            <p>{tooltipContent ? tooltipContent(value) : value}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    )\n  }\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className\n      )}\n      onValueChange={handleValueChange}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\"\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\"\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: internalValues.length }, (_, index) => (\n        <React.Fragment key={index}>\n          {renderThumb(internalValues[index])}\n        </React.Fragment>\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n",
      "path": "registry/default/ui/slider.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/tooltip.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 4,\n  showArrow = false,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content> & {\n  showArrow?: boolean\n}) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-w-70 rounded-md border px-3 py-1.5 text-sm\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showArrow && (\n          <TooltipPrimitive.Arrow className=\"fill-popover -my-px drop-shadow-[0_1px_0_var(--border)]\" />\n        )}\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger }\n",
      "path": "registry/default/ui/tooltip.tsx"
    }
  ],
  "meta": {
    "tags": [
      "upload",
      "file",
      "image",
      "drag and drop",
      "crop",
      "dialog",
      "slider",
      "zoom"
    ],
    "colSpan": 3
  }
}
