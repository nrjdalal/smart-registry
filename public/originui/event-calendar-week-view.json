{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-calendar-week-view",
  "type": "registry:component",
  "dependencies": [
    "date-fns"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/event-calendar/week-view.tsx",
      "content": "\"use client\"\n\nimport React, { useMemo } from \"react\"\nimport {\n  addHours,\n  areIntervalsOverlapping,\n  differenceInMinutes,\n  eachDayOfInterval,\n  eachHourOfInterval,\n  endOfWeek,\n  format,\n  getHours,\n  getMinutes,\n  isBefore,\n  isSameDay,\n  isToday,\n  startOfDay,\n  startOfWeek,\n} from \"date-fns\"\n\nimport {\n  DraggableEvent,\n  DroppableCell,\n  EventItem,\n  isMultiDayEvent,\n  useCurrentTimeIndicator,\n  WeekCellsHeight,\n  type CalendarEvent,\n} from \"@/components/event-calendar\"\nimport {\n  EndHour,\n  StartHour,\n} from \"@/components/event-calendar/constants\"\nimport { cn } from \"@/lib/utils\"\n\ninterface WeekViewProps {\n  currentDate: Date\n  events: CalendarEvent[]\n  onEventSelect: (event: CalendarEvent) => void\n  onEventCreate: (startTime: Date) => void\n}\n\ninterface PositionedEvent {\n  event: CalendarEvent\n  top: number\n  height: number\n  left: number\n  width: number\n  zIndex: number\n}\n\nexport function WeekView({\n  currentDate,\n  events,\n  onEventSelect,\n  onEventCreate,\n}: WeekViewProps) {\n  const days = useMemo(() => {\n    const weekStart = startOfWeek(currentDate, { weekStartsOn: 0 })\n    const weekEnd = endOfWeek(currentDate, { weekStartsOn: 0 })\n    return eachDayOfInterval({ start: weekStart, end: weekEnd })\n  }, [currentDate])\n\n  const weekStart = useMemo(\n    () => startOfWeek(currentDate, { weekStartsOn: 0 }),\n    [currentDate]\n  )\n\n  const hours = useMemo(() => {\n    const dayStart = startOfDay(currentDate)\n    return eachHourOfInterval({\n      start: addHours(dayStart, StartHour),\n      end: addHours(dayStart, EndHour - 1),\n    })\n  }, [currentDate])\n\n  // Get all-day events and multi-day events for the week\n  const allDayEvents = useMemo(() => {\n    return events\n      .filter((event) => {\n        // Include explicitly marked all-day events or multi-day events\n        return event.allDay || isMultiDayEvent(event)\n      })\n      .filter((event) => {\n        const eventStart = new Date(event.start)\n        const eventEnd = new Date(event.end)\n        return days.some(\n          (day) =>\n            isSameDay(day, eventStart) ||\n            isSameDay(day, eventEnd) ||\n            (day > eventStart && day < eventEnd)\n        )\n      })\n  }, [events, days])\n\n  // Process events for each day to calculate positions\n  const processedDayEvents = useMemo(() => {\n    const result = days.map((day) => {\n      // Get events for this day that are not all-day events or multi-day events\n      const dayEvents = events.filter((event) => {\n        // Skip all-day events and multi-day events\n        if (event.allDay || isMultiDayEvent(event)) return false\n\n        const eventStart = new Date(event.start)\n        const eventEnd = new Date(event.end)\n\n        // Check if event is on this day\n        return (\n          isSameDay(day, eventStart) ||\n          isSameDay(day, eventEnd) ||\n          (eventStart < day && eventEnd > day)\n        )\n      })\n\n      // Sort events by start time and duration\n      const sortedEvents = [...dayEvents].sort((a, b) => {\n        const aStart = new Date(a.start)\n        const bStart = new Date(b.start)\n        const aEnd = new Date(a.end)\n        const bEnd = new Date(b.end)\n\n        // First sort by start time\n        if (aStart < bStart) return -1\n        if (aStart > bStart) return 1\n\n        // If start times are equal, sort by duration (longer events first)\n        const aDuration = differenceInMinutes(aEnd, aStart)\n        const bDuration = differenceInMinutes(bEnd, bStart)\n        return bDuration - aDuration\n      })\n\n      // Calculate positions for each event\n      const positionedEvents: PositionedEvent[] = []\n      const dayStart = startOfDay(day)\n\n      // Track columns for overlapping events\n      const columns: { event: CalendarEvent; end: Date }[][] = []\n\n      sortedEvents.forEach((event) => {\n        const eventStart = new Date(event.start)\n        const eventEnd = new Date(event.end)\n\n        // Adjust start and end times if they're outside this day\n        const adjustedStart = isSameDay(day, eventStart) ? eventStart : dayStart\n        const adjustedEnd = isSameDay(day, eventEnd)\n          ? eventEnd\n          : addHours(dayStart, 24)\n\n        // Calculate top position and height\n        const startHour =\n          getHours(adjustedStart) + getMinutes(adjustedStart) / 60\n        const endHour = getHours(adjustedEnd) + getMinutes(adjustedEnd) / 60\n\n        // Adjust the top calculation to account for the new start time\n        const top = (startHour - StartHour) * WeekCellsHeight\n        const height = (endHour - startHour) * WeekCellsHeight\n\n        // Find a column for this event\n        let columnIndex = 0\n        let placed = false\n\n        while (!placed) {\n          const col = columns[columnIndex] || []\n          if (col.length === 0) {\n            columns[columnIndex] = col\n            placed = true\n          } else {\n            const overlaps = col.some((c) =>\n              areIntervalsOverlapping(\n                { start: adjustedStart, end: adjustedEnd },\n                {\n                  start: new Date(c.event.start),\n                  end: new Date(c.event.end),\n                }\n              )\n            )\n            if (!overlaps) {\n              placed = true\n            } else {\n              columnIndex++\n            }\n          }\n        }\n\n        // Ensure column is initialized before pushing\n        const currentColumn = columns[columnIndex] || []\n        columns[columnIndex] = currentColumn\n        currentColumn.push({ event, end: adjustedEnd })\n\n        // Calculate width and left position based on number of columns\n        const width = columnIndex === 0 ? 1 : 0.9\n        const left = columnIndex === 0 ? 0 : columnIndex * 0.1\n\n        positionedEvents.push({\n          event,\n          top,\n          height,\n          left,\n          width,\n          zIndex: 10 + columnIndex, // Higher columns get higher z-index\n        })\n      })\n\n      return positionedEvents\n    })\n\n    return result\n  }, [days, events])\n\n  const handleEventClick = (event: CalendarEvent, e: React.MouseEvent) => {\n    e.stopPropagation()\n    onEventSelect(event)\n  }\n\n  const showAllDaySection = allDayEvents.length > 0\n  const { currentTimePosition, currentTimeVisible } = useCurrentTimeIndicator(\n    currentDate,\n    \"week\"\n  )\n\n  return (\n    <div data-slot=\"week-view\" className=\"flex h-full flex-col\">\n      <div className=\"bg-background/80 border-border/70 sticky top-0 z-30 grid grid-cols-8 border-b backdrop-blur-md\">\n        <div className=\"text-muted-foreground/70 py-2 text-center text-sm\">\n          <span className=\"max-[479px]:sr-only\">{format(new Date(), \"O\")}</span>\n        </div>\n        {days.map((day) => (\n          <div\n            key={day.toString()}\n            className=\"data-today:text-foreground text-muted-foreground/70 py-2 text-center text-sm data-today:font-medium\"\n            data-today={isToday(day) || undefined}\n          >\n            <span className=\"sm:hidden\" aria-hidden=\"true\">\n              {format(day, \"E\")[0]} {format(day, \"d\")}\n            </span>\n            <span className=\"max-sm:hidden\">{format(day, \"EEE dd\")}</span>\n          </div>\n        ))}\n      </div>\n\n      {showAllDaySection && (\n        <div className=\"border-border/70 bg-muted/50 border-b\">\n          <div className=\"grid grid-cols-8\">\n            <div className=\"border-border/70 relative border-r\">\n              <span className=\"text-muted-foreground/70 absolute bottom-0 left-0 h-6 w-16 max-w-full pe-2 text-right text-[10px] sm:pe-4 sm:text-xs\">\n                All day\n              </span>\n            </div>\n            {days.map((day, dayIndex) => {\n              const dayAllDayEvents = allDayEvents.filter((event) => {\n                const eventStart = new Date(event.start)\n                const eventEnd = new Date(event.end)\n                return (\n                  isSameDay(day, eventStart) ||\n                  (day > eventStart && day < eventEnd) ||\n                  isSameDay(day, eventEnd)\n                )\n              })\n\n              return (\n                <div\n                  key={day.toString()}\n                  className=\"border-border/70 relative border-r p-1 last:border-r-0\"\n                  data-today={isToday(day) || undefined}\n                >\n                  {dayAllDayEvents.map((event) => {\n                    const eventStart = new Date(event.start)\n                    const eventEnd = new Date(event.end)\n                    const isFirstDay = isSameDay(day, eventStart)\n                    const isLastDay = isSameDay(day, eventEnd)\n\n                    // Check if this is the first day in the current week view\n                    const isFirstVisibleDay =\n                      dayIndex === 0 && isBefore(eventStart, weekStart)\n                    const shouldShowTitle = isFirstDay || isFirstVisibleDay\n\n                    return (\n                      <EventItem\n                        key={`spanning-${event.id}`}\n                        onClick={(e) => handleEventClick(event, e)}\n                        event={event}\n                        view=\"month\"\n                        isFirstDay={isFirstDay}\n                        isLastDay={isLastDay}\n                      >\n                        {/* Show title if it's the first day of the event or the first visible day in the week */}\n                        <div\n                          className={cn(\n                            \"truncate\",\n                            !shouldShowTitle && \"invisible\"\n                          )}\n                          aria-hidden={!shouldShowTitle}\n                        >\n                          {event.title}\n                        </div>\n                      </EventItem>\n                    )\n                  })}\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      )}\n\n      <div className=\"grid flex-1 grid-cols-8 overflow-hidden\">\n        <div className=\"border-border/70 grid auto-cols-fr border-r\">\n          {hours.map((hour, index) => (\n            <div\n              key={hour.toString()}\n              className=\"border-border/70 relative min-h-[var(--week-cells-height)] border-b last:border-b-0\"\n            >\n              {index > 0 && (\n                <span className=\"bg-background text-muted-foreground/70 absolute -top-3 left-0 flex h-6 w-16 max-w-full items-center justify-end pe-2 text-[10px] sm:pe-4 sm:text-xs\">\n                  {format(hour, \"h a\")}\n                </span>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {days.map((day, dayIndex) => (\n          <div\n            key={day.toString()}\n            className=\"border-border/70 relative grid auto-cols-fr border-r last:border-r-0\"\n            data-today={isToday(day) || undefined}\n          >\n            {/* Positioned events */}\n            {(processedDayEvents[dayIndex] ?? []).map((positionedEvent) => (\n              <div\n                key={positionedEvent.event.id}\n                className=\"absolute z-10 px-0.5\"\n                style={{\n                  top: `${positionedEvent.top}px`,\n                  height: `${positionedEvent.height}px`,\n                  left: `${positionedEvent.left * 100}%`,\n                  width: `${positionedEvent.width * 100}%`,\n                  zIndex: positionedEvent.zIndex,\n                }}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <div className=\"size-full\">\n                  <DraggableEvent\n                    event={positionedEvent.event}\n                    view=\"week\"\n                    onClick={(e) => handleEventClick(positionedEvent.event, e)}\n                    showTime\n                    height={positionedEvent.height}\n                  />\n                </div>\n              </div>\n            ))}\n\n            {/* Current time indicator - only show for today's column */}\n            {currentTimeVisible && isToday(day) && (\n              <div\n                className=\"pointer-events-none absolute right-0 left-0 z-20\"\n                style={{ top: `${currentTimePosition}%` }}\n              >\n                <div className=\"relative flex items-center\">\n                  <div className=\"bg-primary absolute -left-1 h-2 w-2 rounded-full\"></div>\n                  <div className=\"bg-primary h-[2px] w-full\"></div>\n                </div>\n              </div>\n            )}\n            {hours.map((hour) => {\n              const hourValue = getHours(hour)\n              return (\n                <div\n                  key={hour.toString()}\n                  className=\"border-border/70 relative min-h-[var(--week-cells-height)] border-b last:border-b-0\"\n                >\n                  {/* Quarter-hour intervals */}\n                  {[0, 1, 2, 3].map((quarter) => {\n                    const quarterHourTime = hourValue + quarter * 0.25\n                    return (\n                      <DroppableCell\n                        key={`${hour.toString()}-${quarter}`}\n                        id={`week-cell-${day.toISOString()}-${quarterHourTime}`}\n                        date={day}\n                        time={quarterHourTime}\n                        className={cn(\n                          \"absolute h-[calc(var(--week-cells-height)/4)] w-full\",\n                          quarter === 0 && \"top-0\",\n                          quarter === 1 &&\n                            \"top-[calc(var(--week-cells-height)/4)]\",\n                          quarter === 2 &&\n                            \"top-[calc(var(--week-cells-height)/4*2)]\",\n                          quarter === 3 &&\n                            \"top-[calc(var(--week-cells-height)/4*3)]\"\n                        )}\n                        onClick={() => {\n                          const startTime = new Date(day)\n                          startTime.setHours(hourValue)\n                          startTime.setMinutes(quarter * 15)\n                          onEventCreate(startTime)\n                        }}\n                      />\n                    )\n                  })}\n                </div>\n              )\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/event-calendar/week-view.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/event-calendar/constants.ts",
      "content": "// Height of calendar events in pixels - used in month, week and day views\nexport const EventHeight = 24\n\n// Vertical gap between events in pixels - controls spacing in month view\nexport const EventGap = 4\n\n// Height of hour cells in week and day views - controls the scale of time display\nexport const WeekCellsHeight = 64\n\n// Number of days to show in the agenda view\nexport const AgendaDaysToShow = 30\n\n// Start and end hours for the week and day views\nexport const StartHour = 0\nexport const EndHour = 24\n\n// Default start and end times\nexport const DefaultStartHour = 9 // 9 AM\nexport const DefaultEndHour = 10 // 10 AM\n",
      "path": "registry/default/components/event-calendar/constants.ts"
    },
    {
      "type": "registry:component",
      "target": "components/event-calendar/index.ts",
      "content": "\"use client\"\n\n// Component exports\nexport { AgendaView } from \"./agenda-view\"\nexport { DayView } from \"./day-view\"\nexport { DraggableEvent } from \"./draggable-event\"\nexport { DroppableCell } from \"./droppable-cell\"\nexport { EventDialog } from \"./event-dialog\"\nexport { EventItem } from \"./event-item\"\nexport { EventsPopup } from \"./events-popup\"\nexport { EventCalendar } from \"./event-calendar\"\nexport { MonthView } from \"./month-view\"\nexport { WeekView } from \"./week-view\"\nexport { CalendarDndProvider, useCalendarDnd } from \"./calendar-dnd-context\"\n\n// Constants and utility exports\nexport * from \"./constants\"\nexport * from \"./utils\"\n\n// Hook exports\nexport * from \"./hooks/use-current-time-indicator\"\nexport * from \"./hooks/use-event-visibility\"\n\n// Type exports\nexport type { CalendarEvent, CalendarView, EventColor } from \"./types\"\n",
      "path": "registry/default/components/event-calendar/index.ts"
    }
  ]
}
