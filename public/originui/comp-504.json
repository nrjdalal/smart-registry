{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-504",
  "type": "registry:component",
  "dependencies": [
    "class-variance-authority",
    "date-fns",
    "lucide-react",
    "radix-ui",
    "react-day-picker"
  ],
  "registryDependencies": [
    "https://originui.com/r/button.json",
    "https://originui.com/r/calendar.json",
    "https://originui.com/r/collapsible.json",
    "https://originui.com/r/scroll-area.json"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/comp-504.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\nimport {\n  eachMonthOfInterval,\n  eachYearOfInterval,\n  endOfYear,\n  format,\n  isAfter,\n  isBefore,\n  startOfYear,\n} from \"date-fns\"\nimport { ChevronDownIcon } from \"lucide-react\"\nimport { CaptionLabelProps, MonthGridProps } from \"react-day-picker\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\n\nexport default function Component() {\n  const today = new Date()\n  const [month, setMonth] = useState(today)\n  const [date, setDate] = useState<Date | undefined>(today)\n  const [isYearView, setIsYearView] = useState(false)\n  const startDate = new Date(1980, 6)\n  const endDate = new Date(2030, 6)\n\n  const years = eachYearOfInterval({\n    start: startOfYear(startDate),\n    end: endOfYear(endDate),\n  })\n\n  return (\n    <div>\n      <Calendar\n        mode=\"single\"\n        selected={date}\n        onSelect={setDate}\n        month={month}\n        onMonthChange={setMonth}\n        defaultMonth={new Date()}\n        startMonth={startDate}\n        endMonth={endDate}\n        className=\"overflow-hidden rounded-md border p-2\"\n        classNames={{\n          month_caption: \"ms-2.5 me-20 justify-start\",\n          nav: \"justify-end\",\n        }}\n        components={{\n          CaptionLabel: (props: CaptionLabelProps) => (\n            <CaptionLabel\n              isYearView={isYearView}\n              setIsYearView={setIsYearView}\n              {...props}\n            />\n          ),\n          MonthGrid: (props: MonthGridProps) => {\n            return (\n              <MonthGrid\n                className={props.className}\n                isYearView={isYearView}\n                setIsYearView={setIsYearView}\n                startDate={startDate}\n                endDate={endDate}\n                years={years}\n                currentYear={month.getFullYear()}\n                currentMonth={month.getMonth()}\n                onMonthSelect={(selectedMonth: Date) => {\n                  setMonth(selectedMonth)\n                  setIsYearView(false)\n                }}\n              >\n                {props.children}\n              </MonthGrid>\n            )\n          },\n        }}\n      />\n      <p\n        className=\"text-muted-foreground mt-4 text-center text-xs\"\n        role=\"region\"\n        aria-live=\"polite\"\n      >\n        Advanced selection -{\" \"}\n        <a\n          className=\"hover:text-foreground underline\"\n          href=\"https://daypicker.dev/\"\n          target=\"_blank\"\n          rel=\"noopener nofollow\"\n        >\n          React DayPicker\n        </a>\n      </p>\n    </div>\n  )\n}\n\nfunction MonthGrid({\n  className,\n  children,\n  isYearView,\n  startDate,\n  endDate,\n  years,\n  currentYear,\n  currentMonth,\n  onMonthSelect,\n}: {\n  className?: string\n  children: React.ReactNode\n  isYearView: boolean\n  setIsYearView: React.Dispatch<React.SetStateAction<boolean>>\n  startDate: Date\n  endDate: Date\n  years: Date[]\n  currentYear: number\n  currentMonth: number\n  onMonthSelect: (date: Date) => void\n}) {\n  const currentYearRef = useRef<HTMLDivElement>(null)\n  const currentMonthButtonRef = useRef<HTMLButtonElement>(null)\n  const scrollAreaRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (isYearView && currentYearRef.current && scrollAreaRef.current) {\n      const viewport = scrollAreaRef.current.querySelector(\n        \"[data-radix-scroll-area-viewport]\"\n      ) as HTMLElement\n      if (viewport) {\n        const yearTop = currentYearRef.current.offsetTop\n        viewport.scrollTop = yearTop\n      }\n      setTimeout(() => {\n        currentMonthButtonRef.current?.focus()\n      }, 100)\n    }\n  }, [isYearView])\n\n  return (\n    <div className=\"relative\">\n      <table className={className}>{children}</table>\n      {isYearView && (\n        <div className=\"bg-background absolute inset-0 z-20 -mx-2 -mb-2\">\n          <ScrollArea ref={scrollAreaRef} className=\"h-full\">\n            {years.map((year) => {\n              const months = eachMonthOfInterval({\n                start: startOfYear(year),\n                end: endOfYear(year),\n              })\n              const isCurrentYear = year.getFullYear() === currentYear\n\n              return (\n                <div\n                  key={year.getFullYear()}\n                  ref={isCurrentYear ? currentYearRef : undefined}\n                >\n                  <CollapsibleYear\n                    title={year.getFullYear().toString()}\n                    open={isCurrentYear}\n                  >\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      {months.map((month) => {\n                        const isDisabled =\n                          isBefore(month, startDate) || isAfter(month, endDate)\n                        const isCurrentMonth =\n                          month.getMonth() === currentMonth &&\n                          year.getFullYear() === currentYear\n\n                        return (\n                          <Button\n                            key={month.getTime()}\n                            ref={\n                              isCurrentMonth ? currentMonthButtonRef : undefined\n                            }\n                            variant={isCurrentMonth ? \"default\" : \"outline\"}\n                            size=\"sm\"\n                            className=\"h-7\"\n                            disabled={isDisabled}\n                            onClick={() => onMonthSelect(month)}\n                          >\n                            {format(month, \"MMM\")}\n                          </Button>\n                        )\n                      })}\n                    </div>\n                  </CollapsibleYear>\n                </div>\n              )\n            })}\n          </ScrollArea>\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction CaptionLabel({\n  children,\n  isYearView,\n  setIsYearView,\n}: {\n  isYearView: boolean\n  setIsYearView: React.Dispatch<React.SetStateAction<boolean>>\n} & React.HTMLAttributes<HTMLSpanElement>) {\n  return (\n    <Button\n      className=\"data-[state=open]:text-muted-foreground/80 -ms-2 flex items-center gap-2 text-sm font-medium hover:bg-transparent [&[data-state=open]>svg]:rotate-180\"\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={() => setIsYearView((prev) => !prev)}\n      data-state={isYearView ? \"open\" : \"closed\"}\n    >\n      {children}\n      <ChevronDownIcon\n        size={16}\n        className=\"text-muted-foreground/80 shrink-0 transition-transform duration-200\"\n        aria-hidden=\"true\"\n      />\n    </Button>\n  )\n}\n\nfunction CollapsibleYear({\n  title,\n  children,\n  open,\n}: {\n  title: string\n  children: React.ReactNode\n  open?: boolean\n}) {\n  return (\n    <Collapsible className=\"border-t px-2 py-1.5\" defaultOpen={open}>\n      <CollapsibleTrigger asChild>\n        <Button\n          className=\"flex w-full justify-start gap-2 text-sm font-medium hover:bg-transparent [&[data-state=open]>svg]:rotate-180\"\n          variant=\"ghost\"\n          size=\"sm\"\n        >\n          <ChevronDownIcon\n            size={16}\n            className=\"text-muted-foreground/80 shrink-0 transition-transform duration-200\"\n            aria-hidden=\"true\"\n          />\n          {title}\n        </Button>\n      </CollapsibleTrigger>\n      <CollapsibleContent className=\"data-[state=closed]:animate-collapsible-up data-[state=open]:animate-collapsible-down overflow-hidden px-3 py-1 text-sm transition-all\">\n        {children}\n      </CollapsibleContent>\n    </Collapsible>\n  )\n}\n",
      "path": "registry/default/components/comp-504.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { Slot as SlotPrimitive } from \"radix-ui\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? SlotPrimitive.Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "path": "registry/default/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/calendar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  components: userComponents,\n  ...props\n}: React.ComponentProps<typeof DayPicker>) {\n  const defaultClassNames = {\n    months: \"relative flex flex-col sm:flex-row gap-4\",\n    month: \"w-full\",\n    month_caption:\n      \"relative mx-10 mb-1 flex h-9 items-center justify-center z-20\",\n    caption_label: \"text-sm font-medium\",\n    nav: \"absolute top-0 flex w-full justify-between z-10\",\n    button_previous: cn(\n      buttonVariants({ variant: \"ghost\" }),\n      \"size-9 text-muted-foreground/80 hover:text-foreground p-0\"\n    ),\n    button_next: cn(\n      buttonVariants({ variant: \"ghost\" }),\n      \"size-9 text-muted-foreground/80 hover:text-foreground p-0\"\n    ),\n    weekday: \"size-9 p-0 text-xs font-medium text-muted-foreground/80\",\n    day_button:\n      \"relative flex size-9 items-center justify-center whitespace-nowrap rounded-md p-0 text-foreground group-[[data-selected]:not(.range-middle)]:[transition-property:color,background-color,border-radius,box-shadow] group-[[data-selected]:not(.range-middle)]:duration-150 group-data-disabled:pointer-events-none focus-visible:z-10 hover:not-in-data-selected:bg-accent group-data-selected:bg-primary hover:not-in-data-selected:text-foreground group-data-selected:text-primary-foreground group-data-disabled:text-foreground/30 group-data-disabled:line-through group-data-outside:text-foreground/30 group-data-selected:group-data-outside:text-primary-foreground outline-none focus-visible:ring-ring/50 focus-visible:ring-[3px] group-[.range-start:not(.range-end)]:rounded-e-none group-[.range-end:not(.range-start)]:rounded-s-none group-[.range-middle]:rounded-none group-[.range-middle]:group-data-selected:bg-accent group-[.range-middle]:group-data-selected:text-foreground\",\n    day: \"group size-9 px-0 py-px text-sm\",\n    range_start: \"range-start\",\n    range_end: \"range-end\",\n    range_middle: \"range-middle\",\n    today:\n      \"*:after:pointer-events-none *:after:absolute *:after:bottom-1 *:after:start-1/2 *:after:z-10 *:after:size-[3px] *:after:-translate-x-1/2 *:after:rounded-full *:after:bg-primary [&[data-selected]:not(.range-middle)>*]:after:bg-background [&[data-disabled]>*]:after:bg-foreground/30 *:after:transition-colors\",\n    outside:\n      \"text-muted-foreground data-selected:bg-accent/50 data-selected:text-muted-foreground\",\n    hidden: \"invisible\",\n    week_number: \"size-9 p-0 text-xs font-medium text-muted-foreground/80\",\n  }\n\n  const mergedClassNames: typeof defaultClassNames = Object.keys(\n    defaultClassNames\n  ).reduce(\n    (acc, key) => ({\n      ...acc,\n      [key]: classNames?.[key as keyof typeof classNames]\n        ? cn(\n            defaultClassNames[key as keyof typeof defaultClassNames],\n            classNames[key as keyof typeof classNames]\n          )\n        : defaultClassNames[key as keyof typeof defaultClassNames],\n    }),\n    {} as typeof defaultClassNames\n  )\n\n  const defaultComponents = {\n    Chevron: (props: {\n      className?: string\n      size?: number\n      disabled?: boolean\n      orientation?: \"left\" | \"right\" | \"up\" | \"down\"\n    }) => {\n      if (props.orientation === \"left\") {\n        return <ChevronLeftIcon size={16} {...props} aria-hidden=\"true\" />\n      }\n      return <ChevronRightIcon size={16} {...props} aria-hidden=\"true\" />\n    },\n  }\n\n  const mergedComponents = {\n    ...defaultComponents,\n    ...userComponents,\n  }\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"w-fit\", className)}\n      classNames={mergedClassNames}\n      components={mergedComponents}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar }\n",
      "path": "registry/default/ui/calendar.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/collapsible.tsx",
      "content": "\"use client\"\n\nimport { Collapsible as CollapsiblePrimitive } from \"radix-ui\"\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}\n\nexport { Collapsible, CollapsibleContent, CollapsibleTrigger }\n",
      "path": "registry/default/ui/collapsible.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/scroll-area.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ScrollArea as ScrollAreaPrimitive } from \"radix-ui\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"size-full rounded-[inherit]\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent p-px\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent p-px\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n",
      "path": "registry/default/ui/scroll-area.tsx"
    }
  ],
  "meta": {
    "tags": [
      "calendar",
      "date",
      "collapsible",
      "react daypicker",
      "radix"
    ],
    "style": 1
  }
}
