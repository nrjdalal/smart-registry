{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "components/smart-registry/comp-232",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-label"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/smart-registry/comp-232.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/registry/default/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\"\nimport { Label } from \"@/registry/default/ui/label\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/default/ui/popover\"\nimport { CheckIcon, ChevronDownIcon } from \"lucide-react\"\nimport { Fragment, useId, useState } from \"react\"\n\nconst countries = [\n  {\n    continent: \"America\",\n    items: [\n      { value: \"United States\", flag: \"ðŸ‡ºðŸ‡¸\" },\n      { value: \"Canada\", flag: \"ðŸ‡¨ðŸ‡¦\" },\n      { value: \"Mexico\", flag: \"ðŸ‡²ðŸ‡½\" },\n    ],\n  },\n  {\n    continent: \"Africa\",\n    items: [\n      { value: \"South Africa\", flag: \"ðŸ‡¿ðŸ‡¦\" },\n      { value: \"Nigeria\", flag: \"ðŸ‡³ðŸ‡¬\" },\n      { value: \"Morocco\", flag: \"ðŸ‡²ðŸ‡¦\" },\n    ],\n  },\n  {\n    continent: \"Asia\",\n    items: [\n      { value: \"China\", flag: \"ðŸ‡¨ðŸ‡³\" },\n      { value: \"Japan\", flag: \"ðŸ‡¯ðŸ‡µ\" },\n      { value: \"India\", flag: \"ðŸ‡®ðŸ‡³\" },\n    ],\n  },\n  {\n    continent: \"Europe\",\n    items: [\n      { value: \"United Kingdom\", flag: \"ðŸ‡¬ðŸ‡§\" },\n      { value: \"France\", flag: \"ðŸ‡«ðŸ‡·\" },\n      { value: \"Germany\", flag: \"ðŸ‡©ðŸ‡ª\" },\n    ],\n  },\n  {\n    continent: \"Oceania\",\n    items: [\n      { value: \"Australia\", flag: \"ðŸ‡¦ðŸ‡º\" },\n      { value: \"New Zealand\", flag: \"ðŸ‡³ðŸ‡¿\" },\n    ],\n  },\n]\n\nexport default function Component() {\n  const id = useId()\n  const [open, setOpen] = useState<boolean>(false)\n  const [value, setValue] = useState<string>(\"\")\n\n  return (\n    <div className=\"*:not-first:mt-2\">\n      <Label htmlFor={id}>Options with flag and search</Label>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            id={id}\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"bg-background hover:bg-background border-input w-full justify-between px-3 font-normal outline-offset-0 outline-none focus-visible:outline-[3px]\"\n          >\n            {value ? (\n              <span className=\"flex min-w-0 items-center gap-2\">\n                <span className=\"text-lg leading-none\">\n                  {\n                    countries\n                      .map((group) =>\n                        group.items.find((item) => item.value === value),\n                      )\n                      .filter(Boolean)[0]?.flag\n                  }\n                </span>\n                <span className=\"truncate\">{value}</span>\n              </span>\n            ) : (\n              <span className=\"text-muted-foreground\">Select country</span>\n            )}\n            <ChevronDownIcon\n              size={16}\n              className=\"text-muted-foreground/80 shrink-0\"\n              aria-hidden=\"true\"\n            />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          className=\"border-input w-full min-w-[var(--radix-popper-anchor-width)] p-0\"\n          align=\"start\"\n        >\n          <Command>\n            <CommandInput placeholder=\"Search country...\" />\n            <CommandList>\n              <CommandEmpty>No country found.</CommandEmpty>\n              {countries.map((group) => (\n                <Fragment key={group.continent}>\n                  <CommandGroup heading={group.continent}>\n                    {group.items.map((country) => (\n                      <CommandItem\n                        key={country.value}\n                        value={country.value}\n                        onSelect={(currentValue) => {\n                          setValue(currentValue)\n                          setOpen(false)\n                        }}\n                      >\n                        <span className=\"text-lg leading-none\">\n                          {country.flag}\n                        </span>{\" \"}\n                        {country.value}\n                        {value === country.value && (\n                          <CheckIcon size={16} className=\"ml-auto\" />\n                        )}\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                </Fragment>\n              ))}\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/comp-232.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/smart-registry/button.tsx",
      "content": "import { cn } from \"@/registry/default/lib/utils\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "path": "registry/default/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/smart-registry/label.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport * as React from \"react\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"text-foreground text-sm leading-4 font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
      "path": "registry/default/ui/label.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/smart-registry/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "registry/default/lib/utils.ts"
    }
  ]
}