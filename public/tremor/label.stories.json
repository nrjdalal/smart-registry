{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "label.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-checkbox",
    "@radix-ui/react-label",
    "@remixicon/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "devDependencies": [
    "@storybook/react"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Label/label.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Checkbox } from \"@/components/Checkbox/Checkbox\"\nimport { Input } from \"@/components/Input/Input\"\nimport { Label } from \"@/components/Label/Label\"\n\nconst meta: Meta<typeof Label> = {\n  title: \"ui/Label\",\n  component: Label,\n}\n\nexport default meta\ntype Story = StoryObj<typeof Label>\n\nexport const Default: Story = {\n  args: {\n    children: \"Label\",\n  },\n}\n\nexport const LabelWithInput: Story = {\n  render: () => (\n    <form className=\"flex flex-col gap-3\">\n      <Label htmlFor=\"password\">Password</Label>\n      <Input\n        placeholder=\"Enter password\"\n        id=\"password\"\n        name=\"password\"\n        type=\"password\"\n      />\n    </form>\n  ),\n}\nexport const LabelWithCheckbox: Story = {\n  render: () => (\n    <form className=\"flex gap-2\">\n      <Checkbox id=\"r1\" />\n      <Label htmlFor=\"r1\">Accept terms and conditions</Label>\n    </form>\n  ),\n}\n\nexport const Disabled: Story = {\n  render: () => (\n    <Label disabled data-testid=\"label-disabled\" htmlFor=\"search\">\n      Search\n    </Label>\n  ),\n}\n",
      "path": "src/components/Label/label.stories.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Checkbox/Checkbox.tsx",
      "content": "// Tremor Checkbox [v1.0.0]\n\nimport React from \"react\"\nimport * as CheckboxPrimitives from \"@radix-ui/react-checkbox\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitives.Root>\n>(({ className, checked, ...props }, forwardedRef) => {\n  return (\n    <CheckboxPrimitives.Root\n      ref={forwardedRef}\n      {...props}\n      checked={checked}\n      className={cx(\n        // base\n        \"relative inline-flex size-4 shrink-0 appearance-none items-center justify-center rounded-sm shadow-xs outline-hidden ring-1 ring-inset transition duration-100 enabled:cursor-pointer\",\n        // text color\n        \"text-white dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // ring color\n        \"ring-gray-300 dark:ring-gray-800\",\n        // disabled\n        \"data-disabled:bg-gray-100 data-disabled:text-gray-400 data-disabled:ring-gray-300\",\n        \"dark:data-disabled:bg-gray-800 dark:data-disabled:text-gray-500 dark:data-disabled:ring-gray-700\",\n        // checked and enabled\n        \"enabled:data-[state=checked]:bg-blue-500 enabled:data-[state=checked]:ring-0 enabled:data-[state=checked]:ring-transparent\",\n        // indeterminate\n        \"enabled:data-[state=indeterminate]:bg-blue-500 enabled:data-[state=indeterminate]:ring-0 enabled:data-[state=indeterminate]:ring-transparent\",\n        // focus\n        focusRing,\n        className,\n      )}\n      tremor-id=\"tremor-raw\"\n    >\n      <CheckboxPrimitives.Indicator\n        asChild\n        className=\"flex size-full items-center justify-center\"\n      >\n        {checked === \"indeterminate\" ? (\n          <svg\n            aria-hidden=\"true\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 16 16\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <line\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeWidth=\"2\"\n              x1=\"4\"\n              x2=\"12\"\n              y1=\"8\"\n              y2=\"8\"\n            ></line>\n          </svg>\n        ) : (\n          <svg\n            aria-hidden=\"true\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 16 16\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M11.2 5.59998L6.79999 9.99998L4.79999 7.99998\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n            ></path>\n          </svg>\n        )}\n      </CheckboxPrimitives.Indicator>\n    </CheckboxPrimitives.Root>\n  )\n})\n\nCheckbox.displayName = \"Checkbox\"\n\nexport { Checkbox }\n",
      "path": "src/components/Checkbox/Checkbox.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Input/Input.tsx",
      "content": "// Tremor Input [v2.0.0]\n\nimport React from \"react\"\nimport { RiEyeFill, RiEyeOffFill, RiSearchLine } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusInput } from \"@/utils/focusInput\"\nimport { focusRing } from \"@/utils/focusRing\"\nimport { hasErrorInput } from \"@/utils/hasErrorInput\"\n\nconst inputStyles = tv({\n  base: [\n    // base\n    \"relative block w-full appearance-none rounded-md border px-2.5 py-2 shadow-xs outline-hidden transition sm:text-sm\",\n    // border color\n    \"border-gray-300 dark:border-gray-800\",\n    // text color\n    \"text-gray-900 dark:text-gray-50\",\n    // placeholder color\n    \"placeholder-gray-400 dark:placeholder-gray-500\",\n    // background color\n    \"bg-white dark:bg-gray-950\",\n    // disabled\n    \"disabled:border-gray-300 disabled:bg-gray-100 disabled:text-gray-400\",\n    \"dark:disabled:border-gray-700 dark:disabled:bg-gray-800 dark:disabled:text-gray-500\",\n    // file\n    [\n      \"file:-my-2 file:-ml-2.5 file:cursor-pointer file:rounded-l-[5px] file:rounded-r-none file:border-0 file:px-3 file:py-2 file:outline-hidden focus:outline-hidden disabled:pointer-events-none file:disabled:pointer-events-none\",\n      \"file:border-solid file:border-gray-300 file:bg-gray-50 file:text-gray-500 file:hover:bg-gray-100 dark:file:border-gray-800 dark:file:bg-gray-950 dark:file:hover:bg-gray-900/20 dark:file:disabled:border-gray-700\",\n      \"file:[border-inline-end-width:1px] file:[margin-inline-end:0.75rem]\",\n      \"file:disabled:bg-gray-100 file:disabled:text-gray-500 dark:file:disabled:bg-gray-800\",\n    ],\n    // focus\n    focusInput,\n    // invalid (optional)\n    // \"dark:aria-invalid:ring-red-400/20 aria-invalid:ring-2 aria-invalid:ring-red-200 aria-invalid:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n    // remove search cancel button (optional)\n    \"[&::-webkit-search-cancel-button]:hidden [&::-webkit-search-decoration]:hidden\",\n  ],\n  variants: {\n    hasError: {\n      true: hasErrorInput,\n    },\n    // number input\n    enableStepper: {\n      false:\n        \"[appearance:textfield] [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none\",\n    },\n  },\n})\n\ninterface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement>,\n    VariantProps<typeof inputStyles> {\n  inputClassName?: string\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      className,\n      inputClassName,\n      hasError,\n      enableStepper = true,\n      type,\n      ...props\n    }: InputProps,\n    forwardedRef,\n  ) => {\n    const [typeState, setTypeState] = React.useState(type)\n\n    const isPassword = type === \"password\"\n    const isSearch = type === \"search\"\n\n    return (\n      <div className={cx(\"relative w-full\", className)} tremor-id=\"tremor-raw\">\n        <input\n          ref={forwardedRef}\n          type={isPassword ? typeState : type}\n          className={cx(\n            inputStyles({ hasError, enableStepper }),\n            {\n              \"pl-8\": isSearch,\n              \"pr-10\": isPassword,\n            },\n            inputClassName,\n          )}\n          {...props}\n        />\n        {isSearch && (\n          <div\n            className={cx(\n              // base\n              \"pointer-events-none absolute bottom-0 left-2 flex h-full items-center justify-center\",\n              // text color\n              \"text-gray-400 dark:text-gray-600\",\n            )}\n          >\n            <RiSearchLine\n              className=\"size-[1.125rem] shrink-0\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        )}\n        {isPassword && (\n          <div\n            className={cx(\n              \"absolute bottom-0 right-0 flex h-full items-center justify-center px-3\",\n            )}\n          >\n            <button\n              aria-label=\"Change password visibility\"\n              className={cx(\n                // base\n                \"h-fit w-fit rounded-xs outline-hidden transition-all\",\n                // text\n                \"text-gray-400 dark:text-gray-600\",\n                // hover\n                \"hover:text-gray-500 dark:hover:text-gray-500\",\n                focusRing,\n              )}\n              type=\"button\"\n              onClick={() => {\n                setTypeState(typeState === \"password\" ? \"text\" : \"password\")\n              }}\n            >\n              <span className=\"sr-only\">\n                {typeState === \"password\" ? \"Show password\" : \"Hide password\"}\n              </span>\n              {typeState === \"password\" ? (\n                <RiEyeFill aria-hidden=\"true\" className=\"size-5 shrink-0\" />\n              ) : (\n                <RiEyeOffFill aria-hidden=\"true\" className=\"size-5 shrink-0\" />\n              )}\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  },\n)\n\nInput.displayName = \"Input\"\n\nexport { Input, inputStyles, type InputProps }\n",
      "path": "src/components/Input/Input.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Label/Label.tsx",
      "content": "// Tremor Label [v0.0.2]\n\nimport React from \"react\"\nimport * as LabelPrimitives from \"@radix-ui/react-label\"\n\nimport { cx } from \"@/utils/cx\"\n\ninterface LabelProps\n  extends React.ComponentPropsWithoutRef<typeof LabelPrimitives.Root> {\n  disabled?: boolean\n}\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitives.Root>,\n  LabelProps\n>(({ className, disabled, ...props }, forwardedRef) => (\n  <LabelPrimitives.Root\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-sm leading-none\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      {\n        \"text-gray-400 dark:text-gray-600\": disabled,\n      },\n      className,\n    )}\n    aria-disabled={disabled}\n    tremor-id=\"tremor-raw\"\n    {...props}\n  />\n))\n\nLabel.displayName = \"Label\"\n\nexport { Label }\n",
      "path": "src/components/Label/Label.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusInput.ts",
      "content": "// Tremor focusInput [v0.0.2]\n\nexport const focusInput = [\n  // base\n  \"focus:ring-2\",\n  // ring color\n  \"focus:ring-blue-200 dark:focus:ring-blue-700/30\",\n  // border color\n  \"focus:border-blue-500 dark:focus:border-blue-700\",\n]\n",
      "path": "src/utils/focusInput.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/hasErrorInput.ts",
      "content": "// Tremor hasErrorInput [v0.0.1]\n\nexport const hasErrorInput = [\n  // base\n  \"ring-2\",\n  // border color\n  \"border-red-500 dark:border-red-700\",\n  // ring color\n  \"ring-red-200 dark:ring-red-700/30\",\n]\n",
      "path": "src/utils/hasErrorInput.ts"
    }
  ]
}
