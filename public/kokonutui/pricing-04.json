{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-04",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/pricing/pricing-04.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, ArrowRight, Sparkles, ChartNoAxesColumn } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Feature {\n    name: string;\n    description: string;\n    included: boolean;\n}\n\ninterface PricingTier {\n    name: string;\n    icon: React.ReactNode;\n    price: {\n        monthly: number;\n        yearly: number;\n    };\n    description: string;\n    features: Feature[];\n}\n\nconst tiers: PricingTier[] = [\n    {\n        name: \"Pro\",\n        icon: <ChartNoAxesColumn className=\"w-5 h-5\" />,\n        price: {\n            monthly: 49,\n            yearly: 470,\n        },\n        description: \"Perfect for growing teams and businesses\",\n        features: [\n            {\n                name: \"Team Management\",\n                description: \"Add up to 20 team members\",\n                included: true,\n            },\n            {\n                name: \"Advanced Analytics\",\n                description: \"Get detailed insights and reports\",\n                included: true,\n            },\n            {\n                name: \"Priority Support\",\n                description: \"24/7 email and chat support\",\n                included: true,\n            },\n            {\n                name: \"API Access\",\n                description: \"Full access to our REST API\",\n                included: true,\n            },\n        ],\n    },\n    {\n        name: \"Enterprise\",\n        icon: <Sparkles className=\"w-5 h-5\" />,\n        price: {\n            monthly: 99,\n            yearly: 990,\n        },\n        description: \"For organizations that need more\",\n        features: [\n            {\n                name: \"Unlimited Teams\",\n                description: \"No limit on team members\",\n                included: true,\n            },\n            {\n                name: \"Custom Analytics\",\n                description: \"Tailored reports and insights\",\n                included: true,\n            },\n            {\n                name: \"Dedicated Support\",\n                description: \"Personal account manager\",\n                included: true,\n            },\n            {\n                name: \"Advanced Security\",\n                description: \"Enhanced security features\",\n                included: true,\n            },\n            {\n                name: \"Custom Integrations\",\n                description: \"Build custom workflows\",\n                included: true,\n            },\n            {\n                name: \"SLA Guarantee\",\n                description: \"99.9% uptime guarantee\",\n                included: true,\n            },\n        ],\n    },\n];\n\nexport default function Pricing_04() {\n    const [isYearly, setIsYearly] = useState(false);\n\n    return (\n        <div className=\"w-full max-w-7xl mx-auto px-4\">\n            {/* Billing Toggle */}\n            <div className=\"flex justify-center mb-12\">\n                <div className=\"inline-flex items-center bg-zinc-100/50 dark:bg-zinc-800/50 rounded-full p-1\">\n                    {[\"Monthly\", \"Yearly\"].map((period) => (\n                        <button\n                            key={period}\n                            onClick={() => setIsYearly(period === \"Yearly\")}\n                            className={cn(\n                                \"px-6 py-2 rounded-full text-sm font-medium transition-all\",\n                                (period === \"Yearly\") === isYearly\n                                    ? \"bg-white dark:bg-zinc-900 text-zinc-900 dark:text-zinc-100 shadow-xs\"\n                                    : \"text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100\"\n                            )}\n                        >\n                            {period}\n                        </button>\n                    ))}\n                </div>\n            </div>\n\n            {/* Pricing Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                {tiers.map((tier, index) => (\n                    <div\n                        key={tier.name}\n                        className={cn(\n                            \"relative rounded-2xl overflow-hidden\",\n                            \"bg-white dark:bg-zinc-900\",\n                            \"border border-zinc-200 dark:border-zinc-800\",\n                            \"transition-all duration-300\",\n                            \"hover:shadow-lg hover:border-zinc-300 dark:hover:border-zinc-700\"\n                        )}\n                    >\n                        {/* Header */}\n                        <div className=\"p-8 pb-0\">\n                            <div className=\"flex items-center justify-between mb-4\">\n                                <div className=\"flex items-center gap-3\">\n                                    <div className=\"p-2 rounded-lg bg-zinc-100 dark:bg-zinc-800\">\n                                        {tier.icon}\n                                    </div>\n                                    <h3 className=\"text-xl font-semibold\">\n                                        {tier.name}\n                                    </h3>\n                                </div>\n                            </div>\n                            \n                            <div className=\"mb-4\">\n                                <div className=\"flex items-baseline gap-1\">\n                                    <span className=\"text-4xl font-bold\">\n                                        ${isYearly ? tier.price.yearly : tier.price.monthly}\n                                    </span>\n                                    <span className=\"text-zinc-500 text-sm\">\n                                        /{isYearly ? \"year\" : \"month\"}\n                                    </span>\n                                </div>\n                                <p className=\"text-sm text-zinc-500 mt-2\">\n                                    {tier.description}\n                                </p>\n                            </div>\n\n                            <Button\n                                className={cn(\n                                    \"w-full\",\n                                    index === 1\n                                        ? \"bg-zinc-900 dark:bg-white text-white dark:text-zinc-900 hover:bg-zinc-800 dark:hover:bg-zinc-100\"\n                                        : \"bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100 hover:bg-zinc-200 dark:hover:bg-zinc-700\"\n                                )}\n                            >\n                                Get started\n                                <ArrowRight className=\"w-4 h-4 ml-2\" />\n                            </Button>\n                        </div>\n\n                        {/* Features */}\n                        <div className=\"p-8 mt-8\">\n                            <div className=\"space-y-4\">\n                                {tier.features.map((feature) => (\n                                    <div\n                                        key={feature.name}\n                                        className=\"flex items-start gap-3\"\n                                    >\n                                        <div className=\"shrink-0 mt-1\">\n                                            <Check className=\"w-4 h-4 text-emerald-500\" />\n                                        </div>\n                                        <div>\n                                            <p className=\"text-sm font-medium\">\n                                                {feature.name}\n                                            </p>\n                                            <p className=\"text-sm text-zinc-500\">\n                                                {feature.description}\n                                            </p>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n",
      "path": "components/kokonutui/pricing/pricing-04.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n}\n",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    }
  ]
}
