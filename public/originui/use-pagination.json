{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-pagination",
  "type": "registry:hook",
  "files": [
    {
      "type": "registry:hook",
      "target": "hooks/use-pagination.ts",
      "content": "type UsePaginationProps = {\n  currentPage: number\n  totalPages: number\n  paginationItemsToDisplay: number\n}\n\ntype UsePaginationReturn = {\n  pages: number[]\n  showLeftEllipsis: boolean\n  showRightEllipsis: boolean\n}\n\nexport function usePagination({\n  currentPage,\n  totalPages,\n  paginationItemsToDisplay,\n}: UsePaginationProps): UsePaginationReturn {\n  const showLeftEllipsis = currentPage - 1 > paginationItemsToDisplay / 2\n  const showRightEllipsis =\n    totalPages - currentPage + 1 > paginationItemsToDisplay / 2\n\n  function calculatePaginationRange(): number[] {\n    if (totalPages <= paginationItemsToDisplay) {\n      return Array.from({ length: totalPages }, (_, i) => i + 1)\n    }\n\n    const halfDisplay = Math.floor(paginationItemsToDisplay / 2)\n    const initialRange = {\n      start: currentPage - halfDisplay,\n      end: currentPage + halfDisplay,\n    }\n\n    const adjustedRange = {\n      start: Math.max(1, initialRange.start),\n      end: Math.min(totalPages, initialRange.end),\n    }\n\n    if (adjustedRange.start === 1) {\n      adjustedRange.end = paginationItemsToDisplay\n    }\n    if (adjustedRange.end === totalPages) {\n      adjustedRange.start = totalPages - paginationItemsToDisplay + 1\n    }\n\n    if (showLeftEllipsis) adjustedRange.start++\n    if (showRightEllipsis) adjustedRange.end--\n\n    return Array.from(\n      { length: adjustedRange.end - adjustedRange.start + 1 },\n      (_, i) => adjustedRange.start + i\n    )\n  }\n\n  const pages = calculatePaginationRange()\n\n  return {\n    pages,\n    showLeftEllipsis,\n    showRightEllipsis,\n  }\n}\n",
      "path": "registry/default/hooks/use-pagination.ts"
    }
  ]
}
