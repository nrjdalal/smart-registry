{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-calendar-draggable-event",
  "type": "registry:component",
  "dependencies": [
    "@dnd-kit/core",
    "@dnd-kit/utilities",
    "date-fns",
    "react"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/event-calendar/draggable-event.tsx",
      "content": "\"use client\"\n\nimport { useRef, useState } from \"react\"\nimport { useDraggable } from \"@dnd-kit/core\"\nimport { CSS } from \"@dnd-kit/utilities\"\nimport { differenceInDays } from \"date-fns\"\n\nimport {\n  CalendarEvent,\n  EventItem,\n  useCalendarDnd,\n} from \"@/components/event-calendar\"\n\ninterface DraggableEventProps {\n  event: CalendarEvent\n  view: \"month\" | \"week\" | \"day\"\n  showTime?: boolean\n  onClick?: (e: React.MouseEvent) => void\n  height?: number\n  isMultiDay?: boolean\n  multiDayWidth?: number\n  isFirstDay?: boolean\n  isLastDay?: boolean\n  \"aria-hidden\"?: boolean | \"true\" | \"false\"\n}\n\nexport function DraggableEvent({\n  event,\n  view,\n  showTime,\n  onClick,\n  height,\n  isMultiDay,\n  multiDayWidth,\n  isFirstDay = true,\n  isLastDay = true,\n  \"aria-hidden\": ariaHidden,\n}: DraggableEventProps) {\n  const { activeId } = useCalendarDnd()\n  const elementRef = useRef<HTMLDivElement>(null)\n  const [dragHandlePosition, setDragHandlePosition] = useState<{\n    x: number\n    y: number\n  } | null>(null)\n\n  // Check if this is a multi-day event\n  const eventStart = new Date(event.start)\n  const eventEnd = new Date(event.end)\n  const isMultiDayEvent =\n    isMultiDay || event.allDay || differenceInDays(eventEnd, eventStart) >= 1\n\n  const { attributes, listeners, setNodeRef, transform, isDragging } =\n    useDraggable({\n      id: `${event.id}-${view}`,\n      data: {\n        event,\n        view,\n        height: height || elementRef.current?.offsetHeight || null,\n        isMultiDay: isMultiDayEvent,\n        multiDayWidth: multiDayWidth,\n        dragHandlePosition,\n        isFirstDay,\n        isLastDay,\n      },\n    })\n\n  // Handle mouse down to track where on the event the user clicked\n  const handleMouseDown = (e: React.MouseEvent) => {\n    if (elementRef.current) {\n      const rect = elementRef.current.getBoundingClientRect()\n      setDragHandlePosition({\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top,\n      })\n    }\n  }\n\n  // Don't render if this event is being dragged\n  if (isDragging || activeId === `${event.id}-${view}`) {\n    return (\n      <div\n        ref={setNodeRef}\n        className=\"opacity-0\"\n        style={{ height: height || \"auto\" }}\n      />\n    )\n  }\n\n  const style = transform\n    ? {\n        transform: CSS.Translate.toString(transform),\n        height: height || \"auto\",\n        width:\n          isMultiDayEvent && multiDayWidth ? `${multiDayWidth}%` : undefined,\n      }\n    : {\n        height: height || \"auto\",\n        width:\n          isMultiDayEvent && multiDayWidth ? `${multiDayWidth}%` : undefined,\n      }\n\n  // Handle touch start to track where on the event the user touched\n  const handleTouchStart = (e: React.TouchEvent) => {\n    if (elementRef.current) {\n      const rect = elementRef.current.getBoundingClientRect()\n      const touch = e.touches[0]\n      if (touch) {\n        setDragHandlePosition({\n          x: touch.clientX - rect.left,\n          y: touch.clientY - rect.top,\n        })\n      }\n    }\n  }\n\n  return (\n    <div\n      ref={(node) => {\n        setNodeRef(node)\n        if (elementRef) elementRef.current = node\n      }}\n      style={style}\n      className=\"touch-none\"\n    >\n      <EventItem\n        event={event}\n        view={view}\n        showTime={showTime}\n        isFirstDay={isFirstDay}\n        isLastDay={isLastDay}\n        isDragging={isDragging}\n        onClick={onClick}\n        onMouseDown={handleMouseDown}\n        onTouchStart={handleTouchStart}\n        dndListeners={listeners}\n        dndAttributes={attributes}\n        aria-hidden={ariaHidden}\n      />\n    </div>\n  )\n}\n",
      "path": "registry/default/components/event-calendar/draggable-event.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/event-calendar/index.ts",
      "content": "\"use client\"\n\n// Component exports\nexport { AgendaView } from \"./agenda-view\"\nexport { DayView } from \"./day-view\"\nexport { DraggableEvent } from \"./draggable-event\"\nexport { DroppableCell } from \"./droppable-cell\"\nexport { EventDialog } from \"./event-dialog\"\nexport { EventItem } from \"./event-item\"\nexport { EventsPopup } from \"./events-popup\"\nexport { EventCalendar } from \"./event-calendar\"\nexport { MonthView } from \"./month-view\"\nexport { WeekView } from \"./week-view\"\nexport { CalendarDndProvider, useCalendarDnd } from \"./calendar-dnd-context\"\n\n// Constants and utility exports\nexport * from \"./constants\"\nexport * from \"./utils\"\n\n// Hook exports\nexport * from \"./hooks/use-current-time-indicator\"\nexport * from \"./hooks/use-event-visibility\"\n\n// Type exports\nexport type { CalendarEvent, CalendarView, EventColor } from \"./types\"\n",
      "path": "registry/default/components/event-calendar/index.ts"
    }
  ]
}
