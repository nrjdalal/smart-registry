{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-progress-circle-demo",
  "type": "registry:file",
  "dependencies": [
    "@kobalte/core",
    "clsx",
    "solid-js",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "example/progress-circle-demo.tsx",
      "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Card } from \"@/components/ui/card\"\nimport { ProgressCircle } from \"@/components/ui/progress-circle\"\n\nexport default function ProgressCircleDemo() {\n  return (\n    <div class=\"flex flex-col items-center gap-3\">\n      <p class=\"text-sm text-muted-foreground\"> Without children </p>\n      <Card class=\"p-4\">\n        <div class=\"flex items-center justify-start space-x-5\">\n          <ProgressCircle value={75} />\n          <div>\n            <p class=\"text-tremor-default text-tremor-content-strong dark:text-dark-tremor-content-strong font-medium\">\n              $340/$450 (75%)\n            </p>\n            <p class=\"text-tremor-default text-tremor-content dark:text-dark-tremor-content\">\n              Spend management control\n            </p>\n          </div>\n        </div>\n      </Card>\n      <p class=\"text-sm text-muted-foreground\">Progress value as children</p>\n      <Card class=\"mx-auto max-w-sm p-4\">\n        <div class=\"flex items-center justify-start space-x-5\">\n          <ProgressCircle value={75}>\n            <span class=\"text-xs font-medium text-slate-700\">75%</span>\n          </ProgressCircle>\n          <div>\n            <p class=\"text-tremor-default text-tremor-content-strong dark:text-dark-tremor-content-strong font-medium\">\n              $340/$450 (75%)\n            </p>\n            <p class=\"text-tremor-default text-tremor-content dark:text-dark-tremor-content\">\n              Spend management control\n            </p>\n          </div>\n        </div>\n      </Card>\n      <p class=\"text-sm text-muted-foreground\"> Avatar as children </p>\n      <Card class=\"mx-auto max-w-sm p-4\">\n        <div class=\"flex items-center justify-center space-x-5\">\n          <ProgressCircle value={75}>\n            <Avatar class=\"size-12\">\n              <AvatarImage src=\"https://github.com/stefan-karger.png\" />\n              <AvatarFallback>EK</AvatarFallback>\n            </Avatar>\n          </ProgressCircle>\n          <div>\n            <p class=\"text-tremor-default text-tremor-content-strong dark:text-dark-tremor-content-strong font-medium\">\n              $340/$450 (75%)\n            </p>\n            <p class=\"text-tremor-default text-tremor-content dark:text-dark-tremor-content\">\n              Spend management control\n            </p>\n          </div>\n        </div>\n      </Card>\n    </div>\n  )\n}\n",
      "path": "src/registry/example/progress-circle-demo.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import type { ClassValue } from \"clsx\"\nimport { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return val > max ? max : val < min ? min : val\n}\n\nexport function toggleValue<T>(array: T[], value: T): T[] {\n  return array.includes(value) ? array.filter((item) => item !== value) : [...array, value]\n}\n",
      "path": "src/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/avatar.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as ImagePrimitive from \"@kobalte/core/image\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype AvatarRootProps<T extends ValidComponent = \"span\"> = ImagePrimitive.ImageRootProps<T> & {\n  class?: string | undefined\n}\n\nconst Avatar = <T extends ValidComponent = \"span\">(\n  props: PolymorphicProps<T, AvatarRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as AvatarRootProps, [\"class\"])\n  return (\n    <ImagePrimitive.Root\n      class={cn(\"relative flex size-10 shrink-0 overflow-hidden rounded-full\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype AvatarImageProps<T extends ValidComponent = \"img\"> = ImagePrimitive.ImageImgProps<T> & {\n  class?: string | undefined\n}\n\nconst AvatarImage = <T extends ValidComponent = \"img\">(\n  props: PolymorphicProps<T, AvatarImageProps<T>>\n) => {\n  const [local, others] = splitProps(props as AvatarImageProps, [\"class\"])\n  return <ImagePrimitive.Img class={cn(\"aspect-square size-full\", local.class)} {...others} />\n}\n\ntype AvatarFallbackProps<T extends ValidComponent = \"span\"> =\n  ImagePrimitive.ImageFallbackProps<T> & { class?: string | undefined }\n\nconst AvatarFallback = <T extends ValidComponent = \"span\">(\n  props: PolymorphicProps<T, AvatarFallbackProps<T>>\n) => {\n  const [local, others] = splitProps(props as AvatarFallbackProps, [\"class\"])\n  return (\n    <ImagePrimitive.Fallback\n      class={cn(\"flex size-full items-center justify-center bg-muted\", local.class)}\n      {...others}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "path": "src/registry/ui/avatar.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/card.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div\n      class={cn(\"rounded-lg border bg-card text-card-foreground shadow-sm\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst CardHeader: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"flex flex-col space-y-1.5 p-6\", local.class)} {...others} />\n}\n\nconst CardTitle: Component<ComponentProps<\"h3\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <h3 class={cn(\"text-lg font-semibold leading-none tracking-tight\", local.class)} {...others} />\n  )\n}\n\nconst CardDescription: Component<ComponentProps<\"p\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <p class={cn(\"text-sm text-muted-foreground\", local.class)} {...others} />\n}\n\nconst CardContent: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"p-6 pt-0\", local.class)} {...others} />\n}\n\nconst CardFooter: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"flex items-center p-6 pt-0\", local.class)} {...others} />\n}\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "path": "src/registry/ui/card.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/progress-circle.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { mergeProps, splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype Size = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"\n\nconst sizes: Record<Size, { radius: number; strokeWidth: number }> = {\n  xs: { radius: 15, strokeWidth: 3 },\n  sm: { radius: 19, strokeWidth: 4 },\n  md: { radius: 32, strokeWidth: 6 },\n  lg: { radius: 52, strokeWidth: 8 },\n  xl: { radius: 80, strokeWidth: 10 }\n}\n\ntype ProgressCircleProps = ComponentProps<\"div\"> & {\n  value?: number\n  size?: Size\n  radius?: number\n  strokeWidth?: number\n  showAnimation?: boolean\n}\n\nconst ProgressCircle: Component<ProgressCircleProps> = (rawProps) => {\n  const props = mergeProps({ size: \"md\" as Size, showAnimation: true }, rawProps)\n  const [local, others] = splitProps(props, [\n    \"class\",\n    \"children\",\n    \"value\",\n    \"size\",\n    \"radius\",\n    \"strokeWidth\",\n    \"showAnimation\"\n  ])\n\n  const value = () => getLimitedValue(local.value)\n  const radius = () => local.radius ?? sizes[local.size].radius\n  const strokeWidth = () => local.strokeWidth ?? sizes[local.size].strokeWidth\n  const normalizedRadius = () => radius() - strokeWidth() / 2\n  const circumference = () => normalizedRadius() * 2 * Math.PI\n  const strokeDashoffset = () => (value() / 100) * circumference()\n  const offset = () => circumference() - strokeDashoffset()\n\n  return (\n    <div class={cn(\"flex flex-col items-center justify-center\", local.class)} {...others}>\n      <svg\n        width={radius() * 2}\n        height={radius() * 2}\n        viewBox={`0 0 ${radius() * 2} ${radius() * 2}`}\n        class=\"-rotate-90\"\n      >\n        <circle\n          r={normalizedRadius()}\n          cx={radius()}\n          cy={radius()}\n          stroke-width={strokeWidth()}\n          fill=\"transparent\"\n          stroke=\"\"\n          stroke-linecap=\"round\"\n          class={cn(\"stroke-secondary transition-colors ease-linear\")}\n        />\n        {value() >= 0 ? (\n          <circle\n            r={normalizedRadius()}\n            cx={radius()}\n            cy={radius()}\n            stroke-width={strokeWidth()}\n            stroke-dasharray={circumference() + \" \" + circumference()}\n            stroke-dashoffset={offset()}\n            fill=\"transparent\"\n            stroke=\"\"\n            stroke-linecap=\"round\"\n            class={cn(\n              \"stroke-primary transition-colors ease-linear\",\n              local.showAnimation ? \"transition-all duration-300 ease-in-out\" : \"\"\n            )}\n          />\n        ) : null}\n      </svg>\n      <div class={cn(\"absolute flex\")}>{local.children}</div>\n    </div>\n  )\n}\n\nfunction getLimitedValue(input: number | undefined) {\n  if (input === undefined) {\n    return 0\n  } else if (input > 100) {\n    return 100\n  }\n  return input\n}\n\nexport { ProgressCircle }\n",
      "path": "src/registry/ui/progress-circle.tsx"
    }
  ]
}
