{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "utils.spec",
  "type": "registry:lib",
  "files": [
    {
      "type": "registry:lib",
      "target": "utils/utils.spec.ts",
      "content": "import { describe, expect, it } from \"vitest\"\n\nimport {\n  chartColors,\n  ColorUtility,\n  constructCategoryColors,\n  getColorClassName,\n  type AvailableChartColorsKeys,\n} from \"@/utils/chartColors\"\nimport { getYAxisDomain } from \"@/utils/getYAxisDomain\"\nimport { hasOnlyOneValueForKey } from \"@/utils/hasOnlyOneValueForKey\"\n\ndescribe(\"constructCategoryColors\", () => {\n  it(\"should correctly map categories to colors\", () => {\n    const categories = [\"A\", \"B\", \"C\", \"D\"]\n    const colors: AvailableChartColorsKeys[] = [\n      \"blue\",\n      \"emerald\",\n      \"violet\",\n      \"amber\",\n    ]\n\n    const expectedOutput = new Map<string, AvailableChartColorsKeys>([\n      [\"A\", \"blue\"],\n      [\"B\", \"emerald\"],\n      [\"C\", \"violet\"],\n      [\"D\", \"amber\"],\n    ])\n\n    const result = constructCategoryColors(categories, colors)\n\n    expect(result).toEqual(expectedOutput)\n  })\n})\n\ndescribe(\"hasOnlyOneValueForKey\", () => {\n  it(\"returns false when the key has the same value in all objects\", () => {\n    const array = [\n      { id: 1, value: \"a\" },\n      { id: 2, value: \"a\" },\n      { id: 3, value: \"a\" },\n    ]\n    expect(hasOnlyOneValueForKey(array, \"value\")).toBe(false)\n  })\n\n  it(\"returns false when the key has different values in the objects\", () => {\n    const array = [\n      { id: 1, value: \"a\" },\n      { id: 2, value: \"b\" },\n      { id: 3, value: \"a\" },\n    ]\n    expect(hasOnlyOneValueForKey(array, \"value\")).toBe(false)\n  })\n\n  it(\"returns true when the key is present in only one object\", () => {\n    const array = [{ id: 1 }, { id: 2, value: \"a\" }, { id: 3 }]\n    expect(hasOnlyOneValueForKey(array, \"value\")).toBe(true)\n  })\n\n  it(\"returns true when the array is empty\", () => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const array: any[] = []\n    expect(hasOnlyOneValueForKey(array, \"value\")).toBe(true)\n  })\n\n  it(\"returns false when the key has different values and some objects are missing the key\", () => {\n    const array = [{ id: 1, value: \"a\" }, { id: 2 }, { id: 3, value: \"b\" }]\n    expect(hasOnlyOneValueForKey(array, \"value\")).toBe(false)\n  })\n\n  it(\"returns true when all objects are missing the key\", () => {\n    const array = [{ id: 1 }, { id: 2 }, { id: 3 }]\n    expect(hasOnlyOneValueForKey(array, \"value\")).toBe(true)\n  })\n})\n\ndescribe(\"getYAxisDomain\", () => {\n  it('returns [\"auto\", \"auto\"] when autoMinValue is true and maxValue is undefined', () => {\n    const result = getYAxisDomain(true, undefined, undefined)\n    expect(result).toEqual([\"auto\", \"auto\"])\n  })\n\n  it('returns [\"auto\", maxValue] when autoMinValue is true and maxValue is defined', () => {\n    const result = getYAxisDomain(true, undefined, 100)\n    expect(result).toEqual([\"auto\", 100])\n  })\n\n  it('returns [minValue, \"auto\"] when autoMinValue is false and minValue is defined', () => {\n    const result = getYAxisDomain(false, 10, undefined)\n    expect(result).toEqual([10, \"auto\"])\n  })\n\n  it(\"returns [minValue, maxValue] when autoMinValue is false and both minValue and maxValue are defined\", () => {\n    const result = getYAxisDomain(false, 10, 100)\n    expect(result).toEqual([10, 100])\n  })\n\n  it('returns [0, \"auto\"] when autoMinValue is false and minValue is undefined and maxValue is undefined', () => {\n    const result = getYAxisDomain(false, undefined, undefined)\n    expect(result).toEqual([0, \"auto\"])\n  })\n\n  it(\"returns [0, maxValue] when autoMinValue is false, minValue is undefined, and maxValue is defined\", () => {\n    const result = getYAxisDomain(false, undefined, 100)\n    expect(result).toEqual([0, 100])\n  })\n\n  it('returns [minValue, \"auto\"] when autoMinValue is true and minValue is defined but maxValue is undefined', () => {\n    const result = getYAxisDomain(true, 10, undefined)\n    expect(result).toEqual([\"auto\", \"auto\"])\n  })\n\n  it('returns [\"auto\", \"auto\"] when autoMinValue is true and minValue is defined and maxValue is undefined', () => {\n    const result = getYAxisDomain(true, 10, undefined)\n    expect(result).toEqual([\"auto\", \"auto\"])\n  })\n})\n\ndescribe(\"getColorClassName\", () => {\n  const colors: AvailableChartColorsKeys[] = Object.keys(\n    chartColors,\n  ) as AvailableChartColorsKeys[]\n  const utilities: ColorUtility[] = [\"bg\", \"stroke\", \"fill\", \"text\"]\n\n  colors.forEach((color) => {\n    utilities.forEach((type) => {\n      it(`returns the correct class name for color ${color} and type ${type}`, () => {\n        const result = getColorClassName(color, type)\n        expect(result).toBe(chartColors[color][type])\n      })\n    })\n  })\n\n  it(\"returns the fallback class name for an invalid color\", () => {\n    const result = getColorClassName(\n      \"invalidColor\" as AvailableChartColorsKeys,\n      \"bg\",\n    )\n    expect(result).toBe(\"bg-gray-500\")\n  })\n})\n",
      "path": "src/utils/utils.spec.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/chartColors.ts",
      "content": "// Tremor chartColors [v0.1.0]\n\nexport type ColorUtility = \"bg\" | \"stroke\" | \"fill\" | \"text\"\n\nexport const chartColors = {\n  blue: {\n    bg: \"bg-blue-500\",\n    stroke: \"stroke-blue-500\",\n    fill: \"fill-blue-500\",\n    text: \"text-blue-500\",\n  },\n  emerald: {\n    bg: \"bg-emerald-500\",\n    stroke: \"stroke-emerald-500\",\n    fill: \"fill-emerald-500\",\n    text: \"text-emerald-500\",\n  },\n  violet: {\n    bg: \"bg-violet-500\",\n    stroke: \"stroke-violet-500\",\n    fill: \"fill-violet-500\",\n    text: \"text-violet-500\",\n  },\n  amber: {\n    bg: \"bg-amber-500\",\n    stroke: \"stroke-amber-500\",\n    fill: \"fill-amber-500\",\n    text: \"text-amber-500\",\n  },\n  gray: {\n    bg: \"bg-gray-500\",\n    stroke: \"stroke-gray-500\",\n    fill: \"fill-gray-500\",\n    text: \"text-gray-500\",\n  },\n  cyan: {\n    bg: \"bg-cyan-500\",\n    stroke: \"stroke-cyan-500\",\n    fill: \"fill-cyan-500\",\n    text: \"text-cyan-500\",\n  },\n  pink: {\n    bg: \"bg-pink-500\",\n    stroke: \"stroke-pink-500\",\n    fill: \"fill-pink-500\",\n    text: \"text-pink-500\",\n  },\n  lime: {\n    bg: \"bg-lime-500\",\n    stroke: \"stroke-lime-500\",\n    fill: \"fill-lime-500\",\n    text: \"text-lime-500\",\n  },\n  fuchsia: {\n    bg: \"bg-fuchsia-500\",\n    stroke: \"stroke-fuchsia-500\",\n    fill: \"fill-fuchsia-500\",\n    text: \"text-fuchsia-500\",\n  },\n} as const satisfies {\n  [color: string]: {\n    [key in ColorUtility]: string\n  }\n}\n\nexport type AvailableChartColorsKeys = keyof typeof chartColors\n\nexport const AvailableChartColors: AvailableChartColorsKeys[] = Object.keys(\n  chartColors,\n) as Array<AvailableChartColorsKeys>\n\nexport const constructCategoryColors = (\n  categories: string[],\n  colors: AvailableChartColorsKeys[],\n): Map<string, AvailableChartColorsKeys> => {\n  const categoryColors = new Map<string, AvailableChartColorsKeys>()\n  categories.forEach((category, index) => {\n    categoryColors.set(category, colors[index % colors.length])\n  })\n  return categoryColors\n}\n\nexport const getColorClassName = (\n  color: AvailableChartColorsKeys,\n  type: ColorUtility,\n): string => {\n  const fallbackColor = {\n    bg: \"bg-gray-500\",\n    stroke: \"stroke-gray-500\",\n    fill: \"fill-gray-500\",\n    text: \"text-gray-500\",\n  }\n  return chartColors[color]?.[type] ?? fallbackColor[type]\n}\n",
      "path": "src/utils/chartColors.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/getYAxisDomain.ts",
      "content": "// Tremor getYAxisDomain [v0.0.0]\n\nexport const getYAxisDomain = (\n  autoMinValue: boolean,\n  minValue: number | undefined,\n  maxValue: number | undefined,\n) => {\n  const minDomain = autoMinValue ? \"auto\" : (minValue ?? 0)\n  const maxDomain = maxValue ?? \"auto\"\n  return [minDomain, maxDomain]\n}\n",
      "path": "src/utils/getYAxisDomain.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/hasOnlyOneValueForKey.ts",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n// Tremor hasOnlyOneValueForKey [v0.1.0]\n\nexport function hasOnlyOneValueForKey(\n  array: any[],\n  keyToCheck: string,\n): boolean {\n  const val: any[] = []\n\n  for (const obj of array) {\n    if (Object.prototype.hasOwnProperty.call(obj, keyToCheck)) {\n      val.push(obj[keyToCheck])\n      if (val.length > 1) {\n        return false\n      }\n    }\n  }\n\n  return true\n}\n",
      "path": "src/utils/hasOnlyOneValueForKey.ts"
    }
  ]
}
