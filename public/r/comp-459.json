{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "components/smart-registry/comp-459",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "target": "components/smart-registry/comp-459.tsx",
      "content": "import { usePagination } from \"@/registry/default/hooks/use-pagination\"\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/registry/default/ui/pagination\"\n\ntype PaginationProps = {\n  currentPage: number\n  totalPages: number\n  paginationItemsToDisplay?: number\n}\n\nexport default function Component({\n  currentPage,\n  totalPages,\n  paginationItemsToDisplay = 5,\n}: PaginationProps) {\n  const { pages, showLeftEllipsis, showRightEllipsis } = usePagination({\n    currentPage,\n    totalPages,\n    paginationItemsToDisplay,\n  })\n\n  return (\n    <Pagination>\n      <PaginationContent>\n        {/* Previous page button */}\n        <PaginationItem>\n          <PaginationPrevious\n            className=\"aria-disabled:pointer-events-none aria-disabled:opacity-50\"\n            href={currentPage === 1 ? undefined : `#/page/${currentPage - 1}`}\n            aria-disabled={currentPage === 1 ? true : undefined}\n            role={currentPage === 1 ? \"link\" : undefined}\n          />\n        </PaginationItem>\n\n        {/* Left ellipsis (...) */}\n        {showLeftEllipsis && (\n          <PaginationItem>\n            <PaginationEllipsis />\n          </PaginationItem>\n        )}\n\n        {/* Page number links */}\n        {pages.map((page) => (\n          <PaginationItem key={page}>\n            <PaginationLink\n              href={`#/page/${page}`}\n              isActive={page === currentPage}\n            >\n              {page}\n            </PaginationLink>\n          </PaginationItem>\n        ))}\n\n        {/* Right ellipsis (...) */}\n        {showRightEllipsis && (\n          <PaginationItem>\n            <PaginationEllipsis />\n          </PaginationItem>\n        )}\n\n        {/* Next page button */}\n        <PaginationItem>\n          <PaginationNext\n            className=\"aria-disabled:pointer-events-none aria-disabled:opacity-50\"\n            href={\n              currentPage === totalPages\n                ? undefined\n                : `#/page/${currentPage + 1}`\n            }\n            aria-disabled={currentPage === totalPages ? true : undefined}\n            role={currentPage === totalPages ? \"link\" : undefined}\n          />\n        </PaginationItem>\n      </PaginationContent>\n    </Pagination>\n  )\n}\n",
      "path": "registry/default/components/comp-459.tsx"
    },
    {
      "type": "registry:hook",
      "target": "hooks/smart-registry/use-pagination.ts",
      "content": "type UsePaginationProps = {\n  currentPage: number\n  totalPages: number\n  paginationItemsToDisplay: number\n}\n\ntype UsePaginationReturn = {\n  pages: number[]\n  showLeftEllipsis: boolean\n  showRightEllipsis: boolean\n}\n\nexport function usePagination({\n  currentPage,\n  totalPages,\n  paginationItemsToDisplay,\n}: UsePaginationProps): UsePaginationReturn {\n  const showLeftEllipsis = currentPage - 1 > paginationItemsToDisplay / 2\n  const showRightEllipsis =\n    totalPages - currentPage + 1 > paginationItemsToDisplay / 2\n\n  function calculatePaginationRange(): number[] {\n    if (totalPages <= paginationItemsToDisplay) {\n      return Array.from({ length: totalPages }, (_, i) => i + 1)\n    }\n\n    const halfDisplay = Math.floor(paginationItemsToDisplay / 2)\n    const initialRange = {\n      start: currentPage - halfDisplay,\n      end: currentPage + halfDisplay,\n    }\n\n    const adjustedRange = {\n      start: Math.max(1, initialRange.start),\n      end: Math.min(totalPages, initialRange.end),\n    }\n\n    if (adjustedRange.start === 1) {\n      adjustedRange.end = paginationItemsToDisplay\n    }\n    if (adjustedRange.end === totalPages) {\n      adjustedRange.start = totalPages - paginationItemsToDisplay + 1\n    }\n\n    if (showLeftEllipsis) adjustedRange.start++\n    if (showRightEllipsis) adjustedRange.end--\n\n    return Array.from(\n      { length: adjustedRange.end - adjustedRange.start + 1 },\n      (_, i) => adjustedRange.start + i,\n    )\n  }\n\n  const pages = calculatePaginationRange()\n\n  return {\n    pages,\n    showLeftEllipsis,\n    showRightEllipsis,\n  }\n}\n",
      "path": "registry/default/hooks/use-pagination.ts"
    }
  ]
}