{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-btn-03",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react",
    "motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/button/btn-03.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion, useAnimation } from \"motion/react\";\nimport { Magnet } from \"lucide-react\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface Btn03Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    particleCount?: number;\n    attractRadius?: number;\n}\n\ninterface Particle {\n    id: number;\n    x: number;\n    y: number;\n}\n\nexport default function Btn03({\n    className,\n    particleCount = 12,\n    attractRadius = 50,\n    ...props\n}: Btn03Props) {\n    const [isAttracting, setIsAttracting] = useState(false);\n    const [particles, setParticles] = useState<Particle[]>([]);\n    const particlesControl = useAnimation();\n\n    useEffect(() => {\n        const newParticles = Array.from({ length: particleCount }, (_, i) => ({\n            id: i,\n            x: Math.random() * 360 - 180,\n            y: Math.random() * 360 - 180,\n        }));\n        setParticles(newParticles);\n    }, [particleCount]);\n\n    const handleInteractionStart = useCallback(async () => {\n        setIsAttracting(true);\n        await particlesControl.start({\n            x: 0,\n            y: 0,\n            transition: {\n                type: \"spring\",\n                stiffness: 50,\n                damping: 10,\n            },\n        });\n    }, [particlesControl]);\n\n    const handleInteractionEnd = useCallback(async () => {\n        setIsAttracting(false);\n        await particlesControl.start((i) => ({\n            x: particles[i].x,\n            y: particles[i].y,\n            transition: {\n                type: \"spring\",\n                stiffness: 100,\n                damping: 15,\n            },\n        }));\n    }, [particlesControl, particles]);\n\n    return (\n        <Button\n            className={cn(\n                \"min-w-40 relative touch-none\",\n                \"bg-violet-100 dark:bg-violet-900\",\n                \"hover:bg-violet-200 dark:hover:bg-violet-800\",\n                \"text-violet-600 dark:text-violet-300\",\n                \"border border-violet-300 dark:border-violet-700\",\n                \"transition-all duration-300\",\n                className\n            )}\n            onMouseEnter={handleInteractionStart}\n            onMouseLeave={handleInteractionEnd}\n            onTouchStart={handleInteractionStart}\n            onTouchEnd={handleInteractionEnd}\n            {...props}\n        >\n            {particles.map((_, index) => (\n                <motion.div\n                    key={index}\n                    custom={index}\n                    initial={{ x: particles[index].x, y: particles[index].y }}\n                    animate={particlesControl}\n                    className={cn(\n                        \"absolute w-1.5 h-1.5 rounded-full\",\n                        \"bg-violet-400 dark:bg-violet-300\",\n                        \"transition-opacity duration-300\",\n                        isAttracting ? \"opacity-100\" : \"opacity-40\"\n                    )}\n                />\n            ))}\n            <span className=\"relative w-full flex items-center justify-center gap-2\">\n                <Magnet\n                    className={cn(\n                        \"w-4 h-4 transition-transform duration-300\",\n                        isAttracting && \"scale-110\"\n                    )}\n                />\n                {isAttracting ? \"Attracting\" : \"Hover me\"}\n            </span>\n        </Button>\n    );\n}\n",
      "path": "components/kokonutui/button/btn-03.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    }
  ]
}
