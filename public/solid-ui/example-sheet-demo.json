{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-sheet-demo",
  "type": "registry:file",
  "dependencies": [
    "@kobalte/core",
    "class-variance-authority",
    "clsx",
    "solid-js",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "example/sheet-demo.tsx",
      "content": "import { For } from \"solid-js\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger\n} from \"@/components/ui/sheet\"\nimport { TextField, TextFieldInput, TextFieldLabel } from \"@/components/ui/text-field\"\n\nconst SHEET_POSITIONS = [\"top\", \"right\", \"bottom\", \"left\"] as const\n\nexport default function SheetDemo() {\n  return (\n    <div class=\"grid grid-cols-2 gap-2\">\n      <For each={SHEET_POSITIONS}>\n        {(position) => (\n          <Sheet>\n            <SheetTrigger as={Button<\"button\">} variant=\"outline\">\n              {position}\n            </SheetTrigger>\n            <SheetContent position={position}>\n              <SheetHeader>\n                <SheetTitle>Edit profile</SheetTitle>\n                <SheetDescription>\n                  Make changes to your profile here. Click save when you're done.\n                </SheetDescription>\n              </SheetHeader>\n              <div class=\"grid gap-4 py-4\">\n                <TextField class=\"grid grid-cols-4 items-center gap-4\">\n                  <TextFieldLabel class=\"text-right\">Name</TextFieldLabel>\n                  <TextFieldInput value=\"Pedro Duarte\" class=\"col-span-3\" type=\"text\" />\n                </TextField>\n                <TextField class=\"grid grid-cols-4 items-center gap-4\">\n                  <TextFieldLabel class=\"text-right\">Username</TextFieldLabel>\n                  <TextFieldInput value=\"@peduarte\" class=\"col-span-3\" type=\"text\" />\n                </TextField>\n              </div>\n              <SheetFooter>\n                <Button type=\"submit\">Save changes</Button>\n              </SheetFooter>\n            </SheetContent>\n          </Sheet>\n        )}\n      </For>\n    </div>\n  )\n}\n",
      "path": "src/registry/example/sheet-demo.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import type { ClassValue } from \"clsx\"\nimport { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return val > max ? max : val < min ? min : val\n}\n\nexport function toggleValue<T>(array: T[], value: T): T[] {\n  return array.includes(value) ? array.filter((item) => item !== value) : [...array, value]\n}\n",
      "path": "src/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as ButtonPrimitive from \"@kobalte/core/button\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\"\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 px-3 text-xs\",\n        lg: \"h-11 px-8\",\n        icon: \"size-10\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n)\n\ntype ButtonProps<T extends ValidComponent = \"button\"> = ButtonPrimitive.ButtonRootProps<T> &\n  VariantProps<typeof buttonVariants> & { class?: string | undefined; children?: JSX.Element }\n\nconst Button = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ButtonProps<T>>\n) => {\n  const [local, others] = splitProps(props as ButtonProps, [\"variant\", \"size\", \"class\"])\n  return (\n    <ButtonPrimitive.Root\n      class={cn(buttonVariants({ variant: local.variant, size: local.size }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\nexport type { ButtonProps }\n",
      "path": "src/registry/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/sheet.tsx",
      "content": "import type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as SheetPrimitive from \"@kobalte/core/dialog\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\nconst SheetTrigger = SheetPrimitive.Trigger\nconst SheetClose = SheetPrimitive.CloseButton\n\nconst portalVariants = cva(\"fixed inset-0 z-50 flex\", {\n  variants: {\n    position: {\n      top: \"items-start\",\n      bottom: \"items-end\",\n      left: \"justify-start\",\n      right: \"justify-end\"\n    }\n  },\n  defaultVariants: { position: \"right\" }\n})\n\ntype PortalProps = SheetPrimitive.DialogPortalProps & VariantProps<typeof portalVariants>\n\nconst SheetPortal: Component<PortalProps> = (props) => {\n  const [local, others] = splitProps(props, [\"position\", \"children\"])\n  return (\n    <SheetPrimitive.Portal {...others}>\n      <div class={portalVariants({ position: local.position })}>{local.children}</div>\n    </SheetPrimitive.Portal>\n  )\n}\n\ntype DialogOverlayProps<T extends ValidComponent = \"div\"> = SheetPrimitive.DialogOverlayProps<T> & {\n  class?: string | undefined\n}\n\nconst SheetOverlay = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DialogOverlayProps<T>>\n) => {\n  const [local, others] = splitProps(props as DialogOverlayProps, [\"class\"])\n  return (\n    <SheetPrimitive.Overlay\n      class={cn(\n        \"fixed inset-0 z-50 bg-black/80 data-[expanded=]:animate-in data-[closed=]:animate-out data-[closed=]:fade-out-0 data-[expanded=]:fade-in-0\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[closed=]:duration-300 data-[expanded=]:duration-500 data-[expanded=]:animate-in data-[closed=]:animate-out\",\n  {\n    variants: {\n      position: {\n        top: \"inset-x-0 top-0 border-b data-[closed=]:slide-out-to-top data-[expanded=]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[closed=]:slide-out-to-bottom data-[expanded=]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[closed=]:slide-out-to-left data-[expanded=]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[closed=]:slide-out-to-right data-[expanded=]:slide-in-from-right sm:max-w-sm\"\n      }\n    },\n    defaultVariants: {\n      position: \"right\"\n    }\n  }\n)\n\ntype DialogContentProps<T extends ValidComponent = \"div\"> = SheetPrimitive.DialogContentProps<T> &\n  VariantProps<typeof sheetVariants> & { class?: string | undefined; children?: JSX.Element }\n\nconst SheetContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DialogContentProps<T>>\n) => {\n  const [local, others] = splitProps(props as DialogContentProps, [\"position\", \"class\", \"children\"])\n  return (\n    <SheetPortal position={local.position}>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        class={cn(\n          sheetVariants({ position: local.position }),\n          local.class,\n          \"max-h-screen overflow-y-auto\"\n        )}\n        {...others}\n      >\n        {local.children}\n        <SheetPrimitive.CloseButton class=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"size-4\"\n          >\n            <path d=\"M18 6l-12 12\" />\n            <path d=\"M6 6l12 12\" />\n          </svg>\n          <span class=\"sr-only\">Close</span>\n        </SheetPrimitive.CloseButton>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nconst SheetHeader: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div class={cn(\"flex flex-col space-y-2 text-center sm:text-left\", local.class)} {...others} />\n  )\n}\n\nconst SheetFooter: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div\n      class={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype DialogTitleProps<T extends ValidComponent = \"h2\"> = SheetPrimitive.DialogTitleProps<T> & {\n  class?: string | undefined\n}\n\nconst SheetTitle = <T extends ValidComponent = \"h2\">(\n  props: PolymorphicProps<T, DialogTitleProps<T>>\n) => {\n  const [local, others] = splitProps(props as DialogTitleProps, [\"class\"])\n  return (\n    <SheetPrimitive.Title\n      class={cn(\"text-lg font-semibold text-foreground\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype DialogDescriptionProps<T extends ValidComponent = \"p\"> =\n  SheetPrimitive.DialogDescriptionProps<T> & { class?: string | undefined }\n\nconst SheetDescription = <T extends ValidComponent = \"p\">(\n  props: PolymorphicProps<T, DialogDescriptionProps<T>>\n) => {\n  const [local, others] = splitProps(props as DialogDescriptionProps, [\"class\"])\n  return (\n    <SheetPrimitive.Description\n      class={cn(\"text-sm text-muted-foreground\", local.class)}\n      {...others}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription\n}\n",
      "path": "src/registry/ui/sheet.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/text-field.tsx",
      "content": "import type { ValidComponent } from \"solid-js\"\nimport { mergeProps, splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core\"\nimport * as TextFieldPrimitive from \"@kobalte/core/text-field\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype TextFieldRootProps<T extends ValidComponent = \"div\"> =\n  TextFieldPrimitive.TextFieldRootProps<T> & {\n    class?: string | undefined\n  }\n\nconst TextField = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TextFieldRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldRootProps, [\"class\"])\n  return <TextFieldPrimitive.Root class={cn(\"flex flex-col gap-1\", local.class)} {...others} />\n}\n\ntype TextFieldInputProps<T extends ValidComponent = \"input\"> =\n  TextFieldPrimitive.TextFieldInputProps<T> & {\n    class?: string | undefined\n    type?:\n      | \"button\"\n      | \"checkbox\"\n      | \"color\"\n      | \"date\"\n      | \"datetime-local\"\n      | \"email\"\n      | \"file\"\n      | \"hidden\"\n      | \"image\"\n      | \"month\"\n      | \"number\"\n      | \"password\"\n      | \"radio\"\n      | \"range\"\n      | \"reset\"\n      | \"search\"\n      | \"submit\"\n      | \"tel\"\n      | \"text\"\n      | \"time\"\n      | \"url\"\n      | \"week\"\n  }\n\nconst TextFieldInput = <T extends ValidComponent = \"input\">(\n  rawProps: PolymorphicProps<T, TextFieldInputProps<T>>\n) => {\n  const props = mergeProps<TextFieldInputProps<T>[]>({ type: \"text\" }, rawProps)\n  const [local, others] = splitProps(props as TextFieldInputProps, [\"type\", \"class\"])\n  return (\n    <TextFieldPrimitive.Input\n      type={local.type}\n      class={cn(\n        \"flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[invalid]:border-error-foreground data-[invalid]:text-error-foreground\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype TextFieldTextAreaProps<T extends ValidComponent = \"textarea\"> =\n  TextFieldPrimitive.TextFieldTextAreaProps<T> & { class?: string | undefined }\n\nconst TextFieldTextArea = <T extends ValidComponent = \"textarea\">(\n  props: PolymorphicProps<T, TextFieldTextAreaProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldTextAreaProps, [\"class\"])\n  return (\n    <TextFieldPrimitive.TextArea\n      class={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n  {\n    variants: {\n      variant: {\n        label: \"data-[invalid]:text-destructive\",\n        description: \"font-normal text-muted-foreground\",\n        error: \"text-xs text-destructive\"\n      }\n    },\n    defaultVariants: {\n      variant: \"label\"\n    }\n  }\n)\n\ntype TextFieldLabelProps<T extends ValidComponent = \"label\"> =\n  TextFieldPrimitive.TextFieldLabelProps<T> & { class?: string | undefined }\n\nconst TextFieldLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, TextFieldLabelProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldLabelProps, [\"class\"])\n  return <TextFieldPrimitive.Label class={cn(labelVariants(), local.class)} {...others} />\n}\n\ntype TextFieldDescriptionProps<T extends ValidComponent = \"div\"> =\n  TextFieldPrimitive.TextFieldDescriptionProps<T> & {\n    class?: string | undefined\n  }\n\nconst TextFieldDescription = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TextFieldDescriptionProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldDescriptionProps, [\"class\"])\n  return (\n    <TextFieldPrimitive.Description\n      class={cn(labelVariants({ variant: \"description\" }), local.class)}\n      {...others}\n    />\n  )\n}\n\ntype TextFieldErrorMessageProps<T extends ValidComponent = \"div\"> =\n  TextFieldPrimitive.TextFieldErrorMessageProps<T> & {\n    class?: string | undefined\n  }\n\nconst TextFieldErrorMessage = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TextFieldErrorMessageProps<T>>\n) => {\n  const [local, others] = splitProps(props as TextFieldErrorMessageProps, [\"class\"])\n  return (\n    <TextFieldPrimitive.ErrorMessage\n      class={cn(labelVariants({ variant: \"error\" }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport {\n  TextField,\n  TextFieldInput,\n  TextFieldTextArea,\n  TextFieldLabel,\n  TextFieldDescription,\n  TextFieldErrorMessage\n}\n",
      "path": "src/registry/ui/text-field.tsx"
    }
  ]
}
