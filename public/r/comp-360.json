{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-360",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "@radix-ui/react-tooltip",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/comp-360.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  ChevronUpIcon,\n  CircleIcon,\n} from \"lucide-react\";\n\nexport default function Component() {\n  return (\n    <div className=\"inline-grid w-fit grid-cols-3 gap-1\">\n      <TooltipProvider delayDuration={0}>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              className=\"col-start-2\"\n              variant=\"outline\"\n              size=\"icon\"\n              aria-label=\"Pan camera up\"\n            >\n              <ChevronUpIcon size={16} aria-hidden=\"true\" />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent side=\"top\" className=\"px-2 py-1 text-xs\">\n            Pan top\n            <kbd className=\"bg-background text-muted-foreground/70 ms-2 -me-1 inline-flex h-5 max-h-full items-center rounded border px-1 font-[inherit] text-[0.625rem] font-medium\">\n              ⌘T\n            </kbd>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n      <TooltipProvider delayDuration={0}>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              className=\"col-start-1\"\n              variant=\"outline\"\n              size=\"icon\"\n              aria-label=\"Pan camera left\"\n            >\n              <ChevronLeftIcon size={16} aria-hidden=\"true\" />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent side=\"left\" className=\"px-2 py-1 text-xs\">\n            Pan left\n            <kbd className=\"bg-background text-muted-foreground/70 ms-2 -me-1 inline-flex h-5 max-h-full items-center rounded border px-1 font-[inherit] text-[0.625rem] font-medium\">\n              ⌘L\n            </kbd>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n      <div className=\"flex items-center justify-center\" aria-hidden=\"true\">\n        <CircleIcon className=\"opacity-60\" size={16} />\n      </div>\n      <TooltipProvider delayDuration={0}>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button variant=\"outline\" size=\"icon\" aria-label=\"Pan camera right\">\n              <ChevronRightIcon size={16} aria-hidden=\"true\" />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent side=\"right\" className=\"px-2 py-1 text-xs\">\n            Pan right\n            <kbd className=\"bg-background text-muted-foreground/70 ms-2 -me-1 inline-flex h-5 max-h-full items-center rounded border px-1 font-[inherit] text-[0.625rem] font-medium\">\n              ⌘R\n            </kbd>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n      <TooltipProvider delayDuration={0}>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              className=\"col-start-2\"\n              variant=\"outline\"\n              size=\"icon\"\n              aria-label=\"Pan camera down\"\n            >\n              <ChevronDownIcon size={16} aria-hidden=\"true\" />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent side=\"bottom\" className=\"px-2 py-1 text-xs\">\n            Pan bottom\n            <kbd className=\"bg-background text-muted-foreground/70 ms-2 -me-1 inline-flex h-5 max-h-full items-center rounded border px-1 font-[inherit] text-[0.625rem] font-medium\">\n              ⌘B\n            </kbd>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    </div>\n  );\n}\n",
      "path": "registry/default/components/comp-360.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "path": "registry/default/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/tooltip.tsx",
      "content": "\"use client\";\n\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  );\n}\n\nfunction Tooltip({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  );\n}\n\nfunction TooltipTrigger({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 4,\n  showArrow = false,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content> & {\n  showArrow?: boolean;\n}) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-w-70 rounded-md border px-3 py-1.5 text-sm\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showArrow && (\n          <TooltipPrimitive.Arrow className=\"fill-popover -my-px drop-shadow-[0_1px_0_hsl(var(--border))]\" />\n        )}\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n}\n\nexport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger };\n",
      "path": "registry/default/ui/tooltip.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "path": "registry/default/lib/utils.ts"
    }
  ],
  "meta": {
    "tags": [
      "tooltip",
      "button",
      "kbd",
      "radix"
    ],
    "style": 1
  }
}
