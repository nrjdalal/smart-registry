{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdownmenu",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-dropdown-menu",
    "@remixicon/react",
    "clsx",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/DropdownMenu/DropdownMenu.tsx",
      "content": "// Tremor Dropdown Menu [v1.0.0]\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitives from \"@radix-ui/react-dropdown-menu\"\nimport {\n  RiArrowRightSLine,\n  RiCheckboxBlankCircleLine,\n  RiCheckLine,\n  RiRadioButtonFill,\n} from \"@remixicon/react\"\n\nimport { cx } from \"@/utils/cx\"\n\nconst DropdownMenu = DropdownMenuPrimitives.Root\nDropdownMenu.displayName = \"DropdownMenu\"\n\nconst DropdownMenuTrigger = DropdownMenuPrimitives.Trigger\nDropdownMenuTrigger.displayName = \"DropdownMenuTrigger\"\n\nconst DropdownMenuGroup = DropdownMenuPrimitives.Group\nDropdownMenuGroup.displayName = \"DropdownMenuGroup\"\n\nconst DropdownMenuSubMenu = DropdownMenuPrimitives.Sub\nDropdownMenuSubMenu.displayName = \"DropdownMenuSubMenu\"\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitives.RadioGroup\nDropdownMenuRadioGroup.displayName = \"DropdownMenuRadioGroup\"\n\nconst DropdownMenuSubMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.SubTrigger>,\n  Omit<\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.SubTrigger>,\n    \"asChild\"\n  >\n>(({ className, children, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.SubTrigger\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-1 outline-hidden transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      \"data-disabled:pointer-events-none data-disabled:text-gray-400 data-disabled:hover:bg-none dark:data-disabled:text-gray-600\",\n      // focus\n      \"focus-visible:bg-gray-100 data-[state=open]:bg-gray-100 dark:focus-visible:bg-gray-900 dark:data-[state=open]:bg-gray-900\",\n      // hover\n      \"hover:bg-gray-100 dark:hover:bg-gray-900\",\n      //\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <RiArrowRightSLine className=\"ml-auto size-4 shrink-0\" aria-hidden=\"true\" />\n  </DropdownMenuPrimitives.SubTrigger>\n))\nDropdownMenuSubMenuTrigger.displayName = \"DropdownMenuSubMenuTrigger\"\n\nconst DropdownMenuSubMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.SubContent>\n>(({ className, collisionPadding = 8, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.Portal>\n    <DropdownMenuPrimitives.SubContent\n      ref={forwardedRef}\n      collisionPadding={collisionPadding}\n      className={cx(\n        // base\n        \"relative z-50 overflow-hidden rounded-md border p-1 shadow-xl shadow-black/[2.5%]\",\n        // widths\n        \"min-w-32\",\n        // heights\n        \"max-h-[var(--radix-popper-available-height)]\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // border color\n        \"border-gray-200 dark:border-gray-800\",\n        // transition\n        \"will-change-[transform,opacity]\",\n        \"data-[state=closed]:animate-hide\",\n        \"data-[side=bottom]:animate-slide-down-and-fade data-[side=left]:animate-slide-left-and-fade data-[side=right]:animate-slide-right-and-fade data-[side=top]:animate-slide-up-and-fade\",\n        className,\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitives.Portal>\n))\nDropdownMenuSubMenuContent.displayName = \"DropdownMenuSubMenuContent\"\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Content>\n>(\n  (\n    {\n      className,\n      sideOffset = 8,\n      collisionPadding = 8,\n      align = \"center\",\n      loop = true,\n      ...props\n    },\n    forwardedRef,\n  ) => (\n    <DropdownMenuPrimitives.Portal>\n      <DropdownMenuPrimitives.Content\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"relative z-50 overflow-hidden rounded-md border p-1 shadow-xl shadow-black/[2.5%]\",\n          // widths\n          \"min-w-48\",\n          // heights\n          \"max-h-[var(--radix-popper-available-height)]\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // text color\n          \"text-gray-900 dark:text-gray-50\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // transition\n          \"will-change-[transform,opacity]\",\n          \"data-[state=closed]:animate-hide\",\n          \"data-[side=bottom]:animate-slide-down-and-fade data-[side=left]:animate-slide-left-and-fade data-[side=right]:animate-slide-right-and-fade data-[side=top]:animate-slide-up-and-fade\",\n          className,\n        )}\n        sideOffset={sideOffset}\n        align={align}\n        collisionPadding={collisionPadding}\n        loop={loop}\n        {...props}\n      />\n    </DropdownMenuPrimitives.Portal>\n  ),\n)\nDropdownMenuContent.displayName = \"DropdownMenuContent\"\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.Item>,\n  Omit<\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Item>,\n    \"asChild\"\n  > & {\n    shortcut?: string\n    hint?: string\n  }\n>(({ className, shortcut, hint, children, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.Item\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"group/DropdownMenuItem relative flex cursor-pointer select-none items-center rounded-sm py-1.5 pl-2 pr-1 outline-hidden transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      \"data-disabled:pointer-events-none data-disabled:text-gray-400 data-disabled:hover:bg-none dark:data-disabled:text-gray-600\",\n      // focus\n      \"focus-visible:bg-gray-100 dark:focus-visible:bg-gray-900\",\n      // hover\n      \"hover:bg-gray-100 dark:hover:bg-gray-900\",\n      className,\n    )}\n    tremor-id=\"tremor-raw\"\n    {...props}\n  >\n    {children}\n    {hint && (\n      <span\n        className={cx(\"ml-auto pl-2 text-sm text-gray-400 dark:text-gray-600\")}\n      >\n        {hint}\n      </span>\n    )}\n    {shortcut && (\n      <span\n        className={cx(\"ml-auto pl-2 text-sm text-gray-400 dark:text-gray-600\")}\n      >\n        {shortcut}\n      </span>\n    )}\n  </DropdownMenuPrimitives.Item>\n))\nDropdownMenuItem.displayName = \"DropdownMenuItem\"\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.CheckboxItem>,\n  Omit<\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.CheckboxItem>,\n    \"asChild\"\n  > & {\n    shortcut?: string\n    hint?: string\n  }\n>(\n  (\n    { className, hint, shortcut, children, checked, ...props },\n    forwardedRef,\n  ) => (\n    <DropdownMenuPrimitives.CheckboxItem\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"relative flex cursor-pointer select-none items-center gap-x-2 rounded-sm py-1.5 pl-8 pr-1 outline-hidden transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // disabled\n        \"data-disabled:pointer-events-none data-disabled:text-gray-400 data-disabled:hover:bg-none dark:data-disabled:text-gray-600\",\n        // focus\n        \"focus-visible:bg-gray-100 dark:focus-visible:bg-gray-900\",\n        // hover\n        \"hover:bg-gray-100 dark:hover:bg-gray-900\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"absolute left-2 flex size-4 items-center justify-center\">\n        <DropdownMenuPrimitives.ItemIndicator>\n          <RiCheckLine\n            aria-hidden=\"true\"\n            className=\"size-full shrink-0 text-gray-800 dark:text-gray-200\"\n          />\n        </DropdownMenuPrimitives.ItemIndicator>\n      </span>\n      {children}\n      {hint && (\n        <span\n          className={cx(\n            \"ml-auto text-sm font-normal text-gray-400 dark:text-gray-600\",\n          )}\n        >\n          {hint}\n        </span>\n      )}\n      {shortcut && (\n        <span\n          className={cx(\n            \"ml-auto text-sm font-normal tracking-widest text-gray-400 dark:border-gray-800 dark:text-gray-600\",\n          )}\n        >\n          {shortcut}\n        </span>\n      )}\n    </DropdownMenuPrimitives.CheckboxItem>\n  ),\n)\nDropdownMenuCheckboxItem.displayName = \"DropdownMenuCheckboxItem\"\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.RadioItem>,\n  Omit<\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.RadioItem>,\n    \"asChild\"\n  > & {\n    shortcut?: string\n    hint?: string\n  }\n>(({ className, hint, shortcut, children, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.RadioItem\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"group/DropdownMenuRadioItem relative flex cursor-pointer select-none items-center gap-x-2 rounded-sm py-1.5 pl-8 pr-1 outline-hidden transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      \"data-disabled:pointer-events-none data-disabled:text-gray-400 data-disabled:hover:bg-none dark:data-disabled:text-gray-600\",\n      // focus\n      \"focus-visible:bg-gray-100 dark:focus-visible:bg-gray-900\",\n      // hover\n      \"hover:bg-gray-100 dark:hover:bg-gray-900\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex size-4 items-center justify-center\">\n      <RiRadioButtonFill\n        aria-hidden=\"true\"\n        className=\"size-full shrink-0 text-blue-500 group-data-[state=checked]/DropdownMenuRadioItem:flex group-data-[state=unchecked]/DropdownMenuRadioItem:hidden dark:text-blue-500\"\n      />\n      <RiCheckboxBlankCircleLine\n        aria-hidden=\"true\"\n        className=\"size-full shrink-0 text-gray-300 group-data-[state=unchecked]/DropdownMenuRadioItem:flex group-data-[state=checked]/DropdownMenuRadioItem:hidden dark:text-gray-700\"\n      />\n    </span>\n    {children}\n    {hint && (\n      <span\n        className={cx(\n          \"ml-auto text-sm font-normal text-gray-400 dark:text-gray-600\",\n        )}\n      >\n        {hint}\n      </span>\n    )}\n    {shortcut && (\n      <span\n        className={cx(\n          \"ml-auto text-sm font-normal tracking-widest text-gray-400 dark:border-gray-800 dark:text-gray-600\",\n        )}\n      >\n        {shortcut}\n      </span>\n    )}\n  </DropdownMenuPrimitives.RadioItem>\n))\nDropdownMenuRadioItem.displayName = \"DropdownMenuRadioItem\"\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Label>\n>(({ className, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.Label\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"px-2 py-2 text-xs font-medium tracking-wide\",\n      // text color\n      \"text-gray-500 dark:text-gray-500\",\n      className,\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = \"DropdownMenuLabel\"\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Separator>\n>(({ className, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.Separator\n    ref={forwardedRef}\n    className={cx(\n      \"-mx-1 my-1 h-px border-t border-gray-200 dark:border-gray-800\",\n      className,\n    )}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = \"DropdownMenuSeparator\"\n\nconst DropdownMenuIconWrapper = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <div\n      className={cx(\n        // text color\n        \"text-gray-600 dark:text-gray-400\",\n        // disabled\n        \"group-data-disabled/DropdownMenuItem:text-gray-400 dark:group-data-disabled/DropdownMenuItem:text-gray-700\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\nDropdownMenuIconWrapper.displayName = \"DropdownMenuIconWrapper\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuSubMenuTrigger,\n  DropdownMenuSubMenu,\n  DropdownMenuSubMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuIconWrapper,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n}\n",
      "path": "src/components/DropdownMenu/DropdownMenu.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    }
  ]
}
