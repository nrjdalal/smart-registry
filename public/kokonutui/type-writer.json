{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "type-writer",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/type-writer.tsx",
      "content": "\"use client\";\n\n/**\n * @author: @dorian_baffier\n * @description: Typewriter\n * @version: 1.0.0\n * @date: 2025-06-26\n * @license: MIT\n * @website: https://kokonutui.com\n * @github: https://github.com/kokonut-labs/kokonutui\n */\n\nimport { motion, useAnimate } from \"motion/react\";\nimport { useEffect } from \"react\";\n\ninterface TypewriterSequence {\n    text: string;\n    deleteAfter?: boolean;\n    pauseAfter?: number;\n}\n\ninterface TypewriterTitleProps {\n    sequences?: TypewriterSequence[];\n    typingSpeed?: number;\n    startDelay?: number;\n    autoLoop?: boolean;\n    loopDelay?: number;\n}\n\nexport default function TypewriterTitle({\n    sequences = [\n        { text: \"Typewriter\", deleteAfter: true },\n        { text: \"Multiple Words\", deleteAfter: true },\n        { text: \"Auto Loop\", deleteAfter: false },\n    ],\n    typingSpeed = 50,\n    startDelay = 500,\n    autoLoop = true,\n    loopDelay = 2000,\n}: TypewriterTitleProps) {\n    const [scope, animate] = useAnimate();\n\n    useEffect(() => {\n        let isActive = true;\n\n        const typeText = async () => {\n            const titleElement =\n                scope.current.querySelector(\"[data-typewriter]\");\n            if (!titleElement) return;\n\n            while (isActive) {\n                // Reset the text content\n                await animate(scope.current, { opacity: 1 });\n                titleElement.textContent = \"\";\n\n                // Wait for initial delay on first run\n                await new Promise((resolve) => setTimeout(resolve, startDelay));\n\n                // Process each sequence\n                for (const sequence of sequences) {\n                    if (!isActive) break;\n\n                    // Type out the sequence text\n                    for (let i = 0; i < sequence.text.length; i++) {\n                        if (!isActive) break;\n                        titleElement.textContent = sequence.text.slice(\n                            0,\n                            i + 1\n                        );\n                        await new Promise((resolve) =>\n                            setTimeout(resolve, typingSpeed)\n                        );\n                    }\n\n                    // Pause after typing if specified\n                    if (sequence.pauseAfter) {\n                        await new Promise((resolve) =>\n                            setTimeout(resolve, sequence.pauseAfter)\n                        );\n                    }\n\n                    // Delete the text if specified\n                    if (sequence.deleteAfter) {\n                        // Small pause before deleting\n                        await new Promise((resolve) =>\n                            setTimeout(resolve, 500)\n                        );\n\n                        for (let i = sequence.text.length; i > 0; i--) {\n                            if (!isActive) break;\n                            titleElement.textContent = sequence.text.slice(\n                                0,\n                                i\n                            );\n                            await new Promise((resolve) =>\n                                setTimeout(resolve, typingSpeed / 2)\n                            );\n                        }\n                    }\n                }\n\n                if (!autoLoop || !isActive) break;\n\n                // Wait before starting next loop\n                await new Promise((resolve) => setTimeout(resolve, loopDelay));\n            }\n        };\n\n        typeText();\n\n        // Cleanup function to stop the animation when component unmounts\n        return () => {\n            isActive = false;\n        };\n    }, [\n        sequences,\n        typingSpeed,\n        startDelay,\n        autoLoop,\n        loopDelay,\n        animate,\n        scope,\n    ]);\n\n    return (\n        <div className=\"relative w-full max-w-4xl mx-auto py-24\">\n            <div\n                className=\"relative text-center z-10 flex flex-col items-center justify-center\"\n                ref={scope}\n            >\n                <motion.div\n                    className=\"text-4xl md:text-6xl font-mono text-black dark:text-white tracking-tight flex items-center gap-2\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                >\n                    <span\n                        data-typewriter\n                        className=\"inline-block border-r-2 border-black dark:border-white animate-cursor pr-1\"\n                    >\n                        {sequences[0].text}\n                    </span>\n                </motion.div>\n            </div>\n        </div>\n    );\n}\n",
      "path": "components/kokonutui/type-writer.tsx"
    }
  ]
}
