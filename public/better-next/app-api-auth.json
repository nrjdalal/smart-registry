{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "app-api-auth",
  "type": "registry:file",
  "dependencies": [
    "better-auth",
    "drizzle-orm",
    "next",
    "postgres"
  ],
  "devDependencies": [
    "drizzle-kit"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "app/api/auth/[...all]/route.ts",
      "content": "import { auth } from \"@/lib/auth\"\nimport { toNextJsHandler } from \"better-auth/next-js\"\n\nexport const { GET, POST } = toNextJsHandler(auth.handler)\n",
      "path": "src/app/api/auth/[...all]/route.ts"
    },
    {
      "type": "registry:component",
      "target": "components/auth.tsx",
      "content": "\"use client\"\n\nimport { authClient } from \"@/lib/auth/client\"\nimport { useRouter } from \"next/navigation\"\n\nexport const SignIn = () => {\n  const router = useRouter()\n\n  return (\n    <button\n      onClick={async () => {\n        await authClient.signIn.email({\n          email: \"johndoe@acme.com\",\n          password: \"JohnDoeAcmeCom\",\n        })\n        router.refresh()\n      }}\n    >\n      Sign in\n    </button>\n  )\n}\n\nexport const SignUp = () => {\n  const router = useRouter()\n\n  return (\n    <button\n      onClick={async () => {\n        await authClient.signUp.email({\n          name: \"John Doe\",\n          email: \"johndoe@acme.com\",\n          password: \"JohnDoeAcmeCom\",\n        })\n        router.refresh()\n      }}\n    >\n      Sign up\n    </button>\n  )\n}\n\nexport const SignOut = () => {\n  const router = useRouter()\n\n  return (\n    <button\n      onClick={async () => {\n        await authClient.signOut()\n        router.refresh()\n      }}\n    >\n      Sign out\n    </button>\n  )\n}\n",
      "path": "src/components/auth.tsx"
    },
    {
      "type": "registry:file",
      "target": "~/.env.example-auth",
      "content": "BETTER_AUTH_URL=http://localhost:3000\nBETTER_AUTH_SECRET=\nPOSTGRES_URL=\n",
      "path": ".env.example-auth"
    },
    {
      "type": "registry:file",
      "target": "~/drizzle.config.ts",
      "content": "import { defineConfig } from \"drizzle-kit\"\n\nexport default defineConfig({\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.POSTGRES_URL!,\n  },\n  schema: \"./src/db/schema\",\n  out: \"./src/db/migrations\",\n})\n",
      "path": "drizzle.config.ts"
    },
    {
      "type": "registry:file",
      "target": "db/index.ts",
      "content": "import { authSchema } from \"@/db/schema\"\nimport { drizzle, type PostgresJsDatabase } from \"drizzle-orm/postgres-js\"\nimport postgres from \"postgres\"\n\ndeclare global {\n  // eslint-disable-next-line\n  var db: PostgresJsDatabase\n}\n\nlet db: PostgresJsDatabase\n\nif (process.env.NODE_ENV === \"production\") {\n  db = drizzle({\n    client: postgres(process.env.POSTGRES_URL!, {\n      connect_timeout: 10000,\n      idle_timeout: 30000,\n      ssl: {\n        rejectUnauthorized: true,\n      },\n    }),\n  })\n} else {\n  if (!global.db) {\n    global.db = drizzle({\n      client: postgres(process.env.POSTGRES_URL!, {\n        connect_timeout: 10000,\n        idle_timeout: 30000,\n        max: 20,\n      }),\n    })\n  }\n  db = global.db\n}\n\nexport { authSchema, db }\n",
      "path": "src/db/index.ts"
    },
    {
      "type": "registry:file",
      "target": "db/schema/auth.ts",
      "content": "import { boolean, pgTable, text, timestamp } from \"drizzle-orm/pg-core\"\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n})\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n})\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n})\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n})\n",
      "path": "src/db/schema/auth.ts"
    },
    {
      "type": "registry:file",
      "target": "db/schema/index.ts",
      "content": "import { account, session, user, verification } from \"@/db/schema/auth\"\n\nexport const authSchema = { account, session, user, verification }\n",
      "path": "src/db/schema/index.ts"
    },
    {
      "type": "registry:file",
      "target": "middleware.ts",
      "content": "import { getSessionCookie } from \"better-auth/cookies\"\nimport { NextRequest, NextResponse } from \"next/server\"\n\nexport async function middleware(request: NextRequest) {\n  const sessionCookie = getSessionCookie(request)\n  if (!sessionCookie) return NextResponse.redirect(new URL(\"/\", request.url))\n  return NextResponse.next()\n}\n\nexport const config = {\n  matcher: [\"/x\"],\n}\n",
      "path": "src/middleware.ts"
    },
    {
      "type": "registry:page",
      "target": "app/(auth)/access/page.tsx",
      "content": "import { SignIn, SignUp } from \"@/components/auth\"\nimport { auth } from \"@/lib/auth\"\nimport { headers } from \"next/headers\"\nimport { redirect } from \"next/navigation\"\n\nexport default async function ServerComponent() {\n  const session = await auth.api.getSession({\n    headers: await headers(),\n  })\n\n  if (session) redirect(\"/x\")\n\n  return (\n    <div>\n      <SignIn />\n      <SignUp />\n    </div>\n  )\n}\n",
      "path": "src/app/(auth)/access/page.tsx"
    },
    {
      "type": "registry:page",
      "target": "app/(auth)/x/page.tsx",
      "content": "import { SignOut } from \"@/components/auth\"\nimport { auth } from \"@/lib/auth\"\nimport { headers } from \"next/headers\"\nimport { redirect } from \"next/navigation\"\n\nexport default async function ServerComponent() {\n  const session = await auth.api.getSession({\n    headers: await headers(),\n  })\n\n  if (!session) redirect(\"/access\")\n\n  return (\n    <div>\n      <h1>Welcome {session.user.name}</h1>\n      <SignOut />\n    </div>\n  )\n}\n",
      "path": "src/app/(auth)/x/page.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/auth/client.ts",
      "content": "import { createAuthClient } from \"better-auth/react\"\n\nexport const authClient = createAuthClient({\n  baseURL: process.env.NEXT_PUBLIC_APP_URL!,\n})\n",
      "path": "src/lib/auth/client.ts"
    },
    {
      "type": "registry:lib",
      "target": "lib/auth/index.ts",
      "content": "import { authSchema, db } from \"@/db\"\nimport { betterAuth } from \"better-auth\"\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\"\nimport { nextCookies } from \"better-auth/next-js\"\n\nexport const auth = betterAuth({\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n    schema: authSchema,\n  }),\n  emailAndPassword: {\n    enabled: true,\n  },\n  plugins: [nextCookies()],\n})\n",
      "path": "src/lib/auth/index.ts"
    }
  ],
  "docs": "  --- What's next? ---\n\n  1. Rename `.env.example-auth` to `.env` and update the necessary environment variables.\n  2. Execute `npx --env-file=.env drizzle-kit push` to create PostgreSQL tables.\n  3. Start the development server with `npm run dev`.\n  4. Access http://localhost:3000/auth/access/page to test the sign-in/sign-up functionality.\n  5. Navigate to http://localhost:3000/auth/x/page to verify the protected route."
}
