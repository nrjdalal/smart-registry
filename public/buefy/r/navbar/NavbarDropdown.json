{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "navbar/NavbarDropdown",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:file",
      "target": "directives/clickOutside.js",
      "content": "const isTouch =\n  typeof window !== 'undefined' && ('ontouchstart' in window || navigator.msMaxTouchPoints > 0)\nconst events = isTouch ? ['touchstart', 'click'] : ['click']\n\nconst instances = []\n\nfunction processArgs(bindingValue) {\n    const isFunction = typeof bindingValue === 'function'\n    if (!isFunction && typeof bindingValue !== 'object') {\n        throw new Error(`v-click-outside: Binding value should be a function or an object, ${typeof bindingValue} given`)\n    }\n\n    return {\n        handler: isFunction ? bindingValue : bindingValue.handler,\n        middleware: bindingValue.middleware || ((isClickOutside) => isClickOutside),\n        events: bindingValue.events || events\n    }\n}\n\nfunction onEvent({ el, event, handler, middleware }) {\n    const isClickOutside = event.target !== el && !el.contains(event.target)\n\n    if (!isClickOutside || !middleware(event, el)) {\n        return\n    }\n\n    handler(event, el)\n}\n\nfunction toggleEventListeners({ eventHandlers } = {}, action = 'add') {\n    eventHandlers.forEach(({ event, handler }) => {\n        document[`${action}EventListener`](event, handler)\n    })\n}\n\nfunction bind(el, { value }) {\n    const { handler, middleware, events } = processArgs(value)\n\n    const instance = {\n        el,\n        eventHandlers: events.map((eventName) => ({\n            event: eventName,\n            handler: (event) => onEvent({ event, el, handler, middleware })\n        }))\n    }\n\n    toggleEventListeners(instance, 'add')\n\n    instances.push(instance)\n}\n\nfunction update(el, { value }) {\n    const { handler, middleware, events } = processArgs(value)\n    // `filter` instead of `find` for compat with IE\n    const instance = instances.filter((instance) => instance.el === el)[0]\n\n    toggleEventListeners(instance, 'remove')\n\n    instance.eventHandlers = events.map((eventName) => ({\n        event: eventName,\n        handler: (event) => onEvent({ event, el, handler, middleware })\n    }))\n\n    toggleEventListeners(instance, 'add')\n}\n\nfunction unbind(el) {\n    // `filter` instead of `find` for compat with IE\n    const instance = instances.filter((instance) => instance.el === el)[0]\n\n    toggleEventListeners(instance, 'remove')\n}\n\nconst directive = {\n    bind,\n    update,\n    unbind,\n    instances\n}\n\nexport default directive\n",
      "path": "src/directives/clickOutside.js"
    },
    {
      "type": "registry:component",
      "target": "components/navbar/NavbarDropdown.vue",
      "content": "<template>\n    <div\n        class=\"navbar-item has-dropdown\"\n        :class=\"{\n            'is-hoverable': isHoverable,\n            'is-active': newActive\n        }\"\n        @mouseenter=\"checkHoverable\"\n        v-click-outside=\"closeMenu\"\n    >\n        <component\n            :is=\"tag\"\n            class=\"navbar-link\"\n            :class=\"{\n                'is-arrowless': arrowless,\n                'is-active': newActive && collapsible\n            }\"\n            v-bind=\"$attrs\"\n            v-on=\"$listeners\"\n            aria-haspopup=\"true\"\n            @click.prevent=\"toggleMenu\"\n            @keyup.enter=\"toggleMenu\"\n            tabindex=\"0\"\n        >\n            <template v-if=\"label\">{{ label }}</template>\n            <slot v-else name=\"label\" />\n        </component>\n        <div\n            class=\"navbar-dropdown\"\n            :class=\"{\n                'is-right': right,\n                'is-boxed': boxed,\n                'is-hidden-touch': collapsible && !newActive\n            }\"\n        >\n            <slot />\n        </div>\n    </div>\n</template>\n\n<script>\nimport clickOutside from '@/directives/clickOutside'\n\nexport default {\n    name: 'BNavbarDropdown',\n    directives: {\n        clickOutside\n    },\n    inheritAttrs: false,\n    props: {\n        label: String,\n        hoverable: Boolean,\n        active: Boolean,\n        right: Boolean,\n        arrowless: Boolean,\n        boxed: Boolean,\n        closeOnClick: {\n            type: Boolean,\n            default: true\n        },\n        collapsible: Boolean,\n        tag: {\n            type: String,\n            default: 'a'\n        }\n    },\n    data() {\n        return {\n            newActive: this.active,\n            isHoverable: this.hoverable,\n            _isNavbarDropdown: true // Used internally by NavbarItem\n        }\n    },\n    watch: {\n        active(value) {\n            this.newActive = value\n        },\n\n        newActive(value) {\n            this.$emit('active-change', value)\n        }\n    },\n    methods: {\n        toggleMenu() {\n            this.newActive = !this.newActive\n        },\n        showMenu() {\n            this.newActive = true\n        },\n        /**\n        * See naming convetion of navbaritem\n        */\n        closeMenu() {\n            this.newActive = !this.closeOnClick\n            if (this.hoverable && this.closeOnClick) {\n                this.isHoverable = false\n            }\n        },\n        checkHoverable() {\n            if (this.hoverable) {\n                this.isHoverable = true\n            }\n        }\n    }\n}\n</script>\n",
      "path": "src/components/navbar/NavbarDropdown.vue"
    }
  ]
}
