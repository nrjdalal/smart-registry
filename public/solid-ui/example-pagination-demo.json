{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-pagination-demo",
  "type": "registry:file",
  "dependencies": [
    "@kobalte/core",
    "class-variance-authority",
    "clsx",
    "solid-js",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "example/pagination-demo.tsx",
      "content": "import {\n  Pagination,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationItems,\n  PaginationNext,\n  PaginationPrevious\n} from \"@/components/ui/pagination\"\n\nexport default function PaginationDemo() {\n  return (\n    <Pagination\n      count={10}\n      fixedItems\n      itemComponent={(props) => <PaginationItem page={props.page}>{props.page}</PaginationItem>}\n      ellipsisComponent={() => <PaginationEllipsis />}\n    >\n      <PaginationPrevious />\n      <PaginationItems />\n      <PaginationNext />\n    </Pagination>\n  )\n}\n",
      "path": "src/registry/example/pagination-demo.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import type { ClassValue } from \"clsx\"\nimport { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return val > max ? max : val < min ? min : val\n}\n\nexport function toggleValue<T>(array: T[], value: T): T[] {\n  return array.includes(value) ? array.filter((item) => item !== value) : [...array, value]\n}\n",
      "path": "src/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as ButtonPrimitive from \"@kobalte/core/button\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\"\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 px-3 text-xs\",\n        lg: \"h-11 px-8\",\n        icon: \"size-10\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n)\n\ntype ButtonProps<T extends ValidComponent = \"button\"> = ButtonPrimitive.ButtonRootProps<T> &\n  VariantProps<typeof buttonVariants> & { class?: string | undefined; children?: JSX.Element }\n\nconst Button = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ButtonProps<T>>\n) => {\n  const [local, others] = splitProps(props as ButtonProps, [\"variant\", \"size\", \"class\"])\n  return (\n    <ButtonPrimitive.Root\n      class={cn(buttonVariants({ variant: local.variant, size: local.size }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\nexport type { ButtonProps }\n",
      "path": "src/registry/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/pagination.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { Show, splitProps } from \"solid-js\"\n\nimport * as PaginationPrimitive from \"@kobalte/core/pagination\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst PaginationItems = PaginationPrimitive.Items\n\ntype PaginationRootProps<T extends ValidComponent = \"nav\"> =\n  PaginationPrimitive.PaginationRootProps<T> & { class?: string | undefined }\n\nconst Pagination = <T extends ValidComponent = \"nav\">(\n  props: PolymorphicProps<T, PaginationRootProps<T>>\n) => {\n  const [local, others] = splitProps(props as PaginationRootProps, [\"class\"])\n  return (\n    <PaginationPrimitive.Root\n      class={cn(\"[&>*]:flex [&>*]:flex-row [&>*]:items-center [&>*]:gap-1\", local.class)}\n      {...others}\n    />\n  )\n}\n\ntype PaginationItemProps<T extends ValidComponent = \"button\"> =\n  PaginationPrimitive.PaginationItemProps<T> & { class?: string | undefined }\n\nconst PaginationItem = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, PaginationItemProps<T>>\n) => {\n  const [local, others] = splitProps(props as PaginationItemProps, [\"class\"])\n  return (\n    <PaginationPrimitive.Item\n      class={cn(\n        buttonVariants({\n          variant: \"ghost\"\n        }),\n        \"size-10 data-[current]:border\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype PaginationEllipsisProps<T extends ValidComponent = \"div\"> =\n  PaginationPrimitive.PaginationEllipsisProps<T> & {\n    class?: string | undefined\n  }\n\nconst PaginationEllipsis = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, PaginationEllipsisProps<T>>\n) => {\n  const [local, others] = splitProps(props as PaginationEllipsisProps, [\"class\"])\n  return (\n    <PaginationPrimitive.Ellipsis\n      class={cn(\"flex size-10 items-center justify-center\", local.class)}\n      {...others}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"size-4\"\n      >\n        <circle cx=\"12\" cy=\"12\" r=\"1\" />\n        <circle cx=\"19\" cy=\"12\" r=\"1\" />\n        <circle cx=\"5\" cy=\"12\" r=\"1\" />\n      </svg>\n      <span class=\"sr-only\">More pages</span>\n    </PaginationPrimitive.Ellipsis>\n  )\n}\n\ntype PaginationPreviousProps<T extends ValidComponent = \"button\"> =\n  PaginationPrimitive.PaginationPreviousProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst PaginationPrevious = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, PaginationPreviousProps<T>>\n) => {\n  const [local, others] = splitProps(props as PaginationPreviousProps, [\"class\", \"children\"])\n  return (\n    <PaginationPrimitive.Previous\n      class={cn(\n        buttonVariants({\n          variant: \"ghost\"\n        }),\n        \"gap-1 pl-2.5\",\n        local.class\n      )}\n      {...others}\n    >\n      <Show\n        when={local.children}\n        fallback={\n          <>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              class=\"size-4\"\n            >\n              <path d=\"M15 6l-6 6l6 6\" />\n            </svg>\n            <span>Previous</span>\n          </>\n        }\n      >\n        {(children) => children()}\n      </Show>\n    </PaginationPrimitive.Previous>\n  )\n}\n\ntype PaginationNextProps<T extends ValidComponent = \"button\"> =\n  PaginationPrimitive.PaginationNextProps<T> & {\n    class?: string | undefined\n    children?: JSX.Element\n  }\n\nconst PaginationNext = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, PaginationNextProps<T>>\n) => {\n  const [local, others] = splitProps(props as PaginationNextProps, [\"class\", \"children\"])\n  return (\n    <PaginationPrimitive.Next\n      class={cn(\n        buttonVariants({\n          variant: \"ghost\"\n        }),\n        \"gap-1 pl-2.5\",\n        local.class\n      )}\n      {...others}\n    >\n      <Show\n        when={local.children}\n        fallback={\n          <>\n            <span>Next</span>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              class=\"size-4\"\n            >\n              <path d=\"M9 6l6 6l-6 6\" />\n            </svg>\n          </>\n        }\n      >\n        {(children) => children()}\n      </Show>\n    </PaginationPrimitive.Next>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationItems,\n  PaginationItem,\n  PaginationEllipsis,\n  PaginationPrevious,\n  PaginationNext\n}\n",
      "path": "src/registry/ui/pagination.tsx"
    }
  ]
}
