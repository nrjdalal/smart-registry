{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-576",
  "type": "registry:component",
  "dependencies": [
    "@headless-tree/core",
    "@headless-tree/react",
    "lucide-react",
    "radix-ui"
  ],
  "registryDependencies": [
    "https://originui.com/r/tree.json"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/comp-576.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { hotkeysCoreFeature, syncDataLoaderFeature } from \"@headless-tree/core\"\nimport { useTree } from \"@headless-tree/react\"\n\nimport { Tree, TreeItem, TreeItemLabel } from \"@/components/ui/tree\"\n\ninterface Item {\n  name: string\n  href?: string\n  children?: string[]\n  current?: boolean\n}\n\nconst items: Record<string, Item> = {\n  main: { name: \"Documentation\", children: [\"guides\", \"api\", \"resources\"] },\n  guides: { name: \"User Guides\", children: [\"getting-started\", \"advanced\"] },\n  \"getting-started\": {\n    name: \"Getting Started\",\n    children: [\"installation\", \"setup\"],\n  },\n  installation: { name: \"Installation\", href: \"#\", current: true },\n  setup: { name: \"Configuration\", href: \"#\" },\n  advanced: { name: \"Advanced Usage\", href: \"#\" },\n  api: { name: \"API Reference\", children: [\"endpoints\", \"models\"] },\n  endpoints: { name: \"Endpoints\", href: \"#\" },\n  models: { name: \"Data Models\", href: \"#\" },\n  resources: { name: \"Resources\", children: [\"examples\", \"faq\"] },\n  examples: { name: \"Code Examples\", href: \"#\" },\n  faq: { name: \"FAQ\", href: \"#\" },\n}\n\nconst indent = 20\n\n// Find the path from root to the current item\nfunction findPathToCurrent(\n  items: Record<string, Item>,\n  rootId: string\n): string[] {\n  const path: string[] = []\n\n  function findPath(itemId: string): boolean {\n    const item = items[itemId]\n    if (!item) return false\n\n    // If this is the current item, we found the path\n    if (item.current) {\n      path.unshift(itemId)\n      return true\n    }\n\n    // If this item has children, search them\n    if (item.children?.length) {\n      for (const childId of item.children) {\n        if (findPath(childId)) {\n          // If we found the path in this branch, add this item to the path\n          path.unshift(itemId)\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  findPath(rootId)\n  return path\n}\n\n// Get all parent IDs that need to be expanded\nconst pathToCurrent = findPathToCurrent(items, \"main\")\n// Remove the current item from the path if it's a leaf node\nconst expandedItems = pathToCurrent.filter((id) => items[id].children?.length)\n\nexport default function Component() {\n  const tree = useTree<Item>({\n    initialState: {\n      expandedItems,\n    },\n    indent,\n    rootItemId: \"main\",\n    getItemName: (item) => item.getItemData().name,\n    isItemFolder: (item) => (item.getItemData()?.children?.length ?? 0) > 0,\n    dataLoader: {\n      getItem: (itemId) => items[itemId],\n      getChildren: (itemId) => items[itemId].children ?? [],\n    },\n    features: [syncDataLoaderFeature, hotkeysCoreFeature],\n  })\n\n  return (\n    <div className=\"flex h-full flex-col gap-2 *:first:grow\">\n      <Tree indent={indent} tree={tree}>\n        {tree.getItems().map((item) => {\n          return (\n            <TreeItem\n              key={item.getId()}\n              item={item}\n              asChild={!!item.getItemData()?.href}\n            >\n              {item.getItemData()?.href ? (\n                <a\n                  href={item.getItemData().href}\n                  data-current={item.getItemData().current}\n                >\n                  <TreeItemLabel className=\"in-data-[current=true]:bg-accent in-data-[current=true]:text-accent-foreground\" />\n                </a>\n              ) : (\n                <TreeItemLabel />\n              )}\n            </TreeItem>\n          )\n        })}\n      </Tree>\n\n      <p\n        aria-live=\"polite\"\n        role=\"region\"\n        className=\"text-muted-foreground mt-2 text-xs\"\n      >\n        Menu navigation tree âˆ™{\" \"}\n        <a\n          href=\"https://headless-tree.lukasbach.com\"\n          className=\"hover:text-foreground underline\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          API\n        </a>\n      </p>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/comp-576.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/tree.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ItemInstance } from \"@headless-tree/core\"\nimport { ChevronDownIcon } from \"lucide-react\"\nimport { Slot } from \"radix-ui\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface TreeContextValue<T = any> {\n  indent: number\n  currentItem?: ItemInstance<T>\n  tree?: any\n}\n\nconst TreeContext = React.createContext<TreeContextValue>({\n  indent: 20,\n  currentItem: undefined,\n  tree: undefined,\n})\n\nfunction useTreeContext<T = any>() {\n  return React.useContext(TreeContext) as TreeContextValue<T>\n}\n\ninterface TreeProps extends React.HTMLAttributes<HTMLDivElement> {\n  indent?: number\n  tree?: any\n}\n\nfunction Tree({ indent = 20, tree, className, ...props }: TreeProps) {\n  const containerProps =\n    tree && typeof tree.getContainerProps === \"function\"\n      ? tree.getContainerProps()\n      : {}\n  const mergedProps = { ...props, ...containerProps }\n\n  // Extract style from mergedProps to merge with our custom styles\n  const { style: propStyle, ...otherProps } = mergedProps\n\n  // Merge styles\n  const mergedStyle = {\n    ...propStyle,\n    \"--tree-indent\": `${indent}px`,\n  } as React.CSSProperties\n\n  return (\n    <TreeContext.Provider value={{ indent, tree }}>\n      <div\n        data-slot=\"tree\"\n        style={mergedStyle}\n        className={cn(\"flex flex-col\", className)}\n        {...otherProps}\n      />\n    </TreeContext.Provider>\n  )\n}\n\ninterface TreeItemProps<T = any>\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  item: ItemInstance<T>\n  indent?: number\n  asChild?: boolean\n}\n\nfunction TreeItem<T = any>({\n  item,\n  className,\n  asChild,\n  children,\n  ...props\n}: Omit<TreeItemProps<T>, \"indent\">) {\n  const { indent } = useTreeContext<T>()\n\n  const itemProps = typeof item.getProps === \"function\" ? item.getProps() : {}\n  const mergedProps = { ...props, ...itemProps }\n\n  // Extract style from mergedProps to merge with our custom styles\n  const { style: propStyle, ...otherProps } = mergedProps\n\n  // Merge styles\n  const mergedStyle = {\n    ...propStyle,\n    \"--tree-padding\": `${item.getItemMeta().level * indent}px`,\n  } as React.CSSProperties\n\n  const Comp = asChild ? Slot.Root : \"button\"\n\n  return (\n    <TreeContext.Provider value={{ indent, currentItem: item }}>\n      <Comp\n        data-slot=\"tree-item\"\n        style={mergedStyle}\n        className={cn(\n          \"z-10 ps-(--tree-padding) outline-hidden select-none not-last:pb-0.5 focus:z-20 data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n          className\n        )}\n        data-focus={\n          typeof item.isFocused === \"function\"\n            ? item.isFocused() || false\n            : undefined\n        }\n        data-folder={\n          typeof item.isFolder === \"function\"\n            ? item.isFolder() || false\n            : undefined\n        }\n        data-selected={\n          typeof item.isSelected === \"function\"\n            ? item.isSelected() || false\n            : undefined\n        }\n        data-drag-target={\n          typeof item.isDragTarget === \"function\"\n            ? item.isDragTarget() || false\n            : undefined\n        }\n        data-search-match={\n          typeof item.isMatchingSearch === \"function\"\n            ? item.isMatchingSearch() || false\n            : undefined\n        }\n        aria-expanded={item.isExpanded()}\n        {...otherProps}\n      >\n        {children}\n      </Comp>\n    </TreeContext.Provider>\n  )\n}\n\ninterface TreeItemLabelProps<T = any>\n  extends React.HTMLAttributes<HTMLSpanElement> {\n  item?: ItemInstance<T>\n}\n\nfunction TreeItemLabel<T = any>({\n  item: propItem,\n  children,\n  className,\n  ...props\n}: TreeItemLabelProps<T>) {\n  const { currentItem } = useTreeContext<T>()\n  const item = propItem || currentItem\n\n  if (!item) {\n    console.warn(\"TreeItemLabel: No item provided via props or context\")\n    return null\n  }\n\n  return (\n    <span\n      data-slot=\"tree-item-label\"\n      className={cn(\n        \"in-focus-visible:ring-ring/50 bg-background hover:bg-accent in-data-[selected=true]:bg-accent in-data-[selected=true]:text-accent-foreground in-data-[drag-target=true]:bg-accent flex items-center gap-1 rounded-sm px-2 py-1.5 text-sm transition-colors not-in-data-[folder=true]:ps-7 in-focus-visible:ring-[3px] in-data-[search-match=true]:bg-blue-50! [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className\n      )}\n      {...props}\n    >\n      {item.isFolder() && (\n        <ChevronDownIcon className=\"text-muted-foreground size-4 in-aria-[expanded=false]:-rotate-90\" />\n      )}\n      {children ||\n        (typeof item.getItemName === \"function\" ? item.getItemName() : null)}\n    </span>\n  )\n}\n\nfunction TreeDragLine({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  const { tree } = useTreeContext()\n\n  if (!tree || typeof tree.getDragLineStyle !== \"function\") {\n    console.warn(\n      \"TreeDragLine: No tree provided via context or tree does not have getDragLineStyle method\"\n    )\n    return null\n  }\n\n  const dragLine = tree.getDragLineStyle()\n  return (\n    <div\n      style={dragLine}\n      className={cn(\n        \"bg-primary before:bg-background before:border-primary absolute z-30 -mt-px h-0.5 w-[unset] before:absolute before:-top-[3px] before:left-0 before:size-2 before:rounded-full before:border-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Tree, TreeItem, TreeItemLabel, TreeDragLine }\n",
      "path": "registry/default/ui/tree.tsx"
    }
  ],
  "meta": {
    "tags": [
      "tree",
      "menu"
    ]
  }
}
