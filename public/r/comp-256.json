{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "components/smart-registry/comp-256",
  "type": "registry:component",
  "dependencies": [
    "react",
    "@radix-ui/react-label",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-slider"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/smart-registry/comp-256.tsx",
      "content": "\"use client\"\n\nimport { Label } from \"@/registry/default/ui/label\"\nimport { Slider } from \"@/registry/default/ui/slider\"\nimport { useState } from \"react\"\n\nexport default function Component() {\n  const [value, setValue] = useState([3])\n\n  const labels = [\"Awful\", \"Poor\", \"Okay\", \"Good\", \"Amazing\"]\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center justify-between gap-2\">\n        <Label className=\"leading-6\">Rate your experience</Label>\n        <span className=\"text-sm font-medium\">{labels[value[0] - 1]}</span>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <span className=\"text-2xl\">üò°</span>\n        <Slider\n          value={value}\n          onValueChange={setValue}\n          min={1}\n          max={5}\n          aria-label=\"Rate your experience\"\n        />\n        <span className=\"text-2xl\">üòç</span>\n      </div>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/comp-256.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/smart-registry/label.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport * as React from \"react\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"text-foreground text-sm leading-4 font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
      "path": "registry/default/ui/label.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/smart-registry/slider.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/default/ui/tooltip\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\nimport * as React from \"react\"\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  showTooltip = false,\n  tooltipContent,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root> & {\n  showTooltip?: boolean\n  tooltipContent?: (value: number) => React.ReactNode\n}) {\n  const [internalValues, setInternalValues] = React.useState<number[]>(\n    Array.isArray(value)\n      ? value\n      : Array.isArray(defaultValue)\n        ? defaultValue\n        : [min, max],\n  )\n\n  React.useEffect(() => {\n    if (value !== undefined) {\n      setInternalValues(Array.isArray(value) ? value : [value])\n    }\n  }, [value])\n\n  const handleValueChange = (newValue: number[]) => {\n    setInternalValues(newValue)\n    props.onValueChange?.(newValue)\n  }\n\n  const [showTooltipState, setShowTooltipState] = React.useState(false)\n\n  const handlePointerDown = () => {\n    if (showTooltip) {\n      setShowTooltipState(true)\n    }\n  }\n\n  const handlePointerUp = React.useCallback(() => {\n    if (showTooltip) {\n      setShowTooltipState(false)\n    }\n  }, [showTooltip])\n\n  React.useEffect(() => {\n    if (showTooltip) {\n      document.addEventListener(\"pointerup\", handlePointerUp)\n      return () => {\n        document.removeEventListener(\"pointerup\", handlePointerUp)\n      }\n    }\n  }, [showTooltip, handlePointerUp])\n\n  const renderThumb = (value: number) => {\n    const thumb = (\n      <SliderPrimitive.Thumb\n        data-slot=\"slider-thumb\"\n        className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] outline-none hover:ring-4 focus-visible:ring-4 disabled:pointer-events-none disabled:opacity-50\"\n        onPointerDown={handlePointerDown}\n      />\n    )\n\n    if (!showTooltip) return thumb\n\n    return (\n      <TooltipProvider>\n        <Tooltip open={showTooltipState}>\n          <TooltipTrigger asChild>{thumb}</TooltipTrigger>\n          <TooltipContent\n            className=\"px-2 py-1 text-xs\"\n            sideOffset={8}\n            side={props.orientation === \"vertical\" ? \"right\" : \"top\"}\n          >\n            <p>{tooltipContent ? tooltipContent(value) : value}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    )\n  }\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className,\n      )}\n      onValueChange={handleValueChange}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\",\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\",\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: internalValues.length }, (_, index) => (\n        <React.Fragment key={index}>\n          {renderThumb(internalValues[index])}\n        </React.Fragment>\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n",
      "path": "registry/default/ui/slider.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/smart-registry/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "registry/default/lib/utils.ts"
    }
  ]
}