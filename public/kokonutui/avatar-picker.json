{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar-picker",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react",
    "motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/avatar-picker.tsx",
      "content": "\"use client\";\n\n/**\n * @author: @dorian_baffier\n * @description: Avatar Picker\n * @version: 1.0.0\n * @date: 2025-06-26\n * @license: MIT\n * @website: https://kokonutui.com\n * @github: https://github.com/kokonut-labs/kokonutui\n */\n\nimport { useState } from \"react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Check, Crown, ChevronRight, User2 } from \"lucide-react\";\n\ninterface Avatar {\n    id: number;\n    svg: React.ReactNode;\n    alt: string;\n}\n\nconst avatars: Avatar[] = [\n    {\n        id: 1,\n        svg: (\n            <svg\n                viewBox=\"0 0 36 36\"\n                fill=\"none\"\n                role=\"img\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"40\"\n                height=\"40\"\n                aria-label=\"Avatar 1\"\n            >\n                <title>Avatar 1</title>\n                <mask\n                    id=\":r111:\"\n                    maskUnits=\"userSpaceOnUse\"\n                    x=\"0\"\n                    y=\"0\"\n                    width=\"36\"\n                    height=\"36\"\n                >\n                    <rect width=\"36\" height=\"36\" rx=\"72\" fill=\"#FFFFFF\" />\n                </mask>\n                <g mask=\"url(#:r111:)\">\n                    <rect width=\"36\" height=\"36\" fill=\"#ff005b\" />\n                    <rect\n                        x=\"0\"\n                        y=\"0\"\n                        width=\"36\"\n                        height=\"36\"\n                        transform=\"translate(9 -5) rotate(219 18 18) scale(1)\"\n                        fill=\"#ffb238\"\n                        rx=\"6\"\n                    />\n                    <g transform=\"translate(4.5 -4) rotate(9 18 18)\">\n                        <path\n                            d=\"M15 19c2 1 4 1 6 0\"\n                            stroke=\"#000000\"\n                            fill=\"none\"\n                            strokeLinecap=\"round\"\n                        />\n                        <rect\n                            x=\"10\"\n                            y=\"14\"\n                            width=\"1.5\"\n                            height=\"2\"\n                            rx=\"1\"\n                            stroke=\"none\"\n                            fill=\"#000000\"\n                        />\n                        <rect\n                            x=\"24\"\n                            y=\"14\"\n                            width=\"1.5\"\n                            height=\"2\"\n                            rx=\"1\"\n                            stroke=\"none\"\n                            fill=\"#000000\"\n                        />\n                    </g>\n                </g>\n            </svg>\n        ),\n        alt: \"Avatar 1\",\n    },\n    {\n        id: 2,\n        svg: (\n            <svg\n                viewBox=\"0 0 36 36\"\n                fill=\"none\"\n                role=\"img\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"40\"\n                height=\"40\"\n                aria-label=\"Avatar 4\"\n            >\n                <title>Avatar 4</title>\n                <mask\n                    id=\":R4mrttb:\"\n                    maskUnits=\"userSpaceOnUse\"\n                    x=\"0\"\n                    y=\"0\"\n                    width=\"36\"\n                    height=\"36\"\n                >\n                    <rect width=\"36\" height=\"36\" rx=\"72\" fill=\"#FFFFFF\" />\n                </mask>\n                <g mask=\"url(#:R4mrttb:)\">\n                    <rect width=\"36\" height=\"36\" fill=\"#ff7d10\" />\n                    <rect\n                        x=\"0\"\n                        y=\"0\"\n                        width=\"36\"\n                        height=\"36\"\n                        transform=\"translate(5 -1) rotate(55 18 18) scale(1.1)\"\n                        fill=\"#0a0310\"\n                        rx=\"6\"\n                    />\n                    <g transform=\"translate(7 -6) rotate(-5 18 18)\">\n                        <path\n                            d=\"M15 20c2 1 4 1 6 0\"\n                            stroke=\"#FFFFFF\"\n                            fill=\"none\"\n                            strokeLinecap=\"round\"\n                        />\n                        <rect\n                            x=\"14\"\n                            y=\"14\"\n                            width=\"1.5\"\n                            height=\"2\"\n                            rx=\"1\"\n                            stroke=\"none\"\n                            fill=\"#FFFFFF\"\n                        />\n                        <rect\n                            x=\"20\"\n                            y=\"14\"\n                            width=\"1.5\"\n                            height=\"2\"\n                            rx=\"1\"\n                            stroke=\"none\"\n                            fill=\"#FFFFFF\"\n                        />\n                    </g>\n                </g>\n            </svg>\n        ),\n        alt: \"Avatar 4\",\n    },\n    {\n        id: 3,\n        svg: (\n            <svg\n                viewBox=\"0 0 36 36\"\n                fill=\"none\"\n                role=\"img\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"40\"\n                height=\"40\"\n                aria-label=\"Avatar 2\"\n            >\n                <title>Avatar 2</title>\n                <mask\n                    id=\":r11c:\"\n                    maskUnits=\"userSpaceOnUse\"\n                    x=\"0\"\n                    y=\"0\"\n                    width=\"36\"\n                    height=\"36\"\n                >\n                    <rect width=\"36\" height=\"36\" rx=\"72\" fill=\"#FFFFFF\" />\n                </mask>\n                <g mask=\"url(#:r11c:)\">\n                    <rect width=\"36\" height=\"36\" fill=\"#0a0310\" />\n                    <rect\n                        x=\"0\"\n                        y=\"0\"\n                        width=\"36\"\n                        height=\"36\"\n                        transform=\"translate(-3 7) rotate(227 18 18) scale(1.2)\"\n                        fill=\"#ff005b\"\n                        rx=\"36\"\n                    />\n                    <g transform=\"translate(-3 3.5) rotate(7 18 18)\">\n                        <path d=\"M13,21 a1,0.75 0 0,0 10,0\" fill=\"#FFFFFF\" />\n                        <rect\n                            x=\"12\"\n                            y=\"14\"\n                            width=\"1.5\"\n                            height=\"2\"\n                            rx=\"1\"\n                            stroke=\"none\"\n                            fill=\"#FFFFFF\"\n                        />\n                        <rect\n                            x=\"22\"\n                            y=\"14\"\n                            width=\"1.5\"\n                            height=\"2\"\n                            rx=\"1\"\n                            stroke=\"none\"\n                            fill=\"#FFFFFF\"\n                        />\n                    </g>\n                </g>\n            </svg>\n        ),\n        alt: \"Avatar 2\",\n    },\n    {\n        id: 4,\n        svg: (\n            <svg\n                viewBox=\"0 0 36 36\"\n                fill=\"none\"\n                role=\"img\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"40\"\n                height=\"40\"\n                aria-label=\"Avatar 3\"\n            >\n                <title>Avatar 3</title>\n                <mask\n                    id=\":r1gg:\"\n                    maskUnits=\"userSpaceOnUse\"\n                    x=\"0\"\n                    y=\"0\"\n                    width=\"36\"\n                    height=\"36\"\n                >\n                    <rect width=\"36\" height=\"36\" rx=\"72\" fill=\"#FFFFFF\" />\n                </mask>\n                <g mask=\"url(#:r1gg:)\">\n                    <rect width=\"36\" height=\"36\" fill=\"#d8fcb3\" />\n                    <rect\n                        x=\"0\"\n                        y=\"0\"\n                        width=\"36\"\n                        height=\"36\"\n                        transform=\"translate(9 -5) rotate(219 18 18) scale(1)\"\n                        fill=\"#89fcb3\"\n                        rx=\"6\"\n                    />\n                    <g transform=\"translate(4.5 -4) rotate(9 18 18)\">\n                        <path\n                            d=\"M15 19c2 1 4 1 6 0\"\n                            stroke=\"#000000\"\n                            fill=\"none\"\n                            strokeLinecap=\"round\"\n                        />\n                        <rect\n                            x=\"10\"\n                            y=\"14\"\n                            width=\"1.5\"\n                            height=\"2\"\n                            rx=\"1\"\n                            stroke=\"none\"\n                            fill=\"#000000\"\n                        />\n                        <rect\n                            x=\"24\"\n                            y=\"14\"\n                            width=\"1.5\"\n                            height=\"2\"\n                            rx=\"1\"\n                            stroke=\"none\"\n                            fill=\"#000000\"\n                        />\n                    </g>\n                </g>\n            </svg>\n        ),\n        alt: \"Avatar 3\",\n    },\n];\n\ninterface ProfileSetupProps {\n    onComplete?: (data: { username: string; avatarId: number }) => void;\n    className?: string;\n}\n\nconst mainAvatarVariants = {\n    initial: { scale: 0.9, opacity: 0 },\n    animate: {\n        scale: 1,\n        opacity: 1,\n        transition: { type: \"spring\", stiffness: 300, damping: 25 },\n    },\n    exit: {\n        scale: 0.9,\n        opacity: 0,\n        transition: { duration: 0.2 },\n    },\n};\n\nconst pickerVariants = {\n    container: {\n        initial: { opacity: 0 },\n        animate: {\n            opacity: 1,\n            transition: { staggerChildren: 0.05, delayChildren: 0.1 },\n        },\n    },\n    item: {\n        initial: { scale: 0.8, opacity: 0 },\n        animate: {\n            scale: 1,\n            opacity: 1,\n            transition: { type: \"spring\", stiffness: 400, damping: 25 },\n        },\n    },\n};\n\nconst DetailRing = () => (\n    <div className=\"absolute inset-0 rounded-full\">\n        <svg\n            className=\"absolute inset-0 w-full h-full animate-[spin_30s_linear_infinite]\"\n            viewBox=\"0 0 100 100\"\n            aria-label=\"Decorative outer ring animation\"\n        >\n            <title>Decorative outer spinning ring</title>\n            <defs>\n                <linearGradient\n                    id=\"gradient\"\n                    x1=\"0%\"\n                    y1=\"0%\"\n                    x2=\"100%\"\n                    y2=\"100%\"\n                >\n                    <stop\n                        offset=\"0%\"\n                        stopColor=\"hsl(var(--primary))\"\n                        stopOpacity=\"0.3\"\n                    />\n                    <stop\n                        offset=\"50%\"\n                        stopColor=\"hsl(var(--primary))\"\n                        stopOpacity=\"0.1\"\n                    />\n                    <stop\n                        offset=\"100%\"\n                        stopColor=\"hsl(var(--primary))\"\n                        stopOpacity=\"0.3\"\n                    />\n                </linearGradient>\n            </defs>\n            <circle\n                cx=\"50\"\n                cy=\"50\"\n                r=\"48\"\n                fill=\"none\"\n                stroke=\"url(#gradient)\"\n                strokeWidth=\"0.5\"\n                strokeDasharray=\"1,3\"\n            />\n        </svg>\n        <svg\n            className=\"absolute inset-0 w-full h-full animate-[spin_20s_linear_infinite_reverse]\"\n            viewBox=\"0 0 100 100\"\n            aria-label=\"Decorative inner ring animation\"\n        >\n            <title>Decorative inner spinning ring</title>\n            <circle\n                cx=\"50\"\n                cy=\"50\"\n                r=\"45\"\n                fill=\"none\"\n                stroke=\"url(#gradient)\"\n                strokeWidth=\"0.25\"\n                strokeDasharray=\"1,2\"\n            />\n        </svg>\n    </div>\n);\n\nexport default function ProfileSetup({\n    onComplete,\n    className,\n}: ProfileSetupProps) {\n    const [selectedAvatar, setSelectedAvatar] = useState<Avatar>(avatars[0]);\n    const [username, setUsername] = useState(\"\");\n    const [rotationCount, setRotationCount] = useState(0);\n    const [isHovering, setIsHovering] = useState<number | null>(null);\n    const [isFocused, setIsFocused] = useState(false);\n\n    const handleAvatarSelect = (avatar: Avatar) => {\n        if (avatar.id === selectedAvatar.id) return;\n        setRotationCount((prev) => prev + 720);\n        setSelectedAvatar(avatar);\n    };\n\n    const handleSubmit = () => {\n        if (username.trim() && onComplete) {\n            onComplete({\n                username: username.trim(),\n                avatarId: selectedAvatar.id,\n            });\n        }\n    };\n\n    const isValid = username.trim().length >= 3;\n    const showError = username.trim().length > 0 && username.trim().length < 3;\n\n    return (\n        <Card\n            className={cn(\n                \"relative w-full max-w-[400px] mx-auto overflow-hidden bg-gradient-to-b from-background/80 to-background/40 backdrop-blur-sm border-primary/10\",\n                className\n            )}\n        >\n            <div className=\"absolute inset-x-0 -top-px h-px w-full bg-gradient-to-r from-transparent via-primary/30 to-transparent\" />\n\n            <CardContent className=\"p-8\">\n                <div className=\"space-y-8\">\n                    {/* Header */}\n                    <div className=\"text-center space-y-2\">\n                        <h2 className=\"text-2xl font-bold bg-gradient-to-br from-primary/90 to-primary/60 bg-clip-text text-transparent\">\n                            Create Your Profile\n                        </h2>\n                        <p className=\"text-sm text-muted-foreground\">\n                            Choose an avatar and enter your username to begin\n                        </p>\n                    </div>\n\n                    {/* Avatar Section */}\n                    <div className=\"relative flex flex-col items-center\">\n                        {/* Main Avatar */}\n                        <motion.div\n                            className=\"relative w-28 h-28\"\n                            variants={mainAvatarVariants as any}\n                            initial=\"initial\"\n                            animate=\"animate\"\n                        >\n                            <DetailRing />\n\n                            <div className=\"absolute inset-0 rounded-full bg-gradient-to-b from-primary/10 to-transparent blur-md opacity-50\" />\n\n                            <div className=\"relative w-full h-full rounded-full overflow-hidden border border-primary/20 bg-gradient-to-b from-background/80 to-background shadow-lg shadow-primary/5\">\n                                <motion.div\n                                    className=\"absolute inset-0 flex items-center justify-center\"\n                                    animate={{ rotate: rotationCount }}\n                                    transition={{\n                                        duration: 0.7,\n                                        ease: [0.4, 0, 0.2, 1],\n                                    }}\n                                >\n                                    <div className=\"transform scale-[2.8]\">\n                                        {selectedAvatar.svg}\n                                    </div>\n                                </motion.div>\n                                <div className=\"absolute inset-0 bg-gradient-to-b from-transparent to-background/20\" />\n                            </div>\n\n                            <div className=\"absolute -bottom-1 -right-1 w-7 h-7 rounded-full bg-primary/10 backdrop-blur-sm border border-primary/20 flex items-center justify-center\">\n                                <Crown className=\"w-4 h-4 text-primary\" />\n                            </div>\n                        </motion.div>\n\n                        {/* Avatar Grid */}\n                        <motion.div\n                            className=\"grid grid-cols-4 gap-3 mt-6 w-full max-w-[240px]\"\n                            variants={pickerVariants.container}\n                            initial=\"initial\"\n                            animate=\"animate\"\n                        >\n                            {avatars.map((avatar) => (\n                                <motion.button\n                                    key={avatar.id}\n                                    onClick={() => handleAvatarSelect(avatar)}\n                                    onMouseEnter={() =>\n                                        setIsHovering(avatar.id)\n                                    }\n                                    onMouseLeave={() => setIsHovering(null)}\n                                    className={cn(\n                                        \"relative w-12 h-12 rounded-full group/avatar\",\n                                        \"transition-all duration-300\",\n                                        selectedAvatar.id === avatar.id\n                                            ? \"ring-2 ring-primary/30 ring-offset-2 ring-offset-background\"\n                                            : \"hover:ring-2 hover:ring-primary/20 hover:ring-offset-2 hover:ring-offset-background\"\n                                    )}\n                                    variants={pickerVariants.item as any}\n                                    whileHover={{ scale: 1.05 }}\n                                    whileTap={{ scale: 0.95 }}\n                                    aria-label={`Select ${avatar.alt}`}\n                                    aria-pressed={\n                                        selectedAvatar.id === avatar.id\n                                    }\n                                >\n                                    <AnimatePresence>\n                                        {isHovering === avatar.id && (\n                                            <motion.div\n                                                className=\"absolute inset-0 rounded-full bg-primary/10\"\n                                                initial={{ opacity: 0 }}\n                                                animate={{ opacity: 1 }}\n                                                exit={{ opacity: 0 }}\n                                            />\n                                        )}\n                                    </AnimatePresence>\n\n                                    <div className=\"relative w-full h-full rounded-full overflow-hidden\">\n                                        <div className=\"absolute inset-0 bg-gradient-to-b from-background/50 to-background opacity-0 group-hover/avatar:opacity-100 transition-opacity duration-300\" />\n                                        <div className=\"absolute inset-0 flex items-center justify-center\">\n                                            <div className=\"transform scale-[2.2]\">\n                                                {avatar.svg}\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    {selectedAvatar.id === avatar.id && (\n                                        <div className=\"absolute -bottom-0.5 -right-0.5 w-5 h-5 rounded-full bg-primary/10 backdrop-blur-sm flex items-center justify-center\">\n                                            <Check className=\"w-3 h-3 text-primary\" />\n                                        </div>\n                                    )}\n                                </motion.button>\n                            ))}\n                        </motion.div>\n                    </div>\n\n                    {/* Username Input */}\n                    <div className=\"space-y-6\">\n                        <div className=\"relative\">\n                            <div className=\"relative\">\n                                <Input\n                                    type=\"text\"\n                                    placeholder=\"Enter your username\"\n                                    value={username}\n                                    onChange={(e) =>\n                                        setUsername(e.target.value)\n                                    }\n                                    onFocus={() => setIsFocused(true)}\n                                    onBlur={() => setIsFocused(false)}\n                                    className={cn(\n                                        \"pl-10 h-12 text-base transition-all duration-200\",\n                                        isFocused && \"ring-2 ring-primary/20\",\n                                        showError &&\n                                            \"ring-2 ring-destructive/50 focus-visible:ring-destructive\"\n                                    )}\n                                    maxLength={20}\n                                />\n                                <User2\n                                    className={cn(\n                                        \"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 transition-colors duration-200\",\n                                        isFocused\n                                            ? \"text-primary\"\n                                            : \"text-muted-foreground\"\n                                    )}\n                                />\n                            </div>\n                            <AnimatePresence>\n                                {showError && (\n                                    <motion.p\n                                        initial={{ opacity: 0, y: -10 }}\n                                        animate={{ opacity: 1, y: 0 }}\n                                        exit={{ opacity: 0, y: -10 }}\n                                        className=\"absolute text-xs text-destructive mt-2 ml-1\"\n                                    >\n                                        Username must be at least 3 characters\n                                    </motion.p>\n                                )}\n                            </AnimatePresence>\n                        </div>\n\n                        <Button\n                            className=\"w-full relative group h-12 text-base\"\n                            onClick={handleSubmit}\n                            disabled={!isValid}\n                        >\n                            <span className=\"relative z-10\">\n                                Start Adventure\n                            </span>\n                            <ChevronRight className=\"relative z-10 w-5 h-5 ml-2 transition-transform group-hover:translate-x-1\" />\n                            <div className=\"absolute inset-0 rounded-md bg-gradient-to-r from-primary/0 via-primary/10 to-primary/0 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                        </Button>\n                    </div>\n                </div>\n            </CardContent>\n        </Card>\n    );\n}\n",
      "path": "components/kokonutui/avatar-picker.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border border-zinc-200 bg-white text-zinc-950 shadow-xs dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-zinc-500 dark:text-zinc-400\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "path": "components/ui/card.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-zinc-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-zinc-950 placeholder:text-zinc-500 focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:file:text-zinc-50 dark:placeholder:text-zinc-400 dark:focus-visible:ring-zinc-300\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "path": "components/ui/input.tsx"
    }
  ]
}
