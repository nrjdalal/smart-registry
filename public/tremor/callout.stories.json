{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "callout.stories",
  "type": "registry:component",
  "dependencies": [
    "@remixicon/react",
    "clsx",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "devDependencies": [
    "@storybook/react"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Callout/callout.stories.tsx",
      "content": "import { RiErrorWarningFill, RiInformation2Fill } from \"@remixicon/react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Callout, calloutVariants } from \"@/components/Callout/Callout\"\n\nconst meta: Meta<typeof Callout> = {\n  title: \"ui/Callout\",\n  component: Callout,\n  args: {\n    title: \"Sales Performance\",\n    children:\n      \"System Update: Enhanced Salesforce and Dynamics 365 integration now delivers key sales performance metrics directly to your dashboard for improved target achievement.\",\n  },\n  argTypes: {\n    variant: {\n      control: \"radio\",\n      options: [...Object.keys(calloutVariants.variants.variant)],\n    },\n  },\n}\n\nexport default meta\ntype Story = StoryObj<typeof Callout>\n\nexport const Default: Story = {}\n\nexport const Success: Story = {\n  args: {\n    variant: \"success\",\n  },\n}\n\nexport const Error: Story = {\n  args: {\n    variant: \"error\",\n  },\n}\n\nexport const Warning: Story = {\n  args: {\n    variant: \"warning\",\n  },\n}\n\nexport const Neutral: Story = {\n  args: {\n    variant: \"neutral\",\n  },\n}\n\nexport const WithIcon: Story = {\n  args: {\n    icon: RiErrorWarningFill,\n    title: \"AWS Credit Alert\",\n    children:\n      \"Warning: Your AWS credits are nearly depleted. Please review your usage and consider adding more credits to avoid service interruptions. Visit your account dashboard for details.\",\n  },\n}\n\nexport const WithIconElement: Story = {\n  args: {\n    icon: <RiInformation2Fill className=\"mr-1.5 h-5 w-5 shrink-0\" />,\n    title: \"Information\",\n    children: \"Visit your account dashboard for details.\",\n  },\n}\n",
      "path": "src/components/Callout/callout.stories.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Callout/Callout.tsx",
      "content": "// Tremor Callout [v0.0.1]\n\nimport React from \"react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\n\nconst calloutVariants = tv({\n  base: \"flex flex-col overflow-hidden rounded-md p-4 text-sm\",\n  variants: {\n    variant: {\n      default: [\n        // text color\n        \"text-blue-900 dark:text-blue-400\",\n        // background color\n        \"bg-blue-50 dark:bg-blue-950/70\",\n      ],\n      success: [\n        // text color\n        \"text-emerald-900 dark:text-emerald-500\",\n        // background color\n        \"bg-emerald-50 dark:bg-emerald-950/70\",\n      ],\n      error: [\n        // text color\n        \"text-red-900 dark:text-red-500\",\n        // background color\n        \"bg-red-50 dark:bg-red-950/70\",\n      ],\n      warning: [\n        // text color\n        \"text-yellow-900 dark:text-yellow-500\",\n        // background color\n        \"bg-yellow-50 dark:bg-yellow-950/70\",\n      ],\n      neutral: [\n        // text color\n        \"text-gray-900 dark:text-gray-400\",\n        // background color\n        \"bg-gray-100 dark:bg-gray-800/70\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n})\n\ninterface CalloutProps\n  extends React.ComponentPropsWithoutRef<\"div\">,\n    VariantProps<typeof calloutVariants> {\n  title: string\n  icon?: React.ElementType | React.ReactElement\n}\n\nconst Callout = React.forwardRef<HTMLDivElement, CalloutProps>(\n  (\n    { title, icon: Icon, className, variant, children, ...props }: CalloutProps,\n    forwardedRef,\n  ) => {\n    return (\n      <div\n        ref={forwardedRef}\n        className={cx(calloutVariants({ variant }), className)}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        <div className={cx(\"flex items-start\")}>\n          {Icon && typeof Icon === \"function\" ? (\n            <Icon\n              className={cx(\"mr-1.5 h-5 w-5 shrink-0\")}\n              aria-hidden=\"true\"\n            />\n          ) : (\n            Icon\n          )}\n          <span className={cx(\"font-semibold\")}>{title}</span>\n        </div>\n        <div className={cx(\"overflow-y-auto\", children ? \"mt-2\" : \"\")}>\n          {children}\n        </div>\n      </div>\n    )\n  },\n)\n\nCallout.displayName = \"Callout\"\n\nexport { Callout, calloutVariants, type CalloutProps }\n",
      "path": "src/components/Callout/Callout.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    }
  ]
}
