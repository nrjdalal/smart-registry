{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "slider.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slider",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "tailwind-variants"
  ],
  "devDependencies": [
    "@storybook/react"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Slider/slider.stories.tsx",
      "content": "import React from \"react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Button } from \"@/components/Button/Button\"\nimport { Card } from \"@/components/Card/Card\"\nimport { Divider } from \"@/components/Divider/Divider\"\nimport { Slider } from \"@/components/Slider/Slider\"\n\nconst meta: Meta<typeof Slider> = {\n  title: \"ui/Slider\",\n  component: Slider,\n}\n\nexport default meta\ntype Story = StoryObj<typeof Slider>\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst ControlledSlider = (args: any) => {\n  const [value, setValue] = React.useState([55, 75])\n\n  return (\n    <Card className=\"w-96\">\n      <form\n        onSubmit={(event) => {\n          // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n          event.preventDefault(),\n            alert(\"Submitted: \" + `${value[0]}, ${value[1]}`)\n        }}\n        onReset={() => setValue([55, 75])}\n      >\n        <Slider id=\"a\" value={value} onValueChange={setValue} {...args} />\n        <Divider />\n        <div className=\"flex gap-4\">\n          <Button type=\"submit\" className=\"mt-2 w-fit\">\n            Submit\n          </Button>\n\n          <Button type=\"reset\" variant=\"secondary\" className=\"mt-2 w-fit\">\n            Reset Input\n          </Button>\n        </div>\n      </form>\n      <Divider />\n      <p className=\"mt-2 text-sm text-gray-500\">\n        Slider value:\n        <span className=\"ml-1 font-semibold text-gray-900 dark:text-gray-50\">\n          {value[0]}, {value[1]}\n        </span>\n      </p>\n    </Card>\n  )\n}\n\nexport const Default: Story = {\n  render: () => <Slider defaultValue={[55]} />,\n}\n\nexport const Range: Story = {\n  render: () => <Slider defaultValue={[55, 75]} />,\n}\n\nexport const Disabled: Story = {\n  render: () => <Slider defaultValue={[55]} disabled />,\n}\n\nexport const Inverted: Story = {\n  render: () => <Slider defaultValue={[55]} inverted />,\n}\n\nexport const Vertical: Story = {\n  render: () => (\n    <div className=\"h-20\">\n      <Slider defaultValue={[55]} orientation=\"vertical\" />\n    </div>\n  ),\n}\n\nexport const StepSize: Story = {\n  render: () => <Slider defaultValue={[55]} step={10} />,\n}\n\nexport const ControlledForm: Story = {\n  render: ControlledSlider,\n}\n",
      "path": "src/components/Slider/slider.stories.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Button/Button.tsx",
      "content": "// Tremor Button [v1.0.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-xs transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"dark:disabled:bg-blue-800 dark:disabled:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"dark:disabled:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"dark:disabled:bg-gray-800 dark:disabled:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"dark:disabled:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"dark:disabled:bg-red-950 dark:disabled:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Card/Card.tsx",
      "content": "// Tremor Card [v1.0.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\n\nimport { cx } from \"@/utils/cx\"\n\ninterface CardProps extends React.ComponentPropsWithoutRef<\"div\"> {\n  asChild?: boolean\n}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({ className, asChild, ...props }, forwardedRef) => {\n    const Component = asChild ? Slot : \"div\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"relative w-full rounded-lg border p-6 text-left shadow-xs\",\n          // background color\n          \"bg-white dark:bg-[#090E1A]\",\n          // border color\n          \"border-gray-200 dark:border-gray-900\",\n          className,\n        )}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      />\n    )\n  },\n)\n\nCard.displayName = \"Card\"\n\nexport { Card, type CardProps }\n",
      "path": "src/components/Card/Card.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Divider/Divider.tsx",
      "content": "// Tremor Divider [v1.0.0]\n\nimport React from \"react\"\n\nimport { cx } from \"@/utils/cx\"\n\ntype DividerProps = React.ComponentPropsWithoutRef<\"div\">\n\nconst Divider = React.forwardRef<HTMLDivElement, DividerProps>(\n  ({ className, children, ...props }, forwardedRef) => (\n    <div\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"mx-auto my-6 flex w-full items-center justify-between gap-3 text-sm\",\n        // text color\n        \"text-gray-500 dark:text-gray-500\",\n        className,\n      )}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    >\n      {children ? (\n        <>\n          <div\n            className={cx(\n              // base\n              \"h-[1px] w-full\",\n              // background color\n              \"bg-gray-200 dark:bg-gray-800\",\n            )}\n          />\n          <div className=\"whitespace-nowrap text-inherit\">{children}</div>\n          <div\n            className={cx(\n              // base\n              \"h-[1px] w-full\",\n              // background color\n              \"bg-gray-200 dark:bg-gray-800\",\n            )}\n          />\n        </>\n      ) : (\n        <div\n          className={cx(\n            // base\n            \"h-[1px] w-full\",\n            // background color\n            \"bg-gray-200 dark:bg-gray-800\",\n          )}\n        />\n      )}\n    </div>\n  ),\n)\n\nDivider.displayName = \"Divider\"\n\nexport { Divider }\n",
      "path": "src/components/Divider/Divider.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Slider/Slider.tsx",
      "content": "// Tremor Slider [v1.0.0]\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\ninterface SliderProps\n  extends React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> {\n  ariaLabelThumb?: string\n}\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  SliderProps\n>(({ className, ariaLabelThumb, ...props }, forwardedRef) => {\n  const value = props.value || props.defaultValue\n  return (\n    <SliderPrimitive.Root\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"relative flex cursor-pointer touch-none select-none\",\n        // orientation\n        \"data-[orientation='horizontal']:w-full data-[orientation='horizontal']:items-center\",\n        \"data-[orientation='vertical']:h-full data-[orientation='vertical']:w-fit data-[orientation='vertical']:justify-center\",\n        // disabled\n        \"data-disabled:pointer-events-none\",\n        className,\n      )}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    >\n      <SliderPrimitive.Track\n        className={cx(\n          // base\n          \"relative grow overflow-hidden rounded-full bg-gray-200 dark:bg-gray-800\",\n          // orientation\n          \"data-[orientation='horizontal']:h-1.5 data-[orientation='horizontal']:w-full\",\n          \"data-[orientation='vertical']:h-full data-[orientation='vertical']:w-1.5\",\n        )}\n      >\n        <SliderPrimitive.Range\n          className={cx(\n            // base\n            \"absolute rounded-full bg-blue-500 dark:bg-blue-500\",\n            // orientation\n            \"data-[orientation='horizontal']:h-full\",\n            \"data-[orientation='vertical']:w-full\",\n            // disabled\n            \"data-disabled:bg-gray-300 dark:data-disabled:bg-gray-700\",\n          )}\n        />\n      </SliderPrimitive.Track>\n      {value?.map((_, index) => (\n        <SliderPrimitive.Thumb\n          key={index}\n          className={cx(\n            // base\n            \"block size-[17px] shrink-0 rounded-full border shadow-sm transition-all\",\n            // boder color\n            \"border-gray-400 dark:border-gray-500\",\n            // background color\n            \"bg-white\",\n            // disabled\n            \"data-disabled:pointer-events-none data-disabled:bg-gray-200 dark:data-disabled:border-gray-800 dark:data-disabled:bg-gray-600\",\n            focusRing,\n            \"outline-offset-0\",\n          )}\n          aria-label={ariaLabelThumb}\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n})\n\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
      "path": "src/components/Slider/Slider.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    }
  ]
}
