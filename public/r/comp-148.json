{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-148",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-checkbox",
    "@radix-ui/react-label",
    "clsx",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/comp-148.tsx",
      "content": "\"use client\";\n\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\nimport { CheckboxTree } from \"@/registry/default/ui/checkbox-tree\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport { Fragment, useId } from \"react\";\n\ninterface TreeNode {\n  id: string;\n  label: string;\n  defaultChecked?: boolean;\n  children?: TreeNode[];\n}\n\nconst initialTree: TreeNode = {\n  id: \"1\",\n  label: \"Natural Wonders\",\n  children: [\n    { id: \"2\", label: \"Mountains\", defaultChecked: true },\n    {\n      id: \"3\",\n      label: \"Waterfalls\",\n      children: [\n        { id: \"4\", label: \"Niagara Falls\" },\n        { id: \"5\", label: \"Angel Falls\", defaultChecked: true },\n      ],\n    },\n    { id: \"6\", label: \"Grand Canyon\" },\n  ],\n};\n\nexport default function Component() {\n  const id = useId();\n  return (\n    <div className=\"space-y-3\">\n      <CheckboxTree\n        tree={initialTree}\n        renderNode={({ node, isChecked, onCheckedChange, children }) => (\n          <Fragment key={`${id}-${node.id}`}>\n            <div className=\"flex items-center gap-2\">\n              <Checkbox\n                id={`${id}-${node.id}`}\n                checked={isChecked}\n                onCheckedChange={onCheckedChange}\n              />\n              <Label htmlFor={`${id}-${node.id}`}>{node.label}</Label>\n            </div>\n            {children && <div className=\"ms-6 space-y-3\">{children}</div>}\n          </Fragment>\n        )}\n      />\n    </div>\n  );\n}\n",
      "path": "registry/default/components/comp-148.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "path": "registry/default/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/checkbox-tree.tsx",
      "content": "/**\n * IMPORTANT: This component was built for demo purposes only and has not been tested in production.\n * It serves as a proof of concept for a checkbox tree implementation.\n * If you&lsquo;re interested in collaborating to create a more robust, production-ready\n * headless component, your contributions are welcome!\n */\n\n\"use client\";\n\nimport React, { useCallback, useMemo, useState } from \"react\";\n\ninterface TreeNode {\n  id: string;\n  label: string;\n  defaultChecked?: boolean;\n  children?: TreeNode[];\n}\n\nfunction useCheckboxTree(initialTree: TreeNode) {\n  const initialCheckedNodes = useMemo(() => {\n    const checkedSet = new Set<string>();\n    const initializeCheckedNodes = (node: TreeNode) => {\n      if (node.defaultChecked) {\n        checkedSet.add(node.id);\n      }\n      node.children?.forEach(initializeCheckedNodes);\n    };\n    initializeCheckedNodes(initialTree);\n    return checkedSet;\n  }, [initialTree]);\n\n  const [checkedNodes, setCheckedNodes] = useState<Set<string>>(initialCheckedNodes);\n\n  const isChecked = useCallback(\n    (node: TreeNode): boolean | \"indeterminate\" => {\n      if (!node.children) {\n        return checkedNodes.has(node.id);\n      }\n\n      const childrenChecked = node.children.map((child) => isChecked(child));\n      if (childrenChecked.every((status) => status === true)) {\n        return true;\n      }\n      if (childrenChecked.some((status) => status === true || status === \"indeterminate\")) {\n        return \"indeterminate\";\n      }\n      return false;\n    },\n    [checkedNodes],\n  );\n\n  const handleCheck = useCallback(\n    (node: TreeNode) => {\n      const newCheckedNodes = new Set(checkedNodes);\n\n      const toggleNode = (n: TreeNode, check: boolean) => {\n        if (check) {\n          newCheckedNodes.add(n.id);\n        } else {\n          newCheckedNodes.delete(n.id);\n        }\n        n.children?.forEach((child) => toggleNode(child, check));\n      };\n\n      const currentStatus = isChecked(node);\n      const newCheck = currentStatus !== true;\n\n      toggleNode(node, newCheck);\n      setCheckedNodes(newCheckedNodes);\n    },\n    [checkedNodes, isChecked],\n  );\n\n  return { isChecked, handleCheck };\n}\n\ninterface CheckboxTreeProps {\n  tree: TreeNode;\n  renderNode: (props: {\n    node: TreeNode;\n    isChecked: boolean | \"indeterminate\";\n    onCheckedChange: () => void;\n    children: React.ReactNode;\n  }) => React.ReactNode;\n}\n\nexport function CheckboxTree({ tree, renderNode }: CheckboxTreeProps) {\n  const { isChecked, handleCheck } = useCheckboxTree(tree);\n\n  const renderTreeNode = (node: TreeNode): React.ReactNode => {\n    const children = node.children?.map(renderTreeNode);\n\n    return renderNode({\n      node,\n      isChecked: isChecked(node),\n      onCheckedChange: () => handleCheck(node),\n      children,\n    });\n  };\n\n  return renderTreeNode(tree);\n}\n",
      "path": "registry/default/ui/checkbox-tree.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/checkbox.tsx",
      "content": "\"use client\";\n\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/registry/default/lib/utils\";\n\nfunction Checkbox({ className, ...props }: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-500\",\n        className,\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"grid place-content-center text-current\"\n      >\n        {props.checked === \"indeterminate\" ? (\n          <svg\n            width=\"9\"\n            height=\"9\"\n            viewBox=\"0 0 9 9\"\n            fill=\"currentcolor\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M0.75 4.5C0.75 4.08579 1.08579 3.75 1.5 3.75H7.5C7.91421 3.75 8.25 4.08579 8.25 4.5C8.25 4.91421 7.91421 5.25 7.5 5.25H1.5C1.08579 5.25 0.75 4.91421 0.75 4.5Z\"\n            />\n          </svg>\n        ) : (\n          <svg\n            width=\"9\"\n            height=\"9\"\n            viewBox=\"0 0 9 9\"\n            fill=\"currentcolor\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M8.53547 0.62293C8.88226 0.849446 8.97976 1.3142 8.75325 1.66099L4.5083 8.1599C4.38833 8.34356 4.19397 8.4655 3.9764 8.49358C3.75883 8.52167 3.53987 8.45309 3.3772 8.30591L0.616113 5.80777C0.308959 5.52987 0.285246 5.05559 0.563148 4.74844C0.84105 4.44128 1.31533 4.41757 1.62249 4.69547L3.73256 6.60459L7.49741 0.840706C7.72393 0.493916 8.18868 0.396414 8.53547 0.62293Z\"\n            />\n          </svg>\n        )}\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  );\n}\n\nexport { Checkbox };\n",
      "path": "registry/default/ui/checkbox.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/label.tsx",
      "content": "\"use client\";\n\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/registry/default/lib/utils\";\n\nfunction Label({ className, ...props }: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"text-foreground text-sm leading-4 font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Label };\n",
      "path": "registry/default/ui/label.tsx"
    }
  ],
  "meta": {
    "tags": [
      "checkbox",
      "label",
      "tree",
      "radix"
    ]
  }
}
