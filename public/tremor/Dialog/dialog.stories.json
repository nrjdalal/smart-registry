{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Dialog/dialog.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-dialog",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Button/Button.tsx",
      "content": "// Tremor Button [v0.2.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"disabled:dark:bg-blue-800 disabled:dark:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"disabled:dark:bg-gray-800 disabled:dark:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"disabled:dark:bg-red-950 disabled:dark:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Dialog/Dialog.tsx",
      "content": "// Tremor Dialog [v0.0.1]\n\nimport React from \"react\"\nimport * as DialogPrimitives from \"@radix-ui/react-dialog\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst Dialog = (\n  props: React.ComponentPropsWithoutRef<typeof DialogPrimitives.Root>,\n) => {\n  return <DialogPrimitives.Root {...props} />\n}\nDialog.displayName = \"Dialog\"\n\nconst DialogTrigger = DialogPrimitives.Trigger\n\nDialogTrigger.displayName = \"DialogTrigger\"\n\nconst DialogClose = DialogPrimitives.Close\n\nDialogClose.displayName = \"DialogClose\"\n\nconst DialogPortal = DialogPrimitives.Portal\n\nDialogPortal.displayName = \"DialogPortal\"\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Overlay>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DialogPrimitives.Overlay\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"fixed inset-0 z-50 overflow-y-auto\",\n        // background color\n        \"bg-black/70\",\n        // transition\n        \"data-[state=open]:animate-dialogOverlayShow\",\n        className,\n      )}\n      {...props}\n    />\n  )\n})\n\nDialogOverlay.displayName = \"DialogOverlay\"\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Content>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DialogPortal>\n      <DialogOverlay>\n        <DialogPrimitives.Content\n          ref={forwardedRef}\n          className={cx(\n            // base\n            \"fixed left-1/2 top-1/2 z-50 w-[95vw] max-w-lg -translate-x-1/2 -translate-y-1/2 overflow-y-auto rounded-md border p-6 shadow-lg\",\n            // border color\n            \"border-gray-200 dark:border-gray-900\",\n            // background color\n            \"bg-white dark:bg-[#090E1A]\",\n            // transition\n            \"data-[state=open]:animate-dialogContentShow\",\n            focusRing,\n            className,\n          )}\n          tremor-id=\"tremor-raw\"\n          {...props}\n        />\n      </DialogOverlay>\n    </DialogPortal>\n  )\n})\n\nDialogContent.displayName = \"DialogContent\"\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={cx(\"flex flex-col gap-y-1\", className)} {...props} />\n}\n\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Title>\n>(({ className, ...props }, forwardedRef) => (\n  <DialogPrimitives.Title\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-lg font-semibold\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nDialogTitle.displayName = \"DialogTitle\"\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Description>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DialogPrimitives.Description\n      ref={forwardedRef}\n      className={cx(\"text-gray-500 dark:text-gray-500\", className)}\n      {...props}\n    />\n  )\n})\n\nDialogDescription.displayName = \"DialogDescription\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cx(\n        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nDialogFooter.displayName = \"DialogFooter\"\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n}\n",
      "path": "src/components/Dialog/Dialog.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Dialog/dialog.stories.tsx",
      "content": "import React from \"react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Button } from \"@/components/Button/Button\"\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/Dialog/Dialog\"\n\nconst meta: Meta<typeof Dialog> = {\n  title: \"ui/Dialog\",\n  component: Dialog,\n  parameters: {\n    layout: \"centered\",\n  },\n}\n\nexport default meta\ntype Story = StoryObj<typeof Dialog>\n\nexport const Default: Story = {\n  render: () => {\n    return (\n      <>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button variant=\"secondary\">Open Dialog</Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-lg\">\n            <DialogHeader>\n              <DialogTitle>Account Created Successfully</DialogTitle>\n              <DialogDescription className=\"mt-1 text-sm/7\">\n                Your account has been created successfully. You can now login to\n                your account. For more information, please contact us.\n              </DialogDescription>\n            </DialogHeader>\n            <DialogFooter className=\"mt-6\">\n              <DialogClose asChild>\n                <Button\n                  className=\"mt-2 w-full sm:mt-0 sm:w-fit\"\n                  variant=\"secondary\"\n                >\n                  Go back\n                </Button>\n              </DialogClose>\n              <DialogClose asChild>\n                <Button className=\"w-full sm:w-fit\">Ok, got it!</Button>\n              </DialogClose>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </>\n    )\n  },\n}\n\nexport const Controlled: Story = {\n  render: () => {\n    const [open, setOpen] = React.useState(false)\n    return (\n      <>\n        <Dialog open={open} onOpenChange={setOpen}>\n          <DialogTrigger asChild>\n            <Button variant=\"secondary\">Open Dialog</Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-lg\">\n            <DialogHeader>\n              <DialogTitle>Account Created Successfully</DialogTitle>\n              <DialogDescription className=\"mt-1 text-sm/7\">\n                Your account has been created successfully. You can now login to\n                your account. For more information, please contact us.\n              </DialogDescription>\n            </DialogHeader>\n            <DialogFooter className=\"mt-6\">\n              <DialogClose asChild>\n                <Button\n                  className=\"mt-2 w-full sm:mt-0 sm:w-fit\"\n                  variant=\"secondary\"\n                >\n                  Go back\n                </Button>\n              </DialogClose>\n              <DialogClose asChild>\n                <Button className=\"w-full sm:w-fit\">Ok, got it!</Button>\n              </DialogClose>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </>\n    )\n  },\n}\n",
      "path": "src/components/Dialog/dialog.stories.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    }
  ]
}
