{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Tooltip/Tooltip",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-tooltip",
    "clsx",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Tooltip/Tooltip.tsx",
      "content": "// Tremor Tooltip [v0.1.0]\n\nimport React from \"react\"\nimport * as TooltipPrimitives from \"@radix-ui/react-tooltip\"\n\nimport { cx } from \"@/utils/cx\"\n\ninterface TooltipProps\n  extends Omit<TooltipPrimitives.TooltipContentProps, \"content\" | \"onClick\">,\n    Pick<\n      TooltipPrimitives.TooltipProps,\n      \"open\" | \"defaultOpen\" | \"onOpenChange\" | \"delayDuration\"\n    > {\n  content: React.ReactNode\n  onClick?: React.MouseEventHandler<HTMLButtonElement>\n  side?: \"bottom\" | \"left\" | \"top\" | \"right\"\n  showArrow?: boolean\n}\n\nconst Tooltip = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitives.Content>,\n  TooltipProps\n>(\n  (\n    {\n      children,\n      className,\n      content,\n      delayDuration,\n      defaultOpen,\n      open,\n      onClick,\n      onOpenChange,\n      showArrow = true,\n      side,\n      sideOffset = 10,\n      asChild,\n      ...props\n    }: TooltipProps,\n    forwardedRef,\n  ) => {\n    return (\n      <TooltipPrimitives.Provider delayDuration={150}>\n        <TooltipPrimitives.Root\n          open={open}\n          defaultOpen={defaultOpen}\n          onOpenChange={onOpenChange}\n          delayDuration={delayDuration}\n          tremor-id=\"tremor-raw\"\n        >\n          <TooltipPrimitives.Trigger onClick={onClick} asChild={asChild}>\n            {children}\n          </TooltipPrimitives.Trigger>\n          <TooltipPrimitives.Portal>\n            <TooltipPrimitives.Content\n              ref={forwardedRef}\n              side={side}\n              sideOffset={sideOffset}\n              align=\"center\"\n              className={cx(\n                // base\n                \"max-w-60 select-none rounded-md px-2.5 py-1.5 text-sm leading-5 shadow-md\",\n                // text color\n                \"text-gray-50 dark:text-gray-900\",\n                // background color\n                \"bg-gray-900 dark:bg-gray-50\",\n                // transition\n                \"will-change-[transform,opacity]\",\n                \"data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade data-[state=closed]:animate-hide\",\n                className,\n              )}\n              {...props}\n            >\n              {content}\n              {showArrow ? (\n                <TooltipPrimitives.Arrow\n                  className=\"border-none fill-gray-900 dark:fill-gray-50\"\n                  width={12}\n                  height={7}\n                  aria-hidden=\"true\"\n                />\n              ) : null}\n            </TooltipPrimitives.Content>\n          </TooltipPrimitives.Portal>\n        </TooltipPrimitives.Root>\n      </TooltipPrimitives.Provider>\n    )\n  },\n)\n\nTooltip.displayName = \"Tooltip\"\n\nexport { Tooltip, type TooltipProps }\n",
      "path": "src/components/Tooltip/Tooltip.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    }
  ]
}
