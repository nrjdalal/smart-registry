{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "field/index",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "target": "components/field/Field.vue",
      "content": "<template>\n    <div class=\"field\" :class=\"rootClasses\">\n        <div\n            v-if=\"horizontal\"\n            class=\"field-label\"\n            :class=\"[customClass, fieldLabelSize]\">\n            <label\n                v-if=\"hasLabel\"\n                :for=\"labelFor\"\n                :class=\"customClass\"\n                class=\"label\" >\n                <slot v-if=\"$slots.label\" name=\"label\"/>\n                <template v-else>{{ label }}</template>\n            </label>\n        </div>\n        <template v-else>\n            <label\n                v-if=\"hasLabel\"\n                :for=\"labelFor\"\n                :class=\"customClass\"\n                class=\"label\">\n                <slot v-if=\"$slots.label\" name=\"label\"/>\n                <template v-else>{{ label }}</template>\n            </label>\n        </template>\n        <b-field-body\n            v-if=\"horizontal\"\n            :message=\"newMessage ? formattedMessage : ''\"\n            :type=\"newType\">\n            <slot/>\n        </b-field-body>\n        <div v-else-if=\"hasInnerField\" class=\"field-body\">\n            <b-field\n                :addons=\"false\"\n                :type=\"type\"\n                :class=\"innerFieldClasses\">\n                <slot/>\n            </b-field>\n        </div>\n        <template v-else>\n            <slot/>\n        </template>\n        <p\n            v-if=\"hasMessage && !horizontal\"\n            class=\"help\"\n            :class=\"newType\"\n        >\n            <slot\n                v-if=\"$slots.message\"\n                name=\"message\"\n                :messages=\"formattedMessage\"\n            />\n            <template v-else>\n                <template v-for=\"(mess, i) in formattedMessage\">\n                    {{ mess }}\n                    <br :key=\"i\" v-if=\"(i + 1) < formattedMessage.length\">\n                </template>\n            </template>\n        </p>\n    </div>\n</template>\n\n<script>\nimport config from '@/utils/config'\nimport FieldBody from '@/components/field/FieldBody'\n\nexport default {\n    name: 'BField',\n    components: {\n        [FieldBody.name]: FieldBody\n    },\n    provide() {\n        return {\n            'BField': this\n        }\n    },\n    inject: {\n        parent: {\n            from: 'BField',\n            default: false\n        }\n    }, // Used internally only when using Field in Field\n    props: {\n        type: [String, Object],\n        label: String,\n        labelFor: String,\n        message: [String, Array, Object],\n        grouped: Boolean,\n        groupMultiline: Boolean,\n        position: String,\n        expanded: Boolean,\n        horizontal: Boolean,\n        addons: {\n            type: Boolean,\n            default: true\n        },\n        customClass: String,\n        labelPosition: {\n            type: String,\n            default: () => { return config.defaultFieldLabelPosition }\n        }\n    },\n    data() {\n        return {\n            newType: this.type,\n            newMessage: this.message,\n            fieldLabelSize: null,\n            _isField: true // Used internally by Input and Select\n        }\n    },\n    computed: {\n        rootClasses() {\n            return [{\n                'is-expanded': this.expanded,\n                'is-horizontal': this.horizontal,\n                'is-floating-in-label': this.hasLabel && !this.horizontal &&\n                    this.labelPosition === 'inside',\n                'is-floating-label': this.hasLabel && !this.horizontal &&\n                    this.labelPosition === 'on-border'\n            },\n            this.numberInputClasses]\n        },\n        innerFieldClasses() {\n            return [\n                this.fieldType(),\n                this.newPosition,\n                {\n                    'is-grouped-multiline': this.groupMultiline\n                }\n            ]\n        },\n        hasInnerField() {\n            return this.grouped || this.groupMultiline || this.hasAddons()\n        },\n        /**\n        * Correct Bulma class for the side of the addon or group.\n        *\n        * This is not kept like the others (is-small, etc.),\n        * because since 'has-addons' is set automatically it\n        * doesn't make sense to teach users what addons are exactly.\n        */\n        newPosition() {\n            if (this.position === undefined) return\n\n            const position = this.position.split('-')\n            if (position.length < 1) return\n\n            const prefix = this.grouped\n                ? 'is-grouped-'\n                : 'has-addons-'\n\n            if (this.position) return prefix + position[1]\n        },\n        /**\n        * Formatted message in case it's an array\n        * (each element is separated by <br> tag)\n        */\n        formattedMessage() {\n            if (this.parent && this.parent.hasInnerField) {\n                return '' // Message will be displayed in parent field\n            }\n            if (typeof this.newMessage === 'string') {\n                return [this.newMessage]\n            }\n            let messages = []\n            if (Array.isArray(this.newMessage)) {\n                this.newMessage.forEach((message) => {\n                    if (typeof message === 'string') {\n                        messages.push(message)\n                    } else {\n                        for (let key in message) {\n                            if (message[key]) {\n                                messages.push(key)\n                            }\n                        }\n                    }\n                })\n            } else {\n                for (let key in this.newMessage) {\n                    if (this.newMessage[key]) {\n                        messages.push(key)\n                    }\n                }\n            }\n            return messages.filter((m) => { if (m) return m })\n        },\n        hasLabel() {\n            return this.label || this.$slots.label\n        },\n        hasMessage() {\n            return ((!this.parent || !this.parent.hasInnerField) && this.newMessage) ||\n                this.$slots.message\n        },\n        numberInputClasses() {\n            if (this.$slots.default) {\n                const numberinput = this.$slots.default.filter((node) => node.tag && node.tag.toLowerCase().indexOf('numberinput') >= 0)[0]\n                if (numberinput) {\n                    const classes = ['has-numberinput']\n                    const controlsPosition = numberinput.componentOptions.propsData.controlsPosition\n                    const size = numberinput.componentOptions.propsData.size\n                    if (controlsPosition) {\n                        classes.push(`has-numberinput-${controlsPosition}`)\n                    }\n                    if (size) {\n                        classes.push(`has-numberinput-${size}`)\n                    }\n                    return classes\n                }\n            }\n            return null\n        }\n    },\n    watch: {\n        /**\n        * Set internal type when prop change.\n        */\n        type(value) {\n            this.newType = value\n        },\n\n        /**\n        * Set internal message when prop change.\n        */\n        message(value) {\n            // we deep comparison here becase an innner Field of another Field\n            // receives the message as a brand new array every time, so simple\n            // identity check won't work and will end up with infinite\n            // recursions\n            // https://github.com/buefy/buefy/issues/4018#issuecomment-1985026234\n            if (JSON.stringify(value) !== JSON.stringify(this.newMessage)) {\n                this.newMessage = value\n            }\n        },\n\n        /**\n        * Set parent message if we use Field in Field.\n        */\n        newMessage(value) {\n            if (this.parent && this.parent.hasInnerField) {\n                if (!this.parent.type) {\n                    this.parent.newType = this.newType\n                }\n                if (!this.parent.message) {\n                    this.parent.newMessage = value\n                }\n            }\n        }\n    },\n    methods: {\n        /**\n        * Field has addons if there are more than one slot\n        * (element / component) in the Field.\n        * Or is grouped when prop is set.\n        * Is a method to be called when component re-render.\n        */\n        fieldType() {\n            if (this.grouped) return 'is-grouped'\n            if (this.hasAddons()) return 'has-addons'\n        },\n        hasAddons() {\n            let renderedNode = 0\n            if (this.$slots.default) {\n                renderedNode = this.$slots.default.reduce((i, node) => node.tag ? i + 1 : i, 0)\n            }\n            return (\n                renderedNode > 1 &&\n                this.addons &&\n                !this.horizontal\n            )\n        }\n    },\n    mounted() {\n        if (this.horizontal) {\n            // Bulma docs: .is-normal for any .input or .button\n            const elements = this.$el.querySelectorAll('.input, .select, .button, .textarea, .b-slider')\n            if (elements.length > 0) {\n                this.fieldLabelSize = 'is-normal'\n            }\n        }\n    }\n}\n\n</script>\n",
      "path": "src/components/field/Field.vue"
    },
    {
      "type": "registry:component",
      "target": "components/field/FieldBody.vue",
      "content": "<script>\nexport default {\n    name: 'BFieldBody',\n    props: {\n        message: {\n            type: [String, Array]\n        },\n        type: {\n            type: [String, Object]\n        }\n    },\n    render(createElement) {\n        let first = true\n        return createElement('div', { attrs: { 'class': 'field-body' } }, this.$slots.default.map((element) => {\n            // skip returns and comments\n            if (!element.tag) {\n                return element\n            }\n            let message\n            if (first) {\n                message = this.message\n                first = false\n            }\n            return createElement('b-field', { attrs: { type: this.type, message } }, [element])\n        }))\n    }\n}\n</script>\n",
      "path": "src/components/field/FieldBody.vue"
    },
    {
      "type": "registry:component",
      "target": "components/field/index.js",
      "content": "import Field from '@/components/field/Field'\n\nimport { use, registerComponent } from '@/utils/plugins'\n\nconst Plugin = {\n    install(Vue) {\n        registerComponent(Vue, Field)\n    }\n}\n\nuse(Plugin)\n\nexport default Plugin\n\nexport {\n    Field as BField\n}\n",
      "path": "src/components/field/index.js"
    },
    {
      "type": "registry:lib",
      "target": "utils/config.js",
      "content": "let config = {\n    defaultContainerElement: null,\n    defaultIconPack: 'mdi',\n    defaultIconComponent: null,\n    defaultIconPrev: 'chevron-left',\n    defaultIconNext: 'chevron-right',\n    defaultLocale: undefined,\n    defaultDialogConfirmText: null,\n    defaultDialogCancelText: null,\n    defaultSnackbarDuration: 3500,\n    defaultSnackbarPosition: null,\n    defaultToastDuration: 2000,\n    defaultToastPosition: null,\n    defaultNotificationDuration: 2000,\n    defaultNotificationPosition: null,\n    defaultTooltipType: 'is-primary',\n    defaultTooltipDelay: null,\n    defaultTooltipCloseDelay: null,\n    defaultSidebarDelay: null,\n    defaultInputAutocomplete: 'on',\n    defaultDateFormatter: null,\n    defaultDateParser: null,\n    defaultDateCreator: null,\n    defaultTimeCreator: null,\n    defaultDayNames: null,\n    defaultMonthNames: null,\n    defaultFirstDayOfWeek: null,\n    defaultUnselectableDaysOfWeek: null,\n    defaultTimeFormatter: null,\n    defaultTimeParser: null,\n    defaultModalCanCancel: ['escape', 'x', 'outside', 'button'],\n    defaultModalScroll: null,\n    defaultDatepickerMobileNative: true,\n    defaultTimepickerMobileNative: true,\n    defaultTimepickerMobileModal: true,\n    defaultNoticeQueue: true,\n    defaultInputHasCounter: true,\n    defaultTaginputHasCounter: true,\n    defaultUseHtml5Validation: true,\n    defaultDropdownMobileModal: true,\n    defaultFieldLabelPosition: null,\n    defaultDatepickerYearsRange: [-100, 10],\n    defaultDatepickerNearbyMonthDays: true,\n    defaultDatepickerNearbySelectableMonthDays: false,\n    defaultDatepickerShowWeekNumber: false,\n    defaultDatepickerWeekNumberClickable: false,\n    defaultDatepickerMobileModal: true,\n    defaultTrapFocus: true,\n    defaultAutoFocus: true,\n    defaultButtonRounded: false,\n    defaultSwitchRounded: true,\n    defaultCarouselInterval: 3500,\n    defaultTabsExpanded: false,\n    defaultTabsAnimated: true,\n    defaultTabsType: null,\n    defaultStatusIcon: true,\n    defaultProgrammaticPromise: false,\n    defaultLinkTags: [\n        'a',\n        'button',\n        'input',\n        'router-link',\n        'nuxt-link',\n        'n-link',\n        'RouterLink',\n        'NuxtLink',\n        'NLink'\n    ],\n    defaultImageWebpFallback: null,\n    defaultImageLazy: true,\n    defaultImageResponsive: true,\n    defaultImageRatio: null,\n    defaultImageSrcsetFormatter: null,\n    defaultBreadcrumbTag: 'a',\n    defaultBreadcrumbAlign: 'is-left',\n    defaultBreadcrumbSeparator: '',\n    defaultBreadcrumbSize: 'is-medium',\n    customIconPacks: null\n}\n\nexport { config as default }\n\nexport const setOptions = (options) => { config = options }\n\nexport const setVueInstance = (Vue) => { VueInstance = Vue }\n\nexport let VueInstance\n",
      "path": "src/utils/config.js"
    },
    {
      "type": "registry:lib",
      "target": "utils/plugins.js",
      "content": "\nexport const use = (plugin) => {\n    if (typeof window !== 'undefined' && window.Vue) {\n        window.Vue.use(plugin)\n    }\n}\n\nexport const registerComponent = (Vue, component) => {\n    Vue.component(component.name, component)\n}\n\nexport const registerComponentProgrammatic = (Vue, property, component) => {\n    if (!Vue.prototype.$buefy) Vue.prototype.$buefy = {}\n    Vue.prototype.$buefy[property] = component\n}\n",
      "path": "src/utils/plugins.js"
    }
  ]
}
