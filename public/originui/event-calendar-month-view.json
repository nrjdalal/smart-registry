{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-calendar-month-view",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-popover",
    "date-fns"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/event-calendar/month-view.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useMemo, useState } from \"react\"\nimport {\n  addDays,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  format,\n  isSameDay,\n  isSameMonth,\n  isToday,\n  startOfMonth,\n  startOfWeek,\n} from \"date-fns\"\n\nimport {\n  DraggableEvent,\n  DroppableCell,\n  EventGap,\n  EventHeight,\n  EventItem,\n  getAllEventsForDay,\n  getEventsForDay,\n  getSpanningEventsForDay,\n  sortEvents,\n  useEventVisibility,\n  type CalendarEvent,\n} from \"@/components/event-calendar\"\nimport { DefaultStartHour } from \"@/components/event-calendar/constants\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\ninterface MonthViewProps {\n  currentDate: Date\n  events: CalendarEvent[]\n  onEventSelect: (event: CalendarEvent) => void\n  onEventCreate: (startTime: Date) => void\n}\n\nexport function MonthView({\n  currentDate,\n  events,\n  onEventSelect,\n  onEventCreate,\n}: MonthViewProps) {\n  const days = useMemo(() => {\n    const monthStart = startOfMonth(currentDate)\n    const monthEnd = endOfMonth(monthStart)\n    const calendarStart = startOfWeek(monthStart, { weekStartsOn: 0 })\n    const calendarEnd = endOfWeek(monthEnd, { weekStartsOn: 0 })\n\n    return eachDayOfInterval({ start: calendarStart, end: calendarEnd })\n  }, [currentDate])\n\n  const weekdays = useMemo(() => {\n    return Array.from({ length: 7 }).map((_, i) => {\n      const date = addDays(startOfWeek(new Date()), i)\n      return format(date, \"EEE\")\n    })\n  }, [])\n\n  const weeks = useMemo(() => {\n    const result = []\n    let week = []\n\n    for (let i = 0; i < days.length; i++) {\n      week.push(days[i])\n      if (week.length === 7 || i === days.length - 1) {\n        result.push(week)\n        week = []\n      }\n    }\n\n    return result\n  }, [days])\n\n  const handleEventClick = (event: CalendarEvent, e: React.MouseEvent) => {\n    e.stopPropagation()\n    onEventSelect(event)\n  }\n\n  const [isMounted, setIsMounted] = useState(false)\n  const { contentRef, getVisibleEventCount } = useEventVisibility({\n    eventHeight: EventHeight,\n    eventGap: EventGap,\n  })\n\n  useEffect(() => {\n    setIsMounted(true)\n  }, [])\n\n  return (\n    <div data-slot=\"month-view\" className=\"contents\">\n      <div className=\"border-border/70 grid grid-cols-7 border-b\">\n        {weekdays.map((day) => (\n          <div\n            key={day}\n            className=\"text-muted-foreground/70 py-2 text-center text-sm\"\n          >\n            {day}\n          </div>\n        ))}\n      </div>\n      <div className=\"grid flex-1 auto-rows-fr\">\n        {weeks.map((week, weekIndex) => (\n          <div\n            key={`week-${weekIndex}`}\n            className=\"grid grid-cols-7 [&:last-child>*]:border-b-0\"\n          >\n            {week.map((day, dayIndex) => {\n              if (!day) return null // Skip if day is undefined\n\n              const dayEvents = getEventsForDay(events, day)\n              const spanningEvents = getSpanningEventsForDay(events, day)\n              const isCurrentMonth = isSameMonth(day, currentDate)\n              const cellId = `month-cell-${day.toISOString()}`\n              const allDayEvents = [...spanningEvents, ...dayEvents]\n              const allEvents = getAllEventsForDay(events, day)\n\n              const isReferenceCell = weekIndex === 0 && dayIndex === 0\n              const visibleCount = isMounted\n                ? getVisibleEventCount(allDayEvents.length)\n                : undefined\n              const hasMore =\n                visibleCount !== undefined && allDayEvents.length > visibleCount\n              const remainingCount = hasMore\n                ? allDayEvents.length - visibleCount\n                : 0\n\n              return (\n                <div\n                  key={day.toString()}\n                  className=\"group border-border/70 data-outside-cell:bg-muted/25 data-outside-cell:text-muted-foreground/70 border-r border-b last:border-r-0\"\n                  data-today={isToday(day) || undefined}\n                  data-outside-cell={!isCurrentMonth || undefined}\n                >\n                  <DroppableCell\n                    id={cellId}\n                    date={day}\n                    onClick={() => {\n                      const startTime = new Date(day)\n                      startTime.setHours(DefaultStartHour, 0, 0)\n                      onEventCreate(startTime)\n                    }}\n                  >\n                    <div className=\"group-data-today:bg-primary group-data-today:text-primary-foreground mt-1 inline-flex size-6 items-center justify-center rounded-full text-sm\">\n                      {format(day, \"d\")}\n                    </div>\n                    <div\n                      ref={isReferenceCell ? contentRef : null}\n                      className=\"min-h-[calc((var(--event-height)+var(--event-gap))*2)] sm:min-h-[calc((var(--event-height)+var(--event-gap))*3)] lg:min-h-[calc((var(--event-height)+var(--event-gap))*4)]\"\n                    >\n                      {sortEvents(allDayEvents).map((event, index) => {\n                        const eventStart = new Date(event.start)\n                        const eventEnd = new Date(event.end)\n                        const isFirstDay = isSameDay(day, eventStart)\n                        const isLastDay = isSameDay(day, eventEnd)\n\n                        const isHidden =\n                          isMounted && visibleCount && index >= visibleCount\n\n                        if (!visibleCount) return null\n\n                        if (!isFirstDay) {\n                          return (\n                            <div\n                              key={`spanning-${event.id}-${day.toISOString().slice(0, 10)}`}\n                              className=\"aria-hidden:hidden\"\n                              aria-hidden={isHidden ? \"true\" : undefined}\n                            >\n                              <EventItem\n                                onClick={(e) => handleEventClick(event, e)}\n                                event={event}\n                                view=\"month\"\n                                isFirstDay={isFirstDay}\n                                isLastDay={isLastDay}\n                              >\n                                <div className=\"invisible\" aria-hidden={true}>\n                                  {!event.allDay && (\n                                    <span>\n                                      {format(\n                                        new Date(event.start),\n                                        \"h:mm\"\n                                      )}{\" \"}\n                                    </span>\n                                  )}\n                                  {event.title}\n                                </div>\n                              </EventItem>\n                            </div>\n                          )\n                        }\n\n                        return (\n                          <div\n                            key={event.id}\n                            className=\"aria-hidden:hidden\"\n                            aria-hidden={isHidden ? \"true\" : undefined}\n                          >\n                            <DraggableEvent\n                              event={event}\n                              view=\"month\"\n                              onClick={(e) => handleEventClick(event, e)}\n                              isFirstDay={isFirstDay}\n                              isLastDay={isLastDay}\n                            />\n                          </div>\n                        )\n                      })}\n\n                      {hasMore && (\n                        <Popover modal>\n                          <PopoverTrigger asChild>\n                            <button\n                              className=\"focus-visible:border-ring focus-visible:ring-ring/50 text-muted-foreground hover:text-foreground hover:bg-muted/50 mt-[var(--event-gap)] flex h-[var(--event-height)] w-full items-center overflow-hidden px-1 text-left text-[10px] backdrop-blur-md transition outline-none select-none focus-visible:ring-[3px] sm:px-2 sm:text-xs\"\n                              onClick={(e) => e.stopPropagation()}\n                            >\n                              <span>\n                                + {remainingCount}{\" \"}\n                                <span className=\"max-sm:sr-only\">more</span>\n                              </span>\n                            </button>\n                          </PopoverTrigger>\n                          <PopoverContent\n                            align=\"center\"\n                            className=\"max-w-52 p-3\"\n                            style={\n                              {\n                                \"--event-height\": `${EventHeight}px`,\n                              } as React.CSSProperties\n                            }\n                          >\n                            <div className=\"space-y-2\">\n                              <div className=\"text-sm font-medium\">\n                                {format(day, \"EEE d\")}\n                              </div>\n                              <div className=\"space-y-1\">\n                                {sortEvents(allEvents).map((event) => {\n                                  const eventStart = new Date(event.start)\n                                  const eventEnd = new Date(event.end)\n                                  const isFirstDay = isSameDay(day, eventStart)\n                                  const isLastDay = isSameDay(day, eventEnd)\n\n                                  return (\n                                    <EventItem\n                                      key={event.id}\n                                      onClick={(e) =>\n                                        handleEventClick(event, e)\n                                      }\n                                      event={event}\n                                      view=\"month\"\n                                      isFirstDay={isFirstDay}\n                                      isLastDay={isLastDay}\n                                    />\n                                  )\n                                })}\n                              </div>\n                            </div>\n                          </PopoverContent>\n                        </Popover>\n                      )}\n                    </div>\n                  </DroppableCell>\n                </div>\n              )\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/event-calendar/month-view.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/event-calendar/constants.ts",
      "content": "// Height of calendar events in pixels - used in month, week and day views\nexport const EventHeight = 24\n\n// Vertical gap between events in pixels - controls spacing in month view\nexport const EventGap = 4\n\n// Height of hour cells in week and day views - controls the scale of time display\nexport const WeekCellsHeight = 64\n\n// Number of days to show in the agenda view\nexport const AgendaDaysToShow = 30\n\n// Start and end hours for the week and day views\nexport const StartHour = 0\nexport const EndHour = 24\n\n// Default start and end times\nexport const DefaultStartHour = 9 // 9 AM\nexport const DefaultEndHour = 10 // 10 AM\n",
      "path": "registry/default/components/event-calendar/constants.ts"
    },
    {
      "type": "registry:component",
      "target": "components/event-calendar/index.ts",
      "content": "\"use client\"\n\n// Component exports\nexport { AgendaView } from \"./agenda-view\"\nexport { DayView } from \"./day-view\"\nexport { DraggableEvent } from \"./draggable-event\"\nexport { DroppableCell } from \"./droppable-cell\"\nexport { EventDialog } from \"./event-dialog\"\nexport { EventItem } from \"./event-item\"\nexport { EventsPopup } from \"./events-popup\"\nexport { EventCalendar } from \"./event-calendar\"\nexport { MonthView } from \"./month-view\"\nexport { WeekView } from \"./week-view\"\nexport { CalendarDndProvider, useCalendarDnd } from \"./calendar-dnd-context\"\n\n// Constants and utility exports\nexport * from \"./constants\"\nexport * from \"./utils\"\n\n// Hook exports\nexport * from \"./hooks/use-current-time-indicator\"\nexport * from \"./hooks/use-event-visibility\"\n\n// Type exports\nexport type { CalendarEvent, CalendarView, EventColor } from \"./types\"\n",
      "path": "registry/default/components/event-calendar/index.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/popover.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  showArrow = false,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content> & {\n  showArrow?: boolean\n}) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      >\n        {props.children}\n        {showArrow && (\n          <PopoverPrimitive.Arrow className=\"fill-popover -my-px drop-shadow-[0_1px_0_var(--border)]\" />\n        )}\n      </PopoverPrimitive.Content>\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverAnchor, PopoverContent, PopoverTrigger }\n",
      "path": "registry/default/ui/popover.tsx"
    }
  ]
}
