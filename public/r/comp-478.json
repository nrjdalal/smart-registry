{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "components/smart-registry/comp-478",
  "type": "registry:component",
  "dependencies": [
    "react",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-checkbox",
    "@radix-ui/react-label"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/smart-registry/comp-478.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\nimport { Checkbox } from \"@/registry/default/ui/checkbox\"\nimport { Input } from \"@/registry/default/ui/input\"\nimport { Label } from \"@/registry/default/ui/label\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/default/ui/select\"\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\"\nimport {\n  Column,\n  ColumnDef,\n  ColumnFiltersState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedMinMaxValues,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getSortedRowModel,\n  RowData,\n  SortingState,\n  useReactTable,\n} from \"@tanstack/react-table\"\nimport {\n  ChevronDownIcon,\n  ChevronUpIcon,\n  ExternalLinkIcon,\n  SearchIcon,\n} from \"lucide-react\"\nimport { useId, useMemo, useState } from \"react\"\n\ndeclare module \"@tanstack/react-table\" {\n  //allows us to define custom properties for our columns\n  interface ColumnMeta<TData extends RowData, TValue> {\n    filterVariant?: \"text\" | \"range\" | \"select\"\n  }\n}\n\ntype Item = {\n  id: string\n  keyword: string\n  intents: Array<\n    \"Informational\" | \"Navigational\" | \"Commercial\" | \"Transactional\"\n  >\n  volume: number\n  cpc: number\n  traffic: number\n  link: string\n}\n\nconst columns: ColumnDef<Item>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n  },\n  {\n    header: \"Keyword\",\n    accessorKey: \"keyword\",\n    cell: ({ row }) => (\n      <div className=\"font-medium\">{row.getValue(\"keyword\")}</div>\n    ),\n  },\n  {\n    header: \"Intents\",\n    accessorKey: \"intents\",\n    cell: ({ row }) => {\n      const intents = row.getValue(\"intents\") as string[]\n      return (\n        <div className=\"flex gap-1\">\n          {intents.map((intent) => {\n            const styles = {\n              Informational: \"bg-indigo-400/20 text-indigo-500\",\n              Navigational: \"bg-emerald-400/20 text-emerald-500\",\n              Commercial: \"bg-amber-400/20 text-amber-500\",\n              Transactional: \"bg-rose-400/20 text-rose-500\",\n            }[intent]\n\n            return (\n              <div\n                key={intent}\n                className={cn(\n                  \"flex size-5 items-center justify-center rounded text-xs font-medium\",\n                  styles,\n                )}\n              >\n                {intent.charAt(0)}\n              </div>\n            )\n          })}\n        </div>\n      )\n    },\n    enableSorting: false,\n    meta: {\n      filterVariant: \"select\",\n    },\n    filterFn: (row, id, filterValue) => {\n      const rowValue = row.getValue(id)\n      return Array.isArray(rowValue) && rowValue.includes(filterValue)\n    },\n  },\n  {\n    header: \"Volume\",\n    accessorKey: \"volume\",\n    cell: ({ row }) => {\n      const volume = parseInt(row.getValue(\"volume\"))\n      return new Intl.NumberFormat(\"en-US\", {\n        notation: \"compact\",\n        maximumFractionDigits: 1,\n      }).format(volume)\n    },\n    meta: {\n      filterVariant: \"range\",\n    },\n  },\n  {\n    header: \"CPC\",\n    accessorKey: \"cpc\",\n    cell: ({ row }) => <div>${row.getValue(\"cpc\")}</div>,\n    meta: {\n      filterVariant: \"range\",\n    },\n  },\n  {\n    header: \"Traffic\",\n    accessorKey: \"traffic\",\n    cell: ({ row }) => {\n      const traffic = parseInt(row.getValue(\"traffic\"))\n      return new Intl.NumberFormat(\"en-US\", {\n        notation: \"compact\",\n        maximumFractionDigits: 1,\n      }).format(traffic)\n    },\n    meta: {\n      filterVariant: \"range\",\n    },\n  },\n  {\n    header: \"Link\",\n    accessorKey: \"link\",\n    cell: ({ row }) => (\n      <a className=\"inline-flex items-center gap-1 hover:underline\" href=\"#\">\n        {row.getValue(\"link\")} <ExternalLinkIcon size={12} aria-hidden=\"true\" />\n      </a>\n    ),\n    enableSorting: false,\n  },\n]\n\nconst items: Item[] = [\n  {\n    id: \"1\",\n    keyword: \"react components\",\n    intents: [\"Informational\", \"Navigational\"],\n    volume: 2507,\n    cpc: 2.5,\n    traffic: 88,\n    link: \"https://originui.com\",\n  },\n  {\n    id: \"2\",\n    keyword: \"buy react templates\",\n    intents: [\"Commercial\", \"Transactional\"],\n    volume: 1850,\n    cpc: 4.75,\n    traffic: 65,\n    link: \"https://originui.com/input\",\n  },\n  {\n    id: \"3\",\n    keyword: \"react ui library\",\n    intents: [\"Informational\", \"Commercial\"],\n    volume: 3200,\n    cpc: 3.25,\n    traffic: 112,\n    link: \"https://originui.com/badge\",\n  },\n  {\n    id: \"4\",\n    keyword: \"tailwind components download\",\n    intents: [\"Transactional\"],\n    volume: 890,\n    cpc: 1.95,\n    traffic: 45,\n    link: \"https://originui.com/alert\",\n  },\n  {\n    id: \"5\",\n    keyword: \"react dashboard template free\",\n    intents: [\"Commercial\", \"Transactional\"],\n    volume: 4100,\n    cpc: 5.5,\n    traffic: 156,\n    link: \"https://originui.com/tabs\",\n  },\n  {\n    id: \"6\",\n    keyword: \"how to use react components\",\n    intents: [\"Informational\"],\n    volume: 1200,\n    cpc: 1.25,\n    traffic: 42,\n    link: \"https://originui.com/table\",\n  },\n  {\n    id: \"7\",\n    keyword: \"react ui kit premium\",\n    intents: [\"Commercial\", \"Transactional\"],\n    volume: 760,\n    cpc: 6.8,\n    traffic: 28,\n    link: \"https://originui.com/avatar\",\n  },\n  {\n    id: \"8\",\n    keyword: \"react component documentation\",\n    intents: [\"Informational\", \"Navigational\"],\n    volume: 950,\n    cpc: 1.8,\n    traffic: 35,\n    link: \"https://originui.com\",\n  },\n]\n\nexport default function Component() {\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])\n  const [sorting, setSorting] = useState<SortingState>([\n    {\n      id: \"traffic\",\n      desc: false,\n    },\n  ])\n\n  const table = useReactTable({\n    data: items,\n    columns,\n    state: {\n      sorting,\n      columnFilters,\n    },\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(), //client-side filtering\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(), // client-side faceting\n    getFacetedUniqueValues: getFacetedUniqueValues(), // generate unique values for select filter/autocomplete\n    getFacetedMinMaxValues: getFacetedMinMaxValues(), // generate min/max values for range filter\n    onSortingChange: setSorting,\n    enableSortingRemoval: false,\n  })\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <div className=\"flex flex-wrap gap-3\">\n        {/* Search input */}\n        <div className=\"w-44\">\n          <Filter column={table.getColumn(\"keyword\")!} />\n        </div>\n        {/* Intents select */}\n        <div className=\"w-36\">\n          <Filter column={table.getColumn(\"intents\")!} />\n        </div>\n        {/* Volume inputs */}\n        <div className=\"w-36\">\n          <Filter column={table.getColumn(\"volume\")!} />\n        </div>\n        {/* CPC inputs */}\n        <div className=\"w-36\">\n          <Filter column={table.getColumn(\"cpc\")!} />\n        </div>\n        {/* Traffic inputs */}\n        <div className=\"w-36\">\n          <Filter column={table.getColumn(\"traffic\")!} />\n        </div>\n      </div>\n\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id} className=\"bg-muted/50\">\n              {headerGroup.headers.map((header) => {\n                return (\n                  <TableHead\n                    key={header.id}\n                    className=\"relative h-10 border-t select-none\"\n                    aria-sort={\n                      header.column.getIsSorted() === \"asc\"\n                        ? \"ascending\"\n                        : header.column.getIsSorted() === \"desc\"\n                          ? \"descending\"\n                          : \"none\"\n                    }\n                  >\n                    {header.isPlaceholder ? null : header.column.getCanSort() ? (\n                      <div\n                        className={cn(\n                          header.column.getCanSort() &&\n                            \"flex h-full cursor-pointer items-center justify-between gap-2 select-none\",\n                        )}\n                        onClick={header.column.getToggleSortingHandler()}\n                        onKeyDown={(e) => {\n                          // Enhanced keyboard handling for sorting\n                          if (\n                            header.column.getCanSort() &&\n                            (e.key === \"Enter\" || e.key === \" \")\n                          ) {\n                            e.preventDefault()\n                            header.column.getToggleSortingHandler()?.(e)\n                          }\n                        }}\n                        tabIndex={header.column.getCanSort() ? 0 : undefined}\n                      >\n                        {flexRender(\n                          header.column.columnDef.header,\n                          header.getContext(),\n                        )}\n                        {{\n                          asc: (\n                            <ChevronUpIcon\n                              className=\"shrink-0 opacity-60\"\n                              size={16}\n                              aria-hidden=\"true\"\n                            />\n                          ),\n                          desc: (\n                            <ChevronDownIcon\n                              className=\"shrink-0 opacity-60\"\n                              size={16}\n                              aria-hidden=\"true\"\n                            />\n                          ),\n                        }[header.column.getIsSorted() as string] ?? (\n                          <span className=\"size-4\" aria-hidden=\"true\" />\n                        )}\n                      </div>\n                    ) : (\n                      flexRender(\n                        header.column.columnDef.header,\n                        header.getContext(),\n                      )\n                    )}\n                  </TableHead>\n                )\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row) => (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() && \"selected\"}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n      <p className=\"text-muted-foreground mt-4 text-center text-sm\">\n        Data table with filters made with{\" \"}\n        <a\n          className=\"hover:text-foreground underline\"\n          href=\"https://tanstack.com/table\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          TanStack Table\n        </a>\n      </p>\n    </div>\n  )\n}\n\nfunction Filter({ column }: { column: Column<any, unknown> }) {\n  const id = useId()\n  const columnFilterValue = column.getFilterValue()\n  const { filterVariant } = column.columnDef.meta ?? {}\n  const columnHeader =\n    typeof column.columnDef.header === \"string\" ? column.columnDef.header : \"\"\n  const sortedUniqueValues = useMemo(() => {\n    if (filterVariant === \"range\") return []\n\n    // Get all unique values from the column\n    const values = Array.from(column.getFacetedUniqueValues().keys())\n\n    // If the values are arrays, flatten them and get unique items\n    const flattenedValues = values.reduce((acc: string[], curr) => {\n      if (Array.isArray(curr)) {\n        return [...acc, ...curr]\n      }\n      return [...acc, curr]\n    }, [])\n\n    // Get unique values and sort them\n    return Array.from(new Set(flattenedValues)).sort()\n  }, [column.getFacetedUniqueValues(), filterVariant])\n\n  if (filterVariant === \"range\") {\n    return (\n      <div className=\"*:not-first:mt-2\">\n        <Label>{columnHeader}</Label>\n        <div className=\"flex\">\n          <Input\n            id={`${id}-range-1`}\n            className=\"flex-1 rounded-e-none [-moz-appearance:_textfield] focus:z-10 [&::-webkit-inner-spin-button]:m-0 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:m-0 [&::-webkit-outer-spin-button]:appearance-none\"\n            value={(columnFilterValue as [number, number])?.[0] ?? \"\"}\n            onChange={(e) =>\n              column.setFilterValue((old: [number, number]) => [\n                e.target.value ? Number(e.target.value) : undefined,\n                old?.[1],\n              ])\n            }\n            placeholder=\"Min\"\n            type=\"number\"\n            aria-label={`${columnHeader} min`}\n          />\n          <Input\n            id={`${id}-range-2`}\n            className=\"-ms-px flex-1 rounded-s-none [-moz-appearance:_textfield] focus:z-10 [&::-webkit-inner-spin-button]:m-0 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:m-0 [&::-webkit-outer-spin-button]:appearance-none\"\n            value={(columnFilterValue as [number, number])?.[1] ?? \"\"}\n            onChange={(e) =>\n              column.setFilterValue((old: [number, number]) => [\n                old?.[0],\n                e.target.value ? Number(e.target.value) : undefined,\n              ])\n            }\n            placeholder=\"Max\"\n            type=\"number\"\n            aria-label={`${columnHeader} max`}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  if (filterVariant === \"select\") {\n    return (\n      <div className=\"*:not-first:mt-2\">\n        <Label htmlFor={`${id}-select`}>{columnHeader}</Label>\n        <Select\n          value={columnFilterValue?.toString() ?? \"all\"}\n          onValueChange={(value) => {\n            column.setFilterValue(value === \"all\" ? undefined : value)\n          }}\n        >\n          <SelectTrigger id={`${id}-select`}>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All</SelectItem>\n            {sortedUniqueValues.map((value) => (\n              <SelectItem key={String(value)} value={String(value)}>\n                {String(value)}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"*:not-first:mt-2\">\n      <Label htmlFor={`${id}-input`}>{columnHeader}</Label>\n      <div className=\"relative\">\n        <Input\n          id={`${id}-input`}\n          className=\"peer ps-9\"\n          value={(columnFilterValue ?? \"\") as string}\n          onChange={(e) => column.setFilterValue(e.target.value)}\n          placeholder={`Search ${columnHeader.toLowerCase()}`}\n          type=\"text\"\n        />\n        <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n          <SearchIcon size={16} />\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/comp-478.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/smart-registry/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "registry/default/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/smart-registry/checkbox.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport * as React from \"react\"\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-500\",\n        className,\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"grid place-content-center text-current\"\n      >\n        {props.checked === \"indeterminate\" ? (\n          <svg\n            width=\"9\"\n            height=\"9\"\n            viewBox=\"0 0 9 9\"\n            fill=\"currentcolor\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M0.75 4.5C0.75 4.08579 1.08579 3.75 1.5 3.75H7.5C7.91421 3.75 8.25 4.08579 8.25 4.5C8.25 4.91421 7.91421 5.25 7.5 5.25H1.5C1.08579 5.25 0.75 4.91421 0.75 4.5Z\"\n            />\n          </svg>\n        ) : (\n          <svg\n            width=\"9\"\n            height=\"9\"\n            viewBox=\"0 0 9 9\"\n            fill=\"currentcolor\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M8.53547 0.62293C8.88226 0.849446 8.97976 1.3142 8.75325 1.66099L4.5083 8.1599C4.38833 8.34356 4.19397 8.4655 3.9764 8.49358C3.75883 8.52167 3.53987 8.45309 3.3772 8.30591L0.616113 5.80777C0.308959 5.52987 0.285246 5.05559 0.563148 4.74844C0.84105 4.44128 1.31533 4.41757 1.62249 4.69547L3.73256 6.60459L7.49741 0.840706C7.72393 0.493916 8.18868 0.396414 8.53547 0.62293Z\"\n            />\n          </svg>\n        )}\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n",
      "path": "registry/default/ui/checkbox.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/smart-registry/input.tsx",
      "content": "import { cn } from \"@/registry/default/lib/utils\"\nimport * as React from \"react\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"border-input file:text-foreground placeholder:text-muted-foreground/70 flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-sm shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        type === \"search\" &&\n          \"[&::-webkit-search-cancel-button]:appearance-none [&::-webkit-search-decoration]:appearance-none [&::-webkit-search-results-button]:appearance-none [&::-webkit-search-results-decoration]:appearance-none\",\n        type === \"file\" &&\n          \"text-muted-foreground/70 file:border-input file:text-foreground p-0 pr-3 italic file:me-3 file:h-full file:border-0 file:border-r file:border-solid file:bg-transparent file:px-3 file:text-sm file:font-medium file:not-italic\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
      "path": "registry/default/ui/input.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/smart-registry/label.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport * as React from \"react\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"text-foreground text-sm leading-4 font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
      "path": "registry/default/ui/label.tsx"
    }
  ]
}