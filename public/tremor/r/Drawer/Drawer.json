{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Drawer/Drawer",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-dialog",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:file",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    },
    {
      "type": "registry:component",
      "target": "components/Button/Button.tsx",
      "content": "// Tremor Button [v0.2.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx\"\nimport { focusRing } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"disabled:dark:bg-blue-800 disabled:dark:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"disabled:dark:bg-gray-800 disabled:dark:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"disabled:dark:bg-red-950 disabled:dark:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Drawer/Drawer.tsx",
      "content": "// Tremor Drawer [v0.0.2]\n\nimport * as React from \"react\"\nimport * as DrawerPrimitives from \"@radix-ui/react-dialog\"\nimport { RiCloseLine } from \"@remixicon/react\"\n\nimport { cx } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx\"\nimport { focusRing } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/focusRing\"\nimport { Button } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/components/Button/Button\"\n\nconst Drawer = (\n  props: React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Root>,\n) => {\n  return <DrawerPrimitives.Root tremor-id=\"tremor-raw\" {...props} />\n}\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Trigger>\n>(({ className, ...props }, ref) => {\n  return (\n    <DrawerPrimitives.Trigger ref={ref} className={cx(className)} {...props} />\n  )\n})\nDrawerTrigger.displayName = \"Drawer.Trigger\"\n\nconst DrawerClose = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Close>\n>(({ className, ...props }, ref) => {\n  return (\n    <DrawerPrimitives.Close ref={ref} className={cx(className)} {...props} />\n  )\n})\nDrawerClose.displayName = \"Drawer.Close\"\n\nconst DrawerPortal = DrawerPrimitives.Portal\n\nDrawerPortal.displayName = \"DrawerPortal\"\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Overlay>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DrawerPrimitives.Overlay\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"fixed inset-0 z-50 overflow-y-auto\",\n        // background color\n        \"bg-black/30\",\n        // transition\n        \"data-[state=closed]:animate-hide data-[state=open]:animate-dialogOverlayShow\",\n        className,\n      )}\n      {...props}\n      style={{\n        animationDuration: \"400ms\",\n        animationFillMode: \"backwards\",\n      }}\n    />\n  )\n})\n\nDrawerOverlay.displayName = \"DrawerOverlay\"\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Content>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DrawerPortal>\n      <DrawerOverlay>\n        <DrawerPrimitives.Content\n          ref={forwardedRef}\n          className={cx(\n            // base\n            \"fixed inset-y-2 z-50 mx-auto flex w-[95vw] flex-1 flex-col overflow-y-auto rounded-md border p-4 shadow-lg focus:outline-none max-sm:inset-x-2 sm:inset-y-2 sm:right-2 sm:max-w-lg sm:p-6\",\n            // border color\n            \"border-gray-200 dark:border-gray-900\",\n            // background color\n            \"bg-white dark:bg-[#090E1A]\",\n            // transition\n            \"data-[state=closed]:animate-drawerSlideRightAndFade data-[state=open]:animate-drawerSlideLeftAndFade\",\n            focusRing,\n            className,\n          )}\n          {...props}\n        />\n      </DrawerOverlay>\n    </DrawerPortal>\n  )\n})\n\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ children, className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className=\"flex items-start justify-between gap-x-4 border-b border-gray-200 pb-4 dark:border-gray-900\"\n      {...props}\n    >\n      <div className={cx(\"mt-1 flex flex-col gap-y-1\", className)}>\n        {children}\n      </div>\n      <DrawerPrimitives.Close asChild>\n        <Button\n          variant=\"ghost\"\n          className=\"aspect-square p-1 hover:bg-gray-100 hover:dark:bg-gray-400/10\"\n        >\n          <RiCloseLine className=\"size-6\" aria-hidden=\"true\" />\n        </Button>\n      </DrawerPrimitives.Close>\n    </div>\n  )\n})\n\nDrawerHeader.displayName = \"Drawer.Header\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Title>\n>(({ className, ...props }, forwardedRef) => (\n  <DrawerPrimitives.Title\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-base font-semibold\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nDrawerTitle.displayName = \"DrawerTitle\"\n\nconst DrawerBody = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => {\n  return <div ref={ref} className={cx(\"flex-1 py-4\", className)} {...props} />\n})\nDrawerBody.displayName = \"Drawer.Body\"\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Description>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DrawerPrimitives.Description\n      ref={forwardedRef}\n      className={cx(\"text-gray-500 dark:text-gray-500\", className)}\n      {...props}\n    />\n  )\n})\n\nDrawerDescription.displayName = \"DrawerDescription\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cx(\n        \"flex flex-col-reverse border-t border-gray-200 pt-4 sm:flex-row sm:justify-end sm:space-x-2 dark:border-gray-900\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nDrawerFooter.displayName = \"DrawerFooter\"\n\nexport {\n  Drawer,\n  DrawerBody,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n}\n",
      "path": "src/components/Drawer/Drawer.tsx"
    }
  ]
}
