{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "SparkChart/SparkChart",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "react",
    "recharts",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/SparkChart/SparkChart.tsx",
      "content": "// Tremor Spark Chart [v0.1.2]\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\"use client\"\n\nimport React from \"react\"\nimport {\n  Area,\n  Bar,\n  Line,\n  AreaChart as RechartsAreaChart,\n  BarChart as RechartsBarChart,\n  LineChart as RechartsLineChart,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n} from \"recharts\"\nimport { AxisDomain } from \"recharts/types/util/types\"\n\nimport {\n  AvailableChartColors,\n  AvailableChartColorsKeys,\n  constructCategoryColors,\n  getColorClassName,\n} from \"@/utils/chartColors\"\nimport { cx } from \"@/utils/cx\"\nimport { getYAxisDomain } from \"@/utils/getYAxisDomain\"\n\n//#region SparkAreaChart\n\ninterface SparkAreaChartProps extends React.HTMLAttributes<HTMLDivElement> {\n  data: Record<string, any>[]\n  categories: string[]\n  index: string\n  colors?: AvailableChartColorsKeys[]\n  autoMinValue?: boolean\n  minValue?: number\n  maxValue?: number\n  connectNulls?: boolean\n  type?: \"default\" | \"stacked\" | \"percent\"\n  fill?: \"gradient\" | \"solid\" | \"none\"\n}\n\nconst SparkAreaChart = React.forwardRef<HTMLDivElement, SparkAreaChartProps>(\n  (props, forwardedRef) => {\n    const {\n      data = [],\n      categories = [],\n      index,\n      colors = AvailableChartColors,\n      autoMinValue = false,\n      minValue,\n      maxValue,\n      connectNulls = false,\n      type = \"default\",\n      className,\n      fill = \"gradient\",\n      ...other\n    } = props\n\n    const categoryColors = constructCategoryColors(categories, colors)\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\n    const stacked = type === \"stacked\" || type === \"percent\"\n    const areaId = React.useId()\n\n    const getFillContent = (fillType: SparkAreaChartProps[\"fill\"]) => {\n      switch (fillType) {\n        case \"none\":\n          return <stop stopColor=\"currentColor\" stopOpacity={0} />\n        case \"gradient\":\n          return (\n            <>\n              <stop offset=\"5%\" stopColor=\"currentColor\" stopOpacity={0.4} />\n              <stop offset=\"95%\" stopColor=\"currentColor\" stopOpacity={0} />\n            </>\n          )\n        case \"solid\":\n          return <stop stopColor=\"currentColor\" stopOpacity={0.3} />\n        default:\n          return <stop stopColor=\"currentColor\" stopOpacity={0.3} />\n      }\n    }\n\n    return (\n      <div\n        ref={forwardedRef}\n        className={cx(\"h-12 w-28\", className)}\n        tremor-id=\"tremor-raw\"\n        {...other}\n      >\n        <ResponsiveContainer>\n          <RechartsAreaChart\n            data={data}\n            margin={{\n              bottom: 1,\n              left: 1,\n              right: 1,\n              top: 1,\n            }}\n            stackOffset={type === \"percent\" ? \"expand\" : undefined}\n          >\n            <XAxis hide dataKey={index} />\n            <YAxis hide={true} domain={yAxisDomain as AxisDomain} />\n\n            {categories.map((category) => {\n              const categoryId = `${areaId}-${category.replace(/[^a-zA-Z0-9]/g, \"\")}`\n              return (\n                <React.Fragment key={category}>\n                  <defs>\n                    <linearGradient\n                      key={category}\n                      className={cx(\n                        getColorClassName(\n                          categoryColors.get(\n                            category,\n                          ) as AvailableChartColorsKeys,\n                          \"text\",\n                        ),\n                      )}\n                      id={categoryId}\n                      x1=\"0\"\n                      y1=\"0\"\n                      x2=\"0\"\n                      y2=\"1\"\n                    >\n                      {getFillContent(fill)}\n                    </linearGradient>\n                  </defs>\n                  <Area\n                    className={cx(\n                      getColorClassName(\n                        categoryColors.get(\n                          category,\n                        ) as AvailableChartColorsKeys,\n                        \"stroke\",\n                      ),\n                    )}\n                    dot={false}\n                    strokeOpacity={1}\n                    name={category}\n                    type=\"linear\"\n                    dataKey={category}\n                    stroke=\"\"\n                    strokeWidth={2}\n                    strokeLinejoin=\"round\"\n                    strokeLinecap=\"round\"\n                    isAnimationActive={false}\n                    connectNulls={connectNulls}\n                    stackId={stacked ? \"stack\" : undefined}\n                    fill={`url(#${categoryId})`}\n                  />\n                </React.Fragment>\n              )\n            })}\n          </RechartsAreaChart>\n        </ResponsiveContainer>\n      </div>\n    )\n  },\n)\n\nSparkAreaChart.displayName = \"SparkAreaChart\"\n\n//#region SparkLineChart\n\ninterface SparkLineChartProps extends React.HTMLAttributes<HTMLDivElement> {\n  data: Record<string, any>[]\n  categories: string[]\n  index: string\n  colors?: AvailableChartColorsKeys[]\n  autoMinValue?: boolean\n  minValue?: number\n  maxValue?: number\n  connectNulls?: boolean\n}\n\nconst SparkLineChart = React.forwardRef<HTMLDivElement, SparkLineChartProps>(\n  (props, forwardedRef) => {\n    const {\n      data = [],\n      categories = [],\n      index,\n      colors = AvailableChartColors,\n      autoMinValue = false,\n      minValue,\n      maxValue,\n      connectNulls = false,\n      className,\n      ...other\n    } = props\n\n    const categoryColors = constructCategoryColors(categories, colors)\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\n\n    return (\n      <div\n        ref={forwardedRef}\n        className={cx(\"h-12 w-28\", className)}\n        tremor-id=\"tremor-raw\"\n        {...other}\n      >\n        <ResponsiveContainer>\n          <RechartsLineChart\n            data={data}\n            margin={{\n              bottom: 1,\n              left: 1,\n              right: 1,\n              top: 1,\n            }}\n          >\n            <XAxis hide dataKey={index} />\n            <YAxis hide={true} domain={yAxisDomain as AxisDomain} />\n            {categories.map((category) => (\n              <Line\n                className={cx(\n                  getColorClassName(\n                    categoryColors.get(category) as AvailableChartColorsKeys,\n                    \"stroke\",\n                  ),\n                )}\n                dot={false}\n                strokeOpacity={1}\n                key={category}\n                name={category}\n                type=\"linear\"\n                dataKey={category}\n                stroke=\"\"\n                strokeWidth={2}\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n                isAnimationActive={false}\n                connectNulls={connectNulls}\n              />\n            ))}\n          </RechartsLineChart>\n        </ResponsiveContainer>\n      </div>\n    )\n  },\n)\n\nSparkLineChart.displayName = \"SparkLineChart\"\n\n//#region SparkBarChart\n\ninterface BarChartProps extends React.HTMLAttributes<HTMLDivElement> {\n  data: Record<string, any>[]\n  index: string\n  categories: string[]\n  colors?: AvailableChartColorsKeys[]\n  autoMinValue?: boolean\n  minValue?: number\n  maxValue?: number\n  barCategoryGap?: string | number\n  type?: \"default\" | \"stacked\" | \"percent\"\n}\n\nconst SparkBarChart = React.forwardRef<HTMLDivElement, BarChartProps>(\n  (props, forwardedRef) => {\n    const {\n      data = [],\n      categories = [],\n      index,\n      colors = AvailableChartColors,\n      autoMinValue = false,\n      minValue,\n      maxValue,\n      barCategoryGap,\n      type = \"default\",\n      className,\n      ...other\n    } = props\n\n    const categoryColors = constructCategoryColors(categories, colors)\n\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\n    const stacked = type === \"stacked\" || type === \"percent\"\n\n    return (\n      <div\n        ref={forwardedRef}\n        className={cx(\"h-12 w-28\", className)}\n        tremor-id=\"tremor-raw\"\n        {...other}\n      >\n        <ResponsiveContainer>\n          <RechartsBarChart\n            data={data}\n            margin={{\n              bottom: 1,\n              left: 1,\n              right: 1,\n              top: 1,\n            }}\n            stackOffset={type === \"percent\" ? \"expand\" : undefined}\n            barCategoryGap={barCategoryGap}\n          >\n            <XAxis hide dataKey={index} />\n            <YAxis hide={true} domain={yAxisDomain as AxisDomain} />\n\n            {categories.map((category) => (\n              <Bar\n                className={cx(\n                  getColorClassName(\n                    categoryColors.get(category) as AvailableChartColorsKeys,\n                    \"fill\",\n                  ),\n                )}\n                key={category}\n                name={category}\n                type=\"linear\"\n                dataKey={category}\n                stackId={stacked ? \"stack\" : undefined}\n                isAnimationActive={false}\n                fill=\"\"\n              />\n            ))}\n          </RechartsBarChart>\n        </ResponsiveContainer>\n      </div>\n    )\n  },\n)\n\nSparkBarChart.displayName = \"SparkBarChart\"\n\nexport { SparkAreaChart, SparkLineChart, SparkBarChart }\n",
      "path": "src/components/SparkChart/SparkChart.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/chartColors.ts",
      "content": "// Tremor chartColors [v0.1.0]\n\nexport type ColorUtility = \"bg\" | \"stroke\" | \"fill\" | \"text\"\n\nexport const chartColors = {\n  blue: {\n    bg: \"bg-blue-500\",\n    stroke: \"stroke-blue-500\",\n    fill: \"fill-blue-500\",\n    text: \"text-blue-500\",\n  },\n  emerald: {\n    bg: \"bg-emerald-500\",\n    stroke: \"stroke-emerald-500\",\n    fill: \"fill-emerald-500\",\n    text: \"text-emerald-500\",\n  },\n  violet: {\n    bg: \"bg-violet-500\",\n    stroke: \"stroke-violet-500\",\n    fill: \"fill-violet-500\",\n    text: \"text-violet-500\",\n  },\n  amber: {\n    bg: \"bg-amber-500\",\n    stroke: \"stroke-amber-500\",\n    fill: \"fill-amber-500\",\n    text: \"text-amber-500\",\n  },\n  gray: {\n    bg: \"bg-gray-500\",\n    stroke: \"stroke-gray-500\",\n    fill: \"fill-gray-500\",\n    text: \"text-gray-500\",\n  },\n  cyan: {\n    bg: \"bg-cyan-500\",\n    stroke: \"stroke-cyan-500\",\n    fill: \"fill-cyan-500\",\n    text: \"text-cyan-500\",\n  },\n  pink: {\n    bg: \"bg-pink-500\",\n    stroke: \"stroke-pink-500\",\n    fill: \"fill-pink-500\",\n    text: \"text-pink-500\",\n  },\n  lime: {\n    bg: \"bg-lime-500\",\n    stroke: \"stroke-lime-500\",\n    fill: \"fill-lime-500\",\n    text: \"text-lime-500\",\n  },\n  fuchsia: {\n    bg: \"bg-fuchsia-500\",\n    stroke: \"stroke-fuchsia-500\",\n    fill: \"fill-fuchsia-500\",\n    text: \"text-fuchsia-500\",\n  },\n} as const satisfies {\n  [color: string]: {\n    [key in ColorUtility]: string\n  }\n}\n\nexport type AvailableChartColorsKeys = keyof typeof chartColors\n\nexport const AvailableChartColors: AvailableChartColorsKeys[] = Object.keys(\n  chartColors,\n) as Array<AvailableChartColorsKeys>\n\nexport const constructCategoryColors = (\n  categories: string[],\n  colors: AvailableChartColorsKeys[],\n): Map<string, AvailableChartColorsKeys> => {\n  const categoryColors = new Map<string, AvailableChartColorsKeys>()\n  categories.forEach((category, index) => {\n    categoryColors.set(category, colors[index % colors.length])\n  })\n  return categoryColors\n}\n\nexport const getColorClassName = (\n  color: AvailableChartColorsKeys,\n  type: ColorUtility,\n): string => {\n  const fallbackColor = {\n    bg: \"bg-gray-500\",\n    stroke: \"stroke-gray-500\",\n    fill: \"fill-gray-500\",\n    text: \"text-gray-500\",\n  }\n  return chartColors[color]?.[type] ?? fallbackColor[type]\n}\n",
      "path": "src/utils/chartColors.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/getYAxisDomain.ts",
      "content": "// Tremor getYAxisDomain [v0.0.0]\n\nexport const getYAxisDomain = (\n  autoMinValue: boolean,\n  minValue: number | undefined,\n  maxValue: number | undefined,\n) => {\n  const minDomain = autoMinValue ? \"auto\" : (minValue ?? 0)\n  const maxDomain = maxValue ?? \"auto\"\n  return [minDomain, maxDomain]\n}\n",
      "path": "src/utils/getYAxisDomain.ts"
    }
  ]
}
