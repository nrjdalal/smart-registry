{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-slider-with-input",
  "type": "registry:hook",
  "dependencies": [
    "react"
  ],
  "files": [
    {
      "type": "registry:hook",
      "target": "hooks/use-slider-with-input.ts",
      "content": "\"use client\"\n\nimport { useCallback, useState } from \"react\"\n\ntype UseSliderWithInputProps = {\n  minValue?: number\n  maxValue?: number\n  initialValue?: number[]\n  defaultValue?: number[]\n}\n\nexport function useSliderWithInput({\n  minValue = 0,\n  maxValue = 100,\n  initialValue = [minValue],\n  defaultValue = [minValue],\n}: UseSliderWithInputProps) {\n  const [sliderValue, setSliderValue] = useState(initialValue)\n  const [inputValues, setInputValues] = useState(\n    initialValue.map((v) => v.toString())\n  )\n\n  const showReset =\n    sliderValue.length === defaultValue.length &&\n    !sliderValue.every((value, index) => value === defaultValue[index])\n\n  const validateAndUpdateValue = useCallback(\n    (rawValue: string, index: number) => {\n      if (rawValue === \"\" || rawValue === \"-\") {\n        const newInputValues = [...inputValues]\n        newInputValues[index] = \"0\"\n        setInputValues(newInputValues)\n\n        const newSliderValues = [...sliderValue]\n        newSliderValues[index] = 0\n        setSliderValue(newSliderValues)\n        return\n      }\n\n      const numValue = parseFloat(rawValue)\n\n      if (isNaN(numValue)) {\n        const newInputValues = [...inputValues]\n        newInputValues[index] = sliderValue[index]!.toString()\n        setInputValues(newInputValues)\n        return\n      }\n\n      let clampedValue = Math.min(maxValue, Math.max(minValue, numValue))\n\n      if (sliderValue.length > 1) {\n        if (index === 0) {\n          clampedValue = Math.min(clampedValue, sliderValue[1]!)\n        } else {\n          clampedValue = Math.max(clampedValue, sliderValue[0]!)\n        }\n      }\n\n      const newSliderValues = [...sliderValue]\n      newSliderValues[index] = clampedValue\n      setSliderValue(newSliderValues)\n\n      const newInputValues = [...inputValues]\n      newInputValues[index] = clampedValue.toString()\n      setInputValues(newInputValues)\n    },\n    [sliderValue, inputValues, minValue, maxValue]\n  )\n\n  const handleInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>, index: number) => {\n      const newValue = e.target.value\n      if (newValue === \"\" || /^-?\\d*\\.?\\d*$/.test(newValue)) {\n        const newInputValues = [...inputValues]\n        newInputValues[index] = newValue\n        setInputValues(newInputValues)\n      }\n    },\n    [inputValues]\n  )\n\n  const handleSliderChange = useCallback((newValue: number[]) => {\n    setSliderValue(newValue)\n    setInputValues(newValue.map((v) => v.toString()))\n  }, [])\n\n  const resetToDefault = useCallback(() => {\n    setSliderValue(defaultValue)\n    setInputValues(defaultValue.map((v) => v.toString()))\n  }, [defaultValue])\n\n  return {\n    sliderValue,\n    inputValues,\n    validateAndUpdateValue,\n    handleInputChange,\n    handleSliderChange,\n    resetToDefault,\n    showReset,\n  }\n}\n",
      "path": "registry/default/hooks/use-slider-with-input.ts"
    }
  ]
}
