{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "navbar/NavbarItem",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "target": "components/navbar/NavbarItem.vue",
      "content": "<template>\n    <component\n        :is=\"tag\"\n        class=\"navbar-item\"\n        :class=\"{\n            'is-active': active\n        }\"\n        v-bind=\"$attrs\"\n        v-on=\"$listeners\">\n        <slot/>\n    </component>\n</template>\n\n<script>\nconst clickableWhiteList = ['div', 'span', 'input']\n\nexport default {\n    name: 'BNavbarItem',\n    inheritAttrs: false,\n    props: {\n        tag: {\n            type: String,\n            default: 'a'\n        },\n        active: Boolean\n    },\n    methods: {\n        /**\n         * Keypress event that is bound to the document\n         */\n        keyPress({ key }) {\n            if (key === 'Escape' || key === 'Esc') {\n                this.closeMenuRecursive(this, ['NavBar'])\n            }\n        },\n        /**\n         * Close parent if clicked outside.\n         */\n        handleClickEvent(event) {\n            const isOnWhiteList = clickableWhiteList.some((item) => item === event.target.localName)\n            if (!isOnWhiteList) {\n                const parent = this.closeMenuRecursive(this, ['NavbarDropdown', 'NavBar'])\n                if (parent && parent.$data._isNavbarDropdown) this.closeMenuRecursive(parent, ['NavBar'])\n            }\n        },\n        /**\n         * Close parent recursively\n         */\n        closeMenuRecursive(current, targetComponents) {\n            if (!current.$parent) return null\n            const foundItem = targetComponents.reduce((acc, item) => {\n                if (current.$parent.$data[`_is${item}`]) {\n                    current.$parent.closeMenu()\n                    return current.$parent\n                }\n                return acc\n            }, null)\n            return foundItem || this.closeMenuRecursive(current.$parent, targetComponents)\n        }\n    },\n    mounted() {\n        if (typeof window !== 'undefined') {\n            this.$el.addEventListener('click', this.handleClickEvent)\n            document.addEventListener('keyup', this.keyPress)\n        }\n    },\n    beforeDestroy() {\n        if (typeof window !== 'undefined') {\n            this.$el.removeEventListener('click', this.handleClickEvent)\n            document.removeEventListener('keyup', this.keyPress)\n        }\n    }\n}\n</script>\n",
      "path": "src/components/navbar/NavbarItem.vue"
    }
  ]
}
