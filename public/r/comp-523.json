{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-523",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "lucide-react",
    "react",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/smart-registry/comp-523.tsx",
      "content": "import {\n  Stepper,\n  StepperIndicator,\n  StepperItem,\n  StepperSeparator,\n  StepperTitle,\n  StepperTrigger,\n} from \"@/components/ui/stepper\"\n\nconst steps = [\n  {\n    step: 1,\n    title: \"Step One\",\n  },\n  {\n    step: 2,\n    title: \"Step Two\",\n  },\n  {\n    step: 3,\n    title: \"Step Three\",\n  },\n]\n\nexport default function Component() {\n  return (\n    <div className=\"space-y-8 text-center\">\n      <Stepper defaultValue={2}>\n        {steps.map(({ step, title }) => (\n          <StepperItem\n            key={step}\n            step={step}\n            className=\"not-last:flex-1 max-md:items-start\"\n          >\n            <StepperTrigger className=\"rounded max-md:flex-col\">\n              <StepperIndicator />\n              <div className=\"text-center md:text-left\">\n                <StepperTitle>{title}</StepperTitle>\n              </div>\n            </StepperTrigger>\n            {step < steps.length && (\n              <StepperSeparator className=\"max-md:mt-3.5 md:mx-4\" />\n            )}\n          </StepperItem>\n        ))}\n      </Stepper>\n      <p\n        className=\"text-muted-foreground mt-2 text-xs\"\n        role=\"region\"\n        aria-live=\"polite\"\n      >\n        Stepper with inline titles\n      </p>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/comp-523.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/stepper.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { CheckIcon, LoaderCircleIcon } from \"lucide-react\"\nimport * as React from \"react\"\nimport { createContext, useContext } from \"react\"\n\n// Types\ntype StepperContextValue = {\n  activeStep: number\n  setActiveStep: (step: number) => void\n  orientation: \"horizontal\" | \"vertical\"\n}\n\ntype StepItemContextValue = {\n  step: number\n  state: StepState\n  isDisabled: boolean\n  isLoading: boolean\n}\n\ntype StepState = \"active\" | \"completed\" | \"inactive\" | \"loading\"\n\n// Contexts\nconst StepperContext = createContext<StepperContextValue | undefined>(undefined)\nconst StepItemContext = createContext<StepItemContextValue | undefined>(\n  undefined,\n)\n\nconst useStepper = () => {\n  const context = useContext(StepperContext)\n  if (!context) {\n    throw new Error(\"useStepper must be used within a Stepper\")\n  }\n  return context\n}\n\nconst useStepItem = () => {\n  const context = useContext(StepItemContext)\n  if (!context) {\n    throw new Error(\"useStepItem must be used within a StepperItem\")\n  }\n  return context\n}\n\n// Components\ninterface StepperProps extends React.HTMLAttributes<HTMLDivElement> {\n  defaultValue?: number\n  value?: number\n  onValueChange?: (value: number) => void\n  orientation?: \"horizontal\" | \"vertical\"\n}\n\nfunction Stepper({\n  defaultValue = 0,\n  value,\n  onValueChange,\n  orientation = \"horizontal\",\n  className,\n  ...props\n}: StepperProps) {\n  const [activeStep, setInternalStep] = React.useState(defaultValue)\n\n  const setActiveStep = React.useCallback(\n    (step: number) => {\n      if (value === undefined) {\n        setInternalStep(step)\n      }\n      onValueChange?.(step)\n    },\n    [value, onValueChange],\n  )\n\n  const currentStep = value ?? activeStep\n\n  return (\n    <StepperContext.Provider\n      value={{\n        activeStep: currentStep,\n        setActiveStep,\n        orientation,\n      }}\n    >\n      <div\n        data-slot=\"stepper\"\n        className={cn(\n          \"group/stepper inline-flex data-[orientation=horizontal]:w-full data-[orientation=horizontal]:flex-row data-[orientation=vertical]:flex-col\",\n          className,\n        )}\n        data-orientation={orientation}\n        {...props}\n      />\n    </StepperContext.Provider>\n  )\n}\n\n// StepperItem\ninterface StepperItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  step: number\n  completed?: boolean\n  disabled?: boolean\n  loading?: boolean\n}\n\nfunction StepperItem({\n  step,\n  completed = false,\n  disabled = false,\n  loading = false,\n  className,\n  children,\n  ...props\n}: StepperItemProps) {\n  const { activeStep } = useStepper()\n\n  const state: StepState =\n    completed || step < activeStep\n      ? \"completed\"\n      : activeStep === step\n        ? \"active\"\n        : \"inactive\"\n\n  const isLoading = loading && step === activeStep\n\n  return (\n    <StepItemContext.Provider\n      value={{ step, state, isDisabled: disabled, isLoading }}\n    >\n      <div\n        data-slot=\"stepper-item\"\n        className={cn(\n          \"group/step flex items-center group-data-[orientation=horizontal]/stepper:flex-row group-data-[orientation=vertical]/stepper:flex-col\",\n          className,\n        )}\n        data-state={state}\n        {...(isLoading ? { \"data-loading\": true } : {})}\n        {...props}\n      >\n        {children}\n      </div>\n    </StepItemContext.Provider>\n  )\n}\n\n// StepperTrigger\ninterface StepperTriggerProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  asChild?: boolean\n}\n\nfunction StepperTrigger({\n  asChild = false,\n  className,\n  children,\n  ...props\n}: StepperTriggerProps) {\n  const { setActiveStep } = useStepper()\n  const { step, isDisabled } = useStepItem()\n\n  if (asChild) {\n    const Comp = asChild ? Slot : \"span\"\n    return (\n      <Comp data-slot=\"stepper-trigger\" className={className}>\n        {children}\n      </Comp>\n    )\n  }\n\n  return (\n    <button\n      data-slot=\"stepper-trigger\"\n      className={cn(\n        \"focus-visible:border-ring focus-visible:ring-ring/50 inline-flex items-center gap-3 rounded-full outline-none focus-visible:z-10 focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50\",\n        className,\n      )}\n      onClick={() => setActiveStep(step)}\n      disabled={isDisabled}\n      {...props}\n    >\n      {children}\n    </button>\n  )\n}\n\n// StepperIndicator\ninterface StepperIndicatorProps extends React.HTMLAttributes<HTMLDivElement> {\n  asChild?: boolean\n}\n\nfunction StepperIndicator({\n  asChild = false,\n  className,\n  children,\n  ...props\n}: StepperIndicatorProps) {\n  const { state, step, isLoading } = useStepItem()\n\n  return (\n    <span\n      data-slot=\"stepper-indicator\"\n      className={cn(\n        \"bg-muted text-muted-foreground data-[state=active]:bg-primary data-[state=completed]:bg-primary data-[state=active]:text-primary-foreground data-[state=completed]:text-primary-foreground relative flex size-6 shrink-0 items-center justify-center rounded-full text-xs font-medium\",\n        className,\n      )}\n      data-state={state}\n      {...props}\n    >\n      {asChild ? (\n        children\n      ) : (\n        <>\n          <span className=\"transition-all group-data-loading/step:scale-0 group-data-loading/step:opacity-0 group-data-loading/step:transition-none group-data-[state=completed]/step:scale-0 group-data-[state=completed]/step:opacity-0\">\n            {step}\n          </span>\n          <CheckIcon\n            className=\"absolute scale-0 opacity-0 transition-all group-data-[state=completed]/step:scale-100 group-data-[state=completed]/step:opacity-100\"\n            size={16}\n            aria-hidden=\"true\"\n          />\n          {isLoading && (\n            <span className=\"absolute transition-all\">\n              <LoaderCircleIcon\n                className=\"animate-spin\"\n                size={14}\n                aria-hidden=\"true\"\n              />\n            </span>\n          )}\n        </>\n      )}\n    </span>\n  )\n}\n\n// StepperTitle\nfunction StepperTitle({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h3\n      data-slot=\"stepper-title\"\n      className={cn(\"text-sm font-medium\", className)}\n      {...props}\n    />\n  )\n}\n\n// StepperDescription\nfunction StepperDescription({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLParagraphElement>) {\n  return (\n    <p\n      data-slot=\"stepper-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\n// StepperSeparator\nfunction StepperSeparator({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      data-slot=\"stepper-separator\"\n      className={cn(\n        \"bg-muted group-data-[state=completed]/step:bg-primary m-0.5 group-data-[orientation=horizontal]/stepper:h-0.5 group-data-[orientation=horizontal]/stepper:w-full group-data-[orientation=horizontal]/stepper:flex-1 group-data-[orientation=vertical]/stepper:h-12 group-data-[orientation=vertical]/stepper:w-0.5\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Stepper,\n  StepperDescription,\n  StepperIndicator,\n  StepperItem,\n  StepperSeparator,\n  StepperTitle,\n  StepperTrigger,\n}\n",
      "path": "registry/default/ui/stepper.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "registry/default/lib/utils.ts"
    }
  ]
}
