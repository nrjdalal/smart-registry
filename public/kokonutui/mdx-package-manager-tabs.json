{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mdx-package-manager-tabs",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/mdx/package-manager-tabs.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport { CheckCheck } from \"lucide-react\";\n\ninterface PackageManagerTabsProps {\n    onSelect: (packageManager: string) => void;\n    commandName: string;\n    prePath: string;\n}\n\nconst packageManagers = [\n    { id: \"npm\", title: \"npm\" },\n    { id: \"bun\", title: \"bun\" },\n    { id: \"pnpm\", title: \"pnpm\" },\n];\n\nexport function PackageManagerTabs({\n    onSelect,\n    commandName,\n    prePath,\n}: PackageManagerTabsProps) {\n    const [selected, setSelected] = React.useState<string>(\"bun\");\n    const [dimensions, setDimensions] = React.useState({ width: 0, left: 0 });\n    const [isCopied, setIsCopied] = React.useState(false);\n\n    // Reference for the selected button\n    const buttonRefs = React.useRef<Map<string, HTMLButtonElement>>(new Map());\n    const containerRef = React.useRef<HTMLDivElement>(null);\n    const copyButtonRef = React.useRef<HTMLButtonElement>(null);\n\n    // Update dimensions whenever selected tab changes or on mount\n    React.useLayoutEffect(() => {\n        const updateDimensions = () => {\n            const selectedButton = buttonRefs.current.get(selected);\n            const container = containerRef.current;\n\n            if (selectedButton && container) {\n                const rect = selectedButton.getBoundingClientRect();\n                const containerRect = container.getBoundingClientRect();\n\n                setDimensions({\n                    width: rect.width,\n                    left: rect.left - containerRect.left,\n                });\n            }\n        };\n\n        // Initial update\n        requestAnimationFrame(() => {\n            updateDimensions();\n        });\n\n        // Update on resize\n        window.addEventListener(\"resize\", updateDimensions);\n        return () => window.removeEventListener(\"resize\", updateDimensions);\n    }, [selected]);\n\n    const handleTabClick = (tabId: string) => {\n        setSelected(tabId);\n        onSelect(tabId);\n    };\n\n    const handleKeyDown = (\n        e: React.KeyboardEvent<HTMLButtonElement>,\n        tabId: string\n    ) => {\n        if (e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            handleTabClick(tabId);\n        }\n    };\n\n    const getCommand = (packageManager: string): string => {\n        if (packageManager === \"pnpm\") {\n            return `pnpm dlx shadcn@latest add ${prePath}/r/${commandName}.json`;\n        } else if (packageManager === \"npm\") {\n            return `npx shadcn@latest add ${prePath}/r/${commandName}.json`;\n        } else {\n            return `bunx shadcn@latest add ${prePath}/r/${commandName}.json`;\n        }\n    };\n\n    const handleCopyCommand = () => {\n        const commandToCopy = getCommand(selected);\n        navigator.clipboard.writeText(commandToCopy);\n        setIsCopied(true);\n        setTimeout(() => {\n            setIsCopied(false);\n        }, 1000);\n    };\n\n    return (\n        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-1 sm:gap-2\">\n            <div\n                ref={containerRef}\n                role=\"tablist\"\n                aria-label=\"Package manager tabs\"\n                className={cn(\n                    \"relative flex items-center justify-start gap-1\",\n                    \"bg-background rounded-sm\",\n                    \"border\",\n                    \"transition-all duration-200\",\n                    \"h-7 text-black dark:text-white\"\n                )}\n            >\n                {/* Sliding Background */}\n                <motion.div\n                    className=\"absolute rounded-sm z-[1] bg-black dark:bg-white\"\n                    initial={false}\n                    animate={{\n                        width: dimensions.width - 4,\n                        x: dimensions.left + 2,\n                        opacity: 1,\n                    }}\n                    transition={{\n                        type: \"spring\",\n                        stiffness: 400,\n                        damping: 30,\n                    }}\n                    style={{ height: \"calc(100% - 4px)\", top: \"2px\" }}\n                />\n\n                <div className=\"flex relative z-[2]\">\n                    {packageManagers.map((item) => {\n                        const isSelected = selected === item.id;\n                        return (\n                            <motion.button\n                                key={item.id}\n                                ref={(el) => {\n                                    if (el) buttonRefs.current.set(item.id, el);\n                                    else buttonRefs.current.delete(item.id);\n                                }}\n                                type=\"button\"\n                                role=\"tab\"\n                                aria-selected={isSelected}\n                                aria-controls={`panel-${item.id}`}\n                                id={`tab-${item.id}`}\n                                tabIndex={isSelected ? 0 : -1}\n                                onClick={() => handleTabClick(item.id)}\n                                onKeyDown={(e) => handleKeyDown(e, item.id)}\n                                className={cn(\n                                    \"relative flex items-center justify-center gap-0.5 rounded-sm px-2 py-0.5 h-7\",\n                                    \"text-xs font-medium transition-all duration-300\",\n                                    \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring\",\n                                    \"truncate\",\n                                    isSelected\n                                        ? \"text-white dark:text-black\"\n                                        : \" hover:bg-muted/50 hover:text-foreground text-black/50 dark:text-white/50\"\n                                )}\n                            >\n                                <span className=\"truncate\">{item.title}</span>\n                            </motion.button>\n                        );\n                    })}\n                </div>\n            </div>\n\n            <button\n                ref={copyButtonRef}\n                type=\"button\"\n                onClick={handleCopyCommand}\n                className={cn(\n                    \"h-7 text-xs font-medium\",\n                    \"border border-black/10 dark:border-white/10\",\n                    \"rounded-sm px-2\",\n                    \"dark:text-white text-black\",\n                    \"transition-all duration-200\",\n                    \"group flex items-center justify-center gap-1\",\n                    \"w-full\",\n                    \"min-w-[250px]\",\n                    \"relative\"\n                )}\n            >\n                <span\n                    className={cn(\n                        \"absolute inset-0 flex items-center justify-center gap-1\",\n                        \"transition-opacity duration-200\",\n                        isCopied ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                >\n                    <CheckCheck className=\"h-3.5 w-3.5 text-green-500 dark:text-green-500\" />\n                    <span className=\"truncate text-black/50 dark:text-white/50\">\n                        Copied to clipboard\n                    </span>\n                </span>\n                <span\n                    className={cn(\n                        \"truncate text-black/50 dark:text-white/50\",\n                        \"transition-opacity duration-200\",\n                        isCopied ? \"opacity-0\" : \"opacity-100\"\n                    )}\n                >\n                    {getCommand(selected)}\n                </span>\n            </button>\n        </div>\n    );\n}\n",
      "path": "components/mdx/package-manager-tabs.tsx"
    }
  ]
}
