{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "src/components/ComboChart/combochart.spec",
  "type": "registry:file",
  "dependencies": [
    "@playwright/test"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "src/components/ComboChart/combochart.spec.ts",
      "content": "import { expect, test, type Page } from \"@playwright/test\"\n\nconst goToStory = async (page: Page, storyName: string) => {\n  await page.goto(\n    `http://localhost:6006/?path=/story/visualization-combochart--${storyName}`,\n  )\n}\n\nconst getStoryFrame = (page: Page) =>\n  page.frameLocator('iframe[title=\"storybook-preview-iframe\"]')\n\ntest.describe(\"ComboChart Component Tests\", () => {\n  test.beforeEach(async ({ page }) => {\n    await goToStory(page, \"default\")\n  })\n\n  test.describe(\"Default ComboChart\", () => {\n    test(\"should render the combo chart\", async ({ page }) => {\n      await expect(getStoryFrame(page).getByTestId(\"combo-chart\")).toBeVisible()\n    })\n\n    test(\"should render correct number of legend items\", async ({ page }) => {\n      await expect(\n        getStoryFrame(page).locator(\n          \".recharts-legend-wrapper .flex.h-full.flex-wrap li\",\n        ),\n      ).toHaveCount(2)\n    })\n\n    test(\"should render x-axis with correct labels\", async ({ page }) => {\n      const xAxis = getStoryFrame(page).locator(\n        \".recharts-xAxis .recharts-cartesian-axis-tick\",\n      )\n      await expect(xAxis.first()).toContainText(\"Jan 23\")\n      await expect(xAxis.last()).toContainText(\"Dec 23\")\n    })\n\n    test(\"should render y-axis with correct values\", async ({ page }) => {\n      const yAxis = getStoryFrame(page).locator(\n        \".recharts-yAxis .recharts-cartesian-axis-tick\",\n      )\n      await expect(yAxis.first()).toContainText(\"0\")\n      await expect(yAxis.last()).toContainText(\"3600\")\n    })\n\n    test(\"should render correct number of bars\", async ({ page }) => {\n      await expect(\n        getStoryFrame(page).locator(\".recharts-bar-rectangles rect\"),\n      ).toHaveCount(12)\n    })\n\n    test(\"should render line series\", async ({ page }) => {\n      await expect(getStoryFrame(page).locator(\".recharts-line\")).toBeVisible()\n    })\n\n    test(\"should show tooltip on hover\", async ({ page }) => {\n      const chart = getStoryFrame(page).getByTestId(\"combo-chart\")\n      await chart.hover({ position: { x: 100, y: 100 } })\n      await expect(\n        getStoryFrame(page).locator(\".recharts-tooltip-wrapper\"),\n      ).toBeVisible()\n    })\n\n    test.describe(\"ComboChart with OnValueChange\", () => {\n      test.beforeEach(async ({ page }) => {\n        await goToStory(page, \"with-on-value-change-biaxial\")\n      })\n\n      test(\"should update chart on legend item click\", async ({ page }) => {\n        const legendWrapper = getStoryFrame(page).locator(\n          \".recharts-legend-wrapper .flex.h-full.flex-wrap\",\n        )\n\n        await legendWrapper.locator(\"li\", { hasText: \"SolarCells\" }).click()\n\n        await expect(\n          legendWrapper.locator(\"li\", { hasText: \"Glass\" }).locator(\"span\"),\n        ).toHaveClass(/opacity-40/)\n      })\n    })\n  })\n\n  test.describe(\"Biaxial ComboChart\", () => {\n    test.beforeEach(async ({ page }) => {\n      await goToStory(page, \"biaxial\")\n    })\n    test(\"should render chart with two y-axes\", async ({ page }) => {\n      await page.goto(\n        \"http://localhost:6006/?path=/story/visualization-combochart--biaxial\",\n      )\n\n      const chart = getStoryFrame(page).getByTestId(\"combo-chart-biaxial\")\n      await expect(chart).toBeVisible()\n\n      const yAxes = chart.locator(\".recharts-yAxis\")\n      await expect(yAxes).toHaveCount(2)\n\n      const leftAxisLabel = chart\n        .locator('.recharts-yAxis text[style=\"text-anchor: middle;\"]')\n        .first()\n      await expect(leftAxisLabel).toHaveText(\"BarSeries\")\n\n      const rightAxisLabel = chart\n        .locator('.recharts-yAxis text[style=\"text-anchor: middle;\"]')\n        .last()\n      await expect(rightAxisLabel).toHaveText(\"LineSeries\")\n\n      const legendItems = chart.locator(\".recharts-legend-wrapper li\")\n      await expect(legendItems).toHaveCount(2)\n      await expect(legendItems.nth(0)).toContainText(\"SolarCells\")\n      await expect(legendItems.nth(1)).toContainText(\"Frame\")\n    })\n  })\n\n  test.describe(\"ComboChart with value formatters\", () => {\n    test.beforeEach(async ({ page }) => {\n      await goToStory(page, \"with-value-formatter-biaxial\")\n    })\n\n    test(\"should format y-axis and tooltip values correctly\", async ({\n      page,\n    }) => {\n      const chart = getStoryFrame(page).locator('[tremor-id=\"tremor-raw\"]')\n\n      const leftYAxisTicks = chart\n        .locator(\".recharts-yAxis\")\n        .first()\n        .locator(\".recharts-cartesian-axis-tick\")\n      await expect(leftYAxisTicks.first()).toContainText(\"$-4,000\")\n      await expect(leftYAxisTicks.last()).toContainText(\"$4,000\")\n\n      const rightYAxisTicks = chart\n        .locator(\".recharts-yAxis\")\n        .last()\n        .locator(\".recharts-cartesian-axis-tick\")\n      await expect(rightYAxisTicks.first()).toContainText(\"$0\")\n      await expect(rightYAxisTicks.last()).toContainText(\"$3,600\")\n    })\n  })\n\n  test.describe(\"ComboChart with custom min and max values\", () => {\n    test.beforeEach(async ({ page }) => {\n      await goToStory(page, \"with-min-and-max-value-biaxial\")\n    })\n\n    test(\"should respect custom min and max values for y-axes\", async ({\n      page,\n    }) => {\n      const yAxes = getStoryFrame(page).locator(\".recharts-yAxis\")\n      const leftYAxis = yAxes.nth(0)\n      const rightYAxis = yAxes.nth(1)\n\n      await expect(\n        leftYAxis.locator(\".recharts-cartesian-axis-tick\").first(),\n      ).toContainText(\"800\")\n      await expect(\n        leftYAxis.locator(\".recharts-cartesian-axis-tick\").last(),\n      ).toContainText(\"5000\")\n      await expect(\n        rightYAxis.locator(\".recharts-cartesian-axis-tick\").first(),\n      ).toContainText(\"2500\")\n      await expect(\n        rightYAxis.locator(\".recharts-cartesian-axis-tick\").last(),\n      ).toContainText(\"3500\")\n    })\n  })\n\n  test.describe(\"ComboChart with legend slider\", () => {\n    test.beforeEach(async ({ page }) => {\n      await goToStory(page, \"with-legend-slider-biaxial\")\n    })\n\n    test(\"should render legend slider buttons and scroll on click\", async ({\n      page,\n    }) => {\n      const sliderButtons = getStoryFrame(page).locator(\n        \".group.inline-flex.size-5\",\n      )\n      await expect(sliderButtons).toHaveCount(2)\n\n      const rightScrollButton = sliderButtons.nth(1)\n      await rightScrollButton.click()\n    })\n  })\n\n  test.describe(\"ComboChart with connect nulls\", () => {\n    test.beforeEach(async ({ page }) => {\n      await goToStory(page, \"with-connect-nulls-false-biaxial\")\n    })\n\n    test(\"should not connect null data points in line series\", async ({\n      page,\n    }) => {\n      const linePath = getStoryFrame(page).locator(\".recharts-line-curve\")\n      const pathD = await linePath.getAttribute(\"d\")\n      expect(pathD).toContain(\"M\")\n    })\n  })\n})\n",
      "path": "src/components/ComboChart/combochart.spec.ts"
    }
  ]
}
