{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toast",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-toast",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:ui",
      "target": "components/ui/toast.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { XIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nfunction ToastViewport({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>) {\n  return (\n    <ToastPrimitives.Viewport\n      className={cn(\n        \"fixed top-0 right-0 z-50 flex max-h-screen w-full flex-col-reverse p-4 sm:top-auto sm:bottom-0 sm:flex-col md:max-w-[400px]\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between overflow-hidden rounded-md border p-4 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:data-[swipe-direction=left]:slide-out-to-left-full data-[state=closed]:data-[swipe-direction=right]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-white\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nfunction Toast({\n  className,\n  variant,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n  VariantProps<typeof toastVariants>) {\n  return (\n    <ToastPrimitives.Root\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction ToastAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>) {\n  return (\n    <ToastPrimitives.Action\n      className={cn(\n        !asChild &&\n          \"hover:bg-secondary focus:ring-ring group-[.destructive]:border-muted/40 hover:group-[.destructive]:border-destructive/30 hover:group-[.destructive]:bg-destructive focus:group-[.destructive]:ring-destructive focus-visible:border-ring focus-visible:ring-ring/50 inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-[color,box-shadow] outline-none hover:group-[.destructive]:text-white focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50\",\n        className,\n      )}\n      asChild={asChild}\n      {...props}\n    >\n      {props.children}\n    </ToastPrimitives.Action>\n  )\n}\n\nfunction ToastClose({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>) {\n  return (\n    <ToastPrimitives.Close\n      className={cn(\n        !asChild &&\n          \"group focus-visible:border-ring focus-visible:ring-ring/50 absolute top-3 right-3 flex size-7 items-center justify-center rounded transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:pointer-events-none\",\n        className,\n      )}\n      toast-close=\"\"\n      asChild={asChild}\n      {...props}\n    >\n      {asChild ? (\n        props.children\n      ) : (\n        <XIcon\n          size={16}\n          className=\"opacity-60 transition-opacity group-hover:opacity-100\"\n          aria-hidden=\"true\"\n        />\n      )}\n    </ToastPrimitives.Close>\n  )\n}\n\nfunction ToastTitle({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>) {\n  return (\n    <ToastPrimitives.Title\n      className={cn(\"text-sm font-medium\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction ToastDescription({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>) {\n  return (\n    <ToastPrimitives.Description\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  Toast,\n  ToastAction,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n  type ToastActionElement,\n  type ToastProps,\n}\n",
      "path": "registry/default/ui/toast.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "registry/default/lib/utils.ts"
    }
  ]
}