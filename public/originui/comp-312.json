{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-312",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/comp-312.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/registry/default/ui/button\";\nimport { DownloadIcon, LoaderCircleIcon } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Component() {\n  const [isDownloading, setIsDownloading] = useState(false);\n\n  const handleDownload = () => {\n    setIsDownloading(true);\n    // Simulate download\n    setTimeout(() => {\n      setIsDownloading(false);\n    }, 2000);\n  };\n\n  return (\n    <div className=\"bg-muted px-4 py-3 md:py-2\">\n      <div className=\"flex flex-wrap items-center justify-center gap-x-4 gap-y-2\">\n        <p className=\"text-sm\">\n          <span className=\"font-medium\">v2.1.0</span>\n          <span className=\"text-muted-foreground mx-2\">â€¢</span>\n          New features and improvements available\n        </p>\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          disabled={isDownloading}\n          onClick={handleDownload}\n          className=\"min-w-24\"\n        >\n          {isDownloading ? (\n            <>\n              <LoaderCircleIcon\n                className=\"-ms-0.5 me-2 animate-spin\"\n                size={16}\n                aria-hidden=\"true\"\n              />\n              Updating...\n            </>\n          ) : (\n            <>\n              <DownloadIcon size={16} className=\"-ms-0.5\" aria-hidden=\"true\" />\n              Update now\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}\n",
      "path": "registry/default/components/comp-312.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "path": "registry/default/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/registry/default/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "path": "registry/default/ui/button.tsx"
    }
  ]
}
