{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "src/app/api/auth/[...all]/route",
  "type": "registry:file",
  "dependencies": [
    "better-auth",
    "drizzle-orm",
    "postgres"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "src/app/api/auth/[...all]/route.ts",
      "content": "import { auth } from \"@/lib/auth\"\nimport { toNextJsHandler } from \"better-auth/next-js\"\n\nexport const { GET, POST } = toNextJsHandler(auth.handler)\n",
      "path": "src/app/api/auth/[...all]/route.ts"
    },
    {
      "type": "registry:file",
      "target": "src/db/index.ts",
      "content": "import { authSchema } from \"@/db/schema\"\nimport { drizzle, type PostgresJsDatabase } from \"drizzle-orm/postgres-js\"\nimport postgres from \"postgres\"\n\ndeclare global {\n  // eslint-disable-next-line\n  var db: PostgresJsDatabase\n}\n\nlet db: PostgresJsDatabase\n\nif (process.env.NODE_ENV === \"production\") {\n  db = drizzle({\n    client: postgres(process.env.POSTGRES_URL!, {\n      connect_timeout: 10000,\n      idle_timeout: 30000,\n      ssl: {\n        rejectUnauthorized: true,\n      },\n    }),\n  })\n} else {\n  if (!global.db) {\n    global.db = drizzle({\n      client: postgres(process.env.POSTGRES_URL!, {\n        connect_timeout: 10000,\n        idle_timeout: 30000,\n        max: 20,\n      }),\n    })\n  }\n  db = global.db\n}\n\nexport { authSchema, db }\n",
      "path": "src/db/index.ts"
    },
    {
      "type": "registry:file",
      "target": "src/db/schema/auth.ts",
      "content": "import { boolean, pgTable, text, timestamp } from \"drizzle-orm/pg-core\"\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n})\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n})\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n})\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n})\n",
      "path": "src/db/schema/auth.ts"
    },
    {
      "type": "registry:file",
      "target": "src/db/schema/index.ts",
      "content": "import { account, session, user, verification } from \"@/db/schema/auth\"\n\nexport const authSchema = { account, session, user, verification }\n",
      "path": "src/db/schema/index.ts"
    },
    {
      "type": "registry:file",
      "target": "src/lib/auth/index.ts",
      "content": "import { authSchema, db } from \"@/db\"\nimport { betterAuth } from \"better-auth\"\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\"\nimport { nextCookies } from \"better-auth/next-js\"\n\nexport const auth = betterAuth({\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n    schema: authSchema,\n  }),\n  emailAndPassword: {\n    enabled: true,\n  },\n  plugins: [nextCookies()],\n})\n",
      "path": "src/lib/auth/index.ts"
    }
  ]
}
