{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-basic-auth-basic",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-separator",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "next",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/blocks/auth-basic/auth-basic.tsx",
      "content": "import {\n    Card,\n    CardContent,\n    CardDescription,\n    CardHeader,\n    CardTitle,\n} from \"@/components/ui/card\";\nimport Image from \"next/image\";\nimport { AuthForm } from \"@/components/kokonutui/blocks/auth-basic/auth-form\";\nimport { SocialLogin } from \"@/components/kokonutui/blocks/auth-basic/social-login\";\n\nexport default function AuthBasic() {\n    return (\n        <div className=\"flex min-h-screen items-center justify-center p-4 bg-white dark:bg-black\">\n            <div className=\"w-full max-w-[450px]\">\n                <div className=\"w-full h-48 relative mb-4\">\n                    <Image\n                        src=\"https://ferf1mheo22r9ira.public.blob.vercel-storage.com/to-the-moon-u5UJD9sRK8WkmaTY8HdEsNKjAQ9bjN.svg\"\n                        alt=\"To the moon illustration\"\n                        fill\n                        className=\"object-cover\"\n                    />\n                </div>\n                <Card className=\"w-full border-0 shadow-lg\">\n                    <CardHeader className=\"space-y-2\">\n                        <CardTitle className=\"text-2xl font-semibold tracking-tight text-black dark:text-white\">\n                            Welcome back\n                        </CardTitle>\n                        <CardDescription className=\"text-neutral-600 dark:text-neutral-400\">\n                            Enter your credentials to access your account\n                        </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                        <AuthForm />\n                        <SocialLogin />\n                    </CardContent>\n                </Card>\n            </div>\n        </div>\n    );\n}\n",
      "path": "components/kokonutui/blocks/auth-basic/auth-basic.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/kokonutui/blocks/auth-basic/auth-form.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Loader2, LockIcon } from \"lucide-react\";\n\nexport function AuthForm() {\n    const [isLoading, setIsLoading] = useState(false);\n\n    async function handleSubmit(e: React.FormEvent) {\n        e.preventDefault();\n        setIsLoading(true);\n\n        const formData = new FormData(e.target as HTMLFormElement);\n        const email = formData.get(\"email\") as string;\n        const password = formData.get(\"password\") as string;\n\n        try {\n            /**\n             * To update with your actual authentication logic\n             */\n            await new Promise((resolve) => setTimeout(resolve, 2000));\n            console.log(\"Signing in with:\", email, password);\n        } catch (error) {\n            console.error(\"Authentication error:\", error);\n        } finally {\n            setIsLoading(false);\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className=\"space-y-4\" noValidate>\n            <div className=\"space-y-2\">\n                <label\n                    htmlFor=\"email\"\n                    className=\"text-sm font-medium text-black dark:text-white\"\n                >\n                    Email\n                </label>\n                <div className=\"relative\">\n                    <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 flex items-center justify-center w-4 h-4\">\n                        @\n                    </span>\n                    <Input\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"name@example.com\"\n                        required\n                        disabled={isLoading}\n                        className=\"pl-10 h-12 bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-1 focus-visible:ring-ring\"\n                        autoComplete=\"email\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-black dark:text-white\">\n                    Password\n                </label>\n                <div className=\"relative\">\n                    <LockIcon className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-500\" />\n                    <Input\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Enter your password\"\n                        required\n                        disabled={isLoading}\n                        className=\"pl-10 h-12 bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-1 focus-visible:ring-ring\"\n                    />\n                </div>\n            </div>\n\n            <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"w-full h-12 text-base font-medium bg-black text-white hover:bg-neutral-800 dark:bg-white dark:text-black dark:hover:bg-neutral-200 transition-colors\"\n            >\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                {isLoading ? \"Signing in...\" : \"Sign in\"}\n            </Button>\n        </form>\n    );\n}\n",
      "path": "components/kokonutui/blocks/auth-basic/auth-form.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/kokonutui/blocks/auth-basic/social-login.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Loader2 } from \"lucide-react\";\n\nexport function SocialLogin() {\n    const [isGoogleLoading, setIsGoogleLoading] = useState(false);\n\n    async function handleGoogleSignIn() {\n        setIsGoogleLoading(true);\n        try {\n            /**\n             * To update with your actual authentication logic\n             */\n            await new Promise((resolve) => setTimeout(resolve, 1500));\n            console.log(\"Signing in with Google\");\n        } catch (error) {\n            console.error(\"Google sign-in error:\", error);\n        } finally {\n            setIsGoogleLoading(false);\n        }\n    }\n\n    function GoogleIcon() {\n        return (\n            <svg\n                className=\"mr-2 h-4 w-4\"\n                aria-hidden=\"true\"\n                focusable=\"false\"\n                data-prefix=\"fab\"\n                data-icon=\"google\"\n                role=\"img\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 488 512\"\n            >\n                <path\n                    fill=\"currentColor\"\n                    d=\"M488 261.8C488 403.3 391.1 504 248 504 110.8 504 0 393.2 0 256S110.8 8 248 8c66.8 0 123 24.5 166.3 64.9l-67.5 64.9C258.5 52.6 94.3 116.6 94.3 256c0 86.5 69.1 156.6 153.7 156.6 98.2 0 135-70.4 140.8-106.9H248v-85.3h236.1c2.3 12.7 3.9 24.9 3.9 41.4z\"\n                ></path>\n            </svg>\n        );\n    }\n\n    return (\n        <>\n            <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                    <Separator className=\"w-full border-neutral-200 dark:border-neutral-800\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                    <span className=\"bg-white dark:bg-black px-2 text-neutral-600 dark:text-neutral-400\">\n                        Or continue with\n                    </span>\n                </div>\n            </div>\n\n            <Button\n                variant=\"outline\"\n                onClick={handleGoogleSignIn}\n                disabled={isGoogleLoading}\n                className=\"w-full h-12 font-medium border border-neutral-200 dark:border-neutral-800 hover:bg-neutral-50 dark:bg-black dark:hover:bg-neutral-900 transition-colors\"\n            >\n                {isGoogleLoading ? (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                ) : (\n                    <GoogleIcon />\n                )}\n                {isGoogleLoading ? \"Connecting...\" : \"Sign in with Google\"}\n            </Button>\n        </>\n    );\n}\n",
      "path": "components/kokonutui/blocks/auth-basic/social-login.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n}\n",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border border-zinc-200 bg-white text-zinc-950 shadow-xs dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-zinc-500 dark:text-zinc-400\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "path": "components/ui/card.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-zinc-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-zinc-950 placeholder:text-zinc-500 focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:file:text-zinc-50 dark:placeholder:text-zinc-400 dark:focus-visible:ring-zinc-300\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "path": "components/ui/input.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/separator.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-zinc-200 dark:bg-zinc-800\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
      "path": "components/ui/separator.tsx"
    }
  ]
}
