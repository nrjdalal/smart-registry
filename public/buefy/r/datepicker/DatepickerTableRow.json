{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "datepicker/DatepickerTableRow",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "target": "components/datepicker/DatepickerTableRow.vue",
      "content": "<template>\n    <div class=\"datepicker-row\">\n        <a\n            class=\"datepicker-cell is-week-number\"\n            :class=\"{'is-clickable': weekNumberClickable }\"\n            v-if=\"showWeekNumber\"\n            @click.prevent=\"clickWeekNumber(getWeekNumber(week[6]))\">\n            <span>{{ getWeekNumber(week[6]).week }}</span>\n        </a>\n        <template v-for=\"(weekDay, index) in week\">\n            <a\n                :ref=\"`day-${weekDay.getMonth()}-${weekDay.getDate()}`\"\n                v-if=\"selectableDate(weekDay) && !disabled\"\n                :key=\"index\"\n                :class=\"classObject(weekDay)\"\n                class=\"datepicker-cell\"\n                role=\"button\"\n                href=\"#\"\n                :disabled=\"disabled\"\n                @click.prevent=\"emitChosenDate(weekDay)\"\n                @mouseenter=\"setRangeHoverEndDate(weekDay)\"\n                @keydown=\"manageKeydown($event, weekDay)\"\n                :tabindex=\"day === weekDay.getDate() && month === weekDay.getMonth() ? null : -1\">\n                <span>{{ weekDay.getDate() }}</span>\n                <div class=\"events\" v-if=\"eventsDateMatch(weekDay)\">\n                    <div\n                        class=\"event\"\n                        :class=\"event.type\"\n                        v-for=\"(event, index) in eventsDateMatch(weekDay)\"\n                        :key=\"index\"/>\n                </div>\n            </a>\n            <div\n                v-else\n                :key=\"index\"\n                :class=\"classObject(weekDay)\"\n                class=\"datepicker-cell\">\n                <span>{{ weekDay.getDate() }}</span>\n                <div class=\"events\" v-if=\"eventsDateMatch(weekDay)\">\n                    <div\n                        class=\"event\"\n                        :class=\"event.type\"\n                        v-for=\"(event, index) in eventsDateMatch(weekDay)\"\n                        :key=\"index\"/>\n                </div>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'BDatepickerTableRow',\n    inject: {\n        $datepicker: { name: '$datepicker', default: false }\n    },\n    props: {\n        selectedDate: {\n            type: [Date, Array]\n        },\n        hoveredDateRange: Array,\n        day: {\n            type: Number\n        },\n        week: {\n            type: Array,\n            required: true\n        },\n        month: {\n            type: Number,\n            required: true\n        },\n        minDate: Date,\n        maxDate: Date,\n        disabled: Boolean,\n        unselectableDates: [Array, Function],\n        unselectableDaysOfWeek: Array,\n        selectableDates: [Array, Function],\n        events: Array,\n        indicators: String,\n        dateCreator: Function,\n        nearbyMonthDays: Boolean,\n        nearbySelectableMonthDays: Boolean,\n        showWeekNumber: Boolean,\n        weekNumberClickable: Boolean,\n        range: Boolean,\n        multiple: Boolean,\n        rulesForFirstWeek: Number,\n        firstDayOfWeek: Number\n    },\n    watch: {\n        day(day) {\n            const refName = `day-${this.month}-${day}`\n            this.$nextTick(() => {\n                if (this.$refs[refName] && this.$refs[refName].length > 0) {\n                    if (this.$refs[refName][0]) {\n                        this.$refs[refName][0].focus()\n                    }\n                }\n            }) // $nextTick needed when month is changed\n        }\n    },\n    methods: {\n        firstWeekOffset(year, dow, doy) {\n            // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            const fwd = 7 + dow - doy\n            // first-week day local weekday -- which local weekday is fwd\n            const firstJanuary = new Date(year, 0, fwd)\n            const fwdlw = (7 + firstJanuary.getDay() - dow) % 7\n            return -fwdlw + fwd - 1\n        },\n        daysInYear(year) {\n            return this.isLeapYear(year) ? 366 : 365\n        },\n        isLeapYear(year) {\n            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0\n        },\n        getSetDayOfYear(input) {\n            return Math.round((input - new Date(input.getFullYear(), 0, 1)) / 864e5) + 1\n        },\n        weeksInYear(year, dow, doy) {\n            const weekOffset = this.firstWeekOffset(year, dow, doy)\n            const weekOffsetNext = this.firstWeekOffset(year + 1, dow, doy)\n            return (this.daysInYear(year) - weekOffset + weekOffsetNext) / 7\n        },\n        getWeekNumber(mom) {\n            const dow = this.firstDayOfWeek // first day of week\n            // Rules for the first week : 1 for the 1st January, 4 for the 4th January\n            const doy = this.rulesForFirstWeek\n            const weekOffset = this.firstWeekOffset(mom.getFullYear(), dow, doy)\n            const week = Math.floor((this.getSetDayOfYear(mom) - weekOffset - 1) / 7) + 1\n            let resWeek\n            let resYear\n            if (week < 1) {\n                resYear = mom.getFullYear() - 1\n                resWeek = week + this.weeksInYear(resYear, dow, doy)\n            } else if (week > this.weeksInYear(mom.getFullYear(), dow, doy)) {\n                resWeek = week - this.weeksInYear(mom.getFullYear(), dow, doy)\n                resYear = mom.getFullYear() + 1\n            } else {\n                resYear = mom.getFullYear()\n                resWeek = week\n            }\n            return {week: resWeek, year: resYear}\n        },\n        clickWeekNumber(weekData) {\n            if (this.weekNumberClickable) {\n                this.$datepicker.$emit('week-number-click', weekData.week, weekData.year)\n            }\n        },\n        /*\n         * Check that selected day is within earliest/latest params and\n         * is within this month\n         */\n        selectableDate(day) {\n            const validity = []\n\n            if (this.minDate) {\n                validity.push(day >= this.minDate)\n            }\n\n            if (this.maxDate) {\n                validity.push(day <= this.maxDate)\n            }\n\n            if (this.nearbyMonthDays && !this.nearbySelectableMonthDays) {\n                validity.push(day.getMonth() === this.month)\n            }\n\n            if (this.selectableDates) {\n                if (typeof this.selectableDates === 'function') {\n                    if (this.selectableDates(day)) {\n                        return true\n                    } else {\n                        validity.push(false)\n                    }\n                } else {\n                    for (let i = 0; i < this.selectableDates.length; i++) {\n                        const enabledDate = this.selectableDates[i]\n                        if (day.getDate() === enabledDate.getDate() &&\n                            day.getFullYear() === enabledDate.getFullYear() &&\n                            day.getMonth() === enabledDate.getMonth()) {\n                            return true\n                        } else {\n                            validity.push(false)\n                        }\n                    }\n                }\n            }\n\n            if (this.unselectableDates) {\n                if (typeof this.unselectableDates === 'function') {\n                    validity.push(!this.unselectableDates(day))\n                } else {\n                    for (let i = 0; i < this.unselectableDates.length; i++) {\n                        const disabledDate = this.unselectableDates[i]\n                        validity.push(\n                            day.getDate() !== disabledDate.getDate() ||\n                                day.getFullYear() !== disabledDate.getFullYear() ||\n                                day.getMonth() !== disabledDate.getMonth()\n                        )\n                    }\n                }\n            }\n\n            if (this.unselectableDaysOfWeek) {\n                for (let i = 0; i < this.unselectableDaysOfWeek.length; i++) {\n                    const dayOfWeek = this.unselectableDaysOfWeek[i]\n                    validity.push(day.getDay() !== dayOfWeek)\n                }\n            }\n\n            return validity.indexOf(false) < 0\n        },\n\n        /*\n        * Emit select event with chosen date as payload\n        */\n        emitChosenDate(day) {\n            if (this.disabled) return\n\n            if (this.selectableDate(day)) {\n                this.$emit('select', day)\n            }\n        },\n\n        eventsDateMatch(day) {\n            if (!this.events || !this.events.length) return false\n\n            const dayEvents = []\n\n            for (let i = 0; i < this.events.length; i++) {\n                if (this.events[i].date.getDay() === day.getDay()) {\n                    dayEvents.push(this.events[i])\n                }\n            }\n\n            if (!dayEvents.length) {\n                return false\n            }\n\n            return dayEvents\n        },\n\n        /*\n        * Build classObject for cell using validations\n        */\n        classObject(day) {\n            function dateMatch(dateOne, dateTwo, multiple) {\n                // if either date is null or undefined, return false\n                // if using multiple flag, return false\n                if (!dateOne || !dateTwo || multiple) {\n                    return false\n                }\n\n                if (Array.isArray(dateTwo)) {\n                    return dateTwo.some((date) => (\n                        dateOne.getDate() === date.getDate() &&\n                        dateOne.getFullYear() === date.getFullYear() &&\n                        dateOne.getMonth() === date.getMonth()\n                    ))\n                }\n                return (dateOne.getDate() === dateTwo.getDate() &&\n                    dateOne.getFullYear() === dateTwo.getFullYear() &&\n                    dateOne.getMonth() === dateTwo.getMonth())\n            }\n\n            function dateWithin(dateOne, dates, multiple) {\n                if (!Array.isArray(dates) || multiple) { return false }\n\n                return dateOne > dates[0] && dateOne < dates[1]\n            }\n\n            return {\n                'is-selected': dateMatch(day, this.selectedDate) || dateWithin(day, this.selectedDate, this.multiple),\n                'is-first-selected':\n                    dateMatch(\n                        day,\n                        Array.isArray(this.selectedDate) && this.selectedDate[0],\n                        this.multiple\n                    ),\n                'is-within-selected':\n                    dateWithin(day, this.selectedDate, this.multiple),\n                'is-last-selected':\n                    dateMatch(\n                        day,\n                        Array.isArray(this.selectedDate) && this.selectedDate[1],\n                        this.multiple\n                    ),\n                'is-within-hovered-range':\n                    this.hoveredDateRange && this.hoveredDateRange.length === 2 &&\n                    (dateMatch(day, this.hoveredDateRange) ||\n                        dateWithin(day, this.hoveredDateRange)),\n                'is-first-hovered': dateMatch(\n                    day,\n                    Array.isArray(this.hoveredDateRange) && this.hoveredDateRange[0]\n                ),\n                'is-within-hovered':\n                    dateWithin(day, this.hoveredDateRange),\n                'is-last-hovered': dateMatch(\n                    day,\n                    Array.isArray(this.hoveredDateRange) && this.hoveredDateRange[1]\n                ),\n                'is-today': dateMatch(day, this.dateCreator()),\n                'is-selectable': this.selectableDate(day) && !this.disabled,\n                'is-unselectable': !this.selectableDate(day) || this.disabled,\n                'is-invisible': !this.nearbyMonthDays && day.getMonth() !== this.month,\n                'is-nearby': this.nearbySelectableMonthDays && day.getMonth() !== this.month,\n                'has-event': this.eventsDateMatch(day),\n                [this.indicators]: this.eventsDateMatch(day)\n            }\n        },\n        setRangeHoverEndDate(day) {\n            if (this.range) {\n                this.$emit('rangeHoverEndDate', day)\n            }\n        },\n\n        manageKeydown(event, weekDay) {\n            // https://developer.mozilla.org/fr/docs/Web/API/KeyboardEvent/key/Key_Values#Navigation_keys\n            const { key } = event\n            let preventDefault = true\n            switch (key) {\n                case 'Tab': {\n                    preventDefault = false\n                    break\n                }\n\n                case ' ':\n                case 'Space':\n                case 'Spacebar':\n                case 'Enter': {\n                    this.emitChosenDate(weekDay)\n                    break\n                }\n\n                case 'ArrowLeft':\n                case 'Left': {\n                    this.changeFocus(weekDay, -1)\n                    break\n                }\n                case 'ArrowRight':\n                case 'Right': {\n                    this.changeFocus(weekDay, 1)\n                    break\n                }\n                case 'ArrowUp':\n                case 'Up': {\n                    this.changeFocus(weekDay, -7)\n                    break\n                }\n                case 'ArrowDown':\n                case 'Down': {\n                    this.changeFocus(weekDay, 7)\n                    break\n                }\n            }\n\n            if (preventDefault) {\n                event.preventDefault()\n            }\n        },\n\n        changeFocus(day, inc) {\n            const nextDay = new Date(day.getTime())\n            nextDay.setDate(day.getDate() + inc)\n            while (\n                (!this.minDate || nextDay > this.minDate) &&\n                (!this.maxDate || nextDay < this.maxDate) &&\n                !this.selectableDate(nextDay)\n            ) {\n                nextDay.setDate(nextDay.getDate() + Math.sign(inc))\n            }\n            this.setRangeHoverEndDate(nextDay)\n            this.$emit('change-focus', nextDay)\n        }\n    }\n}\n</script>\n",
      "path": "src/components/datepicker/DatepickerTableRow.vue"
    }
  ]
}
