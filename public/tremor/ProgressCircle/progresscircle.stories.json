{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ProgressCircle/progresscircle.stories",
  "dependencies": [
    "@radix-ui/react-slot",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Card/Card.tsx",
      "content": "// Tremor Card [v0.0.2]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\n\nimport { cx } from \"@/utils/cx\"\n\ninterface CardProps extends React.ComponentPropsWithoutRef<\"div\"> {\n  asChild?: boolean\n}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({ className, asChild, ...props }, forwardedRef) => {\n    const Component = asChild ? Slot : \"div\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"relative w-full rounded-lg border p-6 text-left shadow-sm\",\n          // background color\n          \"bg-white dark:bg-[#090E1A]\",\n          // border color\n          \"border-gray-200 dark:border-gray-900\",\n          className,\n        )}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      />\n    )\n  },\n)\n\nCard.displayName = \"Card\"\n\nexport { Card, type CardProps }\n",
      "path": "src/components/Card/Card.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/ProgressCircle/ProgressCircle.tsx",
      "content": "// Tremor ProgressCircle [v0.0.3]\n\nimport React from \"react\"\nimport { tv, VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\n\nconst progressCircleVariants = tv({\n  slots: {\n    background: \"\",\n    circle: \"\",\n  },\n  variants: {\n    variant: {\n      default: {\n        background: \"stroke-blue-200 dark:stroke-blue-500/30\",\n        circle: \"stroke-blue-500 dark:stroke-blue-500\",\n      },\n      neutral: {\n        background: \"stroke-gray-200 dark:stroke-gray-500/40\",\n        circle: \"stroke-gray-500 dark:stroke-gray-500\",\n      },\n      warning: {\n        background: \"stroke-yellow-200 dark:stroke-yellow-500/30\",\n        circle: \"stroke-yellow-500 dark:stroke-yellow-500\",\n      },\n      error: {\n        background: \"stroke-red-200 dark:stroke-red-500/30\",\n        circle: \"stroke-red-500 dark:stroke-red-500\",\n      },\n      success: {\n        background: \"stroke-emerald-200 dark:stroke-emerald-500/30\",\n        circle: \"stroke-emerald-500 dark:stroke-emerald-500\",\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n})\n\ninterface ProgressCircleProps\n  extends Omit<React.SVGProps<SVGSVGElement>, \"value\">,\n    VariantProps<typeof progressCircleVariants> {\n  value?: number\n  max?: number\n  showAnimation?: boolean\n  radius?: number\n  strokeWidth?: number\n  children?: React.ReactNode\n}\n\nconst ProgressCircle = React.forwardRef<SVGSVGElement, ProgressCircleProps>(\n  (\n    {\n      value = 0,\n      max = 100,\n      radius = 32,\n      strokeWidth = 6,\n      showAnimation = true,\n      variant,\n      className,\n      children,\n      ...props\n    }: ProgressCircleProps,\n    forwardedRef,\n  ) => {\n    const safeValue = Math.min(max, Math.max(value, 0))\n    const normalizedRadius = radius - strokeWidth / 2\n    const circumference = normalizedRadius * 2 * Math.PI\n    const offset = circumference - (safeValue / max) * circumference\n\n    const { background, circle } = progressCircleVariants({ variant })\n    return (\n      <div\n        className={cx(\"relative\")}\n        role=\"progressbar\"\n        aria-label=\"Progress circle\"\n        aria-valuenow={value}\n        aria-valuemin={0}\n        aria-valuemax={max}\n        data-max={max}\n        data-value={safeValue ?? null}\n        tremor-id=\"tremor-raw\"\n      >\n        <svg\n          ref={forwardedRef}\n          width={radius * 2}\n          height={radius * 2}\n          viewBox={`0 0 ${radius * 2} ${radius * 2}`}\n          className={cx(\"-rotate-90 transform\", className)}\n          {...props}\n        >\n          <circle\n            r={normalizedRadius}\n            cx={radius}\n            cy={radius}\n            strokeWidth={strokeWidth}\n            fill=\"transparent\"\n            stroke=\"\"\n            strokeLinecap=\"round\"\n            className={cx(\"transition-colors ease-linear\", background())}\n          />\n          {safeValue >= 0 ? (\n            <circle\n              r={normalizedRadius}\n              cx={radius}\n              cy={radius}\n              strokeWidth={strokeWidth}\n              strokeDasharray={`${circumference} ${circumference}`}\n              strokeDashoffset={offset}\n              fill=\"transparent\"\n              stroke=\"\"\n              strokeLinecap=\"round\"\n              className={cx(\n                \"transition-colors ease-linear\",\n                circle(),\n                showAnimation &&\n                  \"transform-gpu transition-all duration-300 ease-in-out\",\n              )}\n            />\n          ) : null}\n        </svg>\n        <div\n          className={cx(\"absolute inset-0 flex items-center justify-center\")}\n        >\n          {children}\n        </div>\n      </div>\n    )\n  },\n)\n\nProgressCircle.displayName = \"ProgressCircle\"\n\nexport { ProgressCircle, type ProgressCircleProps }\n",
      "path": "src/components/ProgressCircle/ProgressCircle.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/ProgressCircle/progresscircle.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Card } from \"@/components/Card/Card\"\nimport { ProgressCircle } from \"@/components/ProgressCircle/ProgressCircle\"\n\nconst meta: Meta<typeof ProgressCircle> = {\n  title: \"visualization/ProgressCircle\",\n  component: ProgressCircle,\n  render: (args) => <ProgressCircle {...args} data-testid=\"progresscircle\" />,\n}\n\nexport default meta\ntype Story = StoryObj<typeof ProgressCircle>\n\nexport const Default: Story = {}\n\nexport const WithValue: Story = {\n  args: {\n    value: 69,\n  },\n}\n\nexport const Value120: Story = {\n  args: {\n    value: 120,\n  },\n}\n\nexport const WithMax50: Story = {\n  args: {\n    value: 40,\n    max: 50,\n  },\n}\n\nexport const WithChildren: Story = {\n  render: () => (\n    <div className=\"flex items-center justify-center gap-x-5\">\n      <ProgressCircle data-testid=\"progresscircle\" value={75}>\n        <span className=\"text-sm font-medium text-gray-700\">75%</span>\n      </ProgressCircle>\n      <div>\n        <p className=\"text-tremor-default text-tremor-content-strong dark:text-dark-tremor-content-strong font-medium\">\n          $340/$450\n        </p>\n        <p className=\"text-tremor-default text-tremor-content dark:text-dark-tremor-content\">\n          Spend management control\n        </p>\n      </div>\n    </div>\n  ),\n}\nexport const Sizes: Story = {\n  render: () => (\n    <div className=\"flex flex-wrap items-center justify-center gap-6\">\n      <ProgressCircle value={72} radius={16} strokeWidth={4} />\n      <ProgressCircle value={72} radius={25} strokeWidth={6} />\n      <ProgressCircle value={72} radius={40} strokeWidth={10} />\n      <ProgressCircle value={72} radius={45} strokeWidth={5} />\n      <ProgressCircle value={72} radius={50} strokeWidth={8} />\n    </div>\n  ),\n}\n\nexport const VariantsComposition: Story = {\n  render: () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center space-x-8\">\n        <ProgressCircle variant=\"default\" value={50} />\n        <span className=\"text-sm font-semibold text-gray-900 dark:text-gray-50\">\n          Default\n        </span>\n      </div>\n      <div className=\"flex items-center space-x-8\">\n        <ProgressCircle variant=\"neutral\" value={40} />\n        <span className=\"text-sm font-semibold text-gray-900 dark:text-gray-50\">\n          Neutral\n        </span>\n      </div>\n      <div className=\"flex items-center space-x-8\">\n        <ProgressCircle variant=\"success\" value={40} />\n        <span className=\"text-sm font-semibold text-gray-900 dark:text-gray-50\">\n          Success\n        </span>\n      </div>\n      <div className=\"flex items-center space-x-8\">\n        <ProgressCircle variant=\"warning\" value={40} />\n        <span className=\"text-sm font-semibold text-gray-900 dark:text-gray-50\">\n          Warning\n        </span>\n      </div>\n      <div className=\"flex items-center space-x-8\">\n        <ProgressCircle variant=\"error\" value={40} />\n        <span className=\"text-sm font-semibold text-gray-900 dark:text-gray-50\">\n          Error\n        </span>\n      </div>\n    </div>\n  ),\n}\n\nexport const WithKPICard: Story = {\n  render: () => (\n    <Card className=\"w-96\">\n      <p className=\"text-sm font-medium text-gray-900 dark:text-gray-50\">\n        Sales Progress\n      </p>\n      <div className=\"mt-2 flex items-center space-x-2\">\n        <span className=\"whitespace-nowrap text-sm text-gray-500\">\n          Goal 2023\n        </span>\n        <ProgressCircle value={54} max={100} />\n      </div>\n    </Card>\n  ),\n}\n",
      "path": "src/components/ProgressCircle/progresscircle.stories.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    }
  ],
  "type": "registry:component"
}
