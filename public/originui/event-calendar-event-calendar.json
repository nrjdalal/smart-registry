{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-calendar-event-calendar",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "class-variance-authority",
    "clsx",
    "date-fns",
    "lucide-react",
    "react",
    "sonner",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/event-calendar/event-calendar.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useMemo, useState } from \"react\"\nimport { RiCalendarCheckLine } from \"@remixicon/react\"\nimport {\n  addDays,\n  addMonths,\n  addWeeks,\n  endOfWeek,\n  format,\n  isSameMonth,\n  startOfWeek,\n  subMonths,\n  subWeeks,\n} from \"date-fns\"\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  PlusIcon,\n} from \"lucide-react\"\nimport { toast } from \"sonner\"\n\nimport {\n  addHoursToDate,\n  AgendaDaysToShow,\n  AgendaView,\n  CalendarDndProvider,\n  CalendarEvent,\n  CalendarView,\n  DayView,\n  EventDialog,\n  EventGap,\n  EventHeight,\n  MonthView,\n  WeekCellsHeight,\n  WeekView,\n} from \"@/components/event-calendar\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport interface EventCalendarProps {\n  events?: CalendarEvent[]\n  onEventAdd?: (event: CalendarEvent) => void\n  onEventUpdate?: (event: CalendarEvent) => void\n  onEventDelete?: (eventId: string) => void\n  className?: string\n  initialView?: CalendarView\n}\n\nexport function EventCalendar({\n  events = [],\n  onEventAdd,\n  onEventUpdate,\n  onEventDelete,\n  className,\n  initialView = \"month\",\n}: EventCalendarProps) {\n  const [currentDate, setCurrentDate] = useState(new Date())\n  const [view, setView] = useState<CalendarView>(initialView)\n  const [isEventDialogOpen, setIsEventDialogOpen] = useState(false)\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null)\n\n  // Add keyboard shortcuts for view switching\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Skip if user is typing in an input, textarea or contentEditable element\n      // or if the event dialog is open\n      if (\n        isEventDialogOpen ||\n        e.target instanceof HTMLInputElement ||\n        e.target instanceof HTMLTextAreaElement ||\n        (e.target instanceof HTMLElement && e.target.isContentEditable)\n      ) {\n        return\n      }\n\n      switch (e.key.toLowerCase()) {\n        case \"m\":\n          setView(\"month\")\n          break\n        case \"w\":\n          setView(\"week\")\n          break\n        case \"d\":\n          setView(\"day\")\n          break\n        case \"a\":\n          setView(\"agenda\")\n          break\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown)\n    }\n  }, [isEventDialogOpen])\n\n  const handlePrevious = () => {\n    if (view === \"month\") {\n      setCurrentDate(subMonths(currentDate, 1))\n    } else if (view === \"week\") {\n      setCurrentDate(subWeeks(currentDate, 1))\n    } else if (view === \"day\") {\n      setCurrentDate(addDays(currentDate, -1))\n    } else if (view === \"agenda\") {\n      // For agenda view, go back 30 days (a full month)\n      setCurrentDate(addDays(currentDate, -AgendaDaysToShow))\n    }\n  }\n\n  const handleNext = () => {\n    if (view === \"month\") {\n      setCurrentDate(addMonths(currentDate, 1))\n    } else if (view === \"week\") {\n      setCurrentDate(addWeeks(currentDate, 1))\n    } else if (view === \"day\") {\n      setCurrentDate(addDays(currentDate, 1))\n    } else if (view === \"agenda\") {\n      // For agenda view, go forward 30 days (a full month)\n      setCurrentDate(addDays(currentDate, AgendaDaysToShow))\n    }\n  }\n\n  const handleToday = () => {\n    setCurrentDate(new Date())\n  }\n\n  const handleEventSelect = (event: CalendarEvent) => {\n    console.log(\"Event selected:\", event) // Debug log\n    setSelectedEvent(event)\n    setIsEventDialogOpen(true)\n  }\n\n  const handleEventCreate = (startTime: Date) => {\n    console.log(\"Creating new event at:\", startTime) // Debug log\n\n    // Snap to 15-minute intervals\n    const minutes = startTime.getMinutes()\n    const remainder = minutes % 15\n    if (remainder !== 0) {\n      if (remainder < 7.5) {\n        // Round down to nearest 15 min\n        startTime.setMinutes(minutes - remainder)\n      } else {\n        // Round up to nearest 15 min\n        startTime.setMinutes(minutes + (15 - remainder))\n      }\n      startTime.setSeconds(0)\n      startTime.setMilliseconds(0)\n    }\n\n    const newEvent: CalendarEvent = {\n      id: \"\",\n      title: \"\",\n      start: startTime,\n      end: addHoursToDate(startTime, 1),\n      allDay: false,\n    }\n    setSelectedEvent(newEvent)\n    setIsEventDialogOpen(true)\n  }\n\n  const handleEventSave = (event: CalendarEvent) => {\n    if (event.id) {\n      onEventUpdate?.(event)\n      // Show toast notification when an event is updated\n      toast(`Event \"${event.title}\" updated`, {\n        description: format(new Date(event.start), \"MMM d, yyyy\"),\n        position: \"bottom-left\",\n      })\n    } else {\n      onEventAdd?.({\n        ...event,\n        id: Math.random().toString(36).substring(2, 11),\n      })\n      // Show toast notification when an event is added\n      toast(`Event \"${event.title}\" added`, {\n        description: format(new Date(event.start), \"MMM d, yyyy\"),\n        position: \"bottom-left\",\n      })\n    }\n    setIsEventDialogOpen(false)\n    setSelectedEvent(null)\n  }\n\n  const handleEventDelete = (eventId: string) => {\n    const deletedEvent = events.find((e) => e.id === eventId)\n    onEventDelete?.(eventId)\n    setIsEventDialogOpen(false)\n    setSelectedEvent(null)\n\n    // Show toast notification when an event is deleted\n    if (deletedEvent) {\n      toast(`Event \"${deletedEvent.title}\" deleted`, {\n        description: format(new Date(deletedEvent.start), \"MMM d, yyyy\"),\n        position: \"bottom-left\",\n      })\n    }\n  }\n\n  const handleEventUpdate = (updatedEvent: CalendarEvent) => {\n    onEventUpdate?.(updatedEvent)\n\n    // Show toast notification when an event is updated via drag and drop\n    toast(`Event \"${updatedEvent.title}\" moved`, {\n      description: format(new Date(updatedEvent.start), \"MMM d, yyyy\"),\n      position: \"bottom-left\",\n    })\n  }\n\n  const viewTitle = useMemo(() => {\n    if (view === \"month\") {\n      return format(currentDate, \"MMMM yyyy\")\n    } else if (view === \"week\") {\n      const start = startOfWeek(currentDate, { weekStartsOn: 0 })\n      const end = endOfWeek(currentDate, { weekStartsOn: 0 })\n      if (isSameMonth(start, end)) {\n        return format(start, \"MMMM yyyy\")\n      } else {\n        return `${format(start, \"MMM\")} - ${format(end, \"MMM yyyy\")}`\n      }\n    } else if (view === \"day\") {\n      return (\n        <>\n          <span className=\"min-[480px]:hidden\" aria-hidden=\"true\">\n            {format(currentDate, \"MMM d, yyyy\")}\n          </span>\n          <span className=\"max-[479px]:hidden min-md:hidden\" aria-hidden=\"true\">\n            {format(currentDate, \"MMMM d, yyyy\")}\n          </span>\n          <span className=\"max-md:hidden\">\n            {format(currentDate, \"EEE MMMM d, yyyy\")}\n          </span>\n        </>\n      )\n    } else if (view === \"agenda\") {\n      // Show the month range for agenda view\n      const start = currentDate\n      const end = addDays(currentDate, AgendaDaysToShow - 1)\n\n      if (isSameMonth(start, end)) {\n        return format(start, \"MMMM yyyy\")\n      } else {\n        return `${format(start, \"MMM\")} - ${format(end, \"MMM yyyy\")}`\n      }\n    } else {\n      return format(currentDate, \"MMMM yyyy\")\n    }\n  }, [currentDate, view])\n\n  return (\n    <div\n      className=\"flex flex-col rounded-lg border has-data-[slot=month-view]:flex-1\"\n      style={\n        {\n          \"--event-height\": `${EventHeight}px`,\n          \"--event-gap\": `${EventGap}px`,\n          \"--week-cells-height\": `${WeekCellsHeight}px`,\n        } as React.CSSProperties\n      }\n    >\n      <CalendarDndProvider onEventUpdate={handleEventUpdate}>\n        <div\n          className={cn(\n            \"flex items-center justify-between p-2 sm:p-4\",\n            className\n          )}\n        >\n          <div className=\"flex items-center gap-1 sm:gap-4\">\n            <Button\n              variant=\"outline\"\n              className=\"aspect-square max-[479px]:p-0!\"\n              onClick={handleToday}\n            >\n              <RiCalendarCheckLine\n                className=\"min-[480px]:hidden\"\n                size={16}\n                aria-hidden=\"true\"\n              />\n              <span className=\"max-[479px]:sr-only\">Today</span>\n            </Button>\n            <div className=\"flex items-center sm:gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handlePrevious}\n                aria-label=\"Previous\"\n              >\n                <ChevronLeftIcon size={16} aria-hidden=\"true\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleNext}\n                aria-label=\"Next\"\n              >\n                <ChevronRightIcon size={16} aria-hidden=\"true\" />\n              </Button>\n            </div>\n            <h2 className=\"text-sm font-semibold sm:text-lg md:text-xl\">\n              {viewTitle}\n            </h2>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" className=\"gap-1.5 max-[479px]:h-8\">\n                  <span>\n                    <span className=\"min-[480px]:hidden\" aria-hidden=\"true\">\n                      {view.charAt(0).toUpperCase()}\n                    </span>\n                    <span className=\"max-[479px]:sr-only\">\n                      {view.charAt(0).toUpperCase() + view.slice(1)}\n                    </span>\n                  </span>\n                  <ChevronDownIcon\n                    className=\"-me-1 opacity-60\"\n                    size={16}\n                    aria-hidden=\"true\"\n                  />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"min-w-32\">\n                <DropdownMenuItem onClick={() => setView(\"month\")}>\n                  Month <DropdownMenuShortcut>M</DropdownMenuShortcut>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setView(\"week\")}>\n                  Week <DropdownMenuShortcut>W</DropdownMenuShortcut>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setView(\"day\")}>\n                  Day <DropdownMenuShortcut>D</DropdownMenuShortcut>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setView(\"agenda\")}>\n                  Agenda <DropdownMenuShortcut>A</DropdownMenuShortcut>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n            <Button\n              className=\"aspect-square max-[479px]:p-0!\"\n              onClick={() => {\n                setSelectedEvent(null) // Ensure we're creating a new event\n                setIsEventDialogOpen(true)\n              }}\n            >\n              <PlusIcon\n                className=\"opacity-60 sm:-ms-1\"\n                size={16}\n                aria-hidden=\"true\"\n              />\n              <span className=\"max-sm:sr-only\">New event</span>\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex flex-1 flex-col\">\n          {view === \"month\" && (\n            <MonthView\n              currentDate={currentDate}\n              events={events}\n              onEventSelect={handleEventSelect}\n              onEventCreate={handleEventCreate}\n            />\n          )}\n          {view === \"week\" && (\n            <WeekView\n              currentDate={currentDate}\n              events={events}\n              onEventSelect={handleEventSelect}\n              onEventCreate={handleEventCreate}\n            />\n          )}\n          {view === \"day\" && (\n            <DayView\n              currentDate={currentDate}\n              events={events}\n              onEventSelect={handleEventSelect}\n              onEventCreate={handleEventCreate}\n            />\n          )}\n          {view === \"agenda\" && (\n            <AgendaView\n              currentDate={currentDate}\n              events={events}\n              onEventSelect={handleEventSelect}\n            />\n          )}\n        </div>\n\n        <EventDialog\n          event={selectedEvent}\n          isOpen={isEventDialogOpen}\n          onClose={() => {\n            setIsEventDialogOpen(false)\n            setSelectedEvent(null)\n          }}\n          onSave={handleEventSave}\n          onDelete={handleEventDelete}\n        />\n      </CalendarDndProvider>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/event-calendar/event-calendar.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/event-calendar/index.ts",
      "content": "\"use client\"\n\n// Component exports\nexport { AgendaView } from \"./agenda-view\"\nexport { DayView } from \"./day-view\"\nexport { DraggableEvent } from \"./draggable-event\"\nexport { DroppableCell } from \"./droppable-cell\"\nexport { EventDialog } from \"./event-dialog\"\nexport { EventItem } from \"./event-item\"\nexport { EventsPopup } from \"./events-popup\"\nexport { EventCalendar } from \"./event-calendar\"\nexport { MonthView } from \"./month-view\"\nexport { WeekView } from \"./week-view\"\nexport { CalendarDndProvider, useCalendarDnd } from \"./calendar-dnd-context\"\n\n// Constants and utility exports\nexport * from \"./constants\"\nexport * from \"./utils\"\n\n// Hook exports\nexport * from \"./hooks/use-current-time-indicator\"\nexport * from \"./hooks/use-event-visibility\"\n\n// Type exports\nexport type { CalendarEvent, CalendarView, EventColor } from \"./types\"\n",
      "path": "registry/default/components/event-calendar/index.ts"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "registry/default/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "path": "registry/default/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/dropdown-menu.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype PointerDownEvent = Parameters<\n  NonNullable<DropdownMenuPrimitive.DropdownMenuContentProps[\"onPointerDown\"]>\n>[0]\ntype PointerDownOutsideEvent = Parameters<\n  NonNullable<\n    DropdownMenuPrimitive.DropdownMenuContentProps[\"onPointerDownOutside\"]\n  >\n>[0]\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  onPointerDown,\n  onPointerDownOutside,\n  onCloseAutoFocus,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  const isCloseFromMouse = React.useRef<boolean>(false)\n\n  const handlePointerDown = React.useCallback(\n    (e: PointerDownEvent) => {\n      isCloseFromMouse.current = true\n      onPointerDown?.(e)\n    },\n    [onPointerDown]\n  )\n\n  const handlePointerDownOutside = React.useCallback(\n    (e: PointerDownOutsideEvent) => {\n      isCloseFromMouse.current = true\n      onPointerDownOutside?.(e)\n    },\n    [onPointerDownOutside]\n  )\n\n  const handleCloseAutoFocus = React.useCallback(\n    (e: Event) => {\n      if (onCloseAutoFocus) {\n        return onCloseAutoFocus(e)\n      }\n\n      if (!isCloseFromMouse.current) {\n        return\n      }\n\n      e.preventDefault()\n      isCloseFromMouse.current = false\n    },\n    [onCloseAutoFocus]\n  )\n\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-40 overflow-hidden rounded-md border p-1 shadow-lg\",\n          className\n        )}\n        onPointerDown={handlePointerDown}\n        onPointerDownOutside={handlePointerDownOutside}\n        onCloseAutoFocus={handleCloseAutoFocus}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon size={16} />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"text-muted-foreground px-2 py-1.5 text-xs font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <kbd\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"bg-background text-muted-foreground/70 ms-auto -me-1 inline-flex h-5 max-h-full items-center rounded border px-1 font-[inherit] text-[0.625rem] font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon\n        size={16}\n        className=\"text-muted-foreground/80 ml-auto\"\n      />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-40 overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n}\n",
      "path": "registry/default/ui/dropdown-menu.tsx"
    }
  ]
}
