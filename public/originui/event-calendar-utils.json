{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-calendar-utils",
  "type": "registry:component",
  "dependencies": [
    "date-fns"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/event-calendar/utils.ts",
      "content": "import { isSameDay } from \"date-fns\"\n\nimport type {\n  CalendarEvent,\n  EventColor,\n} from \"@/components/event-calendar\"\n\n/**\n * Get CSS classes for event colors\n */\nexport function getEventColorClasses(color?: EventColor | string): string {\n  const eventColor = color || \"sky\"\n\n  switch (eventColor) {\n    case \"sky\":\n      return \"bg-sky-200/50 hover:bg-sky-200/40 text-sky-950/80 dark:bg-sky-400/25 dark:hover:bg-sky-400/20 dark:text-sky-200 shadow-sky-700/8\"\n    case \"amber\":\n      return \"bg-amber-200/50 hover:bg-amber-200/40 text-amber-950/80 dark:bg-amber-400/25 dark:hover:bg-amber-400/20 dark:text-amber-200 shadow-amber-700/8\"\n    case \"violet\":\n      return \"bg-violet-200/50 hover:bg-violet-200/40 text-violet-950/80 dark:bg-violet-400/25 dark:hover:bg-violet-400/20 dark:text-violet-200 shadow-violet-700/8\"\n    case \"rose\":\n      return \"bg-rose-200/50 hover:bg-rose-200/40 text-rose-950/80 dark:bg-rose-400/25 dark:hover:bg-rose-400/20 dark:text-rose-200 shadow-rose-700/8\"\n    case \"emerald\":\n      return \"bg-emerald-200/50 hover:bg-emerald-200/40 text-emerald-950/80 dark:bg-emerald-400/25 dark:hover:bg-emerald-400/20 dark:text-emerald-200 shadow-emerald-700/8\"\n    case \"orange\":\n      return \"bg-orange-200/50 hover:bg-orange-200/40 text-orange-950/80 dark:bg-orange-400/25 dark:hover:bg-orange-400/20 dark:text-orange-200 shadow-orange-700/8\"\n    default:\n      return \"bg-sky-200/50 hover:bg-sky-200/40 text-sky-950/80 dark:bg-sky-400/25 dark:hover:bg-sky-400/20 dark:text-sky-200 shadow-sky-700/8\"\n  }\n}\n\n/**\n * Get CSS classes for border radius based on event position in multi-day events\n */\nexport function getBorderRadiusClasses(\n  isFirstDay: boolean,\n  isLastDay: boolean\n): string {\n  if (isFirstDay && isLastDay) {\n    return \"rounded\" // Both ends rounded\n  } else if (isFirstDay) {\n    return \"rounded-l rounded-r-none\" // Only left end rounded\n  } else if (isLastDay) {\n    return \"rounded-r rounded-l-none\" // Only right end rounded\n  } else {\n    return \"rounded-none\" // No rounded corners\n  }\n}\n\n/**\n * Check if an event is a multi-day event\n */\nexport function isMultiDayEvent(event: CalendarEvent): boolean {\n  const eventStart = new Date(event.start)\n  const eventEnd = new Date(event.end)\n  return event.allDay || eventStart.getDate() !== eventEnd.getDate()\n}\n\n/**\n * Filter events for a specific day\n */\nexport function getEventsForDay(\n  events: CalendarEvent[],\n  day: Date\n): CalendarEvent[] {\n  return events\n    .filter((event) => {\n      const eventStart = new Date(event.start)\n      return isSameDay(day, eventStart)\n    })\n    .sort((a, b) => new Date(a.start).getTime() - new Date(b.start).getTime())\n}\n\n/**\n * Sort events with multi-day events first, then by start time\n */\nexport function sortEvents(events: CalendarEvent[]): CalendarEvent[] {\n  return [...events].sort((a, b) => {\n    const aIsMultiDay = isMultiDayEvent(a)\n    const bIsMultiDay = isMultiDayEvent(b)\n\n    if (aIsMultiDay && !bIsMultiDay) return -1\n    if (!aIsMultiDay && bIsMultiDay) return 1\n\n    return new Date(a.start).getTime() - new Date(b.start).getTime()\n  })\n}\n\n/**\n * Get multi-day events that span across a specific day (but don't start on that day)\n */\nexport function getSpanningEventsForDay(\n  events: CalendarEvent[],\n  day: Date\n): CalendarEvent[] {\n  return events.filter((event) => {\n    if (!isMultiDayEvent(event)) return false\n\n    const eventStart = new Date(event.start)\n    const eventEnd = new Date(event.end)\n\n    // Only include if it's not the start day but is either the end day or a middle day\n    return (\n      !isSameDay(day, eventStart) &&\n      (isSameDay(day, eventEnd) || (day > eventStart && day < eventEnd))\n    )\n  })\n}\n\n/**\n * Get all events visible on a specific day (starting, ending, or spanning)\n */\nexport function getAllEventsForDay(\n  events: CalendarEvent[],\n  day: Date\n): CalendarEvent[] {\n  return events.filter((event) => {\n    const eventStart = new Date(event.start)\n    const eventEnd = new Date(event.end)\n    return (\n      isSameDay(day, eventStart) ||\n      isSameDay(day, eventEnd) ||\n      (day > eventStart && day < eventEnd)\n    )\n  })\n}\n\n/**\n * Get all events for a day (for agenda view)\n */\nexport function getAgendaEventsForDay(\n  events: CalendarEvent[],\n  day: Date\n): CalendarEvent[] {\n  return events\n    .filter((event) => {\n      const eventStart = new Date(event.start)\n      const eventEnd = new Date(event.end)\n      return (\n        isSameDay(day, eventStart) ||\n        isSameDay(day, eventEnd) ||\n        (day > eventStart && day < eventEnd)\n      )\n    })\n    .sort((a, b) => new Date(a.start).getTime() - new Date(b.start).getTime())\n}\n\n/**\n * Add hours to a date\n */\nexport function addHoursToDate(date: Date, hours: number): Date {\n  const result = new Date(date)\n  result.setHours(result.getHours() + hours)\n  return result\n}\n",
      "path": "registry/default/components/event-calendar/utils.ts"
    },
    {
      "type": "registry:component",
      "target": "components/event-calendar/index.ts",
      "content": "\"use client\"\n\n// Component exports\nexport { AgendaView } from \"./agenda-view\"\nexport { DayView } from \"./day-view\"\nexport { DraggableEvent } from \"./draggable-event\"\nexport { DroppableCell } from \"./droppable-cell\"\nexport { EventDialog } from \"./event-dialog\"\nexport { EventItem } from \"./event-item\"\nexport { EventsPopup } from \"./events-popup\"\nexport { EventCalendar } from \"./event-calendar\"\nexport { MonthView } from \"./month-view\"\nexport { WeekView } from \"./week-view\"\nexport { CalendarDndProvider, useCalendarDnd } from \"./calendar-dnd-context\"\n\n// Constants and utility exports\nexport * from \"./constants\"\nexport * from \"./utils\"\n\n// Hook exports\nexport * from \"./hooks/use-current-time-indicator\"\nexport * from \"./hooks/use-event-visibility\"\n\n// Type exports\nexport type { CalendarEvent, CalendarView, EventColor } from \"./types\"\n",
      "path": "registry/default/components/event-calendar/index.ts"
    }
  ]
}
