{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-264",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-label",
    "@radix-ui/react-slider",
    "@radix-ui/react-tooltip"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/smart-registry/comp-264.tsx",
      "content": "\"use client\"\n\nimport { useSliderWithInput } from \"@/hooks/use-slider-with-input\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Slider } from \"@/components/ui/slider\"\nimport { RotateCcwIcon } from \"lucide-react\"\nimport React, { useRef } from \"react\"\n\nexport default function Component() {\n  // Create refs to store reset functions\n  const resetFunctionsRef = useRef<(() => void)[]>([])\n\n  // Function to reset all sliders to default\n  const resetAll = () => {\n    resetFunctionsRef.current.forEach((resetFn) => resetFn())\n  }\n\n  // Function to register reset functions\n  const registerResetFunction = (resetFn: () => void, index: number) => {\n    resetFunctionsRef.current[index] = resetFn\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <legend className=\"text-foreground text-sm font-medium\">\n        Object position\n      </legend>\n      <div className=\"space-y-2\">\n        <SliderWithInput\n          minValue={-10}\n          maxValue={10}\n          initialValue={[-2]}\n          defaultValue={[0]}\n          label=\"X\"\n          onRegisterReset={(resetFn) => registerResetFunction(resetFn, 0)}\n        />\n        <SliderWithInput\n          minValue={-10}\n          maxValue={10}\n          initialValue={[4]}\n          defaultValue={[0]}\n          label=\"Y\"\n          onRegisterReset={(resetFn) => registerResetFunction(resetFn, 1)}\n        />\n        <SliderWithInput\n          minValue={-10}\n          maxValue={10}\n          initialValue={[2]}\n          defaultValue={[0]}\n          label=\"Z\"\n          onRegisterReset={(resetFn) => registerResetFunction(resetFn, 2)}\n        />\n      </div>\n      <Button className=\"w-full\" variant=\"outline\" onClick={resetAll}>\n        <RotateCcwIcon\n          className=\"-ms-1 opacity-60\"\n          size={16}\n          aria-hidden=\"true\"\n        />\n        Reset\n      </Button>\n    </div>\n  )\n}\n\nfunction SliderWithInput({\n  minValue,\n  maxValue,\n  initialValue,\n  defaultValue,\n  label,\n  onRegisterReset,\n}: {\n  minValue: number\n  maxValue: number\n  initialValue: number[]\n  defaultValue: number[]\n  label: string\n  onRegisterReset: (resetFn: () => void) => void\n}) {\n  const {\n    sliderValue,\n    inputValues,\n    validateAndUpdateValue,\n    handleInputChange,\n    handleSliderChange,\n    resetToDefault,\n  } = useSliderWithInput({ minValue, maxValue, initialValue, defaultValue })\n\n  // Register the reset function when the component mounts\n  React.useEffect(() => {\n    onRegisterReset(resetToDefault)\n  }, [onRegisterReset, resetToDefault])\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Label className=\"text-muted-foreground text-xs\">{label}</Label>\n      <Slider\n        className=\"grow [&>:last-child>span]:rounded\"\n        value={sliderValue}\n        onValueChange={handleSliderChange}\n        min={minValue}\n        max={maxValue}\n        aria-label={label}\n      />\n      <Input\n        className=\"h-8 w-12 px-2 py-1\"\n        type=\"text\"\n        inputMode=\"decimal\"\n        value={inputValues[0]}\n        onChange={(e) => handleInputChange(e, 0)}\n        onBlur={() => validateAndUpdateValue(inputValues[0], 0)}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\") {\n            validateAndUpdateValue(inputValues[0], 0)\n          }\n        }}\n        aria-label=\"Enter value\"\n      />\n    </div>\n  )\n}\n",
      "path": "registry/default/components/comp-264.tsx"
    },
    {
      "type": "registry:hook",
      "target": "hooks/use-slider-with-input.ts",
      "content": "\"use client\"\n\nimport { useCallback, useState } from \"react\"\n\ntype UseSliderWithInputProps = {\n  minValue?: number\n  maxValue?: number\n  initialValue?: number[]\n  defaultValue?: number[]\n}\n\nexport function useSliderWithInput({\n  minValue = 0,\n  maxValue = 100,\n  initialValue = [minValue],\n  defaultValue = [minValue],\n}: UseSliderWithInputProps) {\n  const [sliderValue, setSliderValue] = useState(initialValue)\n  const [inputValues, setInputValues] = useState(\n    initialValue.map((v) => v.toString()),\n  )\n\n  const showReset =\n    sliderValue.length === defaultValue.length &&\n    !sliderValue.every((value, index) => value === defaultValue[index])\n\n  const validateAndUpdateValue = useCallback(\n    (rawValue: string, index: number) => {\n      if (rawValue === \"\" || rawValue === \"-\") {\n        const newInputValues = [...inputValues]\n        newInputValues[index] = \"0\"\n        setInputValues(newInputValues)\n\n        const newSliderValues = [...sliderValue]\n        newSliderValues[index] = 0\n        setSliderValue(newSliderValues)\n        return\n      }\n\n      const numValue = parseFloat(rawValue)\n\n      if (isNaN(numValue)) {\n        const newInputValues = [...inputValues]\n        newInputValues[index] = sliderValue[index]!.toString()\n        setInputValues(newInputValues)\n        return\n      }\n\n      let clampedValue = Math.min(maxValue, Math.max(minValue, numValue))\n\n      if (sliderValue.length > 1) {\n        if (index === 0) {\n          clampedValue = Math.min(clampedValue, sliderValue[1]!)\n        } else {\n          clampedValue = Math.max(clampedValue, sliderValue[0]!)\n        }\n      }\n\n      const newSliderValues = [...sliderValue]\n      newSliderValues[index] = clampedValue\n      setSliderValue(newSliderValues)\n\n      const newInputValues = [...inputValues]\n      newInputValues[index] = clampedValue.toString()\n      setInputValues(newInputValues)\n    },\n    [sliderValue, inputValues, minValue, maxValue],\n  )\n\n  const handleInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>, index: number) => {\n      const newValue = e.target.value\n      if (newValue === \"\" || /^-?\\d*\\.?\\d*$/.test(newValue)) {\n        const newInputValues = [...inputValues]\n        newInputValues[index] = newValue\n        setInputValues(newInputValues)\n      }\n    },\n    [inputValues],\n  )\n\n  const handleSliderChange = useCallback((newValue: number[]) => {\n    setSliderValue(newValue)\n    setInputValues(newValue.map((v) => v.toString()))\n  }, [])\n\n  const resetToDefault = useCallback(() => {\n    setSliderValue(defaultValue)\n    setInputValues(defaultValue.map((v) => v.toString()))\n  }, [defaultValue])\n\n  return {\n    sliderValue,\n    inputValues,\n    validateAndUpdateValue,\n    handleInputChange,\n    handleSliderChange,\n    resetToDefault,\n    showReset,\n  }\n}\n",
      "path": "registry/default/hooks/use-slider-with-input.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import { cn } from \"@/lib/utils\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "path": "registry/default/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/input.tsx",
      "content": "import { cn } from \"@/lib/utils\"\nimport * as React from \"react\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"border-input file:text-foreground placeholder:text-muted-foreground/70 flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-sm shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        type === \"search\" &&\n          \"[&::-webkit-search-cancel-button]:appearance-none [&::-webkit-search-decoration]:appearance-none [&::-webkit-search-results-button]:appearance-none [&::-webkit-search-results-decoration]:appearance-none\",\n        type === \"file\" &&\n          \"text-muted-foreground/70 file:border-input file:text-foreground p-0 pr-3 italic file:me-3 file:h-full file:border-0 file:border-r file:border-solid file:bg-transparent file:px-3 file:text-sm file:font-medium file:not-italic\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
      "path": "registry/default/ui/input.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/label.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport * as React from \"react\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"text-foreground text-sm leading-4 font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
      "path": "registry/default/ui/label.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/slider.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\nimport * as React from \"react\"\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  showTooltip = false,\n  tooltipContent,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root> & {\n  showTooltip?: boolean\n  tooltipContent?: (value: number) => React.ReactNode\n}) {\n  const [internalValues, setInternalValues] = React.useState<number[]>(\n    Array.isArray(value)\n      ? value\n      : Array.isArray(defaultValue)\n        ? defaultValue\n        : [min, max],\n  )\n\n  React.useEffect(() => {\n    if (value !== undefined) {\n      setInternalValues(Array.isArray(value) ? value : [value])\n    }\n  }, [value])\n\n  const handleValueChange = (newValue: number[]) => {\n    setInternalValues(newValue)\n    props.onValueChange?.(newValue)\n  }\n\n  const [showTooltipState, setShowTooltipState] = React.useState(false)\n\n  const handlePointerDown = () => {\n    if (showTooltip) {\n      setShowTooltipState(true)\n    }\n  }\n\n  const handlePointerUp = React.useCallback(() => {\n    if (showTooltip) {\n      setShowTooltipState(false)\n    }\n  }, [showTooltip])\n\n  React.useEffect(() => {\n    if (showTooltip) {\n      document.addEventListener(\"pointerup\", handlePointerUp)\n      return () => {\n        document.removeEventListener(\"pointerup\", handlePointerUp)\n      }\n    }\n  }, [showTooltip, handlePointerUp])\n\n  const renderThumb = (value: number) => {\n    const thumb = (\n      <SliderPrimitive.Thumb\n        data-slot=\"slider-thumb\"\n        className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] outline-none hover:ring-4 focus-visible:ring-4 disabled:pointer-events-none disabled:opacity-50\"\n        onPointerDown={handlePointerDown}\n      />\n    )\n\n    if (!showTooltip) return thumb\n\n    return (\n      <TooltipProvider>\n        <Tooltip open={showTooltipState}>\n          <TooltipTrigger asChild>{thumb}</TooltipTrigger>\n          <TooltipContent\n            className=\"px-2 py-1 text-xs\"\n            sideOffset={8}\n            side={props.orientation === \"vertical\" ? \"right\" : \"top\"}\n          >\n            <p>{tooltipContent ? tooltipContent(value) : value}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    )\n  }\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className,\n      )}\n      onValueChange={handleValueChange}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\",\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\",\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: internalValues.length }, (_, index) => (\n        <React.Fragment key={index}>\n          {renderThumb(internalValues[index])}\n        </React.Fragment>\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n",
      "path": "registry/default/ui/slider.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "registry/default/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/tooltip.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\nimport * as React from \"react\"\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 4,\n  showArrow = false,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content> & {\n  showArrow?: boolean\n}) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-w-70 rounded-md border px-3 py-1.5 text-sm\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showArrow && (\n          <TooltipPrimitive.Arrow className=\"fill-popover -my-px drop-shadow-[0_1px_0_hsl(var(--border))]\" />\n        )}\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger }\n",
      "path": "registry/default/ui/tooltip.tsx"
    }
  ]
}
