{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "components/smart-registry/comp-465",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "react",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-label"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/smart-registry/comp-465.tsx",
      "content": "import { usePagination } from \"@/registry/default/hooks/use-pagination\"\nimport { Input } from \"@/registry/default/ui/input\"\nimport { Label } from \"@/registry/default/ui/label\"\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n} from \"@/registry/default/ui/pagination\"\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\"\nimport { useId } from \"react\"\n\ntype PaginationProps = {\n  currentPage: number\n  totalPages: number\n  paginationItemsToDisplay?: number\n}\n\nexport default function Component({\n  currentPage,\n  totalPages,\n  paginationItemsToDisplay = 5,\n}: PaginationProps) {\n  const id = useId()\n\n  const { pages, showLeftEllipsis, showRightEllipsis } = usePagination({\n    currentPage,\n    totalPages,\n    paginationItemsToDisplay,\n  })\n\n  return (\n    <div className=\"flex items-center justify-between gap-4\">\n      {/* Pagination */}\n      <div>\n        <Pagination>\n          <PaginationContent>\n            {/* Previous page button */}\n            <PaginationItem>\n              <PaginationLink\n                className=\"aria-disabled:pointer-events-none aria-disabled:opacity-50\"\n                href={\n                  currentPage === 1 ? undefined : `#/page/${currentPage - 1}`\n                }\n                aria-label=\"Go to previous page\"\n                aria-disabled={currentPage === 1 ? true : undefined}\n                role={currentPage === 1 ? \"link\" : undefined}\n              >\n                <ChevronLeftIcon size={16} aria-hidden=\"true\" />\n              </PaginationLink>\n            </PaginationItem>\n\n            {/* Left ellipsis (...) */}\n            {showLeftEllipsis && (\n              <PaginationItem>\n                <PaginationEllipsis />\n              </PaginationItem>\n            )}\n\n            {/* Page number links */}\n            {pages.map((page) => (\n              <PaginationItem key={page}>\n                <PaginationLink\n                  href={`#/page/${page}`}\n                  isActive={page === currentPage}\n                >\n                  {page}\n                </PaginationLink>\n              </PaginationItem>\n            ))}\n\n            {/* Right ellipsis (...) */}\n            {showRightEllipsis && (\n              <PaginationItem>\n                <PaginationEllipsis />\n              </PaginationItem>\n            )}\n\n            {/* Next page button */}\n            <PaginationItem>\n              <PaginationLink\n                className=\"aria-disabled:pointer-events-none aria-disabled:opacity-50\"\n                href={\n                  currentPage === totalPages\n                    ? undefined\n                    : `#/page/${currentPage + 1}`\n                }\n                aria-label=\"Go to next page\"\n                aria-disabled={currentPage === totalPages ? true : undefined}\n                role={currentPage === totalPages ? \"link\" : undefined}\n              >\n                <ChevronRightIcon size={16} aria-hidden=\"true\" />\n              </PaginationLink>\n            </PaginationItem>\n          </PaginationContent>\n        </Pagination>\n      </div>\n\n      {/* Go to page input */}\n      <div className=\"flex items-center gap-3\">\n        <Label htmlFor={id} className=\"whitespace-nowrap\">\n          Go to page\n        </Label>\n        <Input\n          id={id}\n          type=\"text\"\n          className=\"w-14\"\n          defaultValue={String(currentPage)}\n        />\n      </div>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/comp-465.tsx"
    },
    {
      "type": "registry:hook",
      "target": "hooks/smart-registry/use-pagination.ts",
      "content": "type UsePaginationProps = {\n  currentPage: number\n  totalPages: number\n  paginationItemsToDisplay: number\n}\n\ntype UsePaginationReturn = {\n  pages: number[]\n  showLeftEllipsis: boolean\n  showRightEllipsis: boolean\n}\n\nexport function usePagination({\n  currentPage,\n  totalPages,\n  paginationItemsToDisplay,\n}: UsePaginationProps): UsePaginationReturn {\n  const showLeftEllipsis = currentPage - 1 > paginationItemsToDisplay / 2\n  const showRightEllipsis =\n    totalPages - currentPage + 1 > paginationItemsToDisplay / 2\n\n  function calculatePaginationRange(): number[] {\n    if (totalPages <= paginationItemsToDisplay) {\n      return Array.from({ length: totalPages }, (_, i) => i + 1)\n    }\n\n    const halfDisplay = Math.floor(paginationItemsToDisplay / 2)\n    const initialRange = {\n      start: currentPage - halfDisplay,\n      end: currentPage + halfDisplay,\n    }\n\n    const adjustedRange = {\n      start: Math.max(1, initialRange.start),\n      end: Math.min(totalPages, initialRange.end),\n    }\n\n    if (adjustedRange.start === 1) {\n      adjustedRange.end = paginationItemsToDisplay\n    }\n    if (adjustedRange.end === totalPages) {\n      adjustedRange.start = totalPages - paginationItemsToDisplay + 1\n    }\n\n    if (showLeftEllipsis) adjustedRange.start++\n    if (showRightEllipsis) adjustedRange.end--\n\n    return Array.from(\n      { length: adjustedRange.end - adjustedRange.start + 1 },\n      (_, i) => adjustedRange.start + i,\n    )\n  }\n\n  const pages = calculatePaginationRange()\n\n  return {\n    pages,\n    showLeftEllipsis,\n    showRightEllipsis,\n  }\n}\n",
      "path": "registry/default/hooks/use-pagination.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/smart-registry/input.tsx",
      "content": "import { cn } from \"@/registry/default/lib/utils\"\nimport * as React from \"react\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"border-input file:text-foreground placeholder:text-muted-foreground/70 flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-sm shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        type === \"search\" &&\n          \"[&::-webkit-search-cancel-button]:appearance-none [&::-webkit-search-decoration]:appearance-none [&::-webkit-search-results-button]:appearance-none [&::-webkit-search-results-decoration]:appearance-none\",\n        type === \"file\" &&\n          \"text-muted-foreground/70 file:border-input file:text-foreground p-0 pr-3 italic file:me-3 file:h-full file:border-0 file:border-r file:border-solid file:bg-transparent file:px-3 file:text-sm file:font-medium file:not-italic\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
      "path": "registry/default/ui/input.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/smart-registry/label.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport * as React from \"react\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"text-foreground text-sm leading-4 font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
      "path": "registry/default/ui/label.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/smart-registry/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "registry/default/lib/utils.ts"
    }
  ]
}