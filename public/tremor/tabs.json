{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-tabs"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Tabs/Tabs.tsx",
      "content": "// Tremor Tabs [v1.0.0]\n\nimport React from \"react\"\nimport * as TabsPrimitives from \"@radix-ui/react-tabs\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst Tabs = (\n  props: Omit<\n    React.ComponentPropsWithoutRef<typeof TabsPrimitives.Root>,\n    \"orientation\"\n  >,\n) => {\n  return <TabsPrimitives.Root tremor-id=\"tremor-raw\" {...props} />\n}\n\nTabs.displayName = \"Tabs\"\n\ntype TabsListVariant = \"line\" | \"solid\"\n\nconst TabsListVariantContext = React.createContext<TabsListVariant>(\"line\")\n\ninterface TabsListProps\n  extends React.ComponentPropsWithoutRef<typeof TabsPrimitives.List> {\n  variant?: TabsListVariant\n}\n\nconst variantStyles: Record<TabsListVariant, string> = {\n  line: cx(\n    // base\n    \"flex items-center justify-start border-b\",\n    // border color\n    \"border-gray-200 dark:border-gray-800\",\n  ),\n  solid: cx(\n    // base\n    \"inline-flex items-center justify-center rounded-md p-1\",\n    // background color\n    \"bg-gray-100 dark:bg-gray-900\",\n  ),\n}\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitives.List>,\n  TabsListProps\n>(({ className, variant = \"line\", children, ...props }, forwardedRef) => (\n  <TabsPrimitives.List\n    ref={forwardedRef}\n    className={cx(variantStyles[variant], className)}\n    {...props}\n  >\n    <TabsListVariantContext.Provider value={variant}>\n      {children}\n    </TabsListVariantContext.Provider>\n  </TabsPrimitives.List>\n))\n\nTabsList.displayName = \"TabsList\"\n\nfunction getVariantStyles(tabVariant: TabsListVariant) {\n  switch (tabVariant) {\n    case \"line\":\n      return cx(\n        // base\n        \"-mb-px items-center justify-center whitespace-nowrap border-b-2 border-transparent px-3 pb-2 text-sm font-medium transition-all\",\n        // text color\n        \"text-gray-500 dark:text-gray-500\",\n        // hover\n        \"hover:text-gray-700 dark:hover:text-gray-400\",\n        // border hover\n        \"hover:border-gray-300 dark:hover:border-gray-400\",\n        // selected\n        \"data-[state=active]:border-blue-500 data-[state=active]:text-blue-500\",\n        \"dark:data-[state=active]:border-blue-500 dark:data-[state=active]:text-blue-500\",\n        // disabled\n        \"data-disabled:pointer-events-none\",\n        \"data-disabled:text-gray-300 dark:data-disabled:text-gray-700\",\n      )\n    case \"solid\":\n      return cx(\n        // base\n        \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1 text-sm font-medium ring-1 ring-inset transition-all\",\n        // text color\n        \"text-gray-500 dark:text-gray-400\",\n        // hover\n        \"hover:text-gray-700 dark:hover:text-gray-200\",\n        // ring\n        \"ring-transparent\",\n        // selected\n        \"data-[state=active]:bg-white data-[state=active]:text-gray-900 data-[state=active]:shadow-sm\",\n        \"dark:data-[state=active]:bg-gray-950 dark:data-[state=active]:text-gray-50\",\n        // disabled\n        \"data-disabled:pointer-events-none data-disabled:text-gray-400 data-disabled:opacity-50 dark:data-disabled:text-gray-600\",\n      )\n  }\n}\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitives.Trigger>\n>(({ className, children, ...props }, forwardedRef) => {\n  const variant = React.useContext(TabsListVariantContext)\n  return (\n    <TabsPrimitives.Trigger\n      ref={forwardedRef}\n      className={cx(getVariantStyles(variant), focusRing, className)}\n      {...props}\n    >\n      {children}\n    </TabsPrimitives.Trigger>\n  )\n})\n\nTabsTrigger.displayName = \"TabsTrigger\"\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitives.Content>\n>(({ className, ...props }, forwardedRef) => (\n  <TabsPrimitives.Content\n    ref={forwardedRef}\n    className={cx(\"outline-hidden\", focusRing, className)}\n    {...props}\n  />\n))\n\nTabsContent.displayName = \"TabsContent\"\n\nexport { Tabs, TabsContent, TabsList, TabsTrigger }\n",
      "path": "src/components/Tabs/Tabs.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    }
  ]
}
