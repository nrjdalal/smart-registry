{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-block-wrapper",
  "type": "registry:component",
  "dependencies": [
    "@kobalte/core",
    "class-variance-authority",
    "clsx",
    "solid-js",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/code-block-wrapper.tsx",
      "content": "import { createSignal, mergeProps, splitProps, type Component, type ComponentProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\"\n\ninterface CodeBlockProps extends ComponentProps<\"div\"> {\n  expandButtonTitle?: string\n}\n\nconst CodeBlockWrapper: Component<CodeBlockProps> = (rawProps) => {\n  const props = mergeProps({ expandButtonTitle: \"View Code\" }, rawProps)\n  const [, rest] = splitProps(props, [\"expandButtonTitle\", \"class\", \"children\"])\n\n  const [isOpened, setIsOpened] = createSignal(false)\n\n  return (\n    <Collapsible open={isOpened()} onOpenChange={setIsOpened} forceMount>\n      <div class={cn(\"relative overflow-hidden\", props.class)} {...rest}>\n        <CollapsibleContent class={cn(\"overflow-hidden\", !isOpened() && \"max-h-32\")}>\n          <div\n            class={cn(\n              \"[&_pre]:my-0 [&_pre]:max-h-[650px] [&_pre]:pb-[100px]\",\n              !isOpened() ? \"[&_pre]:overflow-hidden\" : \"[&_pre]:overflow-auto]\"\n            )}\n          >\n            {props.children}\n          </div>\n        </CollapsibleContent>\n        <div\n          class={cn(\n            \"absolute flex items-center justify-center bg-gradient-to-b from-zinc-700/30 to-zinc-950/90 p-2\",\n            isOpened() ? \"inset-x-0 bottom-0 h-12\" : \"inset-0\"\n          )}\n        >\n          <CollapsibleTrigger as={Button<\"button\">} variant=\"secondary\" class=\"h-8 text-xs\">\n            {isOpened() ? \"Collapse\" : props.expandButtonTitle}\n          </CollapsibleTrigger>\n        </div>\n      </div>\n    </Collapsible>\n  )\n}\n\nexport { CodeBlockWrapper }\n",
      "path": "src/components/code-block-wrapper.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import type { ClassValue } from \"clsx\"\nimport { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return val > max ? max : val < min ? min : val\n}\n\nexport function toggleValue<T>(array: T[], value: T): T[] {\n  return array.includes(value) ? array.filter((item) => item !== value) : [...array, value]\n}\n",
      "path": "src/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as ButtonPrimitive from \"@kobalte/core/button\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\"\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 px-3 text-xs\",\n        lg: \"h-11 px-8\",\n        icon: \"size-10\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n)\n\ntype ButtonProps<T extends ValidComponent = \"button\"> = ButtonPrimitive.ButtonRootProps<T> &\n  VariantProps<typeof buttonVariants> & { class?: string | undefined; children?: JSX.Element }\n\nconst Button = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ButtonProps<T>>\n) => {\n  const [local, others] = splitProps(props as ButtonProps, [\"variant\", \"size\", \"class\"])\n  return (\n    <ButtonPrimitive.Root\n      class={cn(buttonVariants({ variant: local.variant, size: local.size }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\nexport type { ButtonProps }\n",
      "path": "src/registry/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/collapsible.tsx",
      "content": "import * as CollapsiblePrimitive from \"@kobalte/core/collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.Trigger\n\nconst CollapsibleContent = CollapsiblePrimitive.Content\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
      "path": "src/registry/ui/collapsible.tsx"
    }
  ]
}
