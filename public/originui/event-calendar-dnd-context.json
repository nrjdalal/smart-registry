{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-calendar-dnd-context",
  "type": "registry:component",
  "dependencies": [
    "@dnd-kit/core",
    "date-fns"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/event-calendar/calendar-dnd-context.tsx",
      "content": "\"use client\"\n\nimport {\n  createContext,\n  useContext,\n  useId,\n  useRef,\n  useState,\n  type ReactNode,\n} from \"react\"\nimport {\n  DndContext,\n  DragOverlay,\n  MouseSensor,\n  PointerSensor,\n  TouchSensor,\n  useSensor,\n  useSensors,\n  type DragEndEvent,\n  type DragOverEvent,\n  type DragStartEvent,\n  type UniqueIdentifier,\n} from \"@dnd-kit/core\"\nimport { addMinutes, differenceInMinutes } from \"date-fns\"\n\nimport {\n  EventItem,\n  type CalendarEvent,\n} from \"@/components/event-calendar\"\n\n// Define the context type\ntype CalendarDndContextType = {\n  activeEvent: CalendarEvent | null\n  activeId: UniqueIdentifier | null\n  activeView: \"month\" | \"week\" | \"day\" | null\n  currentTime: Date | null\n  eventHeight: number | null\n  isMultiDay: boolean\n  multiDayWidth: number | null\n  dragHandlePosition: {\n    x?: number\n    y?: number\n    data?: {\n      isFirstDay?: boolean\n      isLastDay?: boolean\n    }\n  } | null\n}\n\n// Create the context\nconst CalendarDndContext = createContext<CalendarDndContextType>({\n  activeEvent: null,\n  activeId: null,\n  activeView: null,\n  currentTime: null,\n  eventHeight: null,\n  isMultiDay: false,\n  multiDayWidth: null,\n  dragHandlePosition: null,\n})\n\n// Hook to use the context\nexport const useCalendarDnd = () => useContext(CalendarDndContext)\n\n// Props for the provider\ninterface CalendarDndProviderProps {\n  children: ReactNode\n  onEventUpdate: (event: CalendarEvent) => void\n}\n\nexport function CalendarDndProvider({\n  children,\n  onEventUpdate,\n}: CalendarDndProviderProps) {\n  const [activeEvent, setActiveEvent] = useState<CalendarEvent | null>(null)\n  const [activeId, setActiveId] = useState<UniqueIdentifier | null>(null)\n  const [activeView, setActiveView] = useState<\"month\" | \"week\" | \"day\" | null>(\n    null\n  )\n  const [currentTime, setCurrentTime] = useState<Date | null>(null)\n  const [eventHeight, setEventHeight] = useState<number | null>(null)\n  const [isMultiDay, setIsMultiDay] = useState(false)\n  const [multiDayWidth, setMultiDayWidth] = useState<number | null>(null)\n  const [dragHandlePosition, setDragHandlePosition] = useState<{\n    x?: number\n    y?: number\n    data?: {\n      isFirstDay?: boolean\n      isLastDay?: boolean\n    }\n  } | null>(null)\n\n  // Store original event dimensions\n  const eventDimensions = useRef<{ height: number }>({ height: 0 })\n\n  // Configure sensors for better drag detection\n  const sensors = useSensors(\n    useSensor(MouseSensor, {\n      // Require the mouse to move by 5px before activating\n      activationConstraint: {\n        distance: 5,\n      },\n    }),\n    useSensor(TouchSensor, {\n      // Press delay of 250ms, with tolerance of 5px of movement\n      activationConstraint: {\n        delay: 250,\n        tolerance: 5,\n      },\n    }),\n    useSensor(PointerSensor, {\n      // Require the pointer to move by 5px before activating\n      activationConstraint: {\n        distance: 5,\n      },\n    })\n  )\n\n  // Generate a stable ID for the DndContext\n  const dndContextId = useId()\n\n  const handleDragStart = (event: DragStartEvent) => {\n    const { active } = event\n\n    // Add safety check for data.current\n    if (!active.data.current) {\n      console.error(\"Missing data in drag start event\", event)\n      return\n    }\n\n    const {\n      event: calendarEvent,\n      view,\n      height,\n      isMultiDay: eventIsMultiDay,\n      multiDayWidth: eventMultiDayWidth,\n      dragHandlePosition: eventDragHandlePosition,\n    } = active.data.current as {\n      event: CalendarEvent\n      view: \"month\" | \"week\" | \"day\"\n      height?: number\n      isMultiDay?: boolean\n      multiDayWidth?: number\n      dragHandlePosition?: {\n        x?: number\n        y?: number\n        data?: {\n          isFirstDay?: boolean\n          isLastDay?: boolean\n        }\n      }\n    }\n\n    setActiveEvent(calendarEvent)\n    setActiveId(active.id)\n    setActiveView(view)\n    setCurrentTime(new Date(calendarEvent.start))\n    setIsMultiDay(eventIsMultiDay || false)\n    setMultiDayWidth(eventMultiDayWidth || null)\n    setDragHandlePosition(eventDragHandlePosition || null)\n\n    // Store event height if provided\n    if (height) {\n      eventDimensions.current.height = height\n      setEventHeight(height)\n    }\n  }\n\n  const handleDragOver = (event: DragOverEvent) => {\n    const { over } = event\n\n    if (over && activeEvent && over.data.current) {\n      const { date, time } = over.data.current as { date: Date; time?: number }\n\n      // Update time for week/day views\n      if (time !== undefined && activeView !== \"month\") {\n        const newTime = new Date(date)\n\n        // Calculate hours and minutes with 15-minute precision\n        const hours = Math.floor(time)\n        const fractionalHour = time - hours\n\n        // Map to nearest 15 minute interval (0, 0.25, 0.5, 0.75)\n        let minutes = 0\n        if (fractionalHour < 0.125) minutes = 0\n        else if (fractionalHour < 0.375) minutes = 15\n        else if (fractionalHour < 0.625) minutes = 30\n        else minutes = 45\n\n        newTime.setHours(hours, minutes, 0, 0)\n\n        // Only update if time has changed\n        if (\n          !currentTime ||\n          newTime.getHours() !== currentTime.getHours() ||\n          newTime.getMinutes() !== currentTime.getMinutes() ||\n          newTime.getDate() !== currentTime.getDate() ||\n          newTime.getMonth() !== currentTime.getMonth() ||\n          newTime.getFullYear() !== currentTime.getFullYear()\n        ) {\n          setCurrentTime(newTime)\n        }\n      } else if (activeView === \"month\") {\n        // For month view, just update the date but preserve time\n        const newTime = new Date(date)\n        if (currentTime) {\n          newTime.setHours(\n            currentTime.getHours(),\n            currentTime.getMinutes(),\n            currentTime.getSeconds(),\n            currentTime.getMilliseconds()\n          )\n        }\n\n        // Only update if date has changed\n        if (\n          !currentTime ||\n          newTime.getDate() !== currentTime.getDate() ||\n          newTime.getMonth() !== currentTime.getMonth() ||\n          newTime.getFullYear() !== currentTime.getFullYear()\n        ) {\n          setCurrentTime(newTime)\n        }\n      }\n    }\n  }\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event\n\n    // Add robust error checking\n    if (!over || !activeEvent || !currentTime) {\n      // Reset state and exit early\n      setActiveEvent(null)\n      setActiveId(null)\n      setActiveView(null)\n      setCurrentTime(null)\n      setEventHeight(null)\n      setIsMultiDay(false)\n      setMultiDayWidth(null)\n      setDragHandlePosition(null)\n      return\n    }\n\n    try {\n      // Safely access data with checks\n      if (!active.data.current || !over.data.current) {\n        throw new Error(\"Missing data in drag event\")\n      }\n\n      const activeData = active.data.current as {\n        event?: CalendarEvent\n        view?: string\n      }\n      const overData = over.data.current as { date?: Date; time?: number }\n\n      // Verify we have all required data\n      if (!activeData.event || !overData.date) {\n        throw new Error(\"Missing required event data\")\n      }\n\n      const calendarEvent = activeData.event\n      const date = overData.date\n      const time = overData.time\n\n      // Calculate new start time\n      const newStart = new Date(date)\n\n      // If time is provided (for week/day views), set the hours and minutes\n      if (time !== undefined) {\n        const hours = Math.floor(time)\n        const fractionalHour = time - hours\n\n        // Map to nearest 15 minute interval (0, 0.25, 0.5, 0.75)\n        let minutes = 0\n        if (fractionalHour < 0.125) minutes = 0\n        else if (fractionalHour < 0.375) minutes = 15\n        else if (fractionalHour < 0.625) minutes = 30\n        else minutes = 45\n\n        newStart.setHours(hours, minutes, 0, 0)\n      } else {\n        // For month view, preserve the original time from currentTime\n        newStart.setHours(\n          currentTime.getHours(),\n          currentTime.getMinutes(),\n          currentTime.getSeconds(),\n          currentTime.getMilliseconds()\n        )\n      }\n\n      // Calculate new end time based on the original duration\n      const originalStart = new Date(calendarEvent.start)\n      const originalEnd = new Date(calendarEvent.end)\n      const durationMinutes = differenceInMinutes(originalEnd, originalStart)\n      const newEnd = addMinutes(newStart, durationMinutes)\n\n      // Only update if the start time has actually changed\n      const hasStartTimeChanged =\n        originalStart.getFullYear() !== newStart.getFullYear() ||\n        originalStart.getMonth() !== newStart.getMonth() ||\n        originalStart.getDate() !== newStart.getDate() ||\n        originalStart.getHours() !== newStart.getHours() ||\n        originalStart.getMinutes() !== newStart.getMinutes()\n\n      if (hasStartTimeChanged) {\n        // Update the event only if the time has changed\n        onEventUpdate({\n          ...calendarEvent,\n          start: newStart,\n          end: newEnd,\n        })\n      }\n    } catch (error) {\n      console.error(\"Error in drag end handler:\", error)\n    } finally {\n      // Always reset state\n      setActiveEvent(null)\n      setActiveId(null)\n      setActiveView(null)\n      setCurrentTime(null)\n      setEventHeight(null)\n      setIsMultiDay(false)\n      setMultiDayWidth(null)\n      setDragHandlePosition(null)\n    }\n  }\n\n  return (\n    <DndContext\n      id={dndContextId}\n      sensors={sensors}\n      onDragStart={handleDragStart}\n      onDragOver={handleDragOver}\n      onDragEnd={handleDragEnd}\n    >\n      <CalendarDndContext.Provider\n        value={{\n          activeEvent,\n          activeId,\n          activeView,\n          currentTime,\n          eventHeight,\n          isMultiDay,\n          multiDayWidth,\n          dragHandlePosition,\n        }}\n      >\n        {children}\n\n        <DragOverlay adjustScale={false} dropAnimation={null}>\n          {activeEvent && activeView && (\n            <div\n              style={{\n                height: eventHeight ? `${eventHeight}px` : \"auto\",\n                width:\n                  isMultiDay && multiDayWidth ? `${multiDayWidth}%` : \"100%\",\n                // Remove the transform that was causing the shift\n              }}\n            >\n              <EventItem\n                event={activeEvent}\n                view={activeView}\n                isDragging={true}\n                showTime={activeView !== \"month\"}\n                currentTime={currentTime || undefined}\n                isFirstDay={dragHandlePosition?.data?.isFirstDay !== false}\n                isLastDay={dragHandlePosition?.data?.isLastDay !== false}\n              />\n            </div>\n          )}\n        </DragOverlay>\n      </CalendarDndContext.Provider>\n    </DndContext>\n  )\n}\n",
      "path": "registry/default/components/event-calendar/calendar-dnd-context.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/event-calendar/index.ts",
      "content": "\"use client\"\n\n// Component exports\nexport { AgendaView } from \"./agenda-view\"\nexport { DayView } from \"./day-view\"\nexport { DraggableEvent } from \"./draggable-event\"\nexport { DroppableCell } from \"./droppable-cell\"\nexport { EventDialog } from \"./event-dialog\"\nexport { EventItem } from \"./event-item\"\nexport { EventsPopup } from \"./events-popup\"\nexport { EventCalendar } from \"./event-calendar\"\nexport { MonthView } from \"./month-view\"\nexport { WeekView } from \"./week-view\"\nexport { CalendarDndProvider, useCalendarDnd } from \"./calendar-dnd-context\"\n\n// Constants and utility exports\nexport * from \"./constants\"\nexport * from \"./utils\"\n\n// Hook exports\nexport * from \"./hooks/use-current-time-indicator\"\nexport * from \"./hooks/use-event-visibility\"\n\n// Type exports\nexport type { CalendarEvent, CalendarView, EventColor } from \"./types\"\n",
      "path": "registry/default/components/event-calendar/index.ts"
    }
  ]
}
