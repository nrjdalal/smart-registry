{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-badge-demo",
  "type": "registry:file",
  "dependencies": [
    "class-variance-authority",
    "solid-js"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "example/badge-demo.tsx",
      "content": "import { Badge } from \"@/components/ui/badge\"\n\nexport default function BadgeDemo() {\n  return (\n    <div class=\"flex gap-2\">\n      <Badge>Badge</Badge>\n      <Badge variant=\"secondary\">Secondary</Badge>\n      <Badge variant=\"outline\">Outline</Badge>\n      <Badge variant=\"error\">Error</Badge>\n      <Badge round>Round</Badge>\n    </div>\n  )\n}\n",
      "path": "src/registry/example/badge-demo.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/badge.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default: \"border-transparent bg-primary text-primary-foreground\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        outline: \"text-foreground\",\n        success: \"border-success-foreground bg-success text-success-foreground\",\n        warning: \"border-warning-foreground bg-warning text-warning-foreground\",\n        error: \"border-error-foreground bg-error text-error-foreground\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\"\n    }\n  }\n)\n\ntype BadgeProps = ComponentProps<\"div\"> &\n  VariantProps<typeof badgeVariants> & {\n    round?: boolean\n  }\n\nconst Badge: Component<BadgeProps> = (props) => {\n  const [local, others] = splitProps(props, [\"class\", \"variant\", \"round\"])\n  return (\n    <div\n      class={cn(\n        badgeVariants({ variant: local.variant }),\n        local.round && \"rounded-full\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport type { BadgeProps }\nexport { Badge, badgeVariants }\n",
      "path": "src/registry/ui/badge.tsx"
    }
  ]
}
