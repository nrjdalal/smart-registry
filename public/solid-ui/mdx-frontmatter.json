{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mdx-frontmatter",
  "type": "registry:lib",
  "dependencies": [
    "unist"
  ],
  "devDependencies": [
    "estree-util-value-to-estree",
    "yaml"
  ],
  "files": [
    {
      "type": "registry:lib",
      "target": "lib/mdx/frontmatter.tsx",
      "content": "import { valueToEstree } from \"estree-util-value-to-estree\"\nimport type { Literal, Parent } from \"unist\"\nimport { parse } from \"yaml\"\n\nexport type Frontmatter = {\n  title: string\n  description: string\n  kobalte?: string\n}\n\nexport default function remarkSolidFrontmatter() {\n  return function (tree: Parent) {\n    const node = tree.children.find((node) => node.type === \"yaml\") as Literal\n    if (!node) {\n      return\n    }\n    const data = parse(node.value as string)\n\n    tree.children.unshift({\n      type: \"mdxjsEsm\",\n      data: {\n        estree: {\n          type: \"Program\",\n          sourceType: \"module\",\n          body: [\n            {\n              type: \"ExportNamedDeclaration\",\n              specifiers: [],\n              declaration: {\n                type: \"VariableDeclaration\",\n                kind: \"const\",\n                declarations: Object.entries({\n                  frontmatter: data\n                }).map(([identifier, value]) => ({\n                  type: \"VariableDeclarator\",\n                  id: {\n                    type: \"Identifier\",\n                    name: identifier\n                  },\n                  init: valueToEstree(value)\n                }))\n              }\n            }\n          ]\n        }\n      }\n    })\n  }\n}\n",
      "path": "src/lib/mdx/frontmatter.tsx"
    }
  ]
}
