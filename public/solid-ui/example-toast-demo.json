{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-toast-demo",
  "type": "registry:file",
  "dependencies": [
    "@kobalte/core",
    "class-variance-authority",
    "solid-js"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "example/toast-demo.tsx",
      "content": "import { Button } from \"@/components/ui/button\"\nimport { showToast, Toaster } from \"@/components/ui/toast\"\n\nexport default function ToastDemo() {\n  return (\n    <div class=\"flex flex-wrap gap-2\">\n      <Button\n        onClick={() =>\n          showToast({\n            title: \"Event has been created\",\n            description: \"Monday, January 3rd at 6:00pm\"\n          })\n        }\n      >\n        Add Event\n      </Button>\n      <Button\n        variant=\"destructive\"\n        onClick={() =>\n          showToast({\n            title: \"Event has been deleted\",\n            description: \"Monday, January 3rd at 6:00pm\",\n            variant: \"destructive\"\n          })\n        }\n      >\n        Delete Event\n      </Button>\n      <Button\n        variant=\"outline\"\n        onClick={() =>\n          showToast({\n            title: \"SUCCESS!\",\n            description: \"Monday, January 3rd at 6:00pm\",\n            variant: \"success\"\n          })\n        }\n      >\n        Success\n      </Button>\n      <Button\n        variant=\"outline\"\n        onClick={() =>\n          showToast({\n            title: \"WARING!\",\n            description: \"Monday, January 3rd at 6:00pm\",\n            variant: \"warning\"\n          })\n        }\n      >\n        Warning\n      </Button>\n      <Button\n        variant=\"outline\"\n        onClick={() =>\n          showToast({\n            title: \"ERROR!\",\n            description: \"Monday, January 3rd at 6:00pm\",\n            variant: \"error\"\n          })\n        }\n      >\n        Error\n      </Button>\n      <Toaster />\n    </div>\n  )\n}\n",
      "path": "src/registry/example/toast-demo.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as ButtonPrimitive from \"@kobalte/core/button\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\"\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 px-3 text-xs\",\n        lg: \"h-11 px-8\",\n        icon: \"size-10\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n)\n\ntype ButtonProps<T extends ValidComponent = \"button\"> = ButtonPrimitive.ButtonRootProps<T> &\n  VariantProps<typeof buttonVariants> & { class?: string | undefined; children?: JSX.Element }\n\nconst Button = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ButtonProps<T>>\n) => {\n  const [local, others] = splitProps(props as ButtonProps, [\"variant\", \"size\", \"class\"])\n  return (\n    <ButtonPrimitive.Root\n      class={cn(buttonVariants({ variant: local.variant, size: local.size }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\nexport type { ButtonProps }\n",
      "path": "src/registry/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/toast.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { Match, splitProps, Switch } from \"solid-js\"\nimport { Portal } from \"solid-js/web\"\n\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport * as ToastPrimitive from \"@kobalte/core/toast\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--kb-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--kb-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[opened]:animate-in data-[closed]:animate-out data-[swipe=end]:animate-out data-[closed]:fade-out-80 data-[closed]:slide-out-to-right-full data-[opened]:slide-in-from-top-full data-[opened]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n        success: \"success border-success-foreground bg-success text-success-foreground\",\n        warning: \"warning border-warning-foreground bg-warning text-warning-foreground\",\n        error: \"error border-error-foreground bg-error text-error-foreground\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\"\n    }\n  }\n)\ntype ToastVariant = NonNullable<VariantProps<typeof toastVariants>[\"variant\"]>\n\ntype ToastListProps<T extends ValidComponent = \"ol\"> = ToastPrimitive.ToastListProps<T> & {\n  class?: string | undefined\n}\n\nconst Toaster = <T extends ValidComponent = \"ol\">(\n  props: PolymorphicProps<T, ToastListProps<T>>\n) => {\n  const [local, others] = splitProps(props as ToastListProps, [\"class\"])\n  return (\n    <Portal>\n      <ToastPrimitive.Region>\n        <ToastPrimitive.List\n          class={cn(\n            \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse gap-2 p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n            local.class\n          )}\n          {...others}\n        />\n      </ToastPrimitive.Region>\n    </Portal>\n  )\n}\n\ntype ToastRootProps<T extends ValidComponent = \"li\"> = ToastPrimitive.ToastRootProps<T> &\n  VariantProps<typeof toastVariants> & { class?: string | undefined }\n\nconst Toast = <T extends ValidComponent = \"li\">(props: PolymorphicProps<T, ToastRootProps<T>>) => {\n  const [local, others] = splitProps(props as ToastRootProps, [\"class\", \"variant\"])\n  return (\n    <ToastPrimitive.Root\n      class={cn(toastVariants({ variant: local.variant }), local.class)}\n      {...others}\n    />\n  )\n}\n\ntype ToastCloseButtonProps<T extends ValidComponent = \"button\"> =\n  ToastPrimitive.ToastCloseButtonProps<T> & { class?: string | undefined }\n\nconst ToastClose = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ToastCloseButtonProps<T>>\n) => {\n  const [local, others] = splitProps(props as ToastCloseButtonProps, [\"class\"])\n  return (\n    <ToastPrimitive.CloseButton\n      class={cn(\n        \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-destructive-foreground group-[.error]:text-error-foreground group-[.success]:text-success-foreground group-[.warning]:text-warning-foreground\",\n        local.class\n      )}\n      {...others}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"size-4\"\n      >\n        <path d=\"M18 6l-12 12\" />\n        <path d=\"M6 6l12 12\" />\n      </svg>\n    </ToastPrimitive.CloseButton>\n  )\n}\n\ntype ToastTitleProps<T extends ValidComponent = \"div\"> = ToastPrimitive.ToastTitleProps<T> & {\n  class?: string | undefined\n}\n\nconst ToastTitle = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ToastTitleProps<T>>\n) => {\n  const [local, others] = splitProps(props as ToastTitleProps, [\"class\"])\n  return <ToastPrimitive.Title class={cn(\"text-sm font-semibold\", local.class)} {...others} />\n}\n\ntype ToastDescriptionProps<T extends ValidComponent = \"div\"> =\n  ToastPrimitive.ToastDescriptionProps<T> & { class?: string | undefined }\n\nconst ToastDescription = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, ToastDescriptionProps<T>>\n) => {\n  const [local, others] = splitProps(props as ToastDescriptionProps, [\"class\"])\n  return <ToastPrimitive.Description class={cn(\"text-sm opacity-90\", local.class)} {...others} />\n}\n\nfunction showToast(props: {\n  title?: JSX.Element\n  description?: JSX.Element\n  variant?: ToastVariant\n  duration?: number\n}) {\n  ToastPrimitive.toaster.show((data) => (\n    <Toast toastId={data.toastId} variant={props.variant} duration={props.duration}>\n      <div class=\"grid gap-1\">\n        {props.title && <ToastTitle>{props.title}</ToastTitle>}\n        {props.description && <ToastDescription>{props.description}</ToastDescription>}\n      </div>\n      <ToastClose />\n    </Toast>\n  ))\n}\n\nfunction showToastPromise<T, U>(\n  promise: Promise<T> | (() => Promise<T>),\n  options: {\n    loading?: JSX.Element\n    success?: (data: T) => JSX.Element\n    error?: (error: U) => JSX.Element\n    duration?: number\n  }\n) {\n  const variant: { [key in ToastPrimitive.ToastPromiseState]: ToastVariant } = {\n    pending: \"default\",\n    fulfilled: \"success\",\n    rejected: \"error\"\n  }\n  return ToastPrimitive.toaster.promise<T, U>(promise, (props) => (\n    <Toast toastId={props.toastId} variant={variant[props.state]} duration={options.duration}>\n      <Switch>\n        <Match when={props.state === \"pending\"}>{options.loading}</Match>\n        <Match when={props.state === \"fulfilled\"}>{options.success?.(props.data!)}</Match>\n        <Match when={props.state === \"rejected\"}>{options.error?.(props.error!)}</Match>\n      </Switch>\n    </Toast>\n  ))\n}\n\nexport { Toaster, Toast, ToastClose, ToastTitle, ToastDescription, showToast, showToastPromise }\n",
      "path": "src/registry/ui/toast.tsx"
    }
  ]
}
