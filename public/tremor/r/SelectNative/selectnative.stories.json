{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "SelectNative/selectnative.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-label",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Label/Label.tsx",
      "content": "// Tremor Label [v0.0.2]\n\nimport React from \"react\"\nimport * as LabelPrimitives from \"@radix-ui/react-label\"\n\nimport { cx } from \"@/utils/cx\"\n\ninterface LabelProps\n  extends React.ComponentPropsWithoutRef<typeof LabelPrimitives.Root> {\n  disabled?: boolean\n}\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitives.Root>,\n  LabelProps\n>(({ className, disabled, ...props }, forwardedRef) => (\n  <LabelPrimitives.Root\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-sm leading-none\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      {\n        \"text-gray-400 dark:text-gray-600\": disabled,\n      },\n      className,\n    )}\n    aria-disabled={disabled}\n    tremor-id=\"tremor-raw\"\n    {...props}\n  />\n))\n\nLabel.displayName = \"Label\"\n\nexport { Label }\n",
      "path": "src/components/Label/Label.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/SelectNative/selectnative.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Label } from \"@/components/Label/Label\"\nimport { SelectNative } from \"@/components/SelectNative/SelectNative\"\n\nconst meta: Meta<typeof SelectNative> = {\n  title: \"ui/SelectNative\",\n  component: SelectNative,\n}\n\nexport default meta\ntype Story = StoryObj<typeof SelectNative>\n\nexport const Default: Story = {\n  render: () => (\n    <SelectNative>\n      <option value=\"0-18\">18 and under</option>\n      <option value=\"19-39\">19 to 39</option>\n      <option value=\"40-64\">40 to 64</option>\n      <option value=\"65-infinity\">65 and over</option>\n    </SelectNative>\n  ),\n}\n\nexport const WithLongValues: Story = {\n  render: () => (\n    <SelectNative>\n      <option value=\"gpt-3\">\n        GPT-3 (Generative Pre-trained Transformer 3)\n      </option>\n      <option value=\"bert\">\n        BERT (Bidirectional Encoder Representations from Transformers)\n      </option>\n      <option value=\"t5\">T5 (Text-To-Text Transfer Transformer)</option>\n    </SelectNative>\n  ),\n}\nexport const WithLabel: Story = {\n  render: () => (\n    <>\n      <Label htmlFor=\"age1\">Select age</Label>\n      <SelectNative id=\"age1\">\n        <option value=\"0-18\">18 and under</option>\n        <option value=\"19-39\">19 to 39</option>\n        <option value=\"40-64\">40 to 64</option>\n        <option value=\"65-infinity\">65 and over</option>\n      </SelectNative>\n    </>\n  ),\n}\nexport const HasError: Story = {\n  render: () => (\n    <SelectNative id=\"age-error\" hasError>\n      <option value=\"0-18\">18 and under</option>\n      <option value=\"19-39\">19 to 39</option>\n      <option value=\"40-64\">40 to 64</option>\n      <option value=\"65-infinity\">65 and over</option>\n    </SelectNative>\n  ),\n}\nexport const LongOption: Story = {\n  render: () => (\n    <>\n      <Label htmlFor=\"model\">Select model</Label>\n      <SelectNative id=\"model\">\n        <option value=\"gpt-3\">\n          GPT-3 (Generative Pre-trained Transformer 3)\n        </option>\n        <option value=\"bert\">\n          BERT (Bidirectional Encoder Representations from Transformers)\n        </option>\n        <option value=\"t5\">T5 (Text-To-Text Transfer Transformer)</option>\n      </SelectNative>\n    </>\n  ),\n}\n",
      "path": "src/components/SelectNative/selectnative.stories.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/SelectNative/SelectNative.tsx",
      "content": "// Tremor SelectNative [v0.0.1]\n\nimport React from \"react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusInput } from \"@/utils/focusInput\"\nimport { hasErrorInput } from \"@/utils/hasErrorInput\"\n\nconst selectNativeStyles = tv({\n  base: [\n    // base\n    \"peer w-full cursor-pointer appearance-none truncate rounded-md border py-2 pl-3 pr-7 shadow-sm outline-none transition-all sm:text-sm\",\n    // background color\n    \"bg-white dark:bg-gray-950\",\n    // border color\n    \"border-gray-300 dark:border-gray-800\",\n    // text color\n    \"text-gray-900 dark:text-gray-50\",\n    // placeholder color\n    \"placeholder-gray-400 dark:placeholder-gray-500\",\n    // hover\n    \"hover:bg-gray-50 hover:dark:bg-gray-950/50\",\n    // disabled\n    \"disabled:pointer-events-none\",\n    \"disabled:bg-gray-100 disabled:text-gray-400\",\n    \"disabled:dark:border-gray-700 disabled:dark:bg-gray-800 disabled:dark:text-gray-500\",\n    // focus\n    focusInput,\n    // invalid (optional)\n    // \"aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n  ],\n  variants: {\n    hasError: {\n      true: hasErrorInput,\n    },\n  },\n})\n\ninterface SelectNativeProps\n  extends React.InputHTMLAttributes<HTMLSelectElement>,\n    VariantProps<typeof selectNativeStyles> {}\n\nconst SelectNative = React.forwardRef<HTMLSelectElement, SelectNativeProps>(\n  ({ className, hasError, ...props }: SelectNativeProps, forwardedRef) => {\n    return (\n      <select\n        ref={forwardedRef}\n        className={cx(selectNativeStyles({ hasError }), className)}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      />\n    )\n  },\n)\n\nSelectNative.displayName = \"SelectNative\"\n\nexport { SelectNative, selectNativeStyles, type SelectNativeProps }\n",
      "path": "src/components/SelectNative/SelectNative.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusInput.ts",
      "content": "// Tremor focusInput [v0.0.1]\n\nexport const focusInput = [\n  // base\n  \"focus:ring-2\",\n  // ring color\n  \"focus:ring-blue-200 focus:dark:ring-blue-700/30\",\n  // border color\n  \"focus:border-blue-500 focus:dark:border-blue-700\",\n]\n",
      "path": "src/utils/focusInput.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/hasErrorInput.ts",
      "content": "// Tremor hasErrorInput [v0.0.1]\n\nexport const hasErrorInput = [\n  // base\n  \"ring-2\",\n  // border color\n  \"border-red-500 dark:border-red-700\",\n  // ring color\n  \"ring-red-200 dark:ring-red-700/30\",\n]\n",
      "path": "src/utils/hasErrorInput.ts"
    }
  ]
}
