{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-310",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/comp-310.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { TicketPercent, XIcon } from \"lucide-react\"\nimport { useEffect, useState } from \"react\"\n\n// Define the sale end date - eg: new Date('2024-12-31T23:59:59');\nconst saleEndDate = new Date(\n  Date.now() + 9 * 60 * 60 * 1000 + 45 * 60 * 1000 + 24 * 1000,\n) // Setting 9h 45m 24s from now for demo purposes\n\ninterface TimeLeft {\n  days: number\n  hours: number\n  minutes: number\n  seconds: number\n  isExpired: boolean\n}\n\nexport default function Component() {\n  const [isVisible, setIsVisible] = useState(true)\n  const [timeLeft, setTimeLeft] = useState<TimeLeft>({\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    isExpired: false,\n  })\n\n  useEffect(() => {\n    const calculateTimeLeft = () => {\n      const now = new Date()\n      const difference = saleEndDate.getTime() - now.getTime()\n\n      if (difference <= 0) {\n        setTimeLeft({\n          days: 0,\n          hours: 0,\n          minutes: 0,\n          seconds: 0,\n          isExpired: true,\n        })\n        return\n      }\n\n      const days = Math.floor(difference / (1000 * 60 * 60 * 24))\n      const hours = Math.floor(\n        (difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),\n      )\n      const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60))\n      const seconds = Math.floor((difference % (1000 * 60)) / 1000)\n\n      setTimeLeft({\n        days,\n        hours,\n        minutes,\n        seconds,\n        isExpired: false,\n      })\n    }\n\n    // Calculate immediately and then every second\n    calculateTimeLeft()\n    const timer = setInterval(calculateTimeLeft, 1000)\n\n    return () => clearInterval(timer)\n  }, [])\n\n  if (!isVisible || timeLeft.isExpired) return null\n\n  return (\n    <div className=\"dark bg-muted text-foreground px-4 py-3\">\n      <div className=\"flex gap-2 md:items-center\">\n        <div className=\"flex grow gap-3 md:items-center\">\n          <div\n            className=\"bg-primary/15 flex size-9 shrink-0 items-center justify-center rounded-full max-md:mt-0.5\"\n            aria-hidden=\"true\"\n          >\n            <TicketPercent className=\"opacity-80\" size={16} />\n          </div>\n          <div className=\"flex grow flex-col justify-between gap-3 md:flex-row md:items-center\">\n            <div className=\"space-y-0.5\">\n              <p className=\"text-sm font-medium\">Black Friday Sale!</p>\n              <p className=\"text-muted-foreground text-sm\">\n                It kicks off today and is available for just 24\n                hoursâ€”don&lsquo;t miss out!\n              </p>\n            </div>\n            <div className=\"flex gap-3 max-md:flex-wrap\">\n              <div className=\"divide-primary-foreground bg-primary/15 flex items-center divide-x rounded-md text-sm tabular-nums\">\n                {timeLeft.days > 0 && (\n                  <span className=\"flex h-8 items-center justify-center p-2\">\n                    {timeLeft.days}\n                    <span className=\"text-muted-foreground\">d</span>\n                  </span>\n                )}\n                <span className=\"flex h-8 items-center justify-center p-2\">\n                  {timeLeft.hours.toString().padStart(2, \"0\")}\n                  <span className=\"text-muted-foreground\">h</span>\n                </span>\n                <span className=\"flex h-8 items-center justify-center p-2\">\n                  {timeLeft.minutes.toString().padStart(2, \"0\")}\n                  <span className=\"text-muted-foreground\">m</span>\n                </span>\n                <span className=\"flex h-8 items-center justify-center p-2\">\n                  {timeLeft.seconds.toString().padStart(2, \"0\")}\n                  <span className=\"text-muted-foreground\">s</span>\n                </span>\n              </div>\n              <Button size=\"sm\" className=\"text-sm\">\n                Buy now\n              </Button>\n            </div>\n          </div>\n        </div>\n        <Button\n          variant=\"ghost\"\n          className=\"group -my-1.5 -me-2 size-8 shrink-0 p-0 hover:bg-transparent\"\n          onClick={() => setIsVisible(false)}\n          aria-label=\"Close banner\"\n        >\n          <XIcon\n            size={16}\n            className=\"opacity-60 transition-opacity group-hover:opacity-100\"\n            aria-hidden=\"true\"\n          />\n        </Button>\n      </div>\n    </div>\n  )\n}\n",
      "path": "registry/default/components/comp-310.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import { cn } from \"@/lib/utils\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "path": "registry/default/ui/button.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "registry/default/lib/utils.ts"
    }
  ]
}
