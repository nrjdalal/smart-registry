{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "particle-button",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react",
    "motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/particle-button.tsx",
      "content": "\"use client\";\n\nimport { useState, useRef, type RefObject } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport type { ButtonProps } from \"@/components/ui/button\";\nimport { MousePointerClick } from \"lucide-react\";\n\ninterface ParticleButtonProps extends ButtonProps {\n    onSuccess?: () => void;\n    successDuration?: number;\n}\n\nfunction SuccessParticles({\n    buttonRef,\n}: {\n    buttonRef: React.RefObject<HTMLButtonElement>;\n}) {\n    const rect = buttonRef.current?.getBoundingClientRect();\n    if (!rect) return null;\n\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n\n    return (\n        <AnimatePresence>\n            {[...Array(6)].map((_, i) => (\n                <motion.div\n                    key={i}\n                    className=\"fixed w-1 h-1 bg-black dark:bg-white rounded-full\"\n                    style={{ left: centerX, top: centerY }}\n                    initial={{\n                        scale: 0,\n                        x: 0,\n                        y: 0,\n                    }}\n                    animate={{\n                        scale: [0, 1, 0],\n                        x: [0, (i % 2 ? 1 : -1) * (Math.random() * 50 + 20)],\n                        y: [0, -Math.random() * 50 - 20],\n                    }}\n                    transition={{\n                        duration: 0.6,\n                        delay: i * 0.1,\n                        ease: \"easeOut\",\n                    }}\n                />\n            ))}\n        </AnimatePresence>\n    );\n}\n\nexport default function ParticleButton({\n    children,\n    onClick,\n    onSuccess,\n    successDuration = 1000,\n    className,\n    ...props\n}: ParticleButtonProps) {\n    const [showParticles, setShowParticles] = useState(false);\n    const buttonRef = useRef<HTMLButtonElement>(null);\n\n    const handleClick = async (e: React.MouseEvent<HTMLButtonElement>) => {\n        setShowParticles(true);\n\n        setTimeout(() => {\n            setShowParticles(false);\n        }, successDuration);\n    };\n\n    return (\n        <>\n            {showParticles && (\n                <SuccessParticles\n                    buttonRef={buttonRef as RefObject<HTMLButtonElement>}\n                />\n            )}\n            <Button\n                ref={buttonRef}\n                onClick={handleClick}\n                className={cn(\n                    \"relative\",\n                    showParticles && \"scale-95\",\n                    \"transition-transform duration-100\",\n                    className\n                )}\n                {...props}\n            >\n                {children}\n                <MousePointerClick className=\"h-4 w-4\" />\n            </Button>\n        </>\n    );\n}\n",
      "path": "components/kokonutui/particle-button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    }
  ]
}
