{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cards-cookie-settings",
  "type": "registry:component",
  "dependencies": [
    "@kobalte/core",
    "class-variance-authority",
    "clsx",
    "solid-js",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/cards/cookie-settings.tsx",
      "content": "import { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle\n} from \"@/components/ui/card\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch, SwitchControl, SwitchThumb } from \"@/components/ui/switch\"\n\nexport function CookieSettings() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Cookie Settings</CardTitle>\n        <CardDescription>Manage your cookie settings here.</CardDescription>\n      </CardHeader>\n      <CardContent class=\"grid gap-6\">\n        <div class=\"flex items-center justify-between space-x-2\">\n          <Label for=\"necessary\" class=\"flex flex-col space-y-1\">\n            <span>Strictly Necessary</span>\n            <span class=\"font-normal leading-snug text-muted-foreground\">\n              These cookies are essential in order to use the website and use its features.\n            </span>\n          </Label>\n          <Switch id=\"necessary\" defaultChecked>\n            <SwitchControl>\n              <SwitchThumb />\n            </SwitchControl>\n          </Switch>\n        </div>\n        <div class=\"flex items-center justify-between space-x-2\">\n          <Label for=\"functional\" class=\"flex flex-col space-y-1\">\n            <span>Functional Cookies</span>\n            <span class=\"font-normal leading-snug text-muted-foreground\">\n              These cookies allow the website to provide personalized functionality.\n            </span>\n          </Label>\n          <Switch id=\"functional\">\n            <SwitchControl>\n              <SwitchThumb />\n            </SwitchControl>\n          </Switch>\n        </div>\n        <div class=\"flex items-center justify-between space-x-2\">\n          <Label for=\"performance\" class=\"flex flex-col space-y-1\">\n            <span>Performance Cookies</span>\n            <span class=\"font-normal leading-snug text-muted-foreground\">\n              These cookies help to improve the performance of the website.\n            </span>\n          </Label>\n          <Switch id=\"performance\">\n            <SwitchControl>\n              <SwitchThumb />\n            </SwitchControl>\n          </Switch>\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button variant=\"outline\" class=\"w-full\">\n          Save preferences\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n",
      "path": "src/components/cards/cookie-settings.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import type { ClassValue } from \"clsx\"\nimport { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return val > max ? max : val < min ? min : val\n}\n\nexport function toggleValue<T>(array: T[], value: T): T[] {\n  return array.includes(value) ? array.filter((item) => item !== value) : [...array, value]\n}\n",
      "path": "src/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport * as ButtonPrimitive from \"@kobalte/core/button\"\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\"\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 px-3 text-xs\",\n        lg: \"h-11 px-8\",\n        icon: \"size-10\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n)\n\ntype ButtonProps<T extends ValidComponent = \"button\"> = ButtonPrimitive.ButtonRootProps<T> &\n  VariantProps<typeof buttonVariants> & { class?: string | undefined; children?: JSX.Element }\n\nconst Button = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, ButtonProps<T>>\n) => {\n  const [local, others] = splitProps(props as ButtonProps, [\"variant\", \"size\", \"class\"])\n  return (\n    <ButtonPrimitive.Root\n      class={cn(buttonVariants({ variant: local.variant, size: local.size }), local.class)}\n      {...others}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\nexport type { ButtonProps }\n",
      "path": "src/registry/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/card.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <div\n      class={cn(\"rounded-lg border bg-card text-card-foreground shadow-sm\", local.class)}\n      {...others}\n    />\n  )\n}\n\nconst CardHeader: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"flex flex-col space-y-1.5 p-6\", local.class)} {...others} />\n}\n\nconst CardTitle: Component<ComponentProps<\"h3\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <h3 class={cn(\"text-lg font-semibold leading-none tracking-tight\", local.class)} {...others} />\n  )\n}\n\nconst CardDescription: Component<ComponentProps<\"p\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <p class={cn(\"text-sm text-muted-foreground\", local.class)} {...others} />\n}\n\nconst CardContent: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"p-6 pt-0\", local.class)} {...others} />\n}\n\nconst CardFooter: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return <div class={cn(\"flex items-center p-6 pt-0\", local.class)} {...others} />\n}\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "path": "src/registry/ui/card.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/label.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Label: Component<ComponentProps<\"label\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"])\n  return (\n    <label\n      class={cn(\n        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport { Label }\n",
      "path": "src/registry/ui/label.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/switch.tsx",
      "content": "import type { JSX, ValidComponent } from \"solid-js\"\nimport { splitProps } from \"solid-js\"\n\nimport type { PolymorphicProps } from \"@kobalte/core\"\nimport * as SwitchPrimitive from \"@kobalte/core/switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = SwitchPrimitive.Root\nconst SwitchDescription = SwitchPrimitive.Description\nconst SwitchErrorMessage = SwitchPrimitive.ErrorMessage\n\ntype SwitchControlProps = SwitchPrimitive.SwitchControlProps & {\n  class?: string | undefined\n  children?: JSX.Element\n}\n\nconst SwitchControl = <T extends ValidComponent = \"input\">(\n  props: PolymorphicProps<T, SwitchControlProps>\n) => {\n  const [local, others] = splitProps(props as SwitchControlProps, [\"class\", \"children\"])\n  return (\n    <>\n      <SwitchPrimitive.Input\n        class={cn(\n          \"[&:focus-visible+div]:outline-none [&:focus-visible+div]:ring-2 [&:focus-visible+div]:ring-ring [&:focus-visible+div]:ring-offset-2 [&:focus-visible+div]:ring-offset-background\",\n          local.class\n        )}\n      />\n      <SwitchPrimitive.Control\n        class={cn(\n          \"inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent bg-input transition-[color,background-color,box-shadow] data-[disabled]:cursor-not-allowed data-[checked]:bg-primary data-[disabled]:opacity-50\",\n          local.class\n        )}\n        {...others}\n      >\n        {local.children}\n      </SwitchPrimitive.Control>\n    </>\n  )\n}\n\ntype SwitchThumbProps = SwitchPrimitive.SwitchThumbProps & { class?: string | undefined }\n\nconst SwitchThumb = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, SwitchThumbProps>\n) => {\n  const [local, others] = splitProps(props as SwitchThumbProps, [\"class\"])\n  return (\n    <SwitchPrimitive.Thumb\n      class={cn(\n        \"pointer-events-none block size-5 translate-x-0 rounded-full bg-background shadow-lg ring-0 transition-transform data-[checked]:translate-x-5\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\ntype SwitchLabelProps = SwitchPrimitive.SwitchLabelProps & { class?: string | undefined }\n\nconst SwitchLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, SwitchLabelProps>\n) => {\n  const [local, others] = splitProps(props as SwitchLabelProps, [\"class\"])\n  return (\n    <SwitchPrimitive.Label\n      class={cn(\n        \"text-sm font-medium leading-none data-[disabled]:cursor-not-allowed data-[disabled]:opacity-70\",\n        local.class\n      )}\n      {...others}\n    />\n  )\n}\n\nexport { Switch, SwitchControl, SwitchThumb, SwitchLabel, SwitchDescription, SwitchErrorMessage }\n",
      "path": "src/registry/ui/switch.tsx"
    }
  ]
}
