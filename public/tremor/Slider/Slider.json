{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Slider/Slider",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slider",
    "clsx",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    },
    {
      "type": "registry:component",
      "target": "components/Slider/Slider.tsx",
      "content": "// Tremor Slider [v0.1.0]\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\ninterface SliderProps\n  extends React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> {\n  ariaLabelThumb?: string\n}\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  SliderProps\n>(({ className, ariaLabelThumb, ...props }, forwardedRef) => {\n  const value = props.value || props.defaultValue\n  return (\n    <SliderPrimitive.Root\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"relative flex cursor-pointer touch-none select-none\",\n        // orientation\n        \"data-[orientation='horizontal']:w-full data-[orientation='horizontal']:items-center\",\n        \"data-[orientation='vertical']:h-full data-[orientation='vertical']:w-fit data-[orientation='vertical']:justify-center\",\n        // disabled\n        \"data-[disabled]:pointer-events-none\",\n        className,\n      )}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    >\n      <SliderPrimitive.Track\n        className={cx(\n          // base\n          \"relative grow overflow-hidden rounded-full bg-gray-200 dark:bg-gray-800\",\n          // orientation\n          \"data-[orientation='horizontal']:h-1.5 data-[orientation='horizontal']:w-full\",\n          \"data-[orientation='vertical']:h-full data-[orientation='vertical']:w-1.5\",\n        )}\n      >\n        <SliderPrimitive.Range\n          className={cx(\n            // base\n            \"absolute rounded-full bg-blue-500 dark:bg-blue-500\",\n            // orientation\n            \"data-[orientation='horizontal']:h-full\",\n            \"data-[orientation='vertical']:w-full\",\n            // disabled\n            \"data-[disabled]:bg-gray-300 dark:data-[disabled]:bg-gray-700\",\n          )}\n        />\n      </SliderPrimitive.Track>\n      {value?.map((_, index) => (\n        <SliderPrimitive.Thumb\n          key={index}\n          className={cx(\n            // base\n            \"block size-[17px] shrink-0 rounded-full border shadow transition-all\",\n            // boder color\n            \"border-gray-400 dark:border-gray-500\",\n            // background color\n            \"bg-white\",\n            // disabled\n            \"data-[disabled]:pointer-events-none data-[disabled]:bg-gray-200 dark:data-[disabled]:border-gray-800 dark:data-[disabled]:bg-gray-600\",\n            focusRing,\n            \"outline-offset-0\",\n          )}\n          aria-label={ariaLabelThumb}\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n})\n\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
      "path": "src/components/Slider/Slider.tsx"
    }
  ]
}
