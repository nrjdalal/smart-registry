{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-510",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "date-fns",
    "lucide-react",
    "react",
    "react-day-picker",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/comp-510.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/registry/default/lib/utils\";\nimport { Calendar } from \"@/registry/default/ui/calendar\";\nimport { format } from \"date-fns\";\nimport { useEffect, useState } from \"react\";\nimport { DayButtonProps } from \"react-day-picker\";\n\nconst GOOD_PRICE_THRESHOLD = 100;\n\nexport default function Component() {\n  const today = new Date();\n  const [date, setDate] = useState<Date | undefined>(today);\n\n  // Mock price data\n  const [mockPriceData, setMockPriceData] = useState<Record<string, number>>({});\n  useEffect(() => {\n    const generateMockPriceData = () => {\n      const data: Record<string, number> = {};\n\n      for (let i = 0; i < 180; i++) {\n        const date = new Date(today);\n        date.setDate(today.getDate() + i);\n        const dateKey = format(date, \"yyyy-MM-dd\");\n        const randomPrice = Math.floor(Math.random() * (200 - 80 + 1)) + 80;\n        data[dateKey] = randomPrice;\n      }\n      return data;\n    };\n    setMockPriceData(generateMockPriceData());\n  }, []);\n\n  const isDateDisabled = (date: Date) => {\n    return !mockPriceData[format(date, \"yyyy-MM-dd\")];\n  };\n\n  return (\n    <div>\n      <Calendar\n        mode=\"single\"\n        selected={date}\n        onSelect={setDate}\n        numberOfMonths={2}\n        pagedNavigation\n        showOutsideDays={false}\n        className=\"rounded-md border p-2\"\n        classNames={{\n          months: \"sm:flex-col md:flex-row gap-8\",\n          month:\n            \"relative first-of-type:before:hidden before:absolute max-md:before:inset-x-2 max-md:before:h-px max-md:before:-top-4 md:before:inset-y-2 md:before:w-px before:bg-border md:before:-left-4\",\n          weekday: \"w-12\",\n          day_button: \"size-12\",\n          today: \"*:after:hidden\",\n        }}\n        components={{\n          DayButton: (props: DayButtonProps) => <DayButton {...props} prices={mockPriceData} />,\n        }}\n        disabled={isDateDisabled}\n      />\n      <p\n        className=\"text-muted-foreground mt-4 text-center text-xs\"\n        role=\"region\"\n        aria-live=\"polite\"\n      >\n        Pricing calendar -{\" \"}\n        <a\n          className=\"hover:text-foreground underline\"\n          href=\"https://daypicker.dev/\"\n          target=\"_blank\"\n          rel=\"noopener nofollow\"\n        >\n          React DayPicker\n        </a>\n      </p>\n    </div>\n  );\n}\n\nfunction DayButton(props: DayButtonProps & { prices: Record<string, number> }) {\n  const { day, modifiers, prices, ...buttonProps } = props;\n  const price = prices[format(day.date, \"yyyy-MM-dd\")];\n  const isGoodPrice = price < GOOD_PRICE_THRESHOLD;\n\n  return (\n    <button {...buttonProps}>\n      <span className=\"flex flex-col\">\n        {props.children}\n        {price && (\n          <span\n            className={cn(\n              \"text-[10px] font-medium\",\n              isGoodPrice\n                ? \"text-emerald-500\"\n                : \"text-muted-foreground group-data-selected:text-primary-foreground/70\",\n            )}\n          >\n            ${price}\n          </span>\n        )}\n      </span>\n    </button>\n  );\n}\n",
      "path": "registry/default/components/comp-510.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "path": "registry/default/lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "path": "registry/default/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/calendar.tsx",
      "content": "\"use client\";\n\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/registry/default/lib/utils\";\nimport { buttonVariants } from \"@/registry/default/ui/button\";\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  components: userComponents,\n  ...props\n}: React.ComponentProps<typeof DayPicker>) {\n  const defaultClassNames = {\n    months: \"relative flex flex-col sm:flex-row gap-4\",\n    month: \"w-full\",\n    month_caption: \"relative mx-10 mb-1 flex h-9 items-center justify-center z-20\",\n    caption_label: \"text-sm font-medium\",\n    nav: \"absolute top-0 flex w-full justify-between z-10\",\n    button_previous: cn(\n      buttonVariants({ variant: \"ghost\" }),\n      \"size-9 text-muted-foreground/80 hover:text-foreground p-0\",\n    ),\n    button_next: cn(\n      buttonVariants({ variant: \"ghost\" }),\n      \"size-9 text-muted-foreground/80 hover:text-foreground p-0\",\n    ),\n    weekday: \"size-9 p-0 text-xs font-medium text-muted-foreground/80\",\n    day_button:\n      \"relative flex size-9 items-center justify-center whitespace-nowrap rounded-md p-0 text-foreground group-[[data-selected]:not(.range-middle)]:[transition-property:color,background-color,border-radius,box-shadow] group-[[data-selected]:not(.range-middle)]:duration-150 group-data-disabled:pointer-events-none focus-visible:z-10 hover:not-in-data-selected:bg-accent group-data-selected:bg-primary hover:not-in-data-selected:text-foreground group-data-selected:text-primary-foreground group-data-disabled:text-foreground/30 group-data-disabled:line-through group-data-outside:text-foreground/30 group-data-selected:group-data-outside:text-primary-foreground outline-none focus-visible:ring-ring/50 focus-visible:ring-[3px] group-[.range-start:not(.range-end)]:rounded-e-none group-[.range-end:not(.range-start)]:rounded-s-none group-[.range-middle]:rounded-none group-[.range-middle]:group-data-selected:bg-accent group-[.range-middle]:group-data-selected:text-foreground\",\n    day: \"group size-9 px-0 py-px text-sm\",\n    range_start: \"range-start\",\n    range_end: \"range-end\",\n    range_middle: \"range-middle\",\n    today:\n      \"*:after:pointer-events-none *:after:absolute *:after:bottom-1 *:after:start-1/2 *:after:z-10 *:after:size-[3px] *:after:-translate-x-1/2 *:after:rounded-full *:after:bg-primary [&[data-selected]:not(.range-middle)>*]:after:bg-background [&[data-disabled]>*]:after:bg-foreground/30 *:after:transition-colors\",\n    outside: \"text-muted-foreground data-selected:bg-accent/50 data-selected:text-muted-foreground\",\n    hidden: \"invisible\",\n    week_number: \"size-9 p-0 text-xs font-medium text-muted-foreground/80\",\n  };\n\n  const mergedClassNames: typeof defaultClassNames = Object.keys(defaultClassNames).reduce(\n    (acc, key) => ({\n      ...acc,\n      [key]: classNames?.[key as keyof typeof classNames]\n        ? cn(\n            defaultClassNames[key as keyof typeof defaultClassNames],\n            classNames[key as keyof typeof classNames],\n          )\n        : defaultClassNames[key as keyof typeof defaultClassNames],\n    }),\n    {} as typeof defaultClassNames,\n  );\n\n  const defaultComponents = {\n    Chevron: (props: { \n      className?: string;\n      size?: number;\n      disabled?: boolean;\n      orientation?: \"left\" | \"right\" | \"up\" | \"down\";\n    }) => {\n      if (props.orientation === \"left\") {\n        return <ChevronLeftIcon size={16} {...props} aria-hidden=\"true\" />;\n      }\n      return <ChevronRightIcon size={16} {...props} aria-hidden=\"true\" />;\n    },\n  };\n\n  const mergedComponents = {\n    ...defaultComponents,\n    ...userComponents,\n  };\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"w-fit\", className)}\n      classNames={mergedClassNames}\n      components={mergedComponents}\n      {...props}\n    />\n  );\n}\n\nexport { Calendar };\n",
      "path": "registry/default/ui/calendar.tsx"
    }
  ],
  "meta": {
    "tags": ["calendar", "date", "react daypicker"],
    "colSpan": 3,
    "style": 1
  }
}
