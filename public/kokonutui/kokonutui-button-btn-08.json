{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "kokonutui-button-btn-08",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/button/btn-08.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { useState } from \"react\";\nimport { Twitter, Facebook, Linkedin, Link } from \"lucide-react\";\n\nexport default function Btn08({\n    className,\n    ...props\n}: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n    const [isHovered, setIsHovered] = useState(false);\n    const shareButtons = [\n        { icon: Twitter },\n        { icon: Facebook },\n        { icon: Linkedin },\n        { icon: Link },\n    ];\n\n    return (\n        <div\n            className=\"relative\"\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n        >\n            <Button\n                className={cn(\n                    \"min-w-40 relative\",\n                    \"bg-white dark:bg-black\",\n                    \"hover:bg-gray-50 dark:hover:bg-gray-950\",\n                    \"text-black dark:text-white\",\n                    \"border border-black/10 dark:border-white/10\",\n                    \"transition-all duration-300\",\n                    isHovered ? \"opacity-0\" : \"opacity-100\",\n                    className\n                )}\n                {...props}\n            >\n                <span className=\"flex items-center gap-2\">\n                    <Link className=\"w-4 h-4\" />\n                    Share\n                </span>\n            </Button>\n\n            <div className=\"absolute top-0 left-0 flex h-10\">\n                {shareButtons.map((button, index) => (\n                    <button\n                        type=\"button\"\n                        key={index}\n                        className={cn(\n                            \"h-10\",\n                            \"w-10\",\n                            \"flex items-center justify-center\",\n                            \"bg-black dark:bg-white\",\n                            \"text-white dark:text-black\",\n                            \"transition-all duration-300\",\n                            index === 0 && \"rounded-l-md\",\n                            index === 3 && \"rounded-r-md\",\n                            \"border-r border-white/10 dark:border-black/10 last:border-r-0\",\n                            \"hover:bg-gray-900 dark:hover:bg-gray-100\",\n                            \"transform\",\n                            isHovered\n                                ? \"translate-x-[0%] opacity-100\"\n                                : \"translate-x-[-100%] opacity-0\",\n                            index === 0 && \"transition-all duration-200\",\n                            index === 1 &&\n                                \"transition-all duration-200 delay-[50ms]\",\n                            index === 2 &&\n                                \"transition-all duration-200 delay-100\",\n                            index === 3 &&\n                                \"transition-all duration-200 delay-150\"\n                        )}\n                    >\n                        <button.icon className=\"w-4 h-4\" />\n                    </button>\n                ))}\n            </div>\n        </div>\n    );\n}\n",
      "path": "components/kokonutui/button/btn-08.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n}\n",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    }
  ]
}
