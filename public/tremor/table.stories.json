{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table.stories",
  "type": "registry:component",
  "dependencies": [
    "@remixicon/react",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Badge/Badge.tsx",
      "content": "// Tremor Badge [v0.0.1]\n\nimport React from \"react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\n\nconst badgeVariants = tv({\n  base: cx(\n    \"inline-flex items-center gap-x-1 whitespace-nowrap rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset\",\n  ),\n  variants: {\n    variant: {\n      default: [\n        \"bg-blue-50 text-blue-900 ring-blue-500/30\",\n        \"dark:bg-blue-400/10 dark:text-blue-400 dark:ring-blue-400/30\",\n      ],\n      neutral: [\n        \"bg-gray-50 text-gray-900 ring-gray-500/30\",\n        \"dark:bg-gray-400/10 dark:text-gray-400 dark:ring-gray-400/20\",\n      ],\n      success: [\n        \"bg-emerald-50 text-emerald-900 ring-emerald-600/30\",\n        \"dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-emerald-400/20\",\n      ],\n      error: [\n        \"bg-red-50 text-red-900 ring-red-600/20\",\n        \"dark:bg-red-400/10 dark:text-red-400 dark:ring-red-400/20\",\n      ],\n      warning: [\n        \"bg-yellow-50 text-yellow-900 ring-yellow-600/30\",\n        \"dark:bg-yellow-400/10 dark:text-yellow-500 dark:ring-yellow-400/20\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n})\n\ninterface BadgeProps\n  extends React.ComponentPropsWithoutRef<\"span\">,\n    VariantProps<typeof badgeVariants> {}\n\nconst Badge = React.forwardRef<HTMLSpanElement, BadgeProps>(\n  ({ className, variant, ...props }: BadgeProps, forwardedRef) => {\n    return (\n      <span\n        ref={forwardedRef}\n        className={cx(badgeVariants({ variant }), className)}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      />\n    )\n  },\n)\n\nBadge.displayName = \"Badge\"\n\nexport { Badge, badgeVariants, type BadgeProps }\n",
      "path": "src/components/Badge/Badge.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Table/Table.tsx",
      "content": "// Tremor Table [v0.0.3]\n\nimport React from \"react\"\n\nimport { cx } from \"@/utils/cx\"\n\nconst TableRoot = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, forwardedRef) => (\n  <div\n    ref={forwardedRef}\n    // Activate if table is used in a float environment\n    // className=\"flow-root\"\n  >\n    <div\n      // make table scrollable on mobile\n      className={cx(\"w-full overflow-auto whitespace-nowrap\", className)}\n      {...props}\n    >\n      {children}\n    </div>\n  </div>\n))\n\nTableRoot.displayName = \"TableRoot\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.TableHTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, forwardedRef) => (\n  <table\n    ref={forwardedRef}\n    tremor-id=\"tremor-raw\"\n    className={cx(\n      // base\n      \"w-full caption-bottom border-b\",\n      // border color\n      \"border-gray-200 dark:border-gray-800\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nTable.displayName = \"Table\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, forwardedRef) => (\n  <thead ref={forwardedRef} className={cx(className)} {...props} />\n))\n\nTableHead.displayName = \"TableHead\"\n\nconst TableHeaderCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, forwardedRef) => (\n  <th\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"border-b px-4 py-3.5 text-left text-sm font-semibold\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // border color\n      \"border-gray-200 dark:border-gray-800\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nTableHeaderCell.displayName = \"TableHeaderCell\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, forwardedRef) => (\n  <tbody\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"divide-y\",\n      // divide color\n      \"divide-gray-200 dark:divide-gray-800\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nTableBody.displayName = \"TableBody\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, forwardedRef) => (\n  <tr\n    ref={forwardedRef}\n    className={cx(\n      \"[&_td:last-child]:pr-4 [&_th:last-child]:pr-4\",\n      \"[&_td:first-child]:pl-4 [&_th:first-child]:pl-4\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nTableRow.displayName = \"TableRow\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, forwardedRef) => (\n  <td\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"p-4 text-sm\",\n      // text color\n      \"text-gray-600 dark:text-gray-400\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nTableCell.displayName = \"TableCell\"\n\nconst TableFoot = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <tfoot\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"border-t text-left font-medium\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // border color\n        \"border-gray-200 dark:border-gray-800\",\n        className,\n      )}\n      {...props}\n    />\n  )\n})\n\nTableFoot.displayName = \"TableFoot\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, forwardedRef) => (\n  <caption\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"mt-3 px-3 text-center text-sm\",\n      // text color\n      \"text-gray-500 dark:text-gray-500\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableFoot,\n  TableHead,\n  TableHeaderCell,\n  TableRoot,\n  TableRow,\n}\n",
      "path": "src/components/Table/Table.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Table/table.stories.tsx",
      "content": "import { RiLoader3Line } from \"@remixicon/react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Badge, badgeVariants } from \"@/components/Badge/Badge\"\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableFoot,\n  TableHead,\n  TableHeaderCell,\n  TableRoot,\n  TableRow,\n} from \"@/components/Table/Table\"\n\nconst meta: Meta<typeof Table> = {\n  title: \"ui/Table\",\n  component: Table,\n}\n\nexport default meta\ntype Story = StoryObj<typeof Table>\n\nconst data: Array<{\n  id: number\n  name: string\n  sales: string\n  region: string\n  status: string\n  deltaType: string\n  hours: number\n  databaseStatus: keyof typeof badgeVariants.variants.variant\n}> = [\n  {\n    id: 1,\n    name: \"Peter Doe\",\n    sales: \"1.000.000\",\n    region: \"Region A\",\n    status: \"overperforming\",\n    deltaType: \"moderateIncrease\",\n    hours: 100,\n    databaseStatus: \"success\",\n  },\n  {\n    id: 2,\n    name: \"Jon Doe\",\n    sales: \"2.202.000\",\n    region: \"Region B\",\n    status: \"overperforming\",\n    deltaType: \"moderateIncrease\",\n    hours: 110,\n    databaseStatus: \"success\",\n  },\n  {\n    id: 3,\n    name: \"Peter Doe\",\n    sales: \"1.505.000\",\n    region: \"Region C\",\n    status: \"underperforming\",\n    deltaType: \"moderateDecrease\",\n    hours: 90,\n    databaseStatus: \"success\",\n  },\n  {\n    id: 4,\n    name: \"Employee 4\",\n    sales: \"500000\",\n    region: \"Region D\",\n    status: \"overperforming\",\n    deltaType: \"moderateDecrease\",\n    hours: 92,\n    databaseStatus: \"error\",\n  },\n  {\n    id: 5,\n    name: \"Employee 5\",\n    sales: \"600000\",\n    region: \"Region E\",\n    status: \"underperforming\",\n    deltaType: \"moderateDecrease\",\n    hours: 95,\n    databaseStatus: \"warning\",\n  },\n  {\n    id: 6,\n    name: \"Employee 6\",\n    sales: \"700000\",\n    region: \"Region F\",\n    status: \"overperforming\",\n    deltaType: \"moderateIncrease\",\n    hours: 98,\n    databaseStatus: \"warning\",\n  },\n  {\n    id: 7,\n    name: \"Employee 7\",\n    sales: \"800000\",\n    region: \"Region G\",\n    status: \"underperforming\",\n    deltaType: \"moderateDecrease\",\n    hours: 101,\n    databaseStatus: \"success\",\n  },\n  {\n    id: 8,\n    name: \"Employee 8\",\n    sales: \"900000\",\n    region: \"Region H\",\n    status: \"overperforming\",\n    deltaType: \"moderateDecrease\",\n    hours: 104,\n    databaseStatus: \"success\",\n  },\n  {\n    id: 9,\n    name: \"Employee 9\",\n    sales: \"1000000\",\n    region: \"Region I\",\n    status: \"underperforming\",\n    deltaType: \"moderateIncrease\",\n    hours: 107,\n    databaseStatus: \"success\",\n  },\n  {\n    id: 10,\n    name: \"Employee 10\",\n    sales: \"1100000\",\n    region: \"Region J\",\n    status: \"overperforming\",\n    deltaType: \"moderateDecrease\",\n    hours: 110,\n    databaseStatus: \"success\",\n  },\n  {\n    id: 11,\n    name: \"Employee 11\",\n    sales: \"1200000\",\n    region: \"Region K\",\n    status: \"underperforming\",\n    deltaType: \"moderateDecrease\",\n    hours: 113,\n    databaseStatus: \"success\",\n  },\n  {\n    id: 12,\n    name: \"Employee 12\",\n    sales: \"1300000\",\n    region: \"Region L\",\n    status: \"overperforming\",\n    deltaType: \"moderateIncrease\",\n    hours: 116,\n    databaseStatus: \"default\",\n  },\n  {\n    id: 13,\n    name: \"Employee 13\",\n    sales: \"1400000\",\n    region: \"Region M\",\n    status: \"underperforming\",\n    deltaType: \"moderateDecrease\",\n    hours: 119,\n    databaseStatus: \"default\",\n  },\n]\n\nexport const Default: Story = {\n  render: (args) => (\n    <TableRoot data-testid=\"table-root\">\n      <Table {...args} data-testid=\"table\">\n        <TableCaption data-testid=\"table-caption\">\n          A list of your recent invoices.\n        </TableCaption>\n        <TableHead data-testid=\"table-head\">\n          <TableRow data-testid=\"table-row\">\n            <TableHeaderCell data-testid=\"table-header-cell\">\n              Name\n            </TableHeaderCell>\n            <TableHeaderCell className=\"text-right\">Sales ($)</TableHeaderCell>\n            <TableHeaderCell>Region</TableHeaderCell>\n            <TableHeaderCell>Status</TableHeaderCell>\n            <TableHeaderCell className=\"text-right\">\n              Working Hours (h)\n            </TableHeaderCell>\n            <TableHeaderCell className=\"text-right\">\n              Database Status\n            </TableHeaderCell>\n          </TableRow>\n        </TableHead>\n\n        <TableBody data-testid=\"table-body\">\n          {data.map((item) => (\n            <TableRow key={item.id}>\n              <TableCell data-testid=\"table-cell\">{item.name}</TableCell>\n              <TableCell className=\"text-right\">{item.sales}</TableCell>\n              <TableCell>{item.region}</TableCell>\n              <TableCell>{item.status}</TableCell>\n              <TableCell className=\"text-right\">{item.hours}</TableCell>\n              <TableCell className=\"text-right\">\n                <Badge variant={item.databaseStatus} className=\"max-w-36\">\n                  {item.databaseStatus === \"default\" && (\n                    <RiLoader3Line className=\"size-4 shrink-0 animate-spin\" />\n                  )}\n                  <span className=\"truncate\">\n                    {item.databaseStatus === \"default\"\n                      ? \"Calculation Pending\"\n                      : null}\n                    {item.databaseStatus === \"warning\" ? \"Not validated\" : null}\n                    {item.databaseStatus === \"error\" ? \"Failed\" : null}\n                    {item.databaseStatus === \"success\" ? \"Completed\" : null}\n                  </span>\n                </Badge>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n        <TableFoot data-testid=\"table-foot\">\n          <TableRow>\n            <TableHeaderCell colSpan={2} scope=\"row\" className=\"text-right\">\n              4642\n            </TableHeaderCell>\n            <TableHeaderCell colSpan={3} scope=\"row\" className=\"text-right\">\n              15h\n            </TableHeaderCell>\n            <TableHeaderCell colSpan={1} scope=\"row\" className=\"text-right\">\n              n/a\n            </TableHeaderCell>\n          </TableRow>\n        </TableFoot>\n      </Table>\n    </TableRoot>\n  ),\n}\n",
      "path": "src/components/Table/table.stories.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    }
  ]
}
