{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "RadioCardGroup/radiocardgroup.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-radio-group",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:file",
      "target": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/components/Button/Button.tsx",
      "content": "// Tremor Button [v0.2.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx\"\nimport { focusRing } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"disabled:dark:bg-blue-800 disabled:dark:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"disabled:dark:bg-gray-800 disabled:dark:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"disabled:dark:bg-red-950 disabled:dark:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/src/components/Button/Button.tsx"
    },
    {
      "type": "registry:file",
      "target": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/components/RadioCardGroup/RadioCardGroup.tsx",
      "content": "// Tremor Radio Card [v0.0.3]\n\nimport React from \"react\"\nimport * as RadioGroupPrimitives from \"@radix-ui/react-radio-group\"\n\nimport { cx } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx\"\nimport { focusInput } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/focusInput\"\nimport { focusRing } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/focusRing\"\n\nconst RadioCardGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Root>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <RadioGroupPrimitives.Root\n      ref={forwardedRef}\n      className={cx(\"grid gap-2\", className)}\n      tremor-id=\"tremor-raw\"\n      {...props}\n    />\n  )\n})\n\nRadioCardGroup.displayName = \"RadioCardGroup\"\n\nconst RadioCardItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitives.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Item>\n>(({ className, children, ...props }, forwardedRef) => {\n  return (\n    <RadioGroupPrimitives.Item\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"group relative w-full rounded-md border p-4 text-left shadow-sm transition focus:outline-none\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // border color\n        \"border-gray-300 dark:border-gray-800\",\n        \"data-[state=checked]:border-blue-500\",\n        \"data-[state=checked]:dark:border-blue-500\",\n        // disabled\n        \"data-[disabled]:border-gray-100 data-[disabled]:dark:border-gray-800\",\n        \"data-[disabled]:bg-gray-50 data-[disabled]:shadow-none data-[disabled]:dark:bg-gray-900\",\n        focusInput,\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </RadioGroupPrimitives.Item>\n  )\n})\n\nRadioCardItem.displayName = \"RadioCardItem\"\n\nconst RadioCardIndicator = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitives.Indicator>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Indicator>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <div\n      className={cx(\n        // base\n        \"relative flex size-4 shrink-0 appearance-none items-center justify-center rounded-full border shadow-sm outline-none\",\n        // border color\n        \"border-gray-300 dark:border-gray-800\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // checked\n        \"group-data-[state=checked]:border-0 group-data-[state=checked]:border-transparent group-data-[state=checked]:bg-blue-500\",\n        // disabled\n        \"group-data-[disabled]:border-gray-300 group-data-[disabled]:bg-gray-100 group-data-[disabled]:text-gray-400\",\n        \"group-data-[disabled]:dark:border-gray-700 group-data-[disabled]:dark:bg-gray-800\",\n        // focus\n        focusRing,\n        className,\n      )}\n    >\n      <RadioGroupPrimitives.Indicator\n        ref={forwardedRef}\n        className={cx(\"flex items-center justify-center\")}\n        {...props}\n      >\n        <div\n          className={cx(\n            // base\n            \"size size-1.5 shrink-0 rounded-full\",\n            // indicator\n            \"bg-white\",\n            // disabled\n            \"group-data-[disabled]:bg-gray-400 group-data-[disabled]:dark:bg-gray-500\",\n          )}\n        />\n      </RadioGroupPrimitives.Indicator>\n    </div>\n  )\n})\n\nRadioCardIndicator.displayName = \"RadioCardIndicator\"\n\nexport { RadioCardGroup, RadioCardIndicator, RadioCardItem }\n",
      "path": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/src/components/RadioCardGroup/RadioCardGroup.tsx"
    },
    {
      "type": "registry:file",
      "target": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/src/utils/cx.ts"
    },
    {
      "type": "registry:file",
      "target": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/focusInput.ts",
      "content": "// Tremor focusInput [v0.0.1]\n\nexport const focusInput = [\n  // base\n  \"focus:ring-2\",\n  // ring color\n  \"focus:ring-blue-200 focus:dark:ring-blue-700/30\",\n  // border color\n  \"focus:border-blue-500 focus:dark:border-blue-700\",\n]\n",
      "path": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/src/utils/focusInput.ts"
    },
    {
      "type": "registry:file",
      "target": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "/Users/nrjdalal/Desktop/smart-registry/public/tremor/src/utils/focusRing.ts"
    },
    {
      "type": "registry:component",
      "target": "components/RadioCardGroup/radiocardgroup.stories.tsx",
      "content": "import React from \"react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Button } from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/components/Button/Button\"\nimport {\n  RadioCardGroup,\n  RadioCardIndicator,\n  RadioCardItem,\n} from \"@//Users/nrjdalal/Desktop/smart-registry/public/tremor/components/RadioCardGroup/RadioCardGroup\"\n\nconst meta: Meta<typeof RadioCardGroup> = {\n  title: \"ui/RadioCardGroup\",\n  component: RadioCardGroup,\n}\n\nexport default meta\ntype Story = StoryObj<typeof RadioCardGroup>\n\nexport const Default: Story = {\n  render: () => {\n    return (\n      <RadioCardGroup>\n        <RadioCardItem value=\"1\">\n          <div className=\"flex items-center gap-3\">\n            <RadioCardIndicator />\n            <span>Software Engineer</span>\n          </div>\n        </RadioCardItem>\n        <RadioCardItem value=\"2\">\n          <div className=\"flex items-center gap-3\">\n            <RadioCardIndicator />\n            <span>Platform Engineer</span>\n          </div>\n        </RadioCardItem>\n        <RadioCardItem value=\"3\">\n          <div className=\"flex items-center gap-3\">\n            <RadioCardIndicator />\n            <span>Hardware Engineer</span>\n          </div>\n        </RadioCardItem>\n      </RadioCardGroup>\n    )\n  },\n}\n\nexport const Grid: Story = {\n  render: () => {\n    return (\n      <RadioCardGroup className=\"grid-cols-2\">\n        <RadioCardItem value=\"1\">\n          <div className=\"flex items-center gap-3\">\n            <RadioCardIndicator />\n            <span>Software Engineer</span>\n          </div>\n        </RadioCardItem>\n        <RadioCardItem value=\"2\">\n          <div className=\"flex items-center gap-3\">\n            <RadioCardIndicator />\n            <span>Platform Engineer</span>\n          </div>\n        </RadioCardItem>\n        <RadioCardItem value=\"3\">\n          <div className=\"flex items-center gap-3\">\n            <RadioCardIndicator />\n            <span>Hardware Engineer</span>\n          </div>\n        </RadioCardItem>\n        <RadioCardItem value=\"4\">\n          <div className=\"flex items-center gap-3\">\n            <RadioCardIndicator />\n            <span>Security</span>\n          </div>\n        </RadioCardItem>\n        <RadioCardItem value=\"5\">\n          <div className=\"flex items-center gap-3\">\n            <RadioCardIndicator />\n            <span>Marketing Ops</span>\n          </div>\n        </RadioCardItem>\n        <RadioCardItem value=\"6\">\n          <div className=\"flex items-center gap-3\">\n            <RadioCardIndicator />\n            <span>Product Manager</span>\n          </div>\n        </RadioCardItem>\n      </RadioCardGroup>\n    )\n  },\n}\n\nexport const DefaultChecked: Story = {\n  render: () => {\n    return (\n      <RadioCardGroup defaultValue=\"1\" className=\"text-sm\">\n        <RadioCardItem value=\"1\" className=\"flex items-center gap-3\">\n          <RadioCardIndicator />\n          <span>Software Engineer</span>\n        </RadioCardItem>\n        <RadioCardItem value=\"2\" className=\"flex items-center gap-3\">\n          <RadioCardIndicator />\n          <span>Plarform Engineer</span>\n        </RadioCardItem>\n        <RadioCardItem value=\"3\" className=\"flex items-center gap-3\">\n          <RadioCardIndicator />\n          <span>Hardware Engineer</span>\n        </RadioCardItem>\n      </RadioCardGroup>\n    )\n  },\n}\n\nexport const Disabled: Story = {\n  render: () => {\n    return (\n      <RadioCardGroup defaultValue=\"1\" className=\"text-sm\">\n        <RadioCardItem value=\"1\" className=\"flex items-center gap-3\">\n          <RadioCardIndicator />\n          <span>Software Engineer</span>\n        </RadioCardItem>\n        <RadioCardItem value=\"2\" className=\"flex items-center gap-3\">\n          <RadioCardIndicator />\n          <span>Plarform Engineer</span>\n        </RadioCardItem>\n        <RadioCardItem disabled value=\"3\" className=\"flex items-center gap-3\">\n          <RadioCardIndicator />\n          <span>Hardware Engineer</span>\n        </RadioCardItem>\n      </RadioCardGroup>\n    )\n  },\n}\n\nexport const Controlled: Story = {\n  render: () => {\n    const [selectedOption, setSelectedOption] =\n      React.useState(\"base-performance\")\n\n    const databases: {\n      label: string\n      value: string\n      description: string\n      isRecommended: boolean\n    }[] = [\n      {\n        label: \"Base performance\",\n        value: \"base-performance\",\n        description: \"1/8 vCPU, 1 GB RAM\",\n        isRecommended: true,\n      },\n      {\n        label: \"Advanced performance\",\n        value: \"advanced-performance\",\n        description: \"1/4 vCPU, 2 GB RAM\",\n        isRecommended: false,\n      },\n      {\n        label: \"Turbo performance\",\n        value: \"turbo-performance\",\n        description: \"1/2 vCPU, 4 GB RAM\",\n        isRecommended: false,\n      },\n    ]\n\n    return (\n      <div className=\"flex flex-col items-center justify-start\">\n        <form>\n          <fieldset className=\"space-y-3\">\n            <RadioCardGroup\n              value={selectedOption}\n              onValueChange={(value) => setSelectedOption(value)}\n              className=\"mt-2 grid grid-cols-1 gap-4 text-sm md:grid-cols-2\"\n            >\n              {databases.map((database) => (\n                <RadioCardItem key={database.value} value={database.value}>\n                  <div className=\"flex items-start gap-3\">\n                    <RadioCardIndicator className=\"mt-1\" />\n                    <div>\n                      <p className=\"mt-1 text-xs text-gray-500\">\n                        1/8 vCPU, 1 GB RAM\n                      </p>\n                    </div>\n                  </div>\n                </RadioCardItem>\n              ))}\n            </RadioCardGroup>\n          </fieldset>\n          <Button\n            className=\"mt-4\"\n            type=\"reset\"\n            variant=\"secondary\"\n            onClick={() => setSelectedOption(\"base-performance\")}\n          >\n            Reset\n          </Button>\n        </form>\n        <pre className=\"mt-6 w-fit rounded-md bg-gray-100 p-2 font-mono text-sm text-gray-700 dark:bg-gray-800 dark:text-gray-200\">\n          Selected Opt: {selectedOption ? selectedOption : \"Nothing selected!\"}\n        </pre>\n      </div>\n    )\n  },\n}\n",
      "path": "src/components/RadioCardGroup/radiocardgroup.stories.tsx"
    }
  ]
}
