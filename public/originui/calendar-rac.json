{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar-rac",
  "type": "registry:ui",
  "dependencies": [
    "@internationalized/date",
    "clsx",
    "lucide-react",
    "react",
    "react-aria-components",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:ui",
      "target": "components/ui/calendar-rac.tsx",
      "content": "\"use client\"\n\nimport { ComponentProps } from \"react\"\nimport { getLocalTimeZone, today } from \"@internationalized/date\"\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\"\nimport {\n  Button,\n  CalendarCell as CalendarCellRac,\n  CalendarGridBody as CalendarGridBodyRac,\n  CalendarGridHeader as CalendarGridHeaderRac,\n  CalendarGrid as CalendarGridRac,\n  CalendarHeaderCell as CalendarHeaderCellRac,\n  Calendar as CalendarRac,\n  composeRenderProps,\n  Heading as HeadingRac,\n  RangeCalendar as RangeCalendarRac,\n} from \"react-aria-components\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface BaseCalendarProps {\n  className?: string\n}\n\ntype CalendarProps = ComponentProps<typeof CalendarRac> & BaseCalendarProps\ntype RangeCalendarProps = ComponentProps<typeof RangeCalendarRac> &\n  BaseCalendarProps\n\nfunction CalendarHeader() {\n  return (\n    <header className=\"flex w-full items-center gap-1 pb-1\">\n      <Button\n        slot=\"previous\"\n        className=\"text-muted-foreground/80 hover:bg-accent hover:text-foreground focus-visible:ring-ring/50 flex size-9 items-center justify-center rounded-md transition-[color,box-shadow] outline-none focus-visible:ring-[3px]\"\n      >\n        <ChevronLeftIcon size={16} />\n      </Button>\n      <HeadingRac className=\"grow text-center text-sm font-medium\" />\n      <Button\n        slot=\"next\"\n        className=\"text-muted-foreground/80 hover:bg-accent hover:text-foreground focus-visible:ring-ring/50 flex size-9 items-center justify-center rounded-md transition-[color,box-shadow] outline-none focus-visible:ring-[3px]\"\n      >\n        <ChevronRightIcon size={16} />\n      </Button>\n    </header>\n  )\n}\n\nfunction CalendarGridComponent({ isRange = false }: { isRange?: boolean }) {\n  const now = today(getLocalTimeZone())\n\n  return (\n    <CalendarGridRac>\n      <CalendarGridHeaderRac>\n        {(day) => (\n          <CalendarHeaderCellRac className=\"text-muted-foreground/80 size-9 rounded-md p-0 text-xs font-medium\">\n            {day}\n          </CalendarHeaderCellRac>\n        )}\n      </CalendarGridHeaderRac>\n      <CalendarGridBodyRac className=\"[&_td]:px-0 [&_td]:py-px\">\n        {(date) => (\n          <CalendarCellRac\n            date={date}\n            className={cn(\n              \"text-foreground data-hovered:bg-accent data-selected:bg-primary data-hovered:text-foreground data-selected:text-primary-foreground data-focus-visible:ring-ring/50 relative flex size-9 items-center justify-center rounded-md p-0 text-sm font-normal whitespace-nowrap [transition-property:color,background-color,border-radius,box-shadow] duration-150 outline-none data-disabled:pointer-events-none data-disabled:opacity-30 data-focus-visible:z-10 data-focus-visible:ring-[3px] data-unavailable:pointer-events-none data-unavailable:line-through data-unavailable:opacity-30\",\n              // Range-specific styles\n              isRange &&\n                \"data-selected:bg-accent data-selected:text-foreground data-invalid:data-selection-end:bg-destructive data-invalid:data-selection-start:bg-destructive data-selection-end:bg-primary data-selection-start:bg-primary data-selection-end:text-primary-foreground data-selection-start:text-primary-foreground data-invalid:bg-red-100 data-selected:rounded-none data-selection-end:rounded-e-md data-invalid:data-selection-end:text-white data-selection-start:rounded-s-md data-invalid:data-selection-start:text-white\",\n              // Today indicator styles\n              date.compare(now) === 0 &&\n                cn(\n                  \"after:bg-primary after:pointer-events-none after:absolute after:start-1/2 after:bottom-1 after:z-10 after:size-[3px] after:-translate-x-1/2 after:rounded-full\",\n                  isRange\n                    ? \"data-selection-end:after:bg-background data-selection-start:after:bg-background\"\n                    : \"data-selected:after:bg-background\"\n                )\n            )}\n          />\n        )}\n      </CalendarGridBodyRac>\n    </CalendarGridRac>\n  )\n}\n\nfunction Calendar({ className, ...props }: CalendarProps) {\n  return (\n    <CalendarRac\n      {...props}\n      className={composeRenderProps(className, (className) =>\n        cn(\"w-fit\", className)\n      )}\n    >\n      <CalendarHeader />\n      <CalendarGridComponent />\n    </CalendarRac>\n  )\n}\n\nfunction RangeCalendar({ className, ...props }: RangeCalendarProps) {\n  return (\n    <RangeCalendarRac\n      {...props}\n      className={composeRenderProps(className, (className) =>\n        cn(\"w-fit\", className)\n      )}\n    >\n      <CalendarHeader />\n      <CalendarGridComponent isRange />\n    </RangeCalendarRac>\n  )\n}\n\nexport { Calendar, RangeCalendar }\n",
      "path": "registry/default/ui/calendar-rac.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "registry/default/lib/utils.ts"
    }
  ]
}
