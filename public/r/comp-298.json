{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "components/smart-registry/comp-298",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/smart-registry/comp-298.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Toast,\n  ToastAction,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/registry/default/ui/toast\";\nimport { CircleCheckIcon, XIcon } from \"lucide-react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\ninterface UseProgressTimerProps {\n  duration: number;\n  interval?: number;\n  onComplete?: () => void;\n}\n\nfunction useProgressTimer({ duration, interval = 100, onComplete }: UseProgressTimerProps) {\n  const [progress, setProgress] = useState(duration);\n  const timerRef = useRef(0);\n  const timerState = useRef({\n    startTime: 0,\n    remaining: duration,\n    isPaused: false,\n  });\n\n  const cleanup = useCallback(() => {\n    window.clearInterval(timerRef.current);\n  }, []);\n\n  const reset = useCallback(() => {\n    cleanup();\n    setProgress(duration);\n    timerState.current = {\n      startTime: 0,\n      remaining: duration,\n      isPaused: false,\n    };\n  }, [duration, cleanup]);\n\n  const start = useCallback(() => {\n    const state = timerState.current;\n    state.startTime = Date.now();\n    state.isPaused = false;\n\n    timerRef.current = window.setInterval(() => {\n      const elapsedTime = Date.now() - state.startTime;\n      const remaining = Math.max(0, state.remaining - elapsedTime);\n\n      setProgress(remaining);\n\n      if (remaining <= 0) {\n        cleanup();\n        onComplete?.();\n      }\n    }, interval);\n  }, [interval, cleanup, onComplete]);\n\n  const pause = useCallback(() => {\n    const state = timerState.current;\n    if (!state.isPaused) {\n      cleanup();\n      state.remaining = Math.max(0, state.remaining - (Date.now() - state.startTime));\n      state.isPaused = true;\n    }\n  }, [cleanup]);\n\n  const resume = useCallback(() => {\n    const state = timerState.current;\n    if (state.isPaused && state.remaining > 0) {\n      start();\n    }\n  }, [start]);\n\n  useEffect(() => {\n    return cleanup;\n  }, [cleanup]);\n\n  return {\n    progress,\n    start,\n    pause,\n    resume,\n    reset,\n  };\n}\n\nexport default function Component() {\n  const [open, setOpen] = useState(false);\n  const toastDuration = 5000;\n  const { progress, start, pause, resume, reset } = useProgressTimer({\n    duration: toastDuration,\n    onComplete: () => setOpen(false),\n  });\n\n  const handleOpenChange = useCallback(\n    (isOpen: boolean) => {\n      setOpen(isOpen);\n      if (isOpen) {\n        reset();\n        start();\n      }\n    },\n    [reset, start],\n  );\n\n  const handleButtonClick = useCallback(() => {\n    if (open) {\n      setOpen(false);\n      // Wait for the close animation to finish\n      window.setTimeout(() => {\n        handleOpenChange(true);\n      }, 150);\n    } else {\n      handleOpenChange(true);\n    }\n  }, [open, handleOpenChange]);\n\n  return (\n    <ToastProvider swipeDirection=\"left\">\n      <Button variant=\"outline\" onClick={handleButtonClick}>\n        Custom toast\n      </Button>\n      <Toast open={open} onOpenChange={handleOpenChange} onPause={pause} onResume={resume}>\n        <div className=\"flex w-full justify-between gap-3\">\n          <CircleCheckIcon\n            className=\"mt-0.5 shrink-0 text-emerald-500\"\n            size={16}\n            aria-hidden=\"true\"\n          />\n          <div className=\"flex grow flex-col gap-3\">\n            <div className=\"space-y-1\">\n              <ToastTitle>Your request was completed!</ToastTitle>\n              <ToastDescription>\n                It demonstrates that the task or request has been processed.\n              </ToastDescription>\n            </div>\n            <div>\n              <ToastAction altText=\"Undo changes\" asChild>\n                <Button size=\"sm\">Undo changes</Button>\n              </ToastAction>\n            </div>\n          </div>\n          <ToastClose asChild>\n            <Button\n              variant=\"ghost\"\n              className=\"group -my-1.5 -me-2 size-8 shrink-0 p-0 hover:bg-transparent\"\n              aria-label=\"Close notification\"\n            >\n              <XIcon\n                size={16}\n                className=\"opacity-60 transition-opacity group-hover:opacity-100\"\n                aria-hidden=\"true\"\n              />\n            </Button>\n          </ToastClose>\n        </div>\n        <div className=\"contents\" aria-hidden=\"true\">\n          <div\n            className=\"pointer-events-none absolute bottom-0 left-0 h-1 w-full bg-emerald-500\"\n            style={{\n              width: `${(progress / toastDuration) * 100}%`,\n              transition: \"width 100ms linear\",\n            }}\n          />\n        </div>\n      </Toast>\n      <ToastViewport className=\"sm:right-auto sm:left-0\" />\n    </ToastProvider>\n  );\n}\n",
      "path": "registry/default/components/comp-298.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/smart-registry/button.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/registry/default/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "path": "registry/default/ui/button.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/smart-registry/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "path": "registry/default/lib/utils.ts"
    }
  ]
}