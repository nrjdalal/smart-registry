{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-input-ai-input-06",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/ai-input/ai-input-06.tsx",
      "content": "\"use client\";\n\nimport { CornerRightUp } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\n\nexport default function AIInput_06() {\n    const [inputValue, setInputValue] = useState(\"\");\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: 50,\n        maxHeight: 200,\n    });\n\n    const handleSubmit = () => {\n        setInputValue(\"\");\n        adjustHeight(true);\n    };\n\n    return (\n        <div className=\"w-full py-4\">\n            <div className=\"relative max-w-xl w-full mx-auto flex items-start flex-col gap-2\">\n                <div className=\"relative max-w-xl w-full mx-auto\">\n                    <Textarea\n                        ref={textareaRef}\n                        id=\"ai-input-06\"\n                        placeholder=\"Ask me anything!\"\n                        className={cn(\n                            \"max-w-xl bg-black/5 dark:bg-white/5 w-full rounded-3xl pl-6 pr-12 py-4 placeholder:text-black/70 dark:placeholder:text-white/70 border-none ring-black/30 dark:ring-white/30 text-black dark:text-white resize-none text-wrap leading-[1.2]\",\n                            \"min-h-[56px]\"\n                        )}\n                        value={inputValue}\n                        onKeyDown={(e) => {\n                            if (e.key === \"Enter\") {\n                                if (e.shiftKey) {\n                                    return;\n                                }\n                                e.preventDefault();\n                                handleSubmit();\n                            }\n                        }}\n                        onChange={(e) => {\n                            setInputValue(e.target.value);\n                            adjustHeight();\n                        }}\n                    />\n                    <button\n                        className=\"absolute right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 py-1 px-1\"\n                        type=\"button\"\n                    >\n                        <CornerRightUp\n                            className={cn(\n                                \"w-4 h-4 transition-opacity dark:text-white\",\n                                inputValue ? \"opacity-100\" : \"opacity-30\"\n                            )}\n                        />\n                    </button>\n                </div>\n                <p className=\"ml-4 text-xs text-black/40 dark:text-white/40\">\n                    {inputValue.length + 20}/100 characters\n                </p>\n            </div>\n        </div>\n    );\n}\n",
      "path": "components/kokonutui/ai-input/ai-input-06.tsx"
    },
    {
      "type": "registry:hook",
      "target": "hooks/use-auto-resize-textarea.ts",
      "content": "import { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}\n",
      "path": "hooks/use-auto-resize-textarea.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/textarea.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps\n    extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n    ({ className, ...props }, ref) => {\n        return (\n            <textarea\n                className={cn(\n                    \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                    className\n                )}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n",
      "path": "components/ui/textarea.tsx"
    }
  ]
}
