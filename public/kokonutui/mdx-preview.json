{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mdx-preview",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "fs",
    "lucide-react",
    "motion",
    "path"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/mdx/preview.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport PreviewContent from \"@/components/mdx/preview-content\";\n\ninterface PreviewProps {\n    children: React.ReactNode;\n    className?: string;\n    isPremium?: boolean;\n    link: string;\n    useIframe?: boolean;\n    height?: string;\n    compact?: boolean;\n    comment?: string[];\n    isBlock?: boolean;\n}\n\nconst prePath = process.env.VERCEL_PROJECT_PRODUCTION_URL\n    ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`\n    : \"https://kokonutui.com\";\n\nexport function Preview({\n    children,\n    className = \"\",\n    link,\n    useIframe = false,\n    compact = false,\n    comment = [],\n    isBlock = false,\n}: PreviewProps) {\n    // console.log(prePath + link);\n    return (\n        <>\n            <div className={cn(\"w-full overflow-hidden\", className)}>\n                <PreviewContent\n                    link={link}\n                    prePath={prePath}\n                    isBlock={isBlock}\n                />\n\n                {useIframe ? (\n                    <div className=\"w-full my-4 border rounded-md border-zinc-400 dark:border-zinc-700\">\n                        <div className=\"relative w-full h-[100dvh] overflow-hidden\">\n                            <iframe\n                                title={link}\n                                src={`${prePath}/preview/${link}`}\n                                className=\"w-full h-full overflow-y-auto list-none\"\n                                style={{\n                                    border: \"none\",\n                                    transform: \"scale(0.95)\",\n                                }}\n                            />\n                        </div>\n                    </div>\n                ) : (\n                    <div\n                        className={cn(\n                            \"p-2 md:p-8 flex justify-center items-center relative border rounded-md my-4 border-zinc-400 dark:border-zinc-800 not-prose\",\n                            compact ? \"min-h-[100px]\" : \"min-h-[400px]\",\n                            isBlock ? \"md:p-0\" : \"\"\n                        )}\n                    >\n                        {children}\n                    </div>\n                )}\n                {comment.length > 0 && (\n                    <div className=\"flex flex-wrap gap-3 mt-6\">\n                        {comment.map((text, index) => (\n                            <div\n                                key={index}\n                                className=\"px-4 py-2 text-sm font-medium bg-purple-100 dark:bg-purple-950/30 rounded-md text-purple-700 dark:text-purple-300 border border-purple-200 dark:border-purple-800/50 shadow-xs hover:bg-purple-200/70 dark:hover:bg-purple-950/50 transition-colors\"\n                            >\n                                {text}\n                            </div>\n                        ))}\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n",
      "path": "components/mdx/preview.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/mdx/package-manager-tabs.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport { CheckCheck } from \"lucide-react\";\n\ninterface PackageManagerTabsProps {\n    onSelect: (packageManager: string) => void;\n    commandName: string;\n    prePath: string;\n}\n\nconst packageManagers = [\n    { id: \"npm\", title: \"npm\" },\n    { id: \"bun\", title: \"bun\" },\n    { id: \"pnpm\", title: \"pnpm\" },\n];\n\nexport function PackageManagerTabs({\n    onSelect,\n    commandName,\n    prePath,\n}: PackageManagerTabsProps) {\n    const [selected, setSelected] = React.useState<string>(\"bun\");\n    const [dimensions, setDimensions] = React.useState({ width: 0, left: 0 });\n    const [isCopied, setIsCopied] = React.useState(false);\n\n    // Reference for the selected button\n    const buttonRefs = React.useRef<Map<string, HTMLButtonElement>>(new Map());\n    const containerRef = React.useRef<HTMLDivElement>(null);\n    const copyButtonRef = React.useRef<HTMLButtonElement>(null);\n\n    // Update dimensions whenever selected tab changes or on mount\n    React.useLayoutEffect(() => {\n        const updateDimensions = () => {\n            const selectedButton = buttonRefs.current.get(selected);\n            const container = containerRef.current;\n\n            if (selectedButton && container) {\n                const rect = selectedButton.getBoundingClientRect();\n                const containerRect = container.getBoundingClientRect();\n\n                setDimensions({\n                    width: rect.width,\n                    left: rect.left - containerRect.left,\n                });\n            }\n        };\n\n        // Initial update\n        requestAnimationFrame(() => {\n            updateDimensions();\n        });\n\n        // Update on resize\n        window.addEventListener(\"resize\", updateDimensions);\n        return () => window.removeEventListener(\"resize\", updateDimensions);\n    }, [selected]);\n\n    const handleTabClick = (tabId: string) => {\n        setSelected(tabId);\n        onSelect(tabId);\n    };\n\n    const handleKeyDown = (\n        e: React.KeyboardEvent<HTMLButtonElement>,\n        tabId: string\n    ) => {\n        if (e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            handleTabClick(tabId);\n        }\n    };\n\n    const getCommand = (packageManager: string): string => {\n        if (packageManager === \"pnpm\") {\n            return `pnpm dlx shadcn@latest add ${prePath}/r/${commandName}.json`;\n        } else if (packageManager === \"npm\") {\n            return `npx shadcn@latest add ${prePath}/r/${commandName}.json`;\n        } else {\n            return `bunx shadcn@latest add ${prePath}/r/${commandName}.json`;\n        }\n    };\n\n    const handleCopyCommand = () => {\n        const commandToCopy = getCommand(selected);\n        navigator.clipboard.writeText(commandToCopy);\n        setIsCopied(true);\n        setTimeout(() => {\n            setIsCopied(false);\n        }, 1000);\n    };\n\n    return (\n        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-1 sm:gap-2\">\n            <div\n                ref={containerRef}\n                role=\"tablist\"\n                aria-label=\"Package manager tabs\"\n                className={cn(\n                    \"relative flex items-center justify-start gap-1\",\n                    \"bg-background rounded-sm\",\n                    \"border\",\n                    \"transition-all duration-200\",\n                    \"h-7 text-black dark:text-white\"\n                )}\n            >\n                {/* Sliding Background */}\n                <motion.div\n                    className=\"absolute rounded-sm z-[1] bg-black dark:bg-white\"\n                    initial={false}\n                    animate={{\n                        width: dimensions.width - 4,\n                        x: dimensions.left + 2,\n                        opacity: 1,\n                    }}\n                    transition={{\n                        type: \"spring\",\n                        stiffness: 400,\n                        damping: 30,\n                    }}\n                    style={{ height: \"calc(100% - 4px)\", top: \"2px\" }}\n                />\n\n                <div className=\"flex relative z-[2]\">\n                    {packageManagers.map((item) => {\n                        const isSelected = selected === item.id;\n                        return (\n                            <motion.button\n                                key={item.id}\n                                ref={(el) => {\n                                    if (el) buttonRefs.current.set(item.id, el);\n                                    else buttonRefs.current.delete(item.id);\n                                }}\n                                type=\"button\"\n                                role=\"tab\"\n                                aria-selected={isSelected}\n                                aria-controls={`panel-${item.id}`}\n                                id={`tab-${item.id}`}\n                                tabIndex={isSelected ? 0 : -1}\n                                onClick={() => handleTabClick(item.id)}\n                                onKeyDown={(e) => handleKeyDown(e, item.id)}\n                                className={cn(\n                                    \"relative flex items-center justify-center gap-0.5 rounded-sm px-2 py-0.5 h-7\",\n                                    \"text-xs font-medium transition-all duration-300\",\n                                    \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring\",\n                                    \"truncate\",\n                                    isSelected\n                                        ? \"text-white dark:text-black\"\n                                        : \" hover:bg-muted/50 hover:text-foreground text-black/50 dark:text-white/50\"\n                                )}\n                            >\n                                <span className=\"truncate\">{item.title}</span>\n                            </motion.button>\n                        );\n                    })}\n                </div>\n            </div>\n\n            <button\n                ref={copyButtonRef}\n                type=\"button\"\n                onClick={handleCopyCommand}\n                className={cn(\n                    \"h-7 text-xs font-medium\",\n                    \"border border-black/10 dark:border-white/10\",\n                    \"rounded-sm px-2\",\n                    \"dark:text-white text-black\",\n                    \"transition-all duration-200\",\n                    \"group flex items-center justify-center gap-1\",\n                    \"w-full\",\n                    \"min-w-[250px]\",\n                    \"relative\"\n                )}\n            >\n                <span\n                    className={cn(\n                        \"absolute inset-0 flex items-center justify-center gap-1\",\n                        \"transition-opacity duration-200\",\n                        isCopied ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                >\n                    <CheckCheck className=\"h-3.5 w-3.5 text-green-500 dark:text-green-500\" />\n                    <span className=\"truncate text-black/50 dark:text-white/50\">\n                        Copied to clipboard\n                    </span>\n                </span>\n                <span\n                    className={cn(\n                        \"truncate text-black/50 dark:text-white/50\",\n                        \"transition-opacity duration-200\",\n                        isCopied ? \"opacity-0\" : \"opacity-100\"\n                    )}\n                >\n                    {getCommand(selected)}\n                </span>\n            </button>\n        </div>\n    );\n}\n",
      "path": "components/mdx/package-manager-tabs.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/mdx/preview-content.tsx",
      "content": "\"use client\";\n\nimport {\n    useActionState,\n    useEffect,\n    useState,\n    useTransition,\n    useRef,\n    type RefObject,\n} from \"react\";\nimport { Code } from \"lucide-react\";\nimport { copyComponent } from \"@/lib/action\";\nimport { cn } from \"@/lib/utils\";\nimport { OpenInV0Button } from \"@/components/open-in-v0-button\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { PackageManagerTabs } from \"@/components/mdx/package-manager-tabs\";\nimport { CheckCheck } from \"lucide-react\";\n\nfunction SuccessParticles({\n    buttonRef,\n}: {\n    buttonRef: React.RefObject<HTMLButtonElement>;\n}) {\n    const rect = buttonRef.current?.getBoundingClientRect();\n    if (!rect) return null;\n\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n\n    // Create a unique key for each particle to satisfy the linter\n    const particles = Array.from({ length: 6 }, (_, index) => ({\n        id: `particle-${index}-${Math.random().toString(36).substr(2, 9)}`,\n        index, // Pass index for staggering delay\n    }));\n\n    return (\n        <AnimatePresence>\n            {particles.map((particle) => (\n                <motion.div\n                    key={particle.id}\n                    className=\"fixed w-1 h-1 bg-black dark:bg-white rounded-full\"\n                    style={{ left: centerX, top: centerY }}\n                    initial={{\n                        scale: 0,\n                        x: 0,\n                        y: 0,\n                    }}\n                    animate={{\n                        scale: [0, 1, 0],\n                        x: [\n                            0,\n                            (particle.index % 2 ? 1 : -1) *\n                                (Math.random() * 50 + 20),\n                        ],\n                        y: [0, -Math.random() * 50 - 20],\n                    }}\n                    transition={{\n                        duration: 0.6,\n                        delay: particle.index * 0.1, // Use particle.index for delay\n                        ease: \"easeOut\",\n                    }}\n                />\n            ))}\n        </AnimatePresence>\n    );\n}\n\nexport default function PreviewContent({\n    link,\n    prePath,\n    isBlock = false,\n}: {\n    link: string;\n    prePath: string;\n    isBlock?: boolean;\n}) {\n    const [isPending, startTransition] = useTransition();\n    const [state, formAction] = useActionState(copyComponent, {\n        error: \"\",\n        content: \"\",\n        success: false,\n    });\n    const [showLoginDialog, setShowLoginDialog] = useState(false);\n    const [isCopied, setIsCopied] = useState(false);\n    const [isHovered, setIsHovered] = useState(false);\n    const [isTerminalCopied, setIsTerminalCopied] = useState(false);\n\n    const handleCopyClick = async () => {\n        const [folder, filename] = link.split(\"/\");\n\n        startTransition(async () => {\n            const formData = new FormData();\n            formData.append(\"folder\", folder);\n            formData.append(\"fileName\", filename);\n\n            formAction(formData);\n        });\n    };\n\n    const getFileName = () => {\n        const [folder, filename] = link.split(\"/\");\n        return filename ? filename : folder;\n    };\n\n    const handleTerminalClick = (packageManager: string) => {\n        const [folder, filename] = link.split(\"/\");\n        const componentName = filename ? filename : folder;\n\n        let commandToCopy: string;\n        const componentAddCommand = `shadcn@latest add ${prePath}/r/${componentName}`;\n\n        if (packageManager === \"pnpm\") {\n            commandToCopy = `pnpm dlx ${componentAddCommand}`;\n        } else if (packageManager === \"npm\") {\n            commandToCopy = `npx ${componentAddCommand}`;\n        } else {\n            commandToCopy = `bunx ${componentAddCommand}`;\n        }\n\n        navigator.clipboard.writeText(commandToCopy);\n        setIsTerminalCopied(true);\n        setTimeout(() => {\n            setIsTerminalCopied(false);\n        }, 1000);\n    };\n\n    const openInV0 = () => {\n        const [folder, filename] = link.split(\"/\");\n\n        return filename ? filename : folder;\n    };\n\n    useEffect(() => {\n        if (state.error) {\n            setShowLoginDialog(true);\n        }\n        if (state.success && state.content) {\n            setIsCopied(true);\n            navigator.clipboard.writeText(state.content);\n\n            setTimeout(() => {\n                setIsCopied(false);\n            }, 2000);\n        }\n    }, [state]);\n\n    const terminalButtonRef = useRef<HTMLButtonElement>(null);\n    const copyButtonRef = useRef<HTMLButtonElement>(null);\n\n    return (\n        <>\n            {isTerminalCopied && (\n                <SuccessParticles\n                    buttonRef={\n                        terminalButtonRef as RefObject<HTMLButtonElement>\n                    }\n                />\n            )}\n            {isCopied && (\n                <SuccessParticles\n                    buttonRef={copyButtonRef as RefObject<HTMLButtonElement>}\n                />\n            )}\n            <div className=\"relative flex flex-col sm:flex-row items-start sm:items-center justify-between w-full gap-1 sm:gap-2\">\n                <div className=\"w-full sm:w-auto\">\n                    <PackageManagerTabs\n                        onSelect={handleTerminalClick}\n                        commandName={getFileName()}\n                        prePath={prePath}\n                    />\n                </div>\n                <div className=\"flex items-center gap-2 w-full sm:w-auto justify-end mt-1 sm:mt-0\">\n                    <OpenInV0Button name={openInV0()} />\n\n                    {!isBlock && (\n                        <form\n                            onSubmit={(e) => {\n                                e.preventDefault();\n                                handleCopyClick();\n                            }}\n                            className=\"w-full sm:w-auto\"\n                        >\n                            <button\n                                ref={copyButtonRef}\n                                type=\"submit\"\n                                disabled={isPending}\n                                className={cn(\n                                    \"relative overflow-hidden\",\n                                    \"h-7 px-2 text-xs font-medium\",\n                                    \"bg-black dark:bg-white\",\n                                    \"text-white dark:text-black\",\n                                    \"hover:bg-black/90 dark:hover:bg-white/90\",\n                                    \"hover:text-white dark:hover:text-black\",\n                                    \"transition-all duration-200\",\n                                    \"group flex items-center justify-center gap-1\",\n                                    \"rounded-sm\",\n                                    \"shadow-none py-0 my-0\",\n                                    \"w-fit md:w-full\"\n                                )}\n                            >\n                                {isCopied ? (\n                                    <CheckCheck className=\"h-3.5 w-3.5 text-white dark:text-black\" />\n                                ) : (\n                                    <Code\n                                        className={cn(\n                                            \"h-3.5 w-3.5\",\n                                            \"transition-all duration-200\",\n                                            \"group-hover:rotate-12\"\n                                        )}\n                                    />\n                                )}\n                                <span>Copy</span>\n                            </button>\n                        </form>\n                    )}\n                </div>\n            </div>\n        </>\n    );\n}\n",
      "path": "components/mdx/preview-content.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/open-in-v0-button.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nconst prePath = process.env.VERCEL_PROJECT_PRODUCTION_URL\n    ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`\n    : `https://${process.env.NEXT_PUBLIC_SITE_URL}`;\n\nexport function OpenInV0Button({\n    name,\n    className,\n}: { name: string } & React.ComponentProps<typeof Button>) {\n    return (\n        <Button\n            aria-label=\"Open in v0\"\n            className={cn(\n                \"h-7 gap-1 rounded-sm shadow-none bg-black px-2 text-xs text-white hover:bg-zinc-800 dark:bg-white dark:text-black dark:hover:bg-zinc-200 transition-colors duration-200 not-prose\",\n                className\n            )}\n            asChild\n        >\n            <a\n                href={`https://v0.dev/chat/api/open?url=${prePath}/r/${name}.json`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n            >\n                Open in{\" \"}\n                <svg\n                    viewBox=\"0 0 40 20\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"h-5 w-5 text-current\"\n                >\n                    <path\n                        d=\"M23.3919 0H32.9188C36.7819 0 39.9136 3.13165 39.9136 6.99475V16.0805H36.0006V6.99475C36.0006 6.90167 35.9969 6.80925 35.9898 6.71766L26.4628 16.079C26.4949 16.08 26.5272 16.0805 26.5595 16.0805H36.0006V19.7762H26.5595C22.6964 19.7762 19.4788 16.6139 19.4788 12.7508V3.68923H23.3919V12.7508C23.3919 12.9253 23.4054 13.0977 23.4316 13.2668L33.1682 3.6995C33.0861 3.6927 33.003 3.68923 32.9188 3.68923H23.3919V0Z\"\n                        fill=\"currentColor\"\n                    ></path>\n                    <path\n                        d=\"M13.7688 19.0956L0 3.68759H5.53933L13.6231 12.7337V3.68759H17.7535V17.5746C17.7535 19.6705 15.1654 20.6584 13.7688 19.0956Z\"\n                        fill=\"currentColor\"\n                    ></path>\n                </svg>\n            </a>\n        </Button>\n    );\n}\n",
      "path": "components/open-in-v0-button.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/action.ts",
      "content": "\"use server\";\n\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { cache } from \"react\";\n\n// Create a cached version of the file reading operation\nconst readFileCache = cache(async (filePath: string) => {\n    return await fs.readFile(filePath, \"utf-8\");\n});\n\n// Improve caching for the entire component getter\nexport const getComponent = async (fileName: string | null, folder: string) => {\n    const baseDir = path.join(process.cwd(), \"components/kokonutui\");\n    if (!fileName || fileName === \"undefined\") {\n        const fullPath = path.join(baseDir, `${folder}.tsx`);\n        // console.log(\"fullPath\", fullPath);\n        return await readFileCache(fullPath);\n    }\n\n    const fullPath = path.join(baseDir, folder, `${fileName}.tsx`);\n\n    return await readFileCache(fullPath);\n};\n\nexport type CopyComponentState = {\n    error: string;\n    content: string;\n    success: boolean;\n};\n\nexport const copyComponent = async (\n    prevState: CopyComponentState,\n    formData: FormData\n) => {\n    try {\n        const folder = formData.get(\"folder\");\n        const fileName = formData.get(\"fileName\");\n\n        if (!folder && !fileName) {\n            return {\n                error: \"Folder or file name not found\",\n                content: \"\",\n                success: false,\n            };\n        }\n\n        const content = await getComponent(\n            fileName as string,\n            folder as string\n        );\n\n        if (!content) {\n            return {\n                error: \"Component not found\",\n                content: \"\",\n                success: false,\n            };\n        }\n\n        return {\n            error: \"\",\n            content: content,\n            success: true,\n        };\n    } catch (error) {\n        console.error(error);\n        return {\n            error: \"Failed to copy component\",\n            content: \"\",\n            success: false,\n        };\n    }\n};\n",
      "path": "lib/action.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    }
  ]
}
