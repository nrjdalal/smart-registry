{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button.stories",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "@remixicon/react",
    "@storybook/react",
    "clsx",
    "react",
    "tailwind-merge",
    "tailwind-variants"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/Button/button.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { cx } from \"@/utils/cx\"\nimport { Button, buttonVariants } from \"@/components/Button/Button\"\n\nconst meta: Meta<typeof Button> = {\n  title: \"ui/Button\",\n  component: Button,\n  argTypes: {\n    variant: {\n      control: \"radio\",\n      options: [...Object.keys(buttonVariants.variants.variant)],\n    },\n  },\n}\n\nexport default meta\ntype Story = StoryObj<typeof Button>\n\nexport const Primary: Story = {\n  args: {\n    variant: \"primary\",\n    children: \"Primary\",\n  },\n}\n\nexport const Secondary: Story = {\n  args: {\n    variant: \"secondary\",\n    children: \"Secondary\",\n  },\n}\n\nexport const Light: Story = {\n  args: {\n    variant: \"light\",\n    children: \"Light\",\n  },\n}\n\nexport const Ghost: Story = {\n  args: {\n    variant: \"ghost\",\n    children: \"Ghost\",\n  },\n}\n\nexport const Destructive: Story = {\n  args: {\n    variant: \"destructive\",\n    children: \"Destructive\",\n  },\n}\n\nexport const WithDisabled: Story = {\n  args: {\n    children: \"Disabled\",\n    disabled: true,\n  },\n}\n\nexport const IsLoading: Story = {\n  args: {\n    isLoading: true,\n  },\n}\n\nexport const IsLoadingWithChildren: Story = {\n  args: {\n    isLoading: true,\n    children: \"Add item\",\n  },\n}\n\nexport const IsLoadingWithLoadingText: Story = {\n  args: {\n    loadingText: \"Custom loading text\",\n    isLoading: true,\n  },\n}\n\nexport const AsChildAnchor: Story = {\n  render: () => (\n    <Button asChild>\n      <a href=\"#api-reference-button\">API Reference</a>\n    </Button>\n  ),\n}\n\nexport const AnchorWithBadgeVariantsStyle: Story = {\n  render: () => (\n    <div className=\"flex flex-wrap gap-4\">\n      <a className={cx(buttonVariants({ variant: \"secondary\" }))}>\n        Anchor element\n      </a>\n    </div>\n  ),\n}\n",
      "path": "src/components/Button/button.stories.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/Button/Button.tsx",
      "content": "// Tremor Button [v0.2.0]\n\nimport React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { RiLoader2Fill } from \"@remixicon/react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/utils/cx\"\nimport { focusRing } from \"@/utils/focusRing\"\n\nconst buttonVariants = tv({\n  base: [\n    // base\n    \"relative inline-flex items-center justify-center whitespace-nowrap rounded-md border px-3 py-2 text-center text-sm font-medium shadow-sm transition-all duration-100 ease-in-out\",\n    // disabled\n    \"disabled:pointer-events-none disabled:shadow-none\",\n    // focus\n    focusRing,\n  ],\n  variants: {\n    variant: {\n      primary: [\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-white dark:text-white\",\n        // background color\n        \"bg-blue-500 dark:bg-blue-500\",\n        // hover color\n        \"hover:bg-blue-600 dark:hover:bg-blue-600\",\n        // disabled\n        \"disabled:bg-blue-300 disabled:text-white\",\n        \"disabled:dark:bg-blue-800 disabled:dark:text-blue-400\",\n      ],\n      secondary: [\n        // border\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        //hover color\n        \"hover:bg-gray-50 dark:hover:bg-gray-900/60\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      light: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-gray-200 dark:bg-gray-900\",\n        // hover color\n        \"hover:bg-gray-300/70 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:bg-gray-100 disabled:text-gray-400\",\n        \"disabled:dark:bg-gray-800 disabled:dark:text-gray-600\",\n      ],\n      ghost: [\n        // base\n        \"shadow-none\",\n        // border\n        \"border-transparent\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // hover color\n        \"bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800/80\",\n        // disabled\n        \"disabled:text-gray-400\",\n        \"disabled:dark:text-gray-600\",\n      ],\n      destructive: [\n        // text color\n        \"text-white\",\n        // border\n        \"border-transparent\",\n        // background color\n        \"bg-red-600 dark:bg-red-700\",\n        // hover color\n        \"hover:bg-red-700 dark:hover:bg-red-600\",\n        // disabled\n        \"disabled:bg-red-300 disabled:text-white\",\n        \"disabled:dark:bg-red-950 disabled:dark:text-red-400\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n  },\n})\n\ninterface ButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      asChild,\n      isLoading = false,\n      loadingText,\n      className,\n      disabled,\n      variant,\n      children,\n      ...props\n    }: ButtonProps,\n    forwardedRef,\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n    return (\n      <Component\n        ref={forwardedRef}\n        className={cx(buttonVariants({ variant }), className)}\n        disabled={disabled || isLoading}\n        tremor-id=\"tremor-raw\"\n        {...props}\n      >\n        {isLoading ? (\n          <span className=\"pointer-events-none flex shrink-0 items-center justify-center gap-1.5\">\n            <RiLoader2Fill\n              className=\"size-4 shrink-0 animate-spin\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"sr-only\">\n              {loadingText ? loadingText : \"Loading\"}\n            </span>\n            {loadingText ? loadingText : children}\n          </span>\n        ) : (\n          children\n        )}\n      </Component>\n    )\n  },\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, type ButtonProps }\n",
      "path": "src/components/Button/Button.tsx"
    },
    {
      "type": "registry:lib",
      "target": "utils/cx.ts",
      "content": "// Tremor cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n",
      "path": "src/utils/cx.ts"
    },
    {
      "type": "registry:lib",
      "target": "utils/focusRing.ts",
      "content": "// Tremor focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-blue-500 dark:outline-blue-500\",\n]\n",
      "path": "src/utils/focusRing.ts"
    }
  ]
}
