{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-basic-auth-form",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/blocks/auth-basic/auth-form.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Loader2, LockIcon } from \"lucide-react\";\n\nexport function AuthForm() {\n    const [isLoading, setIsLoading] = useState(false);\n\n    async function handleSubmit(e: React.FormEvent) {\n        e.preventDefault();\n        setIsLoading(true);\n\n        const formData = new FormData(e.target as HTMLFormElement);\n        const email = formData.get(\"email\") as string;\n        const password = formData.get(\"password\") as string;\n\n        try {\n            /**\n             * To update with your actual authentication logic\n             */\n            await new Promise((resolve) => setTimeout(resolve, 2000));\n            console.log(\"Signing in with:\", email, password);\n        } catch (error) {\n            console.error(\"Authentication error:\", error);\n        } finally {\n            setIsLoading(false);\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className=\"space-y-4\" noValidate>\n            <div className=\"space-y-2\">\n                <label\n                    htmlFor=\"email\"\n                    className=\"text-sm font-medium text-black dark:text-white\"\n                >\n                    Email\n                </label>\n                <div className=\"relative\">\n                    <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 flex items-center justify-center w-4 h-4\">\n                        @\n                    </span>\n                    <Input\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"name@example.com\"\n                        required\n                        disabled={isLoading}\n                        className=\"pl-10 h-12 bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-1 focus-visible:ring-ring\"\n                        autoComplete=\"email\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-black dark:text-white\">\n                    Password\n                </label>\n                <div className=\"relative\">\n                    <LockIcon className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-500\" />\n                    <Input\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Enter your password\"\n                        required\n                        disabled={isLoading}\n                        className=\"pl-10 h-12 bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-1 focus-visible:ring-ring\"\n                    />\n                </div>\n            </div>\n\n            <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"w-full h-12 text-base font-medium bg-black text-white hover:bg-neutral-800 dark:bg-white dark:text-black dark:hover:bg-neutral-200 transition-colors\"\n            >\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                {isLoading ? \"Signing in...\" : \"Sign in\"}\n            </Button>\n        </form>\n    );\n}\n",
      "path": "components/kokonutui/blocks/auth-basic/auth-form.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n}\n",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-zinc-950 dark:focus-visible:ring-zinc-300 cursor-pointer\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-zinc-900 text-zinc-50 hover:bg-zinc-900/90 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/90\",\n                destructive:\n                    \"bg-red-500 text-zinc-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/90\",\n                outline:\n                    \"border border-zinc-200 bg-white hover:bg-zinc-100 hover:text-zinc-900 dark:border-zinc-800 dark:bg-zinc-950 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                secondary:\n                    \"bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n                ghost: \"hover:bg-zinc-100 hover:text-zinc-900 dark:hover:bg-zinc-800 dark:hover:text-zinc-50\",\n                link: \"text-zinc-900 underline-offset-4 hover:underline dark:text-zinc-50\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\";\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        );\n    }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "components/ui/button.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-zinc-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-zinc-950 placeholder:text-zinc-500 focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:file:text-zinc-50 dark:placeholder:text-zinc-400 dark:focus-visible:ring-zinc-300\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "path": "components/ui/input.tsx"
    }
  ]
}
