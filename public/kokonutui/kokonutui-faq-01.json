{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "kokonutui-faq-01",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-accordion",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/kokonutui/faq/faq-01.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Search } from \"lucide-react\";\nimport {\n    Accordion,\n    AccordionContent,\n    AccordionItem,\n    AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FAQItemProps {\n    id: string;\n    question: string;\n    answer: string | React.ReactNode;\n    category: FAQCategory;\n}\n\ntype FAQCategory = 'getting-started' | 'billing' | 'features' | 'support';\n\nconst CATEGORIES: Record<FAQCategory, { label: string; color: string }> = {\n    'getting-started': { label: 'Getting Started', color: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' },\n    'billing': { label: 'Billing', color: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' },\n    'features': { label: 'Features', color: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300' },\n    'support': { label: 'Support', color: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300' },\n};\n\nconst FAQ_ITEMS: FAQItemProps[] = [\n    {\n        id: \"getting-started-1\",\n        category: \"getting-started\",\n        question: \"How do I get started with the platform?\",\n        answer: \"Getting started is easy! Simply sign up for an account and follow our quick setup guide. We'll walk you through each step of the process.\",\n    },\n    {\n        id: \"billing-1\",\n        category: \"billing\",\n        question: \"What payment methods do you accept?\",\n        answer: \"We accept all major credit cards, PayPal, and bank transfers. All payments are processed securely through our payment partners.\",\n    },\n    {\n        id: \"features-1\",\n        category: \"features\",\n        question: \"What are the key features?\",\n        answer: \"Our platform includes real-time analytics, team collaboration tools, automated workflows, and customizable dashboards.\",\n    },\n    {\n        id: \"support-1\",\n        category: \"support\",\n        question: \"How can I get help?\",\n        answer: \"Our support team is available 24/7 through our help center, email support, or live chat. We typically respond within 2 hours.\",\n    },\n];\n\nfunction CategoryBadge({ category }: { category: FAQCategory }) {\n    return (\n        <Badge \n            variant=\"secondary\" \n            className={cn(\"mr-2 font-normal\", CATEGORIES[category].color)}\n        >\n            {CATEGORIES[category].label}\n        </Badge>\n    );\n}\n\nfunction FAQItem({ id, question, answer, category }: FAQItemProps) {\n    return (\n        <AccordionItem \n            value={id}\n            className=\"bg-white dark:bg-gray-800/50 rounded-lg shadow-xs border border-gray-200 dark:border-gray-700 px-4\"\n        >\n            <AccordionTrigger className=\"hover:no-underline py-4\">\n                <div className=\"flex flex-col items-start gap-2 text-left\">\n                    <CategoryBadge category={category} />\n                    <span className=\"text-lg font-medium text-gray-900 dark:text-white hover:text-primary transition-colors\">\n                        {question}\n                    </span>\n                </div>\n            </AccordionTrigger>\n            <AccordionContent className=\"text-gray-700 dark:text-gray-300 leading-relaxed prose dark:prose-invert max-w-none pb-4\">\n                {answer}\n            </AccordionContent>\n        </AccordionItem>\n    );\n}\n\nfunction Faq01() {\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [selectedCategory, setSelectedCategory] = useState<FAQCategory | 'all'>('all');\n\n    const filteredFAQs = FAQ_ITEMS.filter(faq => {\n        const matchesSearch = faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                            String(faq.answer).toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory = selectedCategory === 'all' || faq.category === selectedCategory;\n        return matchesSearch && matchesCategory;\n    });\n\n    return (\n        <section className=\"py-16 bg-gray-50 dark:bg-black/5 w-full\" aria-labelledby=\"faq-heading\">\n            <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 max-w-4xl\">\n                <div className=\"text-center mb-12\">\n                    <h2 \n                        id=\"faq-heading\"\n                        className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\"\n                    >\n                        Frequently Asked Questions\n                    </h2>\n                    <p className=\"text-gray-600 dark:text-gray-400\">\n                        Find answers to common questions about our platform\n                    </p>\n                </div>\n\n                <div className=\"mb-8 space-y-4\">\n                    <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n                        <Input\n                            type=\"search\"\n                            placeholder=\"Search FAQs...\"\n                            className=\"pl-10\"\n                            value={searchQuery}\n                            onChange={(e) => setSearchQuery(e.target.value)}\n                        />\n                    </div>\n\n                    <div className=\"flex flex-wrap gap-2\">\n                        <Badge \n                            variant=\"secondary\"\n                            className={cn(\n                                \"cursor-pointer\",\n                                selectedCategory === 'all' ? 'bg-primary text-primary-foreground' : 'bg-gray-100 text-gray-800'\n                            )}\n                            onClick={() => setSelectedCategory('all')}\n                        >\n                            All\n                        </Badge>\n                        {Object.entries(CATEGORIES).map(([key, { label, color }]) => (\n                            <Badge\n                                key={key}\n                                variant=\"secondary\"\n                                className={cn(\n                                    \"cursor-pointer\",\n                                    selectedCategory === key ? color : 'bg-gray-100 text-gray-800'\n                                )}\n                                onClick={() => setSelectedCategory(key as FAQCategory)}\n                            >\n                                {label}\n                            </Badge>\n                        ))}\n                    </div>\n                </div>\n\n                <Accordion\n                    type=\"single\"\n                    collapsible\n                    className=\"space-y-4\"\n                >\n                    {filteredFAQs.map((faq) => (\n                        <FAQItem key={faq.id} {...faq} />\n                    ))}\n                </Accordion>\n\n                {filteredFAQs.length === 0 && (\n                    <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                        No FAQs found matching your search criteria\n                    </div>\n                )}\n            </div>\n        </section>\n    );\n}\n\nexport default Faq01;\n",
      "path": "components/kokonutui/faq/faq-01.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n}\n",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/accordion.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "path": "components/ui/accordion.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/badge.tsx",
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border border-zinc-200 px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-hidden focus:ring-2 focus:ring-zinc-950 focus:ring-offset-2 dark:border-zinc-800 dark:focus:ring-zinc-300\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-zinc-900 text-zinc-50 hover:bg-zinc-900/80 dark:bg-zinc-50 dark:text-zinc-900 dark:hover:bg-zinc-50/80\",\n        secondary:\n          \"border-transparent bg-zinc-100 text-zinc-900 hover:bg-zinc-100/80 dark:bg-zinc-800 dark:text-zinc-50 dark:hover:bg-zinc-800/80\",\n        destructive:\n          \"border-transparent bg-red-500 text-zinc-50 hover:bg-red-500/80 dark:bg-red-900 dark:text-zinc-50 dark:hover:bg-red-900/80\",\n        outline: \"text-zinc-950 dark:text-zinc-50\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
      "path": "components/ui/badge.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-zinc-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-zinc-950 placeholder:text-zinc-500 focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-zinc-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:file:text-zinc-50 dark:placeholder:text-zinc-400 dark:focus-visible:ring-zinc-300\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "path": "components/ui/input.tsx"
    }
  ]
}
